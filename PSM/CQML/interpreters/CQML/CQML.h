#ifndef MOBIES_CQML_H
#define MOBIES_CQML_H

// header file CQML.h generated from diagram CQML
// generated with Udm version 3.31 on Tue Jul 29 20:42:37 2014

#include <UdmBase.h>

#if !defined(UDM_VERSION_MAJOR) || !defined(UDM_VERSION_MINOR)
#    error "Udm headers too old, they do not define UDM_VERSION"
#elif UDM_VERSION_MAJOR < 3
#    error "Udm headers too old, minimum version required 3.31"
#elif UDM_VERSION_MAJOR == 3 && UDM_VERSION_MINOR < 31
#    error "Udm headers too old, minimum version required 3.31"
#endif

#include <Uml.h>


#ifdef min
#undef min
#endif

#ifdef max
#undef max
#endif

#include "CQML_export.h"

namespace CQML {

	extern ::Uml::Diagram meta;
	class CQML_Export Project;
	class CQML_Export MgaObject;
	class CQML_Export ExternalResources;
	class CQML_Export ExtResourceConn;
	class CQML_Export ComponentLib;
	class CQML_Export StubProject;
	class CQML_Export ServantProject;
	class CQML_Export ExecutorProject;
	class CQML_Export MPC;
	class CQML_Export Workspaces;
	class CQML_Export Package;
	class CQML_Export Prefixable;
	class CQML_Export Taggable;
	class CQML_Export File;
	class CQML_Export Exception;
	class CQML_Export ExceptionRef;
	class CQML_Export FileRef;
	class CQML_Export ConstantType;
	class CQML_Export PredefinedType;
	class CQML_Export Enum;
	class CQML_Export Constant;
	class CQML_Export MemberType;
	class CQML_Export Boolean;
	class CQML_Export Byte;
	class CQML_Export ShortInteger;
	class CQML_Export LongInteger;
	class CQML_Export RealNumber;
	class CQML_Export String;
	class CQML_Export GenericObject;
	class CQML_Export GenericValueObject;
	class CQML_Export GenericValue;
	class CQML_Export TypeEncoding;
	class CQML_Export TypeKind;
	class CQML_Export Provideable;
	class CQML_Export NoInheritable;
	class CQML_Export EnumValue;
	class CQML_Export Aggregate;
	class CQML_Export SwitchedAggregate;
	class CQML_Export Label;
	class CQML_Export LabelConnection;
	class CQML_Export NamedType;
	class CQML_Export Discriminator;
	class CQML_Export Inheritable;
	class CQML_Export Boxed;
	class CQML_Export Component;
	class CQML_Export Collection;
	class CQML_Export Alias;
	class CQML_Export Member;
	class CQML_Export Object;
	class CQML_Export HasOperations;
	class CQML_Export Inherits;
	class CQML_Export Event;
	class CQML_Export ObjectByValue;
	class CQML_Export ExternalPortReferenceType;
	class CQML_Export ValueObject;
	class CQML_Export ComponentFactory;
	class CQML_Export SupportsInterfaces;
	class CQML_Export Supports;
	class CQML_Export InvokePortBase;
	class CQML_Export ReadonlyAttribute;
	class CQML_Export Attribute;
	class CQML_Export LookupKey;
	class CQML_Export SetException;
	class CQML_Export GetException;
	class CQML_Export PrivateFlag;
	class CQML_Export MakeMemberPrivate;
	class CQML_Export AttributeMember;
	class CQML_Export OperationBase;
	class CQML_Export HasExceptions;
	class CQML_Export OnewayOperation;
	class CQML_Export FactoryOperation;
	class CQML_Export LookupOperation;
	class CQML_Export TwowayOperation;
	class CQML_Export InParameter;
	class CQML_Export ParameterType;
	class CQML_Export OutParameter;
	class CQML_Export ReturnType;
	class CQML_Export InoutParameter;
	class CQML_Export Manageable;
	class CQML_Export TopLevelBehavior;
	class CQML_Export ComponentBase;
	class CQML_Export OutEventPort;
	class CQML_Export Port;
	class CQML_Export SingleOutputBase;
	class CQML_Export ProvidedRequestPort;
	class CQML_Export MultiInputBase;
	class CQML_Export RequiredRequestPort;
	class CQML_Export MultiOutputBase;
	class CQML_Export InEventPort;
	class CQML_Export SingleInputBase;
	class CQML_Export QueryInputBase;
	class CQML_Export CommonPortAttrs;
	class CQML_Export GraphVertex;
	class CQML_Export ComponentRef;
	class CQML_Export CollocationGroupMember;
	class CQML_Export FTMonitorable;
	class CQML_Export ManagesComponent;
	class CQML_Export Domain;
	class CQML_Export Shares;
	class CQML_Export InterconnectConnection;
	class CQML_Export BridgeConnection;
	class CQML_Export Requirement;
	class CQML_Export RequirementBase;
	class CQML_Export ECRequirements;
	class CQML_Export RTRequirements;
	class CQML_Export ImplementationDependency;
	class CQML_Export Property;
	class CQML_Export SatisfierProperty;
	class CQML_Export RequirementSatisfier;
	class CQML_Export Capability;
	class CQML_Export Resource;
	class CQML_Export SharedResource;
	class CQML_Export ImplementationRequirement;
	class CQML_Export DataType;
	class CQML_Export PackageInterface;
	class CQML_Export Implementation;
	class CQML_Export PackageContainer;
	class CQML_Export PackageConfigProperty;
	class CQML_Export PackageInfoProperty;
	class CQML_Export ComponentPackage;
	class CQML_Export ComponentPackageReference;
	class CQML_Export TopLevelPackageContainer;
	class CQML_Export TopLevelPackage;
	class CQML_Export package;
	class CQML_Export ComponentPropertyDescription;
	class CQML_Export ComponentProperty;
	class CQML_Export ComponentContainer;
	class CQML_Export ComponentConfigProperty;
	class CQML_Export ComponentInfoProperty;
	class CQML_Export ImplementationArtifactReference;
	class CQML_Export ComponentServantArtifact;
	class CQML_Export ComponentImplementationArtifact;
	class CQML_Export ArtifactDependsOn;
	class CQML_Export ArtifactDeployRequirement;
	class CQML_Export ArtifactContainer;
	class CQML_Export ArtifactExecParameter;
	class CQML_Export ArtifactInfoProperty;
	class CQML_Export ImplementationArtifact;
	class CQML_Export ArtifactDependency;
	class CQML_Export PackageConfBasePackage;
	class CQML_Export PackageConfReference;
	class CQML_Export PackageConfigurationReference;
	class CQML_Export PackageConfigurationContainer;
	class CQML_Export PackageConfConfigProperty;
	class CQML_Export PackageConfSelectRequirement;
	class CQML_Export PackageConfSpecializedConfig;
	class CQML_Export PackageConfiguration;
	class CQML_Export ImplementationCapability;
	class CQML_Export ImplementationDependsOn;
	class CQML_Export Implements;
	class CQML_Export ComponentImplementationReference;
	class CQML_Export ComponentImplementation;
	class CQML_Export Implemenation;
	class CQML_Export ComponentAssembly;
	class CQML_Export MonolithicImplementation;
	class CQML_Export ComponentImplementationContainer;
	class CQML_Export ImplementationContainer;
	class CQML_Export MonolithicImplementationBase;
	class CQML_Export CriticalPath;
	class CQML_Export invoke;
	class CQML_Export AssemblyselectRequirement;
	class CQML_Export AssemblyConfigProperty;
	class CQML_Export PublishConnector;
	class CQML_Export publish;
	class CQML_Export deliverTo;
	class CQML_Export AssemblyDeployRequirement;
	class CQML_Export emit;
	class CQML_Export ReceptacleDelegate;
	class CQML_Export FacetDelegate;
	class CQML_Export EventSourceDelegate;
	class CQML_Export EventSinkDelegate;
	class CQML_Export ExternalDelegate;
	class CQML_Export AttributeValue;
	class CQML_Export AttributeDelegate;
	class CQML_Export AttributeMapping;
	class CQML_Export AttributeMappingValue;
	class CQML_Export AttributeMappingDelegate;
	class CQML_Export SupportsDelegate;
	class CQML_Export DeploymentPlan;
	class CQML_Export InstanceMapping;
	class CQML_Export CollocationGroup;
	class CQML_Export SharedComponentReference;
	class CQML_Export ComponentFactoryRef;
	class CQML_Export Deploys;
	class CQML_Export ComponentAssemblyReference;
	class CQML_Export Bridge;
	class CQML_Export Interconnect;
	class CQML_Export Node;
	class CQML_Export NodeReference;
	class CQML_Export MetricConnection;
	class CQML_Export DataAnalysisBase;
	class CQML_Export Average;
	class CQML_Export Minimum;
	class CQML_Export Maximum;
	class CQML_Export Jitter;
	class CQML_Export TimeProbe;
	class CQML_Export TimerConnection;
	class CQML_Export Latency;
	class CQML_Export MetricsBase;
	class CQML_Export Throughput;
	class CQML_Export BenchmarkAnalysis;
	class CQML_Export OperationRef;
	class CQML_Export ResourceActionBase;
	class CQML_Export EventRef;
	class CQML_Export TimerEventSinkConn;
	class CQML_Export TaskSet;
	class CQML_Export Task;
	class CQML_Export WorkloadCharacteristics;
	class CQML_Export ComponentOperation;
	class CQML_Export CompRef;
	class CQML_Export WorkLoadOperationConnection;
	class CQML_Export BenchmarkType;
	class CQML_Export TriggerBenchmarks;
	class CQML_Export PeriodicBenchmarks;
	class CQML_Export FixedIterationBenchmarks;
	class CQML_Export BenchmarkCharacteristics;
	class CQML_Export ConnectedComponent;
	class CQML_Export Path;
	class CQML_Export DstEdge;
	class CQML_Export DisplayNode;
	class CQML_Export SrcEdge;
	class CQML_Export EdgeProperty;
	class CQML_Export Edge;
	class CQML_Export Paths;
	class CQML_Export PathProperty;
	class CQML_Export PathReference;
	class CQML_Export ComponentAssemblyBase;
	class CQML_Export ExternalPortReference;
	class CQML_Export ECBehavior;
	class CQML_Export ECRole;
	class CQML_Export ServiceProvider;
	class CQML_Export MultipleServiceRequests;
	class CQML_Export ServiceLevels;
	class CQML_Export ServiceConsumer;
	class CQML_Export ComponentFactoryImplementationContainer;
	class CQML_Export ComponentFactoryInstance;
	class CQML_Export ConfigProperty;
	class CQML_Export InfoProperty;
	class CQML_Export MonolithprimaryArtifact;
	class CQML_Export MonolithDeployRequirement;
	class CQML_Export MonolithExecParameter;
	class CQML_Export WorkerLibrary;
	class CQML_Export Worker;
	class CQML_Export WorkerFile;
	class CQML_Export WorkerPackageBase;
	class CQML_Export WorkerPackage;
	class CQML_Export WorkerType;
	class CQML_Export Variable;
	class CQML_Export BehaviorModel;
	class CQML_Export BehaviorInputAction;
	class CQML_Export InputAction;
	class CQML_Export MultiInputAction;
	class CQML_Export Action;
	class CQML_Export ActionBase;
	class CQML_Export OutputAction;
	class CQML_Export Finish;
	class CQML_Export QueryAction;
	class CQML_Export QueryInputAction;
	class CQML_Export Environment;
	class CQML_Export PeriodicEvent;
	class CQML_Export ApplicationTask;
	class CQML_Export Input;
	class CQML_Export MultiInput;
	class CQML_Export QueryInput;
	class CQML_Export Transition;
	class CQML_Export State;
	class CQML_Export StateBase;
	class CQML_Export BranchState;
	class CQML_Export BranchTransition;
	class CQML_Export LoopState;
	class CQML_Export DoWhileState;
	class CQML_Export ForState;
	class CQML_Export WhileState;
	class CQML_Export LoopTransition;
	class CQML_Export Terminal;
	class CQML_Export TerminalTransition;
	class CQML_Export Effect;
	class CQML_Export EffectBase;
	class CQML_Export InputEffect;
	class CQML_Export TerminalEffect;
	class CQML_Export ComponentAssemblyQoSCharacteristic;
	class CQML_Export QoSCharacteristicBase;
	class CQML_Export QoSCharRef;
	class CQML_Export ComponentAssemblySecurityQoS;
	class CQML_Export FailOverUnit;
	class CQML_Export ConnectionQoSCharacteristic;
	class CQML_Export CIAOEvents;
	class CQML_Export NetQoS;
	class CQML_Export DeploymentPlanQoS;
	class CQML_Export DomainRiskGroupingRef;
	class CQML_Export RecepInvoke;
	class CQML_Export ComponentAssemblyQoS;
	class CQML_Export ComponentQoSCharacteristic;
	class CQML_Export PortQoSCharacteristic;
	class CQML_Export PortQoS;
	class CQML_Export FacetInvoke;
	class CQML_Export QoSReq;
	class CQML_Export EventSourcePublish;
	class CQML_Export ComponentQoS;
	class CQML_Export EventSinkPublish;
	class CQML_Export QoSConnector;
	class CQML_Export ComponentSecurityQoS;
	class CQML_Export RealTimeConfiguration;
	class CQML_Export PortSecurityQoS;
	class CQML_Export PriorityBands;
	class CQML_Export LanePerThreadPool;
	class CQML_Export ThreadPool;
	class CQML_Export EnvironmentConf;
	class CQML_Export PolicyPerThreadPool;
	class CQML_Export Lane;
	class CQML_Export PriorityModelPolicy;
	class CQML_Export Destructible;
	class CQML_Export RootRiskGroup;
	class CQML_Export SRGBase;
	class CQML_Export DeploymentPlanRef;
	class CQML_Export SRGRiskAssociation;
	class CQML_Export RepicaGroupConfiguration;
	class CQML_Export DomainRiskGrouping;
	class CQML_Export RootRiskAssociation;
	class CQML_Export SharedRiskGroup;
	class CQML_Export MonitorableGroupAssociation;
	class CQML_Export SharedResourceReference;
	class CQML_Export FTDeployDepends;
	class CQML_Export HostReference;
	class CQML_Export FTDeployment;
	class CQML_Export EventChannelCommunicationPoint;
	class CQML_Export ReceiverConnection;
	class CQML_Export ConsumerBehavior;
	class CQML_Export Filter;
	class CQML_Export EventSource;
	class CQML_Export SupplierBehavior;
	class CQML_Export eventServiceConfiguration;
	class CQML_Export EventChannelFactory;
	class CQML_Export EventSourcePort;
	class CQML_Export SenderConnection;
	class CQML_Export SecurityQoS;
	class CQML_Export PortRuleRef;
	class CQML_Export AssemblyRuleRef;
	class CQML_Export ComponentRuleRef;
	class CQML_Export Policy;
	class CQML_Export PolicySet;
	class CQML_Export AssemblyAccessConn;
	class CQML_Export ObjectAccessConn;
	class CQML_Export TargetObjectRef;
	class CQML_Export AttributeRef;
	class CQML_Export RuleBase;
	class CQML_Export PortRule;
	class CQML_Export AssemblyRule;
	class CQML_Export ComponentRule;
	class CQML_Export OnInterfaceConn;
	class CQML_Export OperationSet;
	class CQML_Export ComponentAccessConn;
	class CQML_Export InitiatorRoleRef;
	class CQML_Export AttributeManipulateConn;
	class CQML_Export SecuredPathConn;
	class CQML_Export OnAssemblyConn;
	class CQML_Export PathRef;
	class CQML_Export OperationInvokeConn;
	class CQML_Export RequiredRights;
	class CQML_Export OnComponentConn;
	class CQML_Export Rights;
	class CQML_Export RoleAssignmentConn;
	class CQML_Export Group;
	class CQML_Export Subject;
	class CQML_Export Realm;
	class CQML_Export SecurityDomain;
	class CQML_Export User;
	class CQML_Export InterfaceClassificationConn;
	class CQML_Export OperationClassificationConn;
	class CQML_Export RightsAssignmentConn;
	class CQML_Export GrantedRights;
	class CQML_Export RBAC;
	class CQML_Export Security;
	class CQML_Export Role;
	class CQML_Export ComponentBuild;
	class CQML_Export InterfaceDefinitions;
	class CQML_Export PredefinedTypes;
	class CQML_Export Targets;
	class CQML_Export ComponentPackages;
	class CQML_Export TopLevelPackages;
	class CQML_Export ComponentTypes;
	class CQML_Export ImplementationArtifacts;
	class CQML_Export PackageConfigurations;
	class CQML_Export ComponentImplementations;
	class CQML_Export DeploymentPlans;
	class CQML_Export ComponentAnalyses;
	class CQML_Export PathDiagrams;
	class CQML_Export ComponentFactoryImplementations;
	class CQML_Export WorkerLibraries;
	class CQML_Export RootFolder;

	class CQML_Export Visitor : public ::Udm::BaseVisitor {
	public:
		virtual ~Visitor();

		virtual void Visit_Project(const Project &);
		virtual void Visit_ExternalResources(const ExternalResources &);
		virtual void Visit_ExtResourceConn(const ExtResourceConn &);
		virtual void Visit_StubProject(const StubProject &);
		virtual void Visit_ServantProject(const ServantProject &);
		virtual void Visit_ExecutorProject(const ExecutorProject &);
		virtual void Visit_MPC(const MPC &);
		virtual void Visit_Workspaces(const Workspaces &);
		virtual void Visit_Package(const Package &);
		virtual void Visit_File(const File &);
		virtual void Visit_Exception(const Exception &);
		virtual void Visit_ExceptionRef(const ExceptionRef &);
		virtual void Visit_FileRef(const FileRef &);
		virtual void Visit_Enum(const Enum &);
		virtual void Visit_Constant(const Constant &);
		virtual void Visit_Boolean(const Boolean &);
		virtual void Visit_Byte(const Byte &);
		virtual void Visit_ShortInteger(const ShortInteger &);
		virtual void Visit_LongInteger(const LongInteger &);
		virtual void Visit_RealNumber(const RealNumber &);
		virtual void Visit_String(const String &);
		virtual void Visit_GenericObject(const GenericObject &);
		virtual void Visit_GenericValueObject(const GenericValueObject &);
		virtual void Visit_GenericValue(const GenericValue &);
		virtual void Visit_TypeEncoding(const TypeEncoding &);
		virtual void Visit_TypeKind(const TypeKind &);
		virtual void Visit_EnumValue(const EnumValue &);
		virtual void Visit_Aggregate(const Aggregate &);
		virtual void Visit_SwitchedAggregate(const SwitchedAggregate &);
		virtual void Visit_Label(const Label &);
		virtual void Visit_LabelConnection(const LabelConnection &);
		virtual void Visit_Discriminator(const Discriminator &);
		virtual void Visit_Boxed(const Boxed &);
		virtual void Visit_Component(const Component &);
		virtual void Visit_Collection(const Collection &);
		virtual void Visit_Alias(const Alias &);
		virtual void Visit_Member(const Member &);
		virtual void Visit_Object(const Object &);
		virtual void Visit_Inherits(const Inherits &);
		virtual void Visit_Event(const Event &);
		virtual void Visit_ValueObject(const ValueObject &);
		virtual void Visit_ComponentFactory(const ComponentFactory &);
		virtual void Visit_Supports(const Supports &);
		virtual void Visit_ReadonlyAttribute(const ReadonlyAttribute &);
		virtual void Visit_Attribute(const Attribute &);
		virtual void Visit_LookupKey(const LookupKey &);
		virtual void Visit_SetException(const SetException &);
		virtual void Visit_GetException(const GetException &);
		virtual void Visit_PrivateFlag(const PrivateFlag &);
		virtual void Visit_MakeMemberPrivate(const MakeMemberPrivate &);
		virtual void Visit_AttributeMember(const AttributeMember &);
		virtual void Visit_OnewayOperation(const OnewayOperation &);
		virtual void Visit_FactoryOperation(const FactoryOperation &);
		virtual void Visit_LookupOperation(const LookupOperation &);
		virtual void Visit_TwowayOperation(const TwowayOperation &);
		virtual void Visit_InParameter(const InParameter &);
		virtual void Visit_OutParameter(const OutParameter &);
		virtual void Visit_ReturnType(const ReturnType &);
		virtual void Visit_InoutParameter(const InoutParameter &);
		virtual void Visit_OutEventPort(const OutEventPort &);
		virtual void Visit_ProvidedRequestPort(const ProvidedRequestPort &);
		virtual void Visit_RequiredRequestPort(const RequiredRequestPort &);
		virtual void Visit_InEventPort(const InEventPort &);
		virtual void Visit_ComponentRef(const ComponentRef &);
		virtual void Visit_ManagesComponent(const ManagesComponent &);
		virtual void Visit_Domain(const Domain &);
		virtual void Visit_Shares(const Shares &);
		virtual void Visit_InterconnectConnection(const InterconnectConnection &);
		virtual void Visit_BridgeConnection(const BridgeConnection &);
		virtual void Visit_Requirement(const Requirement &);
		virtual void Visit_ECRequirements(const ECRequirements &);
		virtual void Visit_RTRequirements(const RTRequirements &);
		virtual void Visit_ImplementationDependency(const ImplementationDependency &);
		virtual void Visit_Property(const Property &);
		virtual void Visit_SatisfierProperty(const SatisfierProperty &);
		virtual void Visit_Capability(const Capability &);
		virtual void Visit_Resource(const Resource &);
		virtual void Visit_SharedResource(const SharedResource &);
		virtual void Visit_ImplementationRequirement(const ImplementationRequirement &);
		virtual void Visit_DataType(const DataType &);
		virtual void Visit_PackageInterface(const PackageInterface &);
		virtual void Visit_Implementation(const Implementation &);
		virtual void Visit_PackageContainer(const PackageContainer &);
		virtual void Visit_PackageConfigProperty(const PackageConfigProperty &);
		virtual void Visit_PackageInfoProperty(const PackageInfoProperty &);
		virtual void Visit_ComponentPackage(const ComponentPackage &);
		virtual void Visit_ComponentPackageReference(const ComponentPackageReference &);
		virtual void Visit_TopLevelPackageContainer(const TopLevelPackageContainer &);
		virtual void Visit_TopLevelPackage(const TopLevelPackage &);
		virtual void Visit_package(const package &);
		virtual void Visit_ComponentPropertyDescription(const ComponentPropertyDescription &);
		virtual void Visit_ComponentProperty(const ComponentProperty &);
		virtual void Visit_ComponentContainer(const ComponentContainer &);
		virtual void Visit_ComponentConfigProperty(const ComponentConfigProperty &);
		virtual void Visit_ComponentInfoProperty(const ComponentInfoProperty &);
		virtual void Visit_ImplementationArtifactReference(const ImplementationArtifactReference &);
		virtual void Visit_ComponentServantArtifact(const ComponentServantArtifact &);
		virtual void Visit_ComponentImplementationArtifact(const ComponentImplementationArtifact &);
		virtual void Visit_ArtifactDependsOn(const ArtifactDependsOn &);
		virtual void Visit_ArtifactDeployRequirement(const ArtifactDeployRequirement &);
		virtual void Visit_ArtifactContainer(const ArtifactContainer &);
		virtual void Visit_ArtifactExecParameter(const ArtifactExecParameter &);
		virtual void Visit_ArtifactInfoProperty(const ArtifactInfoProperty &);
		virtual void Visit_ImplementationArtifact(const ImplementationArtifact &);
		virtual void Visit_ArtifactDependency(const ArtifactDependency &);
		virtual void Visit_PackageConfBasePackage(const PackageConfBasePackage &);
		virtual void Visit_PackageConfReference(const PackageConfReference &);
		virtual void Visit_PackageConfigurationReference(const PackageConfigurationReference &);
		virtual void Visit_PackageConfigurationContainer(const PackageConfigurationContainer &);
		virtual void Visit_PackageConfConfigProperty(const PackageConfConfigProperty &);
		virtual void Visit_PackageConfSelectRequirement(const PackageConfSelectRequirement &);
		virtual void Visit_PackageConfSpecializedConfig(const PackageConfSpecializedConfig &);
		virtual void Visit_PackageConfiguration(const PackageConfiguration &);
		virtual void Visit_ImplementationCapability(const ImplementationCapability &);
		virtual void Visit_ImplementationDependsOn(const ImplementationDependsOn &);
		virtual void Visit_Implements(const Implements &);
		virtual void Visit_ComponentImplementationReference(const ComponentImplementationReference &);
		virtual void Visit_ComponentAssembly(const ComponentAssembly &);
		virtual void Visit_MonolithicImplementation(const MonolithicImplementation &);
		virtual void Visit_ComponentImplementationContainer(const ComponentImplementationContainer &);
		virtual void Visit_CriticalPath(const CriticalPath &);
		virtual void Visit_invoke(const invoke &);
		virtual void Visit_AssemblyselectRequirement(const AssemblyselectRequirement &);
		virtual void Visit_AssemblyConfigProperty(const AssemblyConfigProperty &);
		virtual void Visit_PublishConnector(const PublishConnector &);
		virtual void Visit_publish(const publish &);
		virtual void Visit_deliverTo(const deliverTo &);
		virtual void Visit_AssemblyDeployRequirement(const AssemblyDeployRequirement &);
		virtual void Visit_emit(const emit &);
		virtual void Visit_ReceptacleDelegate(const ReceptacleDelegate &);
		virtual void Visit_FacetDelegate(const FacetDelegate &);
		virtual void Visit_EventSourceDelegate(const EventSourceDelegate &);
		virtual void Visit_EventSinkDelegate(const EventSinkDelegate &);
		virtual void Visit_ExternalDelegate(const ExternalDelegate &);
		virtual void Visit_AttributeValue(const AttributeValue &);
		virtual void Visit_AttributeDelegate(const AttributeDelegate &);
		virtual void Visit_AttributeMapping(const AttributeMapping &);
		virtual void Visit_AttributeMappingValue(const AttributeMappingValue &);
		virtual void Visit_AttributeMappingDelegate(const AttributeMappingDelegate &);
		virtual void Visit_SupportsDelegate(const SupportsDelegate &);
		virtual void Visit_DeploymentPlan(const DeploymentPlan &);
		virtual void Visit_InstanceMapping(const InstanceMapping &);
		virtual void Visit_CollocationGroup(const CollocationGroup &);
		virtual void Visit_SharedComponentReference(const SharedComponentReference &);
		virtual void Visit_ComponentFactoryRef(const ComponentFactoryRef &);
		virtual void Visit_Deploys(const Deploys &);
		virtual void Visit_ComponentAssemblyReference(const ComponentAssemblyReference &);
		virtual void Visit_Bridge(const Bridge &);
		virtual void Visit_Interconnect(const Interconnect &);
		virtual void Visit_Node(const Node &);
		virtual void Visit_NodeReference(const NodeReference &);
		virtual void Visit_MetricConnection(const MetricConnection &);
		virtual void Visit_Average(const Average &);
		virtual void Visit_Minimum(const Minimum &);
		virtual void Visit_Maximum(const Maximum &);
		virtual void Visit_Jitter(const Jitter &);
		virtual void Visit_TimeProbe(const TimeProbe &);
		virtual void Visit_TimerConnection(const TimerConnection &);
		virtual void Visit_Latency(const Latency &);
		virtual void Visit_Throughput(const Throughput &);
		virtual void Visit_BenchmarkAnalysis(const BenchmarkAnalysis &);
		virtual void Visit_OperationRef(const OperationRef &);
		virtual void Visit_EventRef(const EventRef &);
		virtual void Visit_TimerEventSinkConn(const TimerEventSinkConn &);
		virtual void Visit_TaskSet(const TaskSet &);
		virtual void Visit_Task(const Task &);
		virtual void Visit_WorkloadCharacteristics(const WorkloadCharacteristics &);
		virtual void Visit_ComponentOperation(const ComponentOperation &);
		virtual void Visit_CompRef(const CompRef &);
		virtual void Visit_WorkLoadOperationConnection(const WorkLoadOperationConnection &);
		virtual void Visit_TriggerBenchmarks(const TriggerBenchmarks &);
		virtual void Visit_PeriodicBenchmarks(const PeriodicBenchmarks &);
		virtual void Visit_FixedIterationBenchmarks(const FixedIterationBenchmarks &);
		virtual void Visit_BenchmarkCharacteristics(const BenchmarkCharacteristics &);
		virtual void Visit_ConnectedComponent(const ConnectedComponent &);
		virtual void Visit_Path(const Path &);
		virtual void Visit_DstEdge(const DstEdge &);
		virtual void Visit_DisplayNode(const DisplayNode &);
		virtual void Visit_SrcEdge(const SrcEdge &);
		virtual void Visit_EdgeProperty(const EdgeProperty &);
		virtual void Visit_Edge(const Edge &);
		virtual void Visit_Paths(const Paths &);
		virtual void Visit_PathProperty(const PathProperty &);
		virtual void Visit_PathReference(const PathReference &);
		virtual void Visit_ExternalPortReference(const ExternalPortReference &);
		virtual void Visit_ECBehavior(const ECBehavior &);
		virtual void Visit_ECRole(const ECRole &);
		virtual void Visit_ServiceProvider(const ServiceProvider &);
		virtual void Visit_MultipleServiceRequests(const MultipleServiceRequests &);
		virtual void Visit_ServiceLevels(const ServiceLevels &);
		virtual void Visit_ServiceConsumer(const ServiceConsumer &);
		virtual void Visit_ComponentFactoryImplementationContainer(const ComponentFactoryImplementationContainer &);
		virtual void Visit_ComponentFactoryInstance(const ComponentFactoryInstance &);
		virtual void Visit_ConfigProperty(const ConfigProperty &);
		virtual void Visit_InfoProperty(const InfoProperty &);
		virtual void Visit_MonolithprimaryArtifact(const MonolithprimaryArtifact &);
		virtual void Visit_MonolithDeployRequirement(const MonolithDeployRequirement &);
		virtual void Visit_MonolithExecParameter(const MonolithExecParameter &);
		virtual void Visit_WorkerLibrary(const WorkerLibrary &);
		virtual void Visit_Worker(const Worker &);
		virtual void Visit_WorkerFile(const WorkerFile &);
		virtual void Visit_WorkerPackage(const WorkerPackage &);
		virtual void Visit_WorkerType(const WorkerType &);
		virtual void Visit_Variable(const Variable &);
		virtual void Visit_InputAction(const InputAction &);
		virtual void Visit_MultiInputAction(const MultiInputAction &);
		virtual void Visit_Action(const Action &);
		virtual void Visit_OutputAction(const OutputAction &);
		virtual void Visit_Finish(const Finish &);
		virtual void Visit_QueryAction(const QueryAction &);
		virtual void Visit_QueryInputAction(const QueryInputAction &);
		virtual void Visit_Environment(const Environment &);
		virtual void Visit_PeriodicEvent(const PeriodicEvent &);
		virtual void Visit_ApplicationTask(const ApplicationTask &);
		virtual void Visit_Input(const Input &);
		virtual void Visit_MultiInput(const MultiInput &);
		virtual void Visit_QueryInput(const QueryInput &);
		virtual void Visit_Transition(const Transition &);
		virtual void Visit_State(const State &);
		virtual void Visit_BranchState(const BranchState &);
		virtual void Visit_BranchTransition(const BranchTransition &);
		virtual void Visit_DoWhileState(const DoWhileState &);
		virtual void Visit_ForState(const ForState &);
		virtual void Visit_WhileState(const WhileState &);
		virtual void Visit_LoopTransition(const LoopTransition &);
		virtual void Visit_Terminal(const Terminal &);
		virtual void Visit_TerminalTransition(const TerminalTransition &);
		virtual void Visit_Effect(const Effect &);
		virtual void Visit_InputEffect(const InputEffect &);
		virtual void Visit_TerminalEffect(const TerminalEffect &);
		virtual void Visit_QoSCharRef(const QoSCharRef &);
		virtual void Visit_ComponentAssemblySecurityQoS(const ComponentAssemblySecurityQoS &);
		virtual void Visit_FailOverUnit(const FailOverUnit &);
		virtual void Visit_CIAOEvents(const CIAOEvents &);
		virtual void Visit_NetQoS(const NetQoS &);
		virtual void Visit_DomainRiskGroupingRef(const DomainRiskGroupingRef &);
		virtual void Visit_RecepInvoke(const RecepInvoke &);
		virtual void Visit_ComponentAssemblyQoS(const ComponentAssemblyQoS &);
		virtual void Visit_PortQoS(const PortQoS &);
		virtual void Visit_FacetInvoke(const FacetInvoke &);
		virtual void Visit_QoSReq(const QoSReq &);
		virtual void Visit_EventSourcePublish(const EventSourcePublish &);
		virtual void Visit_ComponentQoS(const ComponentQoS &);
		virtual void Visit_EventSinkPublish(const EventSinkPublish &);
		virtual void Visit_QoSConnector(const QoSConnector &);
		virtual void Visit_ComponentSecurityQoS(const ComponentSecurityQoS &);
		virtual void Visit_RealTimeConfiguration(const RealTimeConfiguration &);
		virtual void Visit_PortSecurityQoS(const PortSecurityQoS &);
		virtual void Visit_PriorityBands(const PriorityBands &);
		virtual void Visit_LanePerThreadPool(const LanePerThreadPool &);
		virtual void Visit_ThreadPool(const ThreadPool &);
		virtual void Visit_EnvironmentConf(const EnvironmentConf &);
		virtual void Visit_PolicyPerThreadPool(const PolicyPerThreadPool &);
		virtual void Visit_Lane(const Lane &);
		virtual void Visit_PriorityModelPolicy(const PriorityModelPolicy &);
		virtual void Visit_RootRiskGroup(const RootRiskGroup &);
		virtual void Visit_DeploymentPlanRef(const DeploymentPlanRef &);
		virtual void Visit_SRGRiskAssociation(const SRGRiskAssociation &);
		virtual void Visit_RepicaGroupConfiguration(const RepicaGroupConfiguration &);
		virtual void Visit_DomainRiskGrouping(const DomainRiskGrouping &);
		virtual void Visit_RootRiskAssociation(const RootRiskAssociation &);
		virtual void Visit_SharedRiskGroup(const SharedRiskGroup &);
		virtual void Visit_MonitorableGroupAssociation(const MonitorableGroupAssociation &);
		virtual void Visit_SharedResourceReference(const SharedResourceReference &);
		virtual void Visit_FTDeployDepends(const FTDeployDepends &);
		virtual void Visit_HostReference(const HostReference &);
		virtual void Visit_FTDeployment(const FTDeployment &);
		virtual void Visit_EventChannelCommunicationPoint(const EventChannelCommunicationPoint &);
		virtual void Visit_ReceiverConnection(const ReceiverConnection &);
		virtual void Visit_ConsumerBehavior(const ConsumerBehavior &);
		virtual void Visit_Filter(const Filter &);
		virtual void Visit_EventSource(const EventSource &);
		virtual void Visit_SupplierBehavior(const SupplierBehavior &);
		virtual void Visit_eventServiceConfiguration(const eventServiceConfiguration &);
		virtual void Visit_EventChannelFactory(const EventChannelFactory &);
		virtual void Visit_EventSourcePort(const EventSourcePort &);
		virtual void Visit_SenderConnection(const SenderConnection &);
		virtual void Visit_PortRuleRef(const PortRuleRef &);
		virtual void Visit_AssemblyRuleRef(const AssemblyRuleRef &);
		virtual void Visit_ComponentRuleRef(const ComponentRuleRef &);
		virtual void Visit_Policy(const Policy &);
		virtual void Visit_PolicySet(const PolicySet &);
		virtual void Visit_AssemblyAccessConn(const AssemblyAccessConn &);
		virtual void Visit_ObjectAccessConn(const ObjectAccessConn &);
		virtual void Visit_TargetObjectRef(const TargetObjectRef &);
		virtual void Visit_AttributeRef(const AttributeRef &);
		virtual void Visit_PortRule(const PortRule &);
		virtual void Visit_AssemblyRule(const AssemblyRule &);
		virtual void Visit_ComponentRule(const ComponentRule &);
		virtual void Visit_OnInterfaceConn(const OnInterfaceConn &);
		virtual void Visit_OperationSet(const OperationSet &);
		virtual void Visit_ComponentAccessConn(const ComponentAccessConn &);
		virtual void Visit_InitiatorRoleRef(const InitiatorRoleRef &);
		virtual void Visit_AttributeManipulateConn(const AttributeManipulateConn &);
		virtual void Visit_SecuredPathConn(const SecuredPathConn &);
		virtual void Visit_OnAssemblyConn(const OnAssemblyConn &);
		virtual void Visit_PathRef(const PathRef &);
		virtual void Visit_OperationInvokeConn(const OperationInvokeConn &);
		virtual void Visit_RequiredRights(const RequiredRights &);
		virtual void Visit_OnComponentConn(const OnComponentConn &);
		virtual void Visit_RoleAssignmentConn(const RoleAssignmentConn &);
		virtual void Visit_Group(const Group &);
		virtual void Visit_Realm(const Realm &);
		virtual void Visit_SecurityDomain(const SecurityDomain &);
		virtual void Visit_User(const User &);
		virtual void Visit_InterfaceClassificationConn(const InterfaceClassificationConn &);
		virtual void Visit_OperationClassificationConn(const OperationClassificationConn &);
		virtual void Visit_RightsAssignmentConn(const RightsAssignmentConn &);
		virtual void Visit_GrantedRights(const GrantedRights &);
		virtual void Visit_RBAC(const RBAC &);
		virtual void Visit_Security(const Security &);
		virtual void Visit_Role(const Role &);
		virtual void Visit_ComponentBuild(const ComponentBuild &);
		virtual void Visit_InterfaceDefinitions(const InterfaceDefinitions &);
		virtual void Visit_PredefinedTypes(const PredefinedTypes &);
		virtual void Visit_Targets(const Targets &);
		virtual void Visit_ComponentPackages(const ComponentPackages &);
		virtual void Visit_TopLevelPackages(const TopLevelPackages &);
		virtual void Visit_ComponentTypes(const ComponentTypes &);
		virtual void Visit_ImplementationArtifacts(const ImplementationArtifacts &);
		virtual void Visit_PackageConfigurations(const PackageConfigurations &);
		virtual void Visit_ComponentImplementations(const ComponentImplementations &);
		virtual void Visit_DeploymentPlans(const DeploymentPlans &);
		virtual void Visit_ComponentAnalyses(const ComponentAnalyses &);
		virtual void Visit_PathDiagrams(const PathDiagrams &);
		virtual void Visit_ComponentFactoryImplementations(const ComponentFactoryImplementations &);
		virtual void Visit_WorkerLibraries(const WorkerLibraries &);
		virtual void Visit_RootFolder(const RootFolder &);
		virtual void Visit_Object(const ::Udm::Object &);

	};

	CQML_Export void Initialize();
	CQML_Export void Initialize(const ::Uml::Diagram &dgr);

	extern CQML_Export  ::Udm::UdmDiagram diagram;

	class CQML_Export MgaObject : public ::Udm::Object {
	public:
		MgaObject();
		MgaObject(::Udm::ObjectImpl *impl);
		MgaObject(const MgaObject &master);

#ifdef UDM_RVALUE
		MgaObject(MgaObject &&master);

		static MgaObject Cast(::Udm::Object &&a);
		MgaObject& operator=(MgaObject &&a);

#endif
		static MgaObject Cast(const ::Udm::Object &a);
		static MgaObject Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		MgaObject CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< MgaObject> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< MgaObject, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< MgaObject, Pred>(impl); };
		MgaObject CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< MgaObject> Derived();
		template <class Pred> ::Udm::DerivedAttr< MgaObject, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< MgaObject, Pred>(impl); };
		::Udm::ArchetypeAttr< MgaObject> Archetype() const;
		::Udm::StringAttr position() const;
		::Udm::StringAttr name() const;
		::Udm::ParentAttr< ::Udm::Object> parent() const;

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_position;
		static ::Uml::Attribute meta_name;

	};

	class CQML_Export Project :  public MgaObject {
	public:
		Project();
		Project(::Udm::ObjectImpl *impl);
		Project(const Project &master);

#ifdef UDM_RVALUE
		Project(Project &&master);

		static Project Cast(::Udm::Object &&a);
		Project& operator=(Project &&a);

#endif
		static Project Cast(const ::Udm::Object &a);
		static Project Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Project CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Project> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Project, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Project, Pred>(impl); };
		Project CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Project> Derived();
		template <class Pred> ::Udm::DerivedAttr< Project, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Project, Pred>(impl); };
		::Udm::ArchetypeAttr< Project> Archetype() const;
		::Udm::AssocAttr< Workspaces> setWorkspace() const;
		template <class Pred> ::Udm::AssocAttr< Workspaces, Pred> setWorkspace_sorted(const Pred &) const { return ::Udm::AssocAttr< Workspaces, Pred>(impl, meta_setWorkspace); };
		::Udm::ChildrenAttr< ::CQML::ExternalResources> ExternalResources_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ExternalResources, Pred> ExternalResources_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ExternalResources, Pred>(impl, meta_ExternalResources_children); };
		::Udm::ChildrenAttr< ::CQML::ExtResourceConn> ExtResourceConn_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ExtResourceConn, Pred> ExtResourceConn_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ExtResourceConn, Pred>(impl, meta_ExtResourceConn_children); };
		::Udm::ChildrenAttr< ::CQML::ComponentLib> ComponentLib_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentLib, Pred> ComponentLib_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentLib, Pred>(impl, meta_ComponentLib_children); };
		::Udm::ChildrenAttr< ::CQML::ImplementationArtifact> ImplementationArtifact_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ImplementationArtifact, Pred> ImplementationArtifact_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ImplementationArtifact, Pred>(impl, meta_ImplementationArtifact_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ExternalResources> ExternalResources_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ExternalResources, Pred> ExternalResources_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ExternalResources, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ExtResourceConn> ExtResourceConn_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ExtResourceConn, Pred> ExtResourceConn_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ExtResourceConn, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentLib> ComponentLib_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentLib, Pred> ComponentLib_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentLib, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::StubProject> StubProject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::StubProject, Pred> StubProject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::StubProject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ServantProject> ServantProject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ServantProject, Pred> ServantProject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ServantProject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ExecutorProject> ExecutorProject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ExecutorProject, Pred> ExecutorProject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ExecutorProject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ImplementationArtifact> ImplementationArtifact_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ImplementationArtifact, Pred> ImplementationArtifact_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ImplementationArtifact, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::MPC> MPC_parent() const;
		::Udm::ParentAttr< ::CQML::MPC> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_setWorkspace;
		static ::Uml::CompositionChildRole meta_ExternalResources_children;
		static ::Uml::CompositionChildRole meta_ExtResourceConn_children;
		static ::Uml::CompositionChildRole meta_ComponentLib_children;
		static ::Uml::CompositionChildRole meta_ImplementationArtifact_children;
		static ::Uml::CompositionParentRole meta_MPC_parent;

	};

	class CQML_Export ExternalResources :  public MgaObject {
	public:
		ExternalResources();
		ExternalResources(::Udm::ObjectImpl *impl);
		ExternalResources(const ExternalResources &master);

#ifdef UDM_RVALUE
		ExternalResources(ExternalResources &&master);

		static ExternalResources Cast(::Udm::Object &&a);
		ExternalResources& operator=(ExternalResources &&a);

#endif
		static ExternalResources Cast(const ::Udm::Object &a);
		static ExternalResources Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ExternalResources CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ExternalResources> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ExternalResources, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ExternalResources, Pred>(impl); };
		ExternalResources CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ExternalResources> Derived();
		template <class Pred> ::Udm::DerivedAttr< ExternalResources, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ExternalResources, Pred>(impl); };
		::Udm::ArchetypeAttr< ExternalResources> Archetype() const;
		::Udm::PointerAttr< ImplementationArtifact> ref() const;
		::Udm::AClassAssocAttr< ExtResourceConn, ComponentLib> srcExtResourceConn() const;
		template <class Pred> ::Udm::AClassAssocAttr< ExtResourceConn, ComponentLib, Pred> srcExtResourceConn_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< ExtResourceConn, ComponentLib, Pred>(impl, meta_srcExtResourceConn, meta_srcExtResourceConn_rev); };
		::Udm::ParentAttr< ::CQML::Project> Project_parent() const;
		::Udm::ParentAttr< ::CQML::Project> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::AssociationRole meta_srcExtResourceConn;
		static ::Uml::AssociationRole meta_srcExtResourceConn_rev;
		static ::Uml::CompositionParentRole meta_Project_parent;

	};

	class CQML_Export ExtResourceConn :  public MgaObject {
	public:
		ExtResourceConn();
		ExtResourceConn(::Udm::ObjectImpl *impl);
		ExtResourceConn(const ExtResourceConn &master);

#ifdef UDM_RVALUE
		ExtResourceConn(ExtResourceConn &&master);

		static ExtResourceConn Cast(::Udm::Object &&a);
		ExtResourceConn& operator=(ExtResourceConn &&a);

#endif
		static ExtResourceConn Cast(const ::Udm::Object &a);
		static ExtResourceConn Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ExtResourceConn CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ExtResourceConn> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ExtResourceConn, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ExtResourceConn, Pred>(impl); };
		ExtResourceConn CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ExtResourceConn> Derived();
		template <class Pred> ::Udm::DerivedAttr< ExtResourceConn, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ExtResourceConn, Pred>(impl); };
		::Udm::ArchetypeAttr< ExtResourceConn> Archetype() const;
		::Udm::ParentAttr< ::CQML::Project> Project_parent() const;
		::Udm::ParentAttr< ::CQML::Project> parent() const;
		::Udm::AssocEndAttr< ::CQML::ComponentLib> srcExtResourceConn_end() const;
		::Udm::AssocEndAttr< ::CQML::ExternalResources> dstExtResourceConn_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_Project_parent;
		static ::Uml::AssociationRole meta_srcExtResourceConn_end_;
		static ::Uml::AssociationRole meta_dstExtResourceConn_end_;

	};

	class CQML_Export ComponentLib :  public MgaObject {
	public:
		ComponentLib();
		ComponentLib(::Udm::ObjectImpl *impl);
		ComponentLib(const ComponentLib &master);

#ifdef UDM_RVALUE
		ComponentLib(ComponentLib &&master);

		static ComponentLib Cast(::Udm::Object &&a);
		ComponentLib& operator=(ComponentLib &&a);

#endif
		static ComponentLib Cast(const ::Udm::Object &a);
		static ComponentLib Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ComponentLib CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ComponentLib> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ComponentLib, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ComponentLib, Pred>(impl); };
		ComponentLib CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ComponentLib> Derived();
		template <class Pred> ::Udm::DerivedAttr< ComponentLib, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ComponentLib, Pred>(impl); };
		::Udm::ArchetypeAttr< ComponentLib> Archetype() const;
		::Udm::StringAttr sharedname() const;
		::Udm::StringAttr ORBServices() const;
		::Udm::StringAttr libraryexport() const;
		::Udm::AClassAssocAttr< ExtResourceConn, ExternalResources> dstExtResourceConn() const;
		template <class Pred> ::Udm::AClassAssocAttr< ExtResourceConn, ExternalResources, Pred> dstExtResourceConn_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< ExtResourceConn, ExternalResources, Pred>(impl, meta_dstExtResourceConn, meta_dstExtResourceConn_rev); };
		::Udm::ParentAttr< ::CQML::Project> Project_parent() const;
		::Udm::ParentAttr< ::CQML::Project> parent() const;

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_sharedname;
		static ::Uml::Attribute meta_ORBServices;
		static ::Uml::Attribute meta_libraryexport;
		static ::Uml::AssociationRole meta_dstExtResourceConn;
		static ::Uml::AssociationRole meta_dstExtResourceConn_rev;
		static ::Uml::CompositionParentRole meta_Project_parent;

	};

	class CQML_Export StubProject :  public ComponentLib {
	public:
		StubProject();
		StubProject(::Udm::ObjectImpl *impl);
		StubProject(const StubProject &master);

#ifdef UDM_RVALUE
		StubProject(StubProject &&master);

		static StubProject Cast(::Udm::Object &&a);
		StubProject& operator=(StubProject &&a);

#endif
		static StubProject Cast(const ::Udm::Object &a);
		static StubProject Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		StubProject CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< StubProject> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< StubProject, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< StubProject, Pred>(impl); };
		StubProject CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< StubProject> Derived();
		template <class Pred> ::Udm::DerivedAttr< StubProject, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< StubProject, Pred>(impl); };
		::Udm::ArchetypeAttr< StubProject> Archetype() const;
		::Udm::ChildAttr< ::CQML::ImplementationArtifactReference> ImplementationArtifactReference_child() const;
		::Udm::ChildAttr< ::CQML::FileRef> FileRef_child() const;
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::FileRef> FileRef_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::FileRef, Pred> FileRef_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::FileRef, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ImplementationArtifactReference> ImplementationArtifactReference_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ImplementationArtifactReference, Pred> ImplementationArtifactReference_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ImplementationArtifactReference, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentServantArtifact> ComponentServantArtifact_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentServantArtifact, Pred> ComponentServantArtifact_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentServantArtifact, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentImplementationArtifact> ComponentImplementationArtifact_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentImplementationArtifact, Pred> ComponentImplementationArtifact_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentImplementationArtifact, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::Project> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionChildRole meta_ImplementationArtifactReference_child;
		static ::Uml::CompositionChildRole meta_FileRef_child;

	};

	class CQML_Export ServantProject :  public ComponentLib {
	public:
		ServantProject();
		ServantProject(::Udm::ObjectImpl *impl);
		ServantProject(const ServantProject &master);

#ifdef UDM_RVALUE
		ServantProject(ServantProject &&master);

		static ServantProject Cast(::Udm::Object &&a);
		ServantProject& operator=(ServantProject &&a);

#endif
		static ServantProject Cast(const ::Udm::Object &a);
		static ServantProject Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ServantProject CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ServantProject> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ServantProject, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ServantProject, Pred>(impl); };
		ServantProject CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ServantProject> Derived();
		template <class Pred> ::Udm::DerivedAttr< ServantProject, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ServantProject, Pred>(impl); };
		::Udm::ArchetypeAttr< ServantProject> Archetype() const;
		::Udm::ChildAttr< ::CQML::ImplementationArtifactReference> ImplementationArtifactReference_child() const;
		::Udm::ChildAttr< ::CQML::FileRef> FileRef_child() const;
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::FileRef> FileRef_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::FileRef, Pred> FileRef_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::FileRef, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ImplementationArtifactReference> ImplementationArtifactReference_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ImplementationArtifactReference, Pred> ImplementationArtifactReference_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ImplementationArtifactReference, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentServantArtifact> ComponentServantArtifact_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentServantArtifact, Pred> ComponentServantArtifact_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentServantArtifact, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentImplementationArtifact> ComponentImplementationArtifact_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentImplementationArtifact, Pred> ComponentImplementationArtifact_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentImplementationArtifact, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::Project> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionChildRole meta_ImplementationArtifactReference_child;
		static ::Uml::CompositionChildRole meta_FileRef_child;

	};

	class CQML_Export ExecutorProject :  public ComponentLib {
	public:
		ExecutorProject();
		ExecutorProject(::Udm::ObjectImpl *impl);
		ExecutorProject(const ExecutorProject &master);

#ifdef UDM_RVALUE
		ExecutorProject(ExecutorProject &&master);

		static ExecutorProject Cast(::Udm::Object &&a);
		ExecutorProject& operator=(ExecutorProject &&a);

#endif
		static ExecutorProject Cast(const ::Udm::Object &a);
		static ExecutorProject Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ExecutorProject CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ExecutorProject> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ExecutorProject, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ExecutorProject, Pred>(impl); };
		ExecutorProject CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ExecutorProject> Derived();
		template <class Pred> ::Udm::DerivedAttr< ExecutorProject, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ExecutorProject, Pred>(impl); };
		::Udm::ArchetypeAttr< ExecutorProject> Archetype() const;
		::Udm::ChildAttr< ::CQML::ImplementationArtifactReference> ImplementationArtifactReference_child() const;
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ImplementationArtifactReference> ImplementationArtifactReference_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ImplementationArtifactReference, Pred> ImplementationArtifactReference_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ImplementationArtifactReference, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentServantArtifact> ComponentServantArtifact_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentServantArtifact, Pred> ComponentServantArtifact_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentServantArtifact, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentImplementationArtifact> ComponentImplementationArtifact_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentImplementationArtifact, Pred> ComponentImplementationArtifact_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentImplementationArtifact, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::Project> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionChildRole meta_ImplementationArtifactReference_child;

	};

	class CQML_Export MPC :  public MgaObject {
	public:
		MPC();
		MPC(::Udm::ObjectImpl *impl);
		MPC(const MPC &master);

#ifdef UDM_RVALUE
		MPC(MPC &&master);

		static MPC Cast(::Udm::Object &&a);
		MPC& operator=(MPC &&a);

#endif
		static MPC Cast(const ::Udm::Object &a);
		static MPC Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		MPC CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< MPC> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< MPC, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< MPC, Pred>(impl); };
		MPC CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< MPC> Derived();
		template <class Pred> ::Udm::DerivedAttr< MPC, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< MPC, Pred>(impl); };
		::Udm::ArchetypeAttr< MPC> Archetype() const;
		::Udm::ChildrenAttr< ::CQML::Workspaces> Workspaces_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Workspaces, Pred> Workspaces_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Workspaces, Pred>(impl, meta_Workspaces_children); };
		::Udm::ChildrenAttr< ::CQML::Project> Project_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Project, Pred> Project_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Project, Pred>(impl, meta_Project_children); };
		::Udm::ChildrenAttr< ::CQML::Project> Project_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Project, Pred> Project_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Project, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Workspaces> Workspaces_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Workspaces, Pred> Workspaces_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Workspaces, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::ComponentBuild> ComponentBuild_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentBuild> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionChildRole meta_Workspaces_children;
		static ::Uml::CompositionChildRole meta_Project_children;
		static ::Uml::CompositionParentRole meta_ComponentBuild_parent;

	};

	class CQML_Export Workspaces :  public MgaObject {
	public:
		Workspaces();
		Workspaces(::Udm::ObjectImpl *impl);
		Workspaces(const Workspaces &master);

#ifdef UDM_RVALUE
		Workspaces(Workspaces &&master);

		static Workspaces Cast(::Udm::Object &&a);
		Workspaces& operator=(Workspaces &&a);

#endif
		static Workspaces Cast(const ::Udm::Object &a);
		static Workspaces Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Workspaces CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Workspaces> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Workspaces, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Workspaces, Pred>(impl); };
		Workspaces CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Workspaces> Derived();
		template <class Pred> ::Udm::DerivedAttr< Workspaces, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Workspaces, Pred>(impl); };
		::Udm::ArchetypeAttr< Workspaces> Archetype() const;
		::Udm::AssocAttr< Project> members() const;
		template <class Pred> ::Udm::AssocAttr< Project, Pred> members_sorted(const Pred &) const { return ::Udm::AssocAttr< Project, Pred>(impl, meta_members); };
		::Udm::ParentAttr< ::CQML::MPC> MPC_parent() const;
		::Udm::ParentAttr< ::CQML::MPC> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_members;
		static ::Uml::CompositionParentRole meta_MPC_parent;

	};

	class CQML_Export Prefixable :  virtual  public MgaObject {
	public:
		Prefixable();
		Prefixable(::Udm::ObjectImpl *impl);
		Prefixable(const Prefixable &master);

#ifdef UDM_RVALUE
		Prefixable(Prefixable &&master);

		static Prefixable Cast(::Udm::Object &&a);
		Prefixable& operator=(Prefixable &&a);

#endif
		static Prefixable Cast(const ::Udm::Object &a);
		static Prefixable Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Prefixable CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Prefixable> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Prefixable, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Prefixable, Pred>(impl); };
		Prefixable CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Prefixable> Derived();
		template <class Pred> ::Udm::DerivedAttr< Prefixable, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Prefixable, Pred>(impl); };
		::Udm::ArchetypeAttr< Prefixable> Archetype() const;
		::Udm::StringAttr PrefixTag() const;
		::Udm::ParentAttr< ::Udm::Object> parent() const;

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_PrefixTag;

	};

	class CQML_Export Taggable :  virtual  public MgaObject {
	public:
		Taggable();
		Taggable(::Udm::ObjectImpl *impl);
		Taggable(const Taggable &master);

#ifdef UDM_RVALUE
		Taggable(Taggable &&master);

		static Taggable Cast(::Udm::Object &&a);
		Taggable& operator=(Taggable &&a);

#endif
		static Taggable Cast(const ::Udm::Object &a);
		static Taggable Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Taggable CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Taggable> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Taggable, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Taggable, Pred>(impl); };
		Taggable CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Taggable> Derived();
		template <class Pred> ::Udm::DerivedAttr< Taggable, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Taggable, Pred>(impl); };
		::Udm::ArchetypeAttr< Taggable> Archetype() const;
		::Udm::StringAttr VersionTag() const;
		::Udm::StringAttr SpecifyIdTag() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_VersionTag;
		static ::Uml::Attribute meta_SpecifyIdTag;

	};

	class CQML_Export Package :  public Prefixable,  public Taggable {
	public:
		Package();
		Package(::Udm::ObjectImpl *impl);
		Package(const Package &master);

#ifdef UDM_RVALUE
		Package(Package &&master);

		static Package Cast(::Udm::Object &&a);
		Package& operator=(Package &&a);

#endif
		static Package Cast(const ::Udm::Object &a);
		static Package Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Package CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Package> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Package, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Package, Pred>(impl); };
		Package CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Package> Derived();
		template <class Pred> ::Udm::DerivedAttr< Package, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Package, Pred>(impl); };
		::Udm::ArchetypeAttr< Package> Archetype() const;
		::Udm::ChildrenAttr< ::CQML::Package> Package_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Package, Pred> Package_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Package, Pred>(impl, meta_Package_children); };
		::Udm::ChildrenAttr< ::CQML::Exception> Exception_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Exception, Pred> Exception_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Exception, Pred>(impl, meta_Exception_children); };
		::Udm::ChildrenAttr< ::CQML::Constant> Constant_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Constant, Pred> Constant_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Constant, Pred>(impl, meta_Constant_children); };
		::Udm::ChildrenAttr< ::CQML::NamedType> NamedType_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::NamedType, Pred> NamedType_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::NamedType, Pred>(impl, meta_NamedType_children); };
		::Udm::ChildrenAttr< ::CQML::ComponentRef> ComponentRef_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentRef, Pred> ComponentRef_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentRef, Pred>(impl, meta_ComponentRef_children); };
		::Udm::ChildrenAttr< ::CQML::ManagesComponent> ManagesComponent_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ManagesComponent, Pred> ManagesComponent_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ManagesComponent, Pred>(impl, meta_ManagesComponent_children); };
		::Udm::ChildrenAttr< ::CQML::RequiredRights> RequiredRights_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::RequiredRights, Pred> RequiredRights_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::RequiredRights, Pred>(impl, meta_RequiredRights_children); };
		::Udm::ChildrenAttr< ::CQML::InterfaceClassificationConn> InterfaceClassificationConn_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::InterfaceClassificationConn, Pred> InterfaceClassificationConn_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::InterfaceClassificationConn, Pred>(impl, meta_InterfaceClassificationConn_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Package> Package_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Package, Pred> Package_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Package, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Prefixable> Prefixable_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Prefixable, Pred> Prefixable_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Prefixable, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Taggable> Taggable_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Taggable, Pred> Taggable_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Taggable, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Exception> Exception_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Exception, Pred> Exception_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Exception, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Enum> Enum_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Enum, Pred> Enum_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Enum, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Constant> Constant_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Constant, Pred> Constant_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Constant, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::MemberType> MemberType_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MemberType, Pred> MemberType_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MemberType, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::NoInheritable> NoInheritable_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::NoInheritable, Pred> NoInheritable_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::NoInheritable, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Aggregate> Aggregate_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Aggregate, Pred> Aggregate_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Aggregate, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::SwitchedAggregate> SwitchedAggregate_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::SwitchedAggregate, Pred> SwitchedAggregate_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::SwitchedAggregate, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::NamedType> NamedType_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::NamedType, Pred> NamedType_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::NamedType, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Inheritable> Inheritable_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Inheritable, Pred> Inheritable_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Inheritable, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Boxed> Boxed_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Boxed, Pred> Boxed_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Boxed, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Component> Component_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Component, Pred> Component_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Component, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Collection> Collection_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Collection, Pred> Collection_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Collection, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Alias> Alias_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Alias, Pred> Alias_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Alias, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Object> Object_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Object, Pred> Object_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Object, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::HasOperations> HasOperations_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::HasOperations, Pred> HasOperations_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::HasOperations, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Event> Event_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Event, Pred> Event_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Event, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ObjectByValue> ObjectByValue_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ObjectByValue, Pred> ObjectByValue_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ObjectByValue, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ValueObject> ValueObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ValueObject, Pred> ValueObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ValueObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentFactory> ComponentFactory_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentFactory, Pred> ComponentFactory_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentFactory, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Manageable> Manageable_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Manageable, Pred> Manageable_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Manageable, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentBase> ComponentBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentBase, Pred> ComponentBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentRef> ComponentRef_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentRef, Pred> ComponentRef_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentRef, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::CollocationGroupMember> CollocationGroupMember_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::CollocationGroupMember, Pred> CollocationGroupMember_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::CollocationGroupMember, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::FTMonitorable> FTMonitorable_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::FTMonitorable, Pred> FTMonitorable_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::FTMonitorable, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ManagesComponent> ManagesComponent_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ManagesComponent, Pred> ManagesComponent_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ManagesComponent, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ResourceActionBase> ResourceActionBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ResourceActionBase, Pred> ResourceActionBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ResourceActionBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::RequiredRights> RequiredRights_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::RequiredRights, Pred> RequiredRights_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::RequiredRights, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Rights> Rights_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Rights, Pred> Rights_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Rights, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::InterfaceClassificationConn> InterfaceClassificationConn_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::InterfaceClassificationConn, Pred> InterfaceClassificationConn_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::InterfaceClassificationConn, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::Package> Package_parent() const;
		::Udm::ParentAttr< ::CQML::File> File_parent() const;
		::Udm::ParentAttr< ::CQML::Prefixable> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionChildRole meta_Package_children;
		static ::Uml::CompositionChildRole meta_Exception_children;
		static ::Uml::CompositionChildRole meta_Constant_children;
		static ::Uml::CompositionChildRole meta_NamedType_children;
		static ::Uml::CompositionChildRole meta_ComponentRef_children;
		static ::Uml::CompositionChildRole meta_ManagesComponent_children;
		static ::Uml::CompositionChildRole meta_RequiredRights_children;
		static ::Uml::CompositionChildRole meta_InterfaceClassificationConn_children;
		static ::Uml::CompositionParentRole meta_Package_parent;
		static ::Uml::CompositionParentRole meta_File_parent;

	};

	class CQML_Export File :  public Prefixable {
	public:
		File();
		File(::Udm::ObjectImpl *impl);
		File(const File &master);

#ifdef UDM_RVALUE
		File(File &&master);

		static File Cast(::Udm::Object &&a);
		File& operator=(File &&a);

#endif
		static File Cast(const ::Udm::Object &a);
		static File Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		File CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< File> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< File, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< File, Pred>(impl); };
		File CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< File> Derived();
		template <class Pred> ::Udm::DerivedAttr< File, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< File, Pred>(impl); };
		::Udm::ArchetypeAttr< File> Archetype() const;
		::Udm::StringAttr path() const;
		::Udm::AssocAttr< FileRef> referedbyFileRef() const;
		template <class Pred> ::Udm::AssocAttr< FileRef, Pred> referedbyFileRef_sorted(const Pred &) const { return ::Udm::AssocAttr< FileRef, Pred>(impl, meta_referedbyFileRef); };
		::Udm::ChildrenAttr< ::CQML::Package> Package_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Package, Pred> Package_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Package, Pred>(impl, meta_Package_children); };
		::Udm::ChildrenAttr< ::CQML::Exception> Exception_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Exception, Pred> Exception_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Exception, Pred>(impl, meta_Exception_children); };
		::Udm::ChildrenAttr< ::CQML::FileRef> FileRef_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::FileRef, Pred> FileRef_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::FileRef, Pred>(impl, meta_FileRef_children); };
		::Udm::ChildrenAttr< ::CQML::Constant> Constant_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Constant, Pred> Constant_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Constant, Pred>(impl, meta_Constant_children); };
		::Udm::ChildrenAttr< ::CQML::NamedType> NamedType_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::NamedType, Pred> NamedType_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::NamedType, Pred>(impl, meta_NamedType_children); };
		::Udm::ChildrenAttr< ::CQML::ComponentRef> ComponentRef_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentRef, Pred> ComponentRef_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentRef, Pred>(impl, meta_ComponentRef_children); };
		::Udm::ChildrenAttr< ::CQML::ManagesComponent> ManagesComponent_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ManagesComponent, Pred> ManagesComponent_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ManagesComponent, Pred>(impl, meta_ManagesComponent_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Package> Package_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Package, Pred> Package_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Package, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Prefixable> Prefixable_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Prefixable, Pred> Prefixable_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Prefixable, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Taggable> Taggable_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Taggable, Pred> Taggable_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Taggable, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Exception> Exception_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Exception, Pred> Exception_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Exception, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::FileRef> FileRef_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::FileRef, Pred> FileRef_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::FileRef, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Enum> Enum_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Enum, Pred> Enum_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Enum, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Constant> Constant_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Constant, Pred> Constant_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Constant, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::MemberType> MemberType_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MemberType, Pred> MemberType_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MemberType, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::NoInheritable> NoInheritable_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::NoInheritable, Pred> NoInheritable_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::NoInheritable, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Aggregate> Aggregate_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Aggregate, Pred> Aggregate_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Aggregate, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::SwitchedAggregate> SwitchedAggregate_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::SwitchedAggregate, Pred> SwitchedAggregate_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::SwitchedAggregate, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::NamedType> NamedType_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::NamedType, Pred> NamedType_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::NamedType, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Inheritable> Inheritable_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Inheritable, Pred> Inheritable_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Inheritable, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Boxed> Boxed_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Boxed, Pred> Boxed_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Boxed, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Component> Component_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Component, Pred> Component_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Component, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Collection> Collection_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Collection, Pred> Collection_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Collection, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Alias> Alias_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Alias, Pred> Alias_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Alias, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Object> Object_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Object, Pred> Object_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Object, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::HasOperations> HasOperations_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::HasOperations, Pred> HasOperations_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::HasOperations, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Event> Event_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Event, Pred> Event_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Event, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ObjectByValue> ObjectByValue_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ObjectByValue, Pred> ObjectByValue_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ObjectByValue, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ValueObject> ValueObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ValueObject, Pred> ValueObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ValueObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentFactory> ComponentFactory_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentFactory, Pred> ComponentFactory_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentFactory, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Manageable> Manageable_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Manageable, Pred> Manageable_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Manageable, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentBase> ComponentBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentBase, Pred> ComponentBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentRef> ComponentRef_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentRef, Pred> ComponentRef_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentRef, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::CollocationGroupMember> CollocationGroupMember_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::CollocationGroupMember, Pred> CollocationGroupMember_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::CollocationGroupMember, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::FTMonitorable> FTMonitorable_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::FTMonitorable, Pred> FTMonitorable_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::FTMonitorable, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ManagesComponent> ManagesComponent_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ManagesComponent, Pred> ManagesComponent_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ManagesComponent, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::InterfaceDefinitions> InterfaceDefinitions_parent() const;
		::Udm::ParentAttr< ::CQML::InterfaceDefinitions> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_path;
		static ::Uml::AssociationRole meta_referedbyFileRef;
		static ::Uml::CompositionChildRole meta_Package_children;
		static ::Uml::CompositionChildRole meta_Exception_children;
		static ::Uml::CompositionChildRole meta_FileRef_children;
		static ::Uml::CompositionChildRole meta_Constant_children;
		static ::Uml::CompositionChildRole meta_NamedType_children;
		static ::Uml::CompositionChildRole meta_ComponentRef_children;
		static ::Uml::CompositionChildRole meta_ManagesComponent_children;
		static ::Uml::CompositionParentRole meta_InterfaceDefinitions_parent;

	};

	class CQML_Export Exception :  public Taggable {
	public:
		Exception();
		Exception(::Udm::ObjectImpl *impl);
		Exception(const Exception &master);

#ifdef UDM_RVALUE
		Exception(Exception &&master);

		static Exception Cast(::Udm::Object &&a);
		Exception& operator=(Exception &&a);

#endif
		static Exception Cast(const ::Udm::Object &a);
		static Exception Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Exception CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Exception> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Exception, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Exception, Pred>(impl); };
		Exception CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Exception> Derived();
		template <class Pred> ::Udm::DerivedAttr< Exception, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Exception, Pred>(impl); };
		::Udm::ArchetypeAttr< Exception> Archetype() const;
		::Udm::AssocAttr< ExceptionRef> referedbyExceptionRef() const;
		template <class Pred> ::Udm::AssocAttr< ExceptionRef, Pred> referedbyExceptionRef_sorted(const Pred &) const { return ::Udm::AssocAttr< ExceptionRef, Pred>(impl, meta_referedbyExceptionRef); };
		::Udm::AssocAttr< SetException> referedbySetException() const;
		template <class Pred> ::Udm::AssocAttr< SetException, Pred> referedbySetException_sorted(const Pred &) const { return ::Udm::AssocAttr< SetException, Pred>(impl, meta_referedbySetException); };
		::Udm::AssocAttr< GetException> referedbyGetException() const;
		template <class Pred> ::Udm::AssocAttr< GetException, Pred> referedbyGetException_sorted(const Pred &) const { return ::Udm::AssocAttr< GetException, Pred>(impl, meta_referedbyGetException); };
		::Udm::ChildrenAttr< ::CQML::Member> Member_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Member, Pred> Member_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Member, Pred>(impl, meta_Member_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Member> Member_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Member, Pred> Member_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Member, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::Package> Package_parent() const;
		::Udm::ParentAttr< ::CQML::File> File_parent() const;
		::Udm::ParentAttr< ::CQML::HasOperations> HasOperations_parent() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_referedbyExceptionRef;
		static ::Uml::AssociationRole meta_referedbySetException;
		static ::Uml::AssociationRole meta_referedbyGetException;
		static ::Uml::CompositionChildRole meta_Member_children;
		static ::Uml::CompositionParentRole meta_Package_parent;
		static ::Uml::CompositionParentRole meta_File_parent;
		static ::Uml::CompositionParentRole meta_HasOperations_parent;

	};

	class CQML_Export ExceptionRef :  public MgaObject {
	public:
		ExceptionRef();
		ExceptionRef(::Udm::ObjectImpl *impl);
		ExceptionRef(const ExceptionRef &master);

#ifdef UDM_RVALUE
		ExceptionRef(ExceptionRef &&master);

		static ExceptionRef Cast(::Udm::Object &&a);
		ExceptionRef& operator=(ExceptionRef &&a);

#endif
		static ExceptionRef Cast(const ::Udm::Object &a);
		static ExceptionRef Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ExceptionRef CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ExceptionRef> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ExceptionRef, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ExceptionRef, Pred>(impl); };
		ExceptionRef CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ExceptionRef> Derived();
		template <class Pred> ::Udm::DerivedAttr< ExceptionRef, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ExceptionRef, Pred>(impl); };
		::Udm::ArchetypeAttr< ExceptionRef> Archetype() const;
		::Udm::PointerAttr< Exception> ref() const;
		::Udm::ParentAttr< ::CQML::HasExceptions> HasExceptions_parent() const;
		::Udm::ParentAttr< ::CQML::HasExceptions> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::CompositionParentRole meta_HasExceptions_parent;

	};

	class CQML_Export FileRef :  public MgaObject {
	public:
		FileRef();
		FileRef(::Udm::ObjectImpl *impl);
		FileRef(const FileRef &master);

#ifdef UDM_RVALUE
		FileRef(FileRef &&master);

		static FileRef Cast(::Udm::Object &&a);
		FileRef& operator=(FileRef &&a);

#endif
		static FileRef Cast(const ::Udm::Object &a);
		static FileRef Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		FileRef CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< FileRef> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< FileRef, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< FileRef, Pred>(impl); };
		FileRef CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< FileRef> Derived();
		template <class Pred> ::Udm::DerivedAttr< FileRef, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< FileRef, Pred>(impl); };
		::Udm::ArchetypeAttr< FileRef> Archetype() const;
		::Udm::PointerAttr< File> ref() const;
		::Udm::ParentAttr< ::CQML::StubProject> StubProject_parent() const;
		::Udm::ParentAttr< ::CQML::ServantProject> ServantProject_parent() const;
		::Udm::ParentAttr< ::CQML::File> File_parent() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::CompositionParentRole meta_StubProject_parent;
		static ::Uml::CompositionParentRole meta_ServantProject_parent;
		static ::Uml::CompositionParentRole meta_File_parent;

	};

	class CQML_Export ConstantType :  virtual  public MgaObject {
	public:
		ConstantType();
		ConstantType(::Udm::ObjectImpl *impl);
		ConstantType(const ConstantType &master);

#ifdef UDM_RVALUE
		ConstantType(ConstantType &&master);

		static ConstantType Cast(::Udm::Object &&a);
		ConstantType& operator=(ConstantType &&a);

#endif
		static ConstantType Cast(const ::Udm::Object &a);
		static ConstantType Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ConstantType CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ConstantType> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ConstantType, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ConstantType, Pred>(impl); };
		ConstantType CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ConstantType> Derived();
		template <class Pred> ::Udm::DerivedAttr< ConstantType, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ConstantType, Pred>(impl); };
		::Udm::ArchetypeAttr< ConstantType> Archetype() const;
		::Udm::AssocAttr< Constant> referedbyConstant() const;
		template <class Pred> ::Udm::AssocAttr< Constant, Pred> referedbyConstant_sorted(const Pred &) const { return ::Udm::AssocAttr< Constant, Pred>(impl, meta_referedbyConstant); };
		::Udm::AssocAttr< Discriminator> referedbyDiscriminator() const;
		template <class Pred> ::Udm::AssocAttr< Discriminator, Pred> referedbyDiscriminator_sorted(const Pred &) const { return ::Udm::AssocAttr< Discriminator, Pred>(impl, meta_referedbyDiscriminator); };
		::Udm::ParentAttr< ::CQML::PredefinedTypes> parent() const;

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_referedbyConstant;
		static ::Uml::AssociationRole meta_referedbyDiscriminator;

	};

	class CQML_Export Constant :  public Taggable {
	public:
		Constant();
		Constant(::Udm::ObjectImpl *impl);
		Constant(const Constant &master);

#ifdef UDM_RVALUE
		Constant(Constant &&master);

		static Constant Cast(::Udm::Object &&a);
		Constant& operator=(Constant &&a);

#endif
		static Constant Cast(const ::Udm::Object &a);
		static Constant Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Constant CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Constant> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Constant, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Constant, Pred>(impl); };
		Constant CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Constant> Derived();
		template <class Pred> ::Udm::DerivedAttr< Constant, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Constant, Pred>(impl); };
		::Udm::ArchetypeAttr< Constant> Archetype() const;
		::Udm::StringAttr value() const;
		::Udm::PointerAttr< ConstantType> ref() const;
		::Udm::ParentAttr< ::CQML::Package> Package_parent() const;
		::Udm::ParentAttr< ::CQML::File> File_parent() const;
		::Udm::ParentAttr< ::CQML::HasOperations> HasOperations_parent() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_value;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::CompositionParentRole meta_Package_parent;
		static ::Uml::CompositionParentRole meta_File_parent;
		static ::Uml::CompositionParentRole meta_HasOperations_parent;

	};

	class CQML_Export MemberType :  virtual  public MgaObject {
	public:
		MemberType();
		MemberType(::Udm::ObjectImpl *impl);
		MemberType(const MemberType &master);

#ifdef UDM_RVALUE
		MemberType(MemberType &&master);

		static MemberType Cast(::Udm::Object &&a);
		MemberType& operator=(MemberType &&a);

#endif
		static MemberType Cast(const ::Udm::Object &a);
		static MemberType Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		MemberType CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< MemberType> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< MemberType, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< MemberType, Pred>(impl); };
		MemberType CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< MemberType> Derived();
		template <class Pred> ::Udm::DerivedAttr< MemberType, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< MemberType, Pred>(impl); };
		::Udm::ArchetypeAttr< MemberType> Archetype() const;
		::Udm::AssocAttr< Collection> referedbyCollection() const;
		template <class Pred> ::Udm::AssocAttr< Collection, Pred> referedbyCollection_sorted(const Pred &) const { return ::Udm::AssocAttr< Collection, Pred>(impl, meta_referedbyCollection); };
		::Udm::AssocAttr< Alias> referedbyAlias() const;
		template <class Pred> ::Udm::AssocAttr< Alias, Pred> referedbyAlias_sorted(const Pred &) const { return ::Udm::AssocAttr< Alias, Pred>(impl, meta_referedbyAlias); };
		::Udm::AssocAttr< Boxed> referedbyBoxed() const;
		template <class Pred> ::Udm::AssocAttr< Boxed, Pred> referedbyBoxed_sorted(const Pred &) const { return ::Udm::AssocAttr< Boxed, Pred>(impl, meta_referedbyBoxed); };
		::Udm::AssocAttr< Member> referedbyMember() const;
		template <class Pred> ::Udm::AssocAttr< Member, Pred> referedbyMember_sorted(const Pred &) const { return ::Udm::AssocAttr< Member, Pred>(impl, meta_referedbyMember); };
		::Udm::AssocAttr< AttributeMember> referedbyAttributeMember() const;
		template <class Pred> ::Udm::AssocAttr< AttributeMember, Pred> referedbyAttributeMember_sorted(const Pred &) const { return ::Udm::AssocAttr< AttributeMember, Pred>(impl, meta_referedbyAttributeMember); };
		::Udm::AssocAttr< InParameter> referedbyInParameter() const;
		template <class Pred> ::Udm::AssocAttr< InParameter, Pred> referedbyInParameter_sorted(const Pred &) const { return ::Udm::AssocAttr< InParameter, Pred>(impl, meta_referedbyInParameter); };
		::Udm::AssocAttr< OutParameter> referedbyOutParameter() const;
		template <class Pred> ::Udm::AssocAttr< OutParameter, Pred> referedbyOutParameter_sorted(const Pred &) const { return ::Udm::AssocAttr< OutParameter, Pred>(impl, meta_referedbyOutParameter); };
		::Udm::AssocAttr< ReturnType> referedbyReturnType() const;
		template <class Pred> ::Udm::AssocAttr< ReturnType, Pred> referedbyReturnType_sorted(const Pred &) const { return ::Udm::AssocAttr< ReturnType, Pred>(impl, meta_referedbyReturnType); };
		::Udm::AssocAttr< ParameterType> referedbyParameterType() const;
		template <class Pred> ::Udm::AssocAttr< ParameterType, Pred> referedbyParameterType_sorted(const Pred &) const { return ::Udm::AssocAttr< ParameterType, Pred>(impl, meta_referedbyParameterType); };
		::Udm::AssocAttr< InoutParameter> referedbyInoutParameter() const;
		template <class Pred> ::Udm::AssocAttr< InoutParameter, Pred> referedbyInoutParameter_sorted(const Pred &) const { return ::Udm::AssocAttr< InoutParameter, Pred>(impl, meta_referedbyInoutParameter); };
		::Udm::AssocAttr< DataType> referedbyDataType() const;
		template <class Pred> ::Udm::AssocAttr< DataType, Pred> referedbyDataType_sorted(const Pred &) const { return ::Udm::AssocAttr< DataType, Pred>(impl, meta_referedbyDataType); };
		::Udm::ParentAttr< ::Udm::Object> parent() const;

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_referedbyCollection;
		static ::Uml::AssociationRole meta_referedbyAlias;
		static ::Uml::AssociationRole meta_referedbyBoxed;
		static ::Uml::AssociationRole meta_referedbyMember;
		static ::Uml::AssociationRole meta_referedbyAttributeMember;
		static ::Uml::AssociationRole meta_referedbyInParameter;
		static ::Uml::AssociationRole meta_referedbyOutParameter;
		static ::Uml::AssociationRole meta_referedbyReturnType;
		static ::Uml::AssociationRole meta_referedbyParameterType;
		static ::Uml::AssociationRole meta_referedbyInoutParameter;
		static ::Uml::AssociationRole meta_referedbyDataType;

	};

	class CQML_Export PredefinedType :  public ConstantType,  public MemberType {
	public:
		PredefinedType();
		PredefinedType(::Udm::ObjectImpl *impl);
		PredefinedType(const PredefinedType &master);

#ifdef UDM_RVALUE
		PredefinedType(PredefinedType &&master);

		static PredefinedType Cast(::Udm::Object &&a);
		PredefinedType& operator=(PredefinedType &&a);

#endif
		static PredefinedType Cast(const ::Udm::Object &a);
		static PredefinedType Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		PredefinedType CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< PredefinedType> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< PredefinedType, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< PredefinedType, Pred>(impl); };
		PredefinedType CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< PredefinedType> Derived();
		template <class Pred> ::Udm::DerivedAttr< PredefinedType, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< PredefinedType, Pred>(impl); };
		::Udm::ArchetypeAttr< PredefinedType> Archetype() const;
		::Udm::AssocAttr< Variable> referedbyVariable() const;
		template <class Pred> ::Udm::AssocAttr< Variable, Pred> referedbyVariable_sorted(const Pred &) const { return ::Udm::AssocAttr< Variable, Pred>(impl, meta_referedbyVariable); };
		::Udm::ParentAttr< ::CQML::PredefinedTypes> PredefinedTypes_parent() const;
		::Udm::ParentAttr< ::CQML::PredefinedTypes> parent() const;

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_referedbyVariable;
		static ::Uml::CompositionParentRole meta_PredefinedTypes_parent;

	};

	class CQML_Export Boolean :  public PredefinedType {
	public:
		Boolean();
		Boolean(::Udm::ObjectImpl *impl);
		Boolean(const Boolean &master);

#ifdef UDM_RVALUE
		Boolean(Boolean &&master);

		static Boolean Cast(::Udm::Object &&a);
		Boolean& operator=(Boolean &&a);

#endif
		static Boolean Cast(const ::Udm::Object &a);
		static Boolean Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Boolean CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Boolean> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Boolean, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Boolean, Pred>(impl); };
		Boolean CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Boolean> Derived();
		template <class Pred> ::Udm::DerivedAttr< Boolean, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Boolean, Pred>(impl); };
		::Udm::ArchetypeAttr< Boolean> Archetype() const;
		::Udm::ParentAttr< ::CQML::PredefinedTypes> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;

	};

	class CQML_Export Byte :  public PredefinedType {
	public:
		Byte();
		Byte(::Udm::ObjectImpl *impl);
		Byte(const Byte &master);

#ifdef UDM_RVALUE
		Byte(Byte &&master);

		static Byte Cast(::Udm::Object &&a);
		Byte& operator=(Byte &&a);

#endif
		static Byte Cast(const ::Udm::Object &a);
		static Byte Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Byte CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Byte> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Byte, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Byte, Pred>(impl); };
		Byte CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Byte> Derived();
		template <class Pred> ::Udm::DerivedAttr< Byte, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Byte, Pred>(impl); };
		::Udm::ArchetypeAttr< Byte> Archetype() const;
		::Udm::ParentAttr< ::CQML::PredefinedTypes> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;

	};

	class CQML_Export ShortInteger :  public PredefinedType {
	public:
		ShortInteger();
		ShortInteger(::Udm::ObjectImpl *impl);
		ShortInteger(const ShortInteger &master);

#ifdef UDM_RVALUE
		ShortInteger(ShortInteger &&master);

		static ShortInteger Cast(::Udm::Object &&a);
		ShortInteger& operator=(ShortInteger &&a);

#endif
		static ShortInteger Cast(const ::Udm::Object &a);
		static ShortInteger Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ShortInteger CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ShortInteger> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ShortInteger, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ShortInteger, Pred>(impl); };
		ShortInteger CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ShortInteger> Derived();
		template <class Pred> ::Udm::DerivedAttr< ShortInteger, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ShortInteger, Pred>(impl); };
		::Udm::ArchetypeAttr< ShortInteger> Archetype() const;
		::Udm::ParentAttr< ::CQML::PredefinedTypes> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;

	};

	class CQML_Export LongInteger :  public PredefinedType {
	public:
		LongInteger();
		LongInteger(::Udm::ObjectImpl *impl);
		LongInteger(const LongInteger &master);

#ifdef UDM_RVALUE
		LongInteger(LongInteger &&master);

		static LongInteger Cast(::Udm::Object &&a);
		LongInteger& operator=(LongInteger &&a);

#endif
		static LongInteger Cast(const ::Udm::Object &a);
		static LongInteger Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		LongInteger CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< LongInteger> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< LongInteger, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< LongInteger, Pred>(impl); };
		LongInteger CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< LongInteger> Derived();
		template <class Pred> ::Udm::DerivedAttr< LongInteger, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< LongInteger, Pred>(impl); };
		::Udm::ArchetypeAttr< LongInteger> Archetype() const;
		::Udm::ParentAttr< ::CQML::PredefinedTypes> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;

	};

	class CQML_Export RealNumber :  public PredefinedType {
	public:
		RealNumber();
		RealNumber(::Udm::ObjectImpl *impl);
		RealNumber(const RealNumber &master);

#ifdef UDM_RVALUE
		RealNumber(RealNumber &&master);

		static RealNumber Cast(::Udm::Object &&a);
		RealNumber& operator=(RealNumber &&a);

#endif
		static RealNumber Cast(const ::Udm::Object &a);
		static RealNumber Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		RealNumber CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< RealNumber> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< RealNumber, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< RealNumber, Pred>(impl); };
		RealNumber CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< RealNumber> Derived();
		template <class Pred> ::Udm::DerivedAttr< RealNumber, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< RealNumber, Pred>(impl); };
		::Udm::ArchetypeAttr< RealNumber> Archetype() const;
		::Udm::ParentAttr< ::CQML::PredefinedTypes> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;

	};

	class CQML_Export String :  public PredefinedType {
	public:
		String();
		String(::Udm::ObjectImpl *impl);
		String(const String &master);

#ifdef UDM_RVALUE
		String(String &&master);

		static String Cast(::Udm::Object &&a);
		String& operator=(String &&a);

#endif
		static String Cast(const ::Udm::Object &a);
		static String Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		String CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< String> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< String, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< String, Pred>(impl); };
		String CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< String> Derived();
		template <class Pred> ::Udm::DerivedAttr< String, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< String, Pred>(impl); };
		::Udm::ArchetypeAttr< String> Archetype() const;
		::Udm::ParentAttr< ::CQML::PredefinedTypes> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;

	};

	class CQML_Export GenericValueObject :  public PredefinedType {
	public:
		GenericValueObject();
		GenericValueObject(::Udm::ObjectImpl *impl);
		GenericValueObject(const GenericValueObject &master);

#ifdef UDM_RVALUE
		GenericValueObject(GenericValueObject &&master);

		static GenericValueObject Cast(::Udm::Object &&a);
		GenericValueObject& operator=(GenericValueObject &&a);

#endif
		static GenericValueObject Cast(const ::Udm::Object &a);
		static GenericValueObject Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		GenericValueObject CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< GenericValueObject> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< GenericValueObject, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< GenericValueObject, Pred>(impl); };
		GenericValueObject CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< GenericValueObject> Derived();
		template <class Pred> ::Udm::DerivedAttr< GenericValueObject, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< GenericValueObject, Pred>(impl); };
		::Udm::ArchetypeAttr< GenericValueObject> Archetype() const;
		::Udm::ParentAttr< ::CQML::PredefinedTypes> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;

	};

	class CQML_Export GenericValue :  public PredefinedType {
	public:
		GenericValue();
		GenericValue(::Udm::ObjectImpl *impl);
		GenericValue(const GenericValue &master);

#ifdef UDM_RVALUE
		GenericValue(GenericValue &&master);

		static GenericValue Cast(::Udm::Object &&a);
		GenericValue& operator=(GenericValue &&a);

#endif
		static GenericValue Cast(const ::Udm::Object &a);
		static GenericValue Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		GenericValue CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< GenericValue> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< GenericValue, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< GenericValue, Pred>(impl); };
		GenericValue CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< GenericValue> Derived();
		template <class Pred> ::Udm::DerivedAttr< GenericValue, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< GenericValue, Pred>(impl); };
		::Udm::ArchetypeAttr< GenericValue> Archetype() const;
		::Udm::ParentAttr< ::CQML::PredefinedTypes> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;

	};

	class CQML_Export TypeEncoding :  public PredefinedType {
	public:
		TypeEncoding();
		TypeEncoding(::Udm::ObjectImpl *impl);
		TypeEncoding(const TypeEncoding &master);

#ifdef UDM_RVALUE
		TypeEncoding(TypeEncoding &&master);

		static TypeEncoding Cast(::Udm::Object &&a);
		TypeEncoding& operator=(TypeEncoding &&a);

#endif
		static TypeEncoding Cast(const ::Udm::Object &a);
		static TypeEncoding Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		TypeEncoding CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< TypeEncoding> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< TypeEncoding, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< TypeEncoding, Pred>(impl); };
		TypeEncoding CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< TypeEncoding> Derived();
		template <class Pred> ::Udm::DerivedAttr< TypeEncoding, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< TypeEncoding, Pred>(impl); };
		::Udm::ArchetypeAttr< TypeEncoding> Archetype() const;
		::Udm::ParentAttr< ::CQML::PredefinedTypes> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;

	};

	class CQML_Export TypeKind :  public PredefinedType {
	public:
		TypeKind();
		TypeKind(::Udm::ObjectImpl *impl);
		TypeKind(const TypeKind &master);

#ifdef UDM_RVALUE
		TypeKind(TypeKind &&master);

		static TypeKind Cast(::Udm::Object &&a);
		TypeKind& operator=(TypeKind &&a);

#endif
		static TypeKind Cast(const ::Udm::Object &a);
		static TypeKind Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		TypeKind CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< TypeKind> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< TypeKind, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< TypeKind, Pred>(impl); };
		TypeKind CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< TypeKind> Derived();
		template <class Pred> ::Udm::DerivedAttr< TypeKind, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< TypeKind, Pred>(impl); };
		::Udm::ArchetypeAttr< TypeKind> Archetype() const;
		::Udm::ParentAttr< ::CQML::PredefinedTypes> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;

	};

	class CQML_Export EnumValue :  public MgaObject {
	public:
		EnumValue();
		EnumValue(::Udm::ObjectImpl *impl);
		EnumValue(const EnumValue &master);

#ifdef UDM_RVALUE
		EnumValue(EnumValue &&master);

		static EnumValue Cast(::Udm::Object &&a);
		EnumValue& operator=(EnumValue &&a);

#endif
		static EnumValue Cast(const ::Udm::Object &a);
		static EnumValue Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		EnumValue CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< EnumValue> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< EnumValue, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< EnumValue, Pred>(impl); };
		EnumValue CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< EnumValue> Derived();
		template <class Pred> ::Udm::DerivedAttr< EnumValue, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< EnumValue, Pred>(impl); };
		::Udm::ArchetypeAttr< EnumValue> Archetype() const;
		::Udm::ParentAttr< ::CQML::Enum> Enum_parent() const;
		::Udm::ParentAttr< ::CQML::Enum> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_Enum_parent;

	};

	class CQML_Export Label :  public MgaObject {
	public:
		Label();
		Label(::Udm::ObjectImpl *impl);
		Label(const Label &master);

#ifdef UDM_RVALUE
		Label(Label &&master);

		static Label Cast(::Udm::Object &&a);
		Label& operator=(Label &&a);

#endif
		static Label Cast(const ::Udm::Object &a);
		static Label Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Label CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Label> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Label, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Label, Pred>(impl); };
		Label CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Label> Derived();
		template <class Pred> ::Udm::DerivedAttr< Label, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Label, Pred>(impl); };
		::Udm::ArchetypeAttr< Label> Archetype() const;
		::Udm::AClassPointerAttr< LabelConnection, Member> srcLabelConnection() const;
		::Udm::ParentAttr< ::CQML::SwitchedAggregate> SwitchedAggregate_parent() const;
		::Udm::ParentAttr< ::CQML::SwitchedAggregate> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_srcLabelConnection;
		static ::Uml::AssociationRole meta_srcLabelConnection_rev;
		static ::Uml::CompositionParentRole meta_SwitchedAggregate_parent;

	};

	class CQML_Export LabelConnection :  public MgaObject {
	public:
		LabelConnection();
		LabelConnection(::Udm::ObjectImpl *impl);
		LabelConnection(const LabelConnection &master);

#ifdef UDM_RVALUE
		LabelConnection(LabelConnection &&master);

		static LabelConnection Cast(::Udm::Object &&a);
		LabelConnection& operator=(LabelConnection &&a);

#endif
		static LabelConnection Cast(const ::Udm::Object &a);
		static LabelConnection Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		LabelConnection CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< LabelConnection> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< LabelConnection, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< LabelConnection, Pred>(impl); };
		LabelConnection CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< LabelConnection> Derived();
		template <class Pred> ::Udm::DerivedAttr< LabelConnection, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< LabelConnection, Pred>(impl); };
		::Udm::ArchetypeAttr< LabelConnection> Archetype() const;
		::Udm::ParentAttr< ::CQML::SwitchedAggregate> SwitchedAggregate_parent() const;
		::Udm::ParentAttr< ::CQML::SwitchedAggregate> parent() const;
		::Udm::AssocEndAttr< ::CQML::Member> srcLabelConnection_end() const;
		::Udm::AssocEndAttr< ::CQML::Label> dstLabelConnection_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_SwitchedAggregate_parent;
		static ::Uml::AssociationRole meta_srcLabelConnection_end_;
		static ::Uml::AssociationRole meta_dstLabelConnection_end_;

	};

	class CQML_Export NamedType :  public MemberType,  public Taggable {
	public:
		NamedType();
		NamedType(::Udm::ObjectImpl *impl);
		NamedType(const NamedType &master);

#ifdef UDM_RVALUE
		NamedType(NamedType &&master);

		static NamedType Cast(::Udm::Object &&a);
		NamedType& operator=(NamedType &&a);

#endif
		static NamedType Cast(const ::Udm::Object &a);
		static NamedType Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		NamedType CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< NamedType> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< NamedType, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< NamedType, Pred>(impl); };
		NamedType CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< NamedType> Derived();
		template <class Pred> ::Udm::DerivedAttr< NamedType, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< NamedType, Pred>(impl); };
		::Udm::ArchetypeAttr< NamedType> Archetype() const;
		::Udm::ParentAttr< ::CQML::Package> Package_parent() const;
		::Udm::ParentAttr< ::CQML::File> File_parent() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_Package_parent;
		static ::Uml::CompositionParentRole meta_File_parent;

	};

	class CQML_Export NoInheritable :  public NamedType {
	public:
		NoInheritable();
		NoInheritable(::Udm::ObjectImpl *impl);
		NoInheritable(const NoInheritable &master);

#ifdef UDM_RVALUE
		NoInheritable(NoInheritable &&master);

		static NoInheritable Cast(::Udm::Object &&a);
		NoInheritable& operator=(NoInheritable &&a);

#endif
		static NoInheritable Cast(const ::Udm::Object &a);
		static NoInheritable Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		NoInheritable CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< NoInheritable> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< NoInheritable, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< NoInheritable, Pred>(impl); };
		NoInheritable CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< NoInheritable> Derived();
		template <class Pred> ::Udm::DerivedAttr< NoInheritable, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< NoInheritable, Pred>(impl); };
		::Udm::ArchetypeAttr< NoInheritable> Archetype() const;
		::Udm::ParentAttr< ::CQML::HasOperations> HasOperations_parent() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_HasOperations_parent;

	};

	class CQML_Export Enum :  public ConstantType,  public NoInheritable {
	public:
		Enum();
		Enum(::Udm::ObjectImpl *impl);
		Enum(const Enum &master);

#ifdef UDM_RVALUE
		Enum(Enum &&master);

		static Enum Cast(::Udm::Object &&a);
		Enum& operator=(Enum &&a);

#endif
		static Enum Cast(const ::Udm::Object &a);
		static Enum Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Enum CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Enum> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Enum, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Enum, Pred>(impl); };
		Enum CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Enum> Derived();
		template <class Pred> ::Udm::DerivedAttr< Enum, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Enum, Pred>(impl); };
		::Udm::ArchetypeAttr< Enum> Archetype() const;
		::Udm::ChildrenAttr< ::CQML::EnumValue> EnumValue_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::EnumValue, Pred> EnumValue_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::EnumValue, Pred>(impl, meta_EnumValue_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::EnumValue> EnumValue_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::EnumValue, Pred> EnumValue_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::EnumValue, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionChildRole meta_EnumValue_children;

	};

	class CQML_Export Aggregate :  public NoInheritable {
	public:
		Aggregate();
		Aggregate(::Udm::ObjectImpl *impl);
		Aggregate(const Aggregate &master);

#ifdef UDM_RVALUE
		Aggregate(Aggregate &&master);

		static Aggregate Cast(::Udm::Object &&a);
		Aggregate& operator=(Aggregate &&a);

#endif
		static Aggregate Cast(const ::Udm::Object &a);
		static Aggregate Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Aggregate CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Aggregate> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Aggregate, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Aggregate, Pred>(impl); };
		Aggregate CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Aggregate> Derived();
		template <class Pred> ::Udm::DerivedAttr< Aggregate, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Aggregate, Pred>(impl); };
		::Udm::ArchetypeAttr< Aggregate> Archetype() const;
		::Udm::ChildrenAttr< ::CQML::Member> Member_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Member, Pred> Member_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Member, Pred>(impl, meta_Member_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Member> Member_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Member, Pred> Member_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Member, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionChildRole meta_Member_children;

	};

	class CQML_Export SwitchedAggregate :  public NoInheritable {
	public:
		SwitchedAggregate();
		SwitchedAggregate(::Udm::ObjectImpl *impl);
		SwitchedAggregate(const SwitchedAggregate &master);

#ifdef UDM_RVALUE
		SwitchedAggregate(SwitchedAggregate &&master);

		static SwitchedAggregate Cast(::Udm::Object &&a);
		SwitchedAggregate& operator=(SwitchedAggregate &&a);

#endif
		static SwitchedAggregate Cast(const ::Udm::Object &a);
		static SwitchedAggregate Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		SwitchedAggregate CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< SwitchedAggregate> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< SwitchedAggregate, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< SwitchedAggregate, Pred>(impl); };
		SwitchedAggregate CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< SwitchedAggregate> Derived();
		template <class Pred> ::Udm::DerivedAttr< SwitchedAggregate, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< SwitchedAggregate, Pred>(impl); };
		::Udm::ArchetypeAttr< SwitchedAggregate> Archetype() const;
		::Udm::ChildrenAttr< ::CQML::LabelConnection> LabelConnection_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::LabelConnection, Pred> LabelConnection_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::LabelConnection, Pred>(impl, meta_LabelConnection_children); };
		::Udm::ChildrenAttr< ::CQML::Label> Label_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Label, Pred> Label_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Label, Pred>(impl, meta_Label_children); };
		::Udm::ChildrenAttr< ::CQML::Member> Member_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Member, Pred> Member_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Member, Pred>(impl, meta_Member_children); };
		::Udm::ChildAttr< ::CQML::Discriminator> Discriminator_child() const;
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Label> Label_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Label, Pred> Label_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Label, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::LabelConnection> LabelConnection_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::LabelConnection, Pred> LabelConnection_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::LabelConnection, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Discriminator> Discriminator_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Discriminator, Pred> Discriminator_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Discriminator, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Member> Member_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Member, Pred> Member_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Member, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionChildRole meta_LabelConnection_children;
		static ::Uml::CompositionChildRole meta_Label_children;
		static ::Uml::CompositionChildRole meta_Member_children;
		static ::Uml::CompositionChildRole meta_Discriminator_child;

	};

	class CQML_Export Discriminator :  public MgaObject {
	public:
		Discriminator();
		Discriminator(::Udm::ObjectImpl *impl);
		Discriminator(const Discriminator &master);

#ifdef UDM_RVALUE
		Discriminator(Discriminator &&master);

		static Discriminator Cast(::Udm::Object &&a);
		Discriminator& operator=(Discriminator &&a);

#endif
		static Discriminator Cast(const ::Udm::Object &a);
		static Discriminator Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Discriminator CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Discriminator> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Discriminator, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Discriminator, Pred>(impl); };
		Discriminator CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Discriminator> Derived();
		template <class Pred> ::Udm::DerivedAttr< Discriminator, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Discriminator, Pred>(impl); };
		::Udm::ArchetypeAttr< Discriminator> Archetype() const;
		::Udm::PointerAttr< ConstantType> ref() const;
		::Udm::ParentAttr< ::CQML::SwitchedAggregate> SwitchedAggregate_parent() const;
		::Udm::ParentAttr< ::CQML::SwitchedAggregate> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::CompositionParentRole meta_SwitchedAggregate_parent;

	};

	class CQML_Export Inheritable :  public NamedType {
	public:
		Inheritable();
		Inheritable(::Udm::ObjectImpl *impl);
		Inheritable(const Inheritable &master);

#ifdef UDM_RVALUE
		Inheritable(Inheritable &&master);

		static Inheritable Cast(::Udm::Object &&a);
		Inheritable& operator=(Inheritable &&a);

#endif
		static Inheritable Cast(const ::Udm::Object &a);
		static Inheritable Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Inheritable CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Inheritable> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Inheritable, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Inheritable, Pred>(impl); };
		Inheritable CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Inheritable> Derived();
		template <class Pred> ::Udm::DerivedAttr< Inheritable, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Inheritable, Pred>(impl); };
		::Udm::ArchetypeAttr< Inheritable> Archetype() const;
		::Udm::AssocAttr< Inherits> referedbyInherits() const;
		template <class Pred> ::Udm::AssocAttr< Inherits, Pred> referedbyInherits_sorted(const Pred &) const { return ::Udm::AssocAttr< Inherits, Pred>(impl, meta_referedbyInherits); };
		::Udm::ChildrenAttr< ::CQML::Inherits> Inherits_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Inherits, Pred> Inherits_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Inherits, Pred>(impl, meta_Inherits_children); };
		::Udm::ChildrenAttr< ::CQML::ReadonlyAttribute> ReadonlyAttribute_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ReadonlyAttribute, Pred> ReadonlyAttribute_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ReadonlyAttribute, Pred>(impl, meta_ReadonlyAttribute_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Taggable> Taggable_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Taggable, Pred> Taggable_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Taggable, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Inherits> Inherits_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Inherits, Pred> Inherits_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Inherits, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ReadonlyAttribute> ReadonlyAttribute_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ReadonlyAttribute, Pred> ReadonlyAttribute_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ReadonlyAttribute, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Attribute> Attribute_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Attribute, Pred> Attribute_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Attribute, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_referedbyInherits;
		static ::Uml::CompositionChildRole meta_Inherits_children;
		static ::Uml::CompositionChildRole meta_ReadonlyAttribute_children;

	};

	class CQML_Export Boxed :  public NamedType {
	public:
		Boxed();
		Boxed(::Udm::ObjectImpl *impl);
		Boxed(const Boxed &master);

#ifdef UDM_RVALUE
		Boxed(Boxed &&master);

		static Boxed Cast(::Udm::Object &&a);
		Boxed& operator=(Boxed &&a);

#endif
		static Boxed Cast(const ::Udm::Object &a);
		static Boxed Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Boxed CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Boxed> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Boxed, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Boxed, Pred>(impl); };
		Boxed CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Boxed> Derived();
		template <class Pred> ::Udm::DerivedAttr< Boxed, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Boxed, Pred>(impl); };
		::Udm::ArchetypeAttr< Boxed> Archetype() const;
		::Udm::PointerAttr< MemberType> ref() const;
		::Udm::ParentAttr< ::CQML::Prefixable> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_ref;

	};

	class CQML_Export Collection :  public NoInheritable {
	public:
		Collection();
		Collection(::Udm::ObjectImpl *impl);
		Collection(const Collection &master);

#ifdef UDM_RVALUE
		Collection(Collection &&master);

		static Collection Cast(::Udm::Object &&a);
		Collection& operator=(Collection &&a);

#endif
		static Collection Cast(const ::Udm::Object &a);
		static Collection Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Collection CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Collection> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Collection, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Collection, Pred>(impl); };
		Collection CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Collection> Derived();
		template <class Pred> ::Udm::DerivedAttr< Collection, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Collection, Pred>(impl); };
		::Udm::ArchetypeAttr< Collection> Archetype() const;
		::Udm::StringAttr bound() const;
		::Udm::PointerAttr< MemberType> ref() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_bound;
		static ::Uml::AssociationRole meta_ref;

	};

	class CQML_Export Alias :  public NoInheritable {
	public:
		Alias();
		Alias(::Udm::ObjectImpl *impl);
		Alias(const Alias &master);

#ifdef UDM_RVALUE
		Alias(Alias &&master);

		static Alias Cast(::Udm::Object &&a);
		Alias& operator=(Alias &&a);

#endif
		static Alias Cast(const ::Udm::Object &a);
		static Alias Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Alias CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Alias> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Alias, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Alias, Pred>(impl); };
		Alias CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Alias> Derived();
		template <class Pred> ::Udm::DerivedAttr< Alias, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Alias, Pred>(impl); };
		::Udm::ArchetypeAttr< Alias> Archetype() const;
		::Udm::PointerAttr< MemberType> ref() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_ref;

	};

	class CQML_Export Member :  public MgaObject {
	public:
		Member();
		Member(::Udm::ObjectImpl *impl);
		Member(const Member &master);

#ifdef UDM_RVALUE
		Member(Member &&master);

		static Member Cast(::Udm::Object &&a);
		Member& operator=(Member &&a);

#endif
		static Member Cast(const ::Udm::Object &a);
		static Member Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Member CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Member> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Member, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Member, Pred>(impl); };
		Member CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Member> Derived();
		template <class Pred> ::Udm::DerivedAttr< Member, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Member, Pred>(impl); };
		::Udm::ArchetypeAttr< Member> Archetype() const;
		::Udm::AClassAssocAttr< LabelConnection, Label> dstLabelConnection() const;
		template <class Pred> ::Udm::AClassAssocAttr< LabelConnection, Label, Pred> dstLabelConnection_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< LabelConnection, Label, Pred>(impl, meta_dstLabelConnection, meta_dstLabelConnection_rev); };
		::Udm::PointerAttr< MemberType> ref() const;
		::Udm::AClassPointerAttr< MakeMemberPrivate, PrivateFlag> dstMakeMemberPrivate() const;
		::Udm::ParentAttr< ::CQML::Exception> Exception_parent() const;
		::Udm::ParentAttr< ::CQML::Aggregate> Aggregate_parent() const;
		::Udm::ParentAttr< ::CQML::SwitchedAggregate> SwitchedAggregate_parent() const;
		::Udm::ParentAttr< ::CQML::ObjectByValue> ObjectByValue_parent() const;
		::Udm::ParentAttr< ::CQML::Taggable> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_dstLabelConnection;
		static ::Uml::AssociationRole meta_dstLabelConnection_rev;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::AssociationRole meta_dstMakeMemberPrivate;
		static ::Uml::AssociationRole meta_dstMakeMemberPrivate_rev;
		static ::Uml::CompositionParentRole meta_Exception_parent;
		static ::Uml::CompositionParentRole meta_Aggregate_parent;
		static ::Uml::CompositionParentRole meta_SwitchedAggregate_parent;
		static ::Uml::CompositionParentRole meta_ObjectByValue_parent;

	};

	class CQML_Export HasOperations :  public Inheritable {
	public:
		HasOperations();
		HasOperations(::Udm::ObjectImpl *impl);
		HasOperations(const HasOperations &master);

#ifdef UDM_RVALUE
		HasOperations(HasOperations &&master);

		static HasOperations Cast(::Udm::Object &&a);
		HasOperations& operator=(HasOperations &&a);

#endif
		static HasOperations Cast(const ::Udm::Object &a);
		static HasOperations Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		HasOperations CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< HasOperations> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< HasOperations, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< HasOperations, Pred>(impl); };
		HasOperations CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< HasOperations> Derived();
		template <class Pred> ::Udm::DerivedAttr< HasOperations, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< HasOperations, Pred>(impl); };
		::Udm::ArchetypeAttr< HasOperations> Archetype() const;
		::Udm::ChildrenAttr< ::CQML::OnewayOperation> OnewayOperation_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::OnewayOperation, Pred> OnewayOperation_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::OnewayOperation, Pred>(impl, meta_OnewayOperation_children); };
		::Udm::ChildrenAttr< ::CQML::TwowayOperation> TwowayOperation_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::TwowayOperation, Pred> TwowayOperation_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::TwowayOperation, Pred>(impl, meta_TwowayOperation_children); };
		::Udm::ChildrenAttr< ::CQML::Exception> Exception_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Exception, Pred> Exception_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Exception, Pred>(impl, meta_Exception_children); };
		::Udm::ChildrenAttr< ::CQML::Constant> Constant_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Constant, Pred> Constant_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Constant, Pred>(impl, meta_Constant_children); };
		::Udm::ChildrenAttr< ::CQML::NoInheritable> NoInheritable_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::NoInheritable, Pred> NoInheritable_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::NoInheritable, Pred>(impl, meta_NoInheritable_children); };
		::Udm::ChildrenAttr< ::CQML::RequiredRights> RequiredRights_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::RequiredRights, Pred> RequiredRights_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::RequiredRights, Pred>(impl, meta_RequiredRights_children); };
		::Udm::ChildrenAttr< ::CQML::OperationClassificationConn> OperationClassificationConn_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::OperationClassificationConn, Pred> OperationClassificationConn_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::OperationClassificationConn, Pred>(impl, meta_OperationClassificationConn_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Taggable> Taggable_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Taggable, Pred> Taggable_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Taggable, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Exception> Exception_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Exception, Pred> Exception_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Exception, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Enum> Enum_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Enum, Pred> Enum_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Enum, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Constant> Constant_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Constant, Pred> Constant_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Constant, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::MemberType> MemberType_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MemberType, Pred> MemberType_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MemberType, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::NoInheritable> NoInheritable_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::NoInheritable, Pred> NoInheritable_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::NoInheritable, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Aggregate> Aggregate_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Aggregate, Pred> Aggregate_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Aggregate, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::SwitchedAggregate> SwitchedAggregate_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::SwitchedAggregate, Pred> SwitchedAggregate_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::SwitchedAggregate, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::NamedType> NamedType_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::NamedType, Pred> NamedType_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::NamedType, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Collection> Collection_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Collection, Pred> Collection_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Collection, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Alias> Alias_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Alias, Pred> Alias_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Alias, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::OperationBase> OperationBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::OperationBase, Pred> OperationBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::OperationBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::HasExceptions> HasExceptions_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::HasExceptions, Pred> HasExceptions_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::HasExceptions, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::OnewayOperation> OnewayOperation_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::OnewayOperation, Pred> OnewayOperation_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::OnewayOperation, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::TwowayOperation> TwowayOperation_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::TwowayOperation, Pred> TwowayOperation_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::TwowayOperation, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ResourceActionBase> ResourceActionBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ResourceActionBase, Pred> ResourceActionBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ResourceActionBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::RequiredRights> RequiredRights_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::RequiredRights, Pred> RequiredRights_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::RequiredRights, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Rights> Rights_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Rights, Pred> Rights_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Rights, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::OperationClassificationConn> OperationClassificationConn_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::OperationClassificationConn, Pred> OperationClassificationConn_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::OperationClassificationConn, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;

		static ::Uml::Class meta;
		static ::Uml::CompositionChildRole meta_OnewayOperation_children;
		static ::Uml::CompositionChildRole meta_TwowayOperation_children;
		static ::Uml::CompositionChildRole meta_Exception_children;
		static ::Uml::CompositionChildRole meta_Constant_children;
		static ::Uml::CompositionChildRole meta_NoInheritable_children;
		static ::Uml::CompositionChildRole meta_RequiredRights_children;
		static ::Uml::CompositionChildRole meta_OperationClassificationConn_children;

	};

	class CQML_Export Inherits :  public MgaObject {
	public:
		Inherits();
		Inherits(::Udm::ObjectImpl *impl);
		Inherits(const Inherits &master);

#ifdef UDM_RVALUE
		Inherits(Inherits &&master);

		static Inherits Cast(::Udm::Object &&a);
		Inherits& operator=(Inherits &&a);

#endif
		static Inherits Cast(const ::Udm::Object &a);
		static Inherits Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Inherits CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Inherits> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Inherits, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Inherits, Pred>(impl); };
		Inherits CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Inherits> Derived();
		template <class Pred> ::Udm::DerivedAttr< Inherits, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Inherits, Pred>(impl); };
		::Udm::ArchetypeAttr< Inherits> Archetype() const;
		::Udm::PointerAttr< Inheritable> ref() const;
		::Udm::ParentAttr< ::CQML::Inheritable> Inheritable_parent() const;
		::Udm::ParentAttr< ::CQML::Inheritable> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::CompositionParentRole meta_Inheritable_parent;

	};

	class CQML_Export ExternalPortReferenceType :  virtual  public MgaObject {
	public:
		ExternalPortReferenceType();
		ExternalPortReferenceType(::Udm::ObjectImpl *impl);
		ExternalPortReferenceType(const ExternalPortReferenceType &master);

#ifdef UDM_RVALUE
		ExternalPortReferenceType(ExternalPortReferenceType &&master);

		static ExternalPortReferenceType Cast(::Udm::Object &&a);
		ExternalPortReferenceType& operator=(ExternalPortReferenceType &&a);

#endif
		static ExternalPortReferenceType Cast(const ::Udm::Object &a);
		static ExternalPortReferenceType Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ExternalPortReferenceType CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ExternalPortReferenceType> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ExternalPortReferenceType, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ExternalPortReferenceType, Pred>(impl); };
		ExternalPortReferenceType CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ExternalPortReferenceType> Derived();
		template <class Pred> ::Udm::DerivedAttr< ExternalPortReferenceType, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ExternalPortReferenceType, Pred>(impl); };
		::Udm::ArchetypeAttr< ExternalPortReferenceType> Archetype() const;
		::Udm::AssocAttr< ExternalPortReference> referedbyExternalPortReference() const;
		template <class Pred> ::Udm::AssocAttr< ExternalPortReference, Pred> referedbyExternalPortReference_sorted(const Pred &) const { return ::Udm::AssocAttr< ExternalPortReference, Pred>(impl, meta_referedbyExternalPortReference); };
		::Udm::ParentAttr< ::CQML::BenchmarkAnalysis> parent() const;

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_referedbyExternalPortReference;

	};

	class CQML_Export Provideable :  public ExternalPortReferenceType {
	public:
		Provideable();
		Provideable(::Udm::ObjectImpl *impl);
		Provideable(const Provideable &master);

#ifdef UDM_RVALUE
		Provideable(Provideable &&master);

		static Provideable Cast(::Udm::Object &&a);
		Provideable& operator=(Provideable &&a);

#endif
		static Provideable Cast(const ::Udm::Object &a);
		static Provideable Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Provideable CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Provideable> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Provideable, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Provideable, Pred>(impl); };
		Provideable CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Provideable> Derived();
		template <class Pred> ::Udm::DerivedAttr< Provideable, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Provideable, Pred>(impl); };
		::Udm::ArchetypeAttr< Provideable> Archetype() const;
		::Udm::AssocAttr< ProvidedRequestPort> referedbyProvidedRequestPort() const;
		template <class Pred> ::Udm::AssocAttr< ProvidedRequestPort, Pred> referedbyProvidedRequestPort_sorted(const Pred &) const { return ::Udm::AssocAttr< ProvidedRequestPort, Pred>(impl, meta_referedbyProvidedRequestPort); };
		::Udm::AssocAttr< RequiredRequestPort> referedbyRequiredRequestPort() const;
		template <class Pred> ::Udm::AssocAttr< RequiredRequestPort, Pred> referedbyRequiredRequestPort_sorted(const Pred &) const { return ::Udm::AssocAttr< RequiredRequestPort, Pred>(impl, meta_referedbyRequiredRequestPort); };
		::Udm::ParentAttr< ::Udm::Object> parent() const;

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_referedbyProvidedRequestPort;
		static ::Uml::AssociationRole meta_referedbyRequiredRequestPort;

	};

	class CQML_Export GenericObject :  public PredefinedType,  public Provideable {
	public:
		GenericObject();
		GenericObject(::Udm::ObjectImpl *impl);
		GenericObject(const GenericObject &master);

#ifdef UDM_RVALUE
		GenericObject(GenericObject &&master);

		static GenericObject Cast(::Udm::Object &&a);
		GenericObject& operator=(GenericObject &&a);

#endif
		static GenericObject Cast(const ::Udm::Object &a);
		static GenericObject Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		GenericObject CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< GenericObject> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< GenericObject, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< GenericObject, Pred>(impl); };
		GenericObject CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< GenericObject> Derived();
		template <class Pred> ::Udm::DerivedAttr< GenericObject, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< GenericObject, Pred>(impl); };
		::Udm::ArchetypeAttr< GenericObject> Archetype() const;
		::Udm::ParentAttr< ::CQML::PredefinedTypes> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;

	};

	class CQML_Export Object :  public HasOperations,  public Prefixable,  public Provideable {
	public:
		Object();
		Object(::Udm::ObjectImpl *impl);
		Object(const Object &master);

#ifdef UDM_RVALUE
		Object(Object &&master);

		static Object Cast(::Udm::Object &&a);
		Object& operator=(Object &&a);

#endif
		static Object Cast(const ::Udm::Object &a);
		static Object Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Object CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Object> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Object, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Object, Pred>(impl); };
		Object CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Object> Derived();
		template <class Pred> ::Udm::DerivedAttr< Object, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Object, Pred>(impl); };
		::Udm::ArchetypeAttr< Object> Archetype() const;
		::Udm::BooleanAttr abstract() const;
		::Udm::BooleanAttr local() const;
		::Udm::AClassPointerAttr< InterfaceClassificationConn, RequiredRights> dstInterfaceClassificationConn() const;
		::Udm::AssocAttr< Supports> referedbySupports() const;
		template <class Pred> ::Udm::AssocAttr< Supports, Pred> referedbySupports_sorted(const Pred &) const { return ::Udm::AssocAttr< Supports, Pred>(impl, meta_referedbySupports); };
		::Udm::AssocAttr< TargetObjectRef> referedbyTargetObjectRef() const;
		template <class Pred> ::Udm::AssocAttr< TargetObjectRef, Pred> referedbyTargetObjectRef_sorted(const Pred &) const { return ::Udm::AssocAttr< TargetObjectRef, Pred>(impl, meta_referedbyTargetObjectRef); };
		::Udm::ParentAttr< ::CQML::Prefixable> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_abstract;
		static ::Uml::Attribute meta_local;
		static ::Uml::AssociationRole meta_dstInterfaceClassificationConn;
		static ::Uml::AssociationRole meta_dstInterfaceClassificationConn_rev;
		static ::Uml::AssociationRole meta_referedbySupports;
		static ::Uml::AssociationRole meta_referedbyTargetObjectRef;

	};

	class CQML_Export SupportsInterfaces :  virtual  public MgaObject {
	public:
		SupportsInterfaces();
		SupportsInterfaces(::Udm::ObjectImpl *impl);
		SupportsInterfaces(const SupportsInterfaces &master);

#ifdef UDM_RVALUE
		SupportsInterfaces(SupportsInterfaces &&master);

		static SupportsInterfaces Cast(::Udm::Object &&a);
		SupportsInterfaces& operator=(SupportsInterfaces &&a);

#endif
		static SupportsInterfaces Cast(const ::Udm::Object &a);
		static SupportsInterfaces Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		SupportsInterfaces CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< SupportsInterfaces> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< SupportsInterfaces, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< SupportsInterfaces, Pred>(impl); };
		SupportsInterfaces CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< SupportsInterfaces> Derived();
		template <class Pred> ::Udm::DerivedAttr< SupportsInterfaces, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< SupportsInterfaces, Pred>(impl); };
		::Udm::ArchetypeAttr< SupportsInterfaces> Archetype() const;
		::Udm::ChildrenAttr< ::CQML::Supports> Supports_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Supports, Pred> Supports_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Supports, Pred>(impl, meta_Supports_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Supports> Supports_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Supports, Pred> Supports_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Supports, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::InvokePortBase> InvokePortBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::InvokePortBase, Pred> InvokePortBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::InvokePortBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;

		static ::Uml::Class meta;
		static ::Uml::CompositionChildRole meta_Supports_children;

	};

	class CQML_Export ObjectByValue :  public HasOperations,  public Prefixable,  public SupportsInterfaces {
	public:
		ObjectByValue();
		ObjectByValue(::Udm::ObjectImpl *impl);
		ObjectByValue(const ObjectByValue &master);

#ifdef UDM_RVALUE
		ObjectByValue(ObjectByValue &&master);

		static ObjectByValue Cast(::Udm::Object &&a);
		ObjectByValue& operator=(ObjectByValue &&a);

#endif
		static ObjectByValue Cast(const ::Udm::Object &a);
		static ObjectByValue Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ObjectByValue CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ObjectByValue> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ObjectByValue, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ObjectByValue, Pred>(impl); };
		ObjectByValue CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ObjectByValue> Derived();
		template <class Pred> ::Udm::DerivedAttr< ObjectByValue, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ObjectByValue, Pred>(impl); };
		::Udm::ArchetypeAttr< ObjectByValue> Archetype() const;
		::Udm::BooleanAttr abstract() const;
		::Udm::ChildrenAttr< ::CQML::FactoryOperation> FactoryOperation_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::FactoryOperation, Pred> FactoryOperation_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::FactoryOperation, Pred>(impl, meta_FactoryOperation_children); };
		::Udm::ChildrenAttr< ::CQML::PrivateFlag> PrivateFlag_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PrivateFlag, Pred> PrivateFlag_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PrivateFlag, Pred>(impl, meta_PrivateFlag_children); };
		::Udm::ChildrenAttr< ::CQML::MakeMemberPrivate> MakeMemberPrivate_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MakeMemberPrivate, Pred> MakeMemberPrivate_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MakeMemberPrivate, Pred>(impl, meta_MakeMemberPrivate_children); };
		::Udm::ChildrenAttr< ::CQML::Member> Member_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Member, Pred> Member_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Member, Pred>(impl, meta_Member_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Taggable> Taggable_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Taggable, Pred> Taggable_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Taggable, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Member> Member_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Member, Pred> Member_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Member, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::PrivateFlag> PrivateFlag_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PrivateFlag, Pred> PrivateFlag_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PrivateFlag, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::MakeMemberPrivate> MakeMemberPrivate_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MakeMemberPrivate, Pred> MakeMemberPrivate_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MakeMemberPrivate, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::OperationBase> OperationBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::OperationBase, Pred> OperationBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::OperationBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::HasExceptions> HasExceptions_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::HasExceptions, Pred> HasExceptions_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::HasExceptions, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::FactoryOperation> FactoryOperation_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::FactoryOperation, Pred> FactoryOperation_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::FactoryOperation, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_abstract;
		static ::Uml::CompositionChildRole meta_FactoryOperation_children;
		static ::Uml::CompositionChildRole meta_PrivateFlag_children;
		static ::Uml::CompositionChildRole meta_MakeMemberPrivate_children;
		static ::Uml::CompositionChildRole meta_Member_children;

	};

	class CQML_Export Event :  public ExternalPortReferenceType,  public ObjectByValue {
	public:
		Event();
		Event(::Udm::ObjectImpl *impl);
		Event(const Event &master);

#ifdef UDM_RVALUE
		Event(Event &&master);

		static Event Cast(::Udm::Object &&a);
		Event& operator=(Event &&a);

#endif
		static Event Cast(const ::Udm::Object &a);
		static Event Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Event CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Event> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Event, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Event, Pred>(impl); };
		Event CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Event> Derived();
		template <class Pred> ::Udm::DerivedAttr< Event, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Event, Pred>(impl); };
		::Udm::ArchetypeAttr< Event> Archetype() const;
		::Udm::AssocAttr< OutEventPort> referedbyOutEventPort() const;
		template <class Pred> ::Udm::AssocAttr< OutEventPort, Pred> referedbyOutEventPort_sorted(const Pred &) const { return ::Udm::AssocAttr< OutEventPort, Pred>(impl, meta_referedbyOutEventPort); };
		::Udm::AssocAttr< InEventPort> referedbyInEventPort() const;
		template <class Pred> ::Udm::AssocAttr< InEventPort, Pred> referedbyInEventPort_sorted(const Pred &) const { return ::Udm::AssocAttr< InEventPort, Pred>(impl, meta_referedbyInEventPort); };
		::Udm::AssocAttr< EventRef> referedbyEventRef() const;
		template <class Pred> ::Udm::AssocAttr< EventRef, Pred> referedbyEventRef_sorted(const Pred &) const { return ::Udm::AssocAttr< EventRef, Pred>(impl, meta_referedbyEventRef); };
		::Udm::ParentAttr< ::CQML::BenchmarkAnalysis> BenchmarkAnalysis_parent() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_referedbyOutEventPort;
		static ::Uml::AssociationRole meta_referedbyInEventPort;
		static ::Uml::AssociationRole meta_referedbyEventRef;
		static ::Uml::CompositionParentRole meta_BenchmarkAnalysis_parent;

	};

	class CQML_Export ValueObject :  public ObjectByValue {
	public:
		ValueObject();
		ValueObject(::Udm::ObjectImpl *impl);
		ValueObject(const ValueObject &master);

#ifdef UDM_RVALUE
		ValueObject(ValueObject &&master);

		static ValueObject Cast(::Udm::Object &&a);
		ValueObject& operator=(ValueObject &&a);

#endif
		static ValueObject Cast(const ::Udm::Object &a);
		static ValueObject Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ValueObject CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ValueObject> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ValueObject, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ValueObject, Pred>(impl); };
		ValueObject CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ValueObject> Derived();
		template <class Pred> ::Udm::DerivedAttr< ValueObject, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ValueObject, Pred>(impl); };
		::Udm::ArchetypeAttr< ValueObject> Archetype() const;
		::Udm::AssocAttr< LookupKey> referedbyLookupKey() const;
		template <class Pred> ::Udm::AssocAttr< LookupKey, Pred> referedbyLookupKey_sorted(const Pred &) const { return ::Udm::AssocAttr< LookupKey, Pred>(impl, meta_referedbyLookupKey); };
		::Udm::ParentAttr< ::CQML::Prefixable> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_referedbyLookupKey;

	};

	class CQML_Export ComponentFactory :  public HasOperations,  public SupportsInterfaces {
	public:
		ComponentFactory();
		ComponentFactory(::Udm::ObjectImpl *impl);
		ComponentFactory(const ComponentFactory &master);

#ifdef UDM_RVALUE
		ComponentFactory(ComponentFactory &&master);

		static ComponentFactory Cast(::Udm::Object &&a);
		ComponentFactory& operator=(ComponentFactory &&a);

#endif
		static ComponentFactory Cast(const ::Udm::Object &a);
		static ComponentFactory Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ComponentFactory CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ComponentFactory> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ComponentFactory, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ComponentFactory, Pred>(impl); };
		ComponentFactory CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ComponentFactory> Derived();
		template <class Pred> ::Udm::DerivedAttr< ComponentFactory, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ComponentFactory, Pred>(impl); };
		::Udm::ArchetypeAttr< ComponentFactory> Archetype() const;
		::Udm::AClassPointerAttr< ManagesComponent, Manageable> dstManagesComponent() const;
		::Udm::AssocAttr< ComponentFactoryInstance> referedbyComponentFactoryInstance() const;
		template <class Pred> ::Udm::AssocAttr< ComponentFactoryInstance, Pred> referedbyComponentFactoryInstance_sorted(const Pred &) const { return ::Udm::AssocAttr< ComponentFactoryInstance, Pred>(impl, meta_referedbyComponentFactoryInstance); };
		::Udm::ChildrenAttr< ::CQML::FactoryOperation> FactoryOperation_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::FactoryOperation, Pred> FactoryOperation_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::FactoryOperation, Pred>(impl, meta_FactoryOperation_children); };
		::Udm::ChildAttr< ::CQML::LookupKey> LookupKey_child() const;
		::Udm::ChildrenAttr< ::CQML::LookupOperation> LookupOperation_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::LookupOperation, Pred> LookupOperation_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::LookupOperation, Pred>(impl, meta_LookupOperation_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Taggable> Taggable_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Taggable, Pred> Taggable_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Taggable, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::LookupKey> LookupKey_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::LookupKey, Pred> LookupKey_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::LookupKey, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::OperationBase> OperationBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::OperationBase, Pred> OperationBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::OperationBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::HasExceptions> HasExceptions_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::HasExceptions, Pred> HasExceptions_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::HasExceptions, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::FactoryOperation> FactoryOperation_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::FactoryOperation, Pred> FactoryOperation_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::FactoryOperation, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::LookupOperation> LookupOperation_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::LookupOperation, Pred> LookupOperation_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::LookupOperation, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::Prefixable> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_dstManagesComponent;
		static ::Uml::AssociationRole meta_dstManagesComponent_rev;
		static ::Uml::AssociationRole meta_referedbyComponentFactoryInstance;
		static ::Uml::CompositionChildRole meta_FactoryOperation_children;
		static ::Uml::CompositionChildRole meta_LookupKey_child;
		static ::Uml::CompositionChildRole meta_LookupOperation_children;

	};

	class CQML_Export InvokePortBase :  virtual  public MgaObject {
	public:
		InvokePortBase();
		InvokePortBase(::Udm::ObjectImpl *impl);
		InvokePortBase(const InvokePortBase &master);

#ifdef UDM_RVALUE
		InvokePortBase(InvokePortBase &&master);

		static InvokePortBase Cast(::Udm::Object &&a);
		InvokePortBase& operator=(InvokePortBase &&a);

#endif
		static InvokePortBase Cast(const ::Udm::Object &a);
		static InvokePortBase Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		InvokePortBase CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< InvokePortBase> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< InvokePortBase, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< InvokePortBase, Pred>(impl); };
		InvokePortBase CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< InvokePortBase> Derived();
		template <class Pred> ::Udm::DerivedAttr< InvokePortBase, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< InvokePortBase, Pred>(impl); };
		::Udm::ArchetypeAttr< InvokePortBase> Archetype() const;
		::Udm::AClassAssocAttr< invoke, RequiredRequestPort> srcinvoke() const;
		template <class Pred> ::Udm::AClassAssocAttr< invoke, RequiredRequestPort, Pred> srcinvoke_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< invoke, RequiredRequestPort, Pred>(impl, meta_srcinvoke, meta_srcinvoke_rev); };
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_srcinvoke;
		static ::Uml::AssociationRole meta_srcinvoke_rev;

	};

	class CQML_Export Supports :  public InvokePortBase {
	public:
		Supports();
		Supports(::Udm::ObjectImpl *impl);
		Supports(const Supports &master);

#ifdef UDM_RVALUE
		Supports(Supports &&master);

		static Supports Cast(::Udm::Object &&a);
		Supports& operator=(Supports &&a);

#endif
		static Supports Cast(const ::Udm::Object &a);
		static Supports Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Supports CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Supports> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Supports, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Supports, Pred>(impl); };
		Supports CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Supports> Derived();
		template <class Pred> ::Udm::DerivedAttr< Supports, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Supports, Pred>(impl); };
		::Udm::ArchetypeAttr< Supports> Archetype() const;
		::Udm::PointerAttr< ::CQML::Object> ref() const;
		::Udm::AClassAssocAttr< SupportsDelegate, ProvidedRequestPort> dstSupportsDelegate() const;
		template <class Pred> ::Udm::AClassAssocAttr< SupportsDelegate, ProvidedRequestPort, Pred> dstSupportsDelegate_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< SupportsDelegate, ProvidedRequestPort, Pred>(impl, meta_dstSupportsDelegate, meta_dstSupportsDelegate_rev); };
		::Udm::ParentAttr< ::CQML::SupportsInterfaces> SupportsInterfaces_parent() const;
		::Udm::ParentAttr< ::CQML::SupportsInterfaces> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::AssociationRole meta_dstSupportsDelegate;
		static ::Uml::AssociationRole meta_dstSupportsDelegate_rev;
		static ::Uml::CompositionParentRole meta_SupportsInterfaces_parent;

	};

	class CQML_Export ReadonlyAttribute :  public Taggable {
	public:
		ReadonlyAttribute();
		ReadonlyAttribute(::Udm::ObjectImpl *impl);
		ReadonlyAttribute(const ReadonlyAttribute &master);

#ifdef UDM_RVALUE
		ReadonlyAttribute(ReadonlyAttribute &&master);

		static ReadonlyAttribute Cast(::Udm::Object &&a);
		ReadonlyAttribute& operator=(ReadonlyAttribute &&a);

#endif
		static ReadonlyAttribute Cast(const ::Udm::Object &a);
		static ReadonlyAttribute Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ReadonlyAttribute CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ReadonlyAttribute> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ReadonlyAttribute, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ReadonlyAttribute, Pred>(impl); };
		ReadonlyAttribute CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ReadonlyAttribute> Derived();
		template <class Pred> ::Udm::DerivedAttr< ReadonlyAttribute, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ReadonlyAttribute, Pred>(impl); };
		::Udm::ArchetypeAttr< ReadonlyAttribute> Archetype() const;
		::Udm::AClassPointerAttr< AttributeValue, Property> dstAttributeValue() const;
		::Udm::AClassPointerAttr< AttributeDelegate, AttributeMapping> srcAttributeDelegate() const;
		::Udm::AssocAttr< AttributeMapping> referedbyAttributeMapping() const;
		template <class Pred> ::Udm::AssocAttr< AttributeMapping, Pred> referedbyAttributeMapping_sorted(const Pred &) const { return ::Udm::AssocAttr< AttributeMapping, Pred>(impl, meta_referedbyAttributeMapping); };
		::Udm::AssocAttr< AttributeRef> referedbyAttributeRef() const;
		template <class Pred> ::Udm::AssocAttr< AttributeRef, Pred> referedbyAttributeRef_sorted(const Pred &) const { return ::Udm::AssocAttr< AttributeRef, Pred>(impl, meta_referedbyAttributeRef); };
		::Udm::ChildrenAttr< ::CQML::GetException> GetException_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::GetException, Pred> GetException_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::GetException, Pred>(impl, meta_GetException_children); };
		::Udm::ChildAttr< ::CQML::AttributeMember> AttributeMember_child() const;
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::GetException> GetException_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::GetException, Pred> GetException_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::GetException, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::AttributeMember> AttributeMember_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::AttributeMember, Pred> AttributeMember_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::AttributeMember, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::Inheritable> Inheritable_parent() const;
		::Udm::ParentAttr< ::CQML::Component> Component_parent() const;
		::Udm::ParentAttr< ::CQML::NamedType> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_dstAttributeValue;
		static ::Uml::AssociationRole meta_dstAttributeValue_rev;
		static ::Uml::AssociationRole meta_srcAttributeDelegate;
		static ::Uml::AssociationRole meta_srcAttributeDelegate_rev;
		static ::Uml::AssociationRole meta_referedbyAttributeMapping;
		static ::Uml::AssociationRole meta_referedbyAttributeRef;
		static ::Uml::CompositionChildRole meta_GetException_children;
		static ::Uml::CompositionChildRole meta_AttributeMember_child;
		static ::Uml::CompositionParentRole meta_Inheritable_parent;
		static ::Uml::CompositionParentRole meta_Component_parent;

	};

	class CQML_Export Attribute :  public ReadonlyAttribute {
	public:
		Attribute();
		Attribute(::Udm::ObjectImpl *impl);
		Attribute(const Attribute &master);

#ifdef UDM_RVALUE
		Attribute(Attribute &&master);

		static Attribute Cast(::Udm::Object &&a);
		Attribute& operator=(Attribute &&a);

#endif
		static Attribute Cast(const ::Udm::Object &a);
		static Attribute Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Attribute CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Attribute> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Attribute, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Attribute, Pred>(impl); };
		Attribute CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Attribute> Derived();
		template <class Pred> ::Udm::DerivedAttr< Attribute, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Attribute, Pred>(impl); };
		::Udm::ArchetypeAttr< Attribute> Archetype() const;
		::Udm::ChildrenAttr< ::CQML::SetException> SetException_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::SetException, Pred> SetException_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::SetException, Pred>(impl, meta_SetException_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::SetException> SetException_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::SetException, Pred> SetException_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::SetException, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::NamedType> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionChildRole meta_SetException_children;

	};

	class CQML_Export LookupKey :  public MgaObject {
	public:
		LookupKey();
		LookupKey(::Udm::ObjectImpl *impl);
		LookupKey(const LookupKey &master);

#ifdef UDM_RVALUE
		LookupKey(LookupKey &&master);

		static LookupKey Cast(::Udm::Object &&a);
		LookupKey& operator=(LookupKey &&a);

#endif
		static LookupKey Cast(const ::Udm::Object &a);
		static LookupKey Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		LookupKey CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< LookupKey> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< LookupKey, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< LookupKey, Pred>(impl); };
		LookupKey CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< LookupKey> Derived();
		template <class Pred> ::Udm::DerivedAttr< LookupKey, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< LookupKey, Pred>(impl); };
		::Udm::ArchetypeAttr< LookupKey> Archetype() const;
		::Udm::PointerAttr< ValueObject> ref() const;
		::Udm::ParentAttr< ::CQML::ComponentFactory> ComponentFactory_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentFactory> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::CompositionParentRole meta_ComponentFactory_parent;

	};

	class CQML_Export SetException :  public MgaObject {
	public:
		SetException();
		SetException(::Udm::ObjectImpl *impl);
		SetException(const SetException &master);

#ifdef UDM_RVALUE
		SetException(SetException &&master);

		static SetException Cast(::Udm::Object &&a);
		SetException& operator=(SetException &&a);

#endif
		static SetException Cast(const ::Udm::Object &a);
		static SetException Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		SetException CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< SetException> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< SetException, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< SetException, Pred>(impl); };
		SetException CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< SetException> Derived();
		template <class Pred> ::Udm::DerivedAttr< SetException, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< SetException, Pred>(impl); };
		::Udm::ArchetypeAttr< SetException> Archetype() const;
		::Udm::PointerAttr< Exception> ref() const;
		::Udm::ParentAttr< ::CQML::Attribute> Attribute_parent() const;
		::Udm::ParentAttr< ::CQML::Attribute> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::CompositionParentRole meta_Attribute_parent;

	};

	class CQML_Export GetException :  public MgaObject {
	public:
		GetException();
		GetException(::Udm::ObjectImpl *impl);
		GetException(const GetException &master);

#ifdef UDM_RVALUE
		GetException(GetException &&master);

		static GetException Cast(::Udm::Object &&a);
		GetException& operator=(GetException &&a);

#endif
		static GetException Cast(const ::Udm::Object &a);
		static GetException Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		GetException CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< GetException> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< GetException, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< GetException, Pred>(impl); };
		GetException CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< GetException> Derived();
		template <class Pred> ::Udm::DerivedAttr< GetException, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< GetException, Pred>(impl); };
		::Udm::ArchetypeAttr< GetException> Archetype() const;
		::Udm::PointerAttr< Exception> ref() const;
		::Udm::ParentAttr< ::CQML::ReadonlyAttribute> ReadonlyAttribute_parent() const;
		::Udm::ParentAttr< ::CQML::ReadonlyAttribute> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::CompositionParentRole meta_ReadonlyAttribute_parent;

	};

	class CQML_Export PrivateFlag :  public MgaObject {
	public:
		PrivateFlag();
		PrivateFlag(::Udm::ObjectImpl *impl);
		PrivateFlag(const PrivateFlag &master);

#ifdef UDM_RVALUE
		PrivateFlag(PrivateFlag &&master);

		static PrivateFlag Cast(::Udm::Object &&a);
		PrivateFlag& operator=(PrivateFlag &&a);

#endif
		static PrivateFlag Cast(const ::Udm::Object &a);
		static PrivateFlag Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		PrivateFlag CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< PrivateFlag> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< PrivateFlag, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< PrivateFlag, Pred>(impl); };
		PrivateFlag CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< PrivateFlag> Derived();
		template <class Pred> ::Udm::DerivedAttr< PrivateFlag, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< PrivateFlag, Pred>(impl); };
		::Udm::ArchetypeAttr< PrivateFlag> Archetype() const;
		::Udm::AClassPointerAttr< MakeMemberPrivate, Member> srcMakeMemberPrivate() const;
		::Udm::ParentAttr< ::CQML::ObjectByValue> ObjectByValue_parent() const;
		::Udm::ParentAttr< ::CQML::ObjectByValue> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_srcMakeMemberPrivate;
		static ::Uml::AssociationRole meta_srcMakeMemberPrivate_rev;
		static ::Uml::CompositionParentRole meta_ObjectByValue_parent;

	};

	class CQML_Export MakeMemberPrivate :  public MgaObject {
	public:
		MakeMemberPrivate();
		MakeMemberPrivate(::Udm::ObjectImpl *impl);
		MakeMemberPrivate(const MakeMemberPrivate &master);

#ifdef UDM_RVALUE
		MakeMemberPrivate(MakeMemberPrivate &&master);

		static MakeMemberPrivate Cast(::Udm::Object &&a);
		MakeMemberPrivate& operator=(MakeMemberPrivate &&a);

#endif
		static MakeMemberPrivate Cast(const ::Udm::Object &a);
		static MakeMemberPrivate Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		MakeMemberPrivate CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< MakeMemberPrivate> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< MakeMemberPrivate, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< MakeMemberPrivate, Pred>(impl); };
		MakeMemberPrivate CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< MakeMemberPrivate> Derived();
		template <class Pred> ::Udm::DerivedAttr< MakeMemberPrivate, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< MakeMemberPrivate, Pred>(impl); };
		::Udm::ArchetypeAttr< MakeMemberPrivate> Archetype() const;
		::Udm::ParentAttr< ::CQML::ObjectByValue> ObjectByValue_parent() const;
		::Udm::ParentAttr< ::CQML::ObjectByValue> parent() const;
		::Udm::AssocEndAttr< ::CQML::Member> srcMakeMemberPrivate_end() const;
		::Udm::AssocEndAttr< ::CQML::PrivateFlag> dstMakeMemberPrivate_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ObjectByValue_parent;
		static ::Uml::AssociationRole meta_srcMakeMemberPrivate_end_;
		static ::Uml::AssociationRole meta_dstMakeMemberPrivate_end_;

	};

	class CQML_Export AttributeMember :  public MgaObject {
	public:
		AttributeMember();
		AttributeMember(::Udm::ObjectImpl *impl);
		AttributeMember(const AttributeMember &master);

#ifdef UDM_RVALUE
		AttributeMember(AttributeMember &&master);

		static AttributeMember Cast(::Udm::Object &&a);
		AttributeMember& operator=(AttributeMember &&a);

#endif
		static AttributeMember Cast(const ::Udm::Object &a);
		static AttributeMember Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		AttributeMember CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< AttributeMember> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< AttributeMember, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< AttributeMember, Pred>(impl); };
		AttributeMember CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< AttributeMember> Derived();
		template <class Pred> ::Udm::DerivedAttr< AttributeMember, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< AttributeMember, Pred>(impl); };
		::Udm::ArchetypeAttr< AttributeMember> Archetype() const;
		::Udm::PointerAttr< MemberType> ref() const;
		::Udm::ParentAttr< ::CQML::ReadonlyAttribute> ReadonlyAttribute_parent() const;
		::Udm::ParentAttr< ::CQML::ReadonlyAttribute> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::CompositionParentRole meta_ReadonlyAttribute_parent;

	};

	class CQML_Export OperationBase :  public Taggable {
	public:
		OperationBase();
		OperationBase(::Udm::ObjectImpl *impl);
		OperationBase(const OperationBase &master);

#ifdef UDM_RVALUE
		OperationBase(OperationBase &&master);

		static OperationBase Cast(::Udm::Object &&a);
		OperationBase& operator=(OperationBase &&a);

#endif
		static OperationBase Cast(const ::Udm::Object &a);
		static OperationBase Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		OperationBase CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< OperationBase> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< OperationBase, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< OperationBase, Pred>(impl); };
		OperationBase CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< OperationBase> Derived();
		template <class Pred> ::Udm::DerivedAttr< OperationBase, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< OperationBase, Pred>(impl); };
		::Udm::ArchetypeAttr< OperationBase> Archetype() const;
		::Udm::AClassPointerAttr< OperationClassificationConn, RequiredRights> dstOperationClassificationConn() const;
		::Udm::AssocAttr< OperationRef> referedbyOperationRef() const;
		template <class Pred> ::Udm::AssocAttr< OperationRef, Pred> referedbyOperationRef_sorted(const Pred &) const { return ::Udm::AssocAttr< OperationRef, Pred>(impl, meta_referedbyOperationRef); };
		::Udm::ChildrenAttr< ::CQML::InParameter> InParameter_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::InParameter, Pred> InParameter_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::InParameter, Pred>(impl, meta_InParameter_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::InParameter> InParameter_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::InParameter, Pred> InParameter_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::InParameter, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ParameterType> ParameterType_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ParameterType, Pred> ParameterType_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ParameterType, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::BenchmarkAnalysis> BenchmarkAnalysis_parent() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_dstOperationClassificationConn;
		static ::Uml::AssociationRole meta_dstOperationClassificationConn_rev;
		static ::Uml::AssociationRole meta_referedbyOperationRef;
		static ::Uml::CompositionChildRole meta_InParameter_children;
		static ::Uml::CompositionParentRole meta_BenchmarkAnalysis_parent;

	};

	class CQML_Export HasExceptions :  public OperationBase {
	public:
		HasExceptions();
		HasExceptions(::Udm::ObjectImpl *impl);
		HasExceptions(const HasExceptions &master);

#ifdef UDM_RVALUE
		HasExceptions(HasExceptions &&master);

		static HasExceptions Cast(::Udm::Object &&a);
		HasExceptions& operator=(HasExceptions &&a);

#endif
		static HasExceptions Cast(const ::Udm::Object &a);
		static HasExceptions Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		HasExceptions CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< HasExceptions> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< HasExceptions, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< HasExceptions, Pred>(impl); };
		HasExceptions CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< HasExceptions> Derived();
		template <class Pred> ::Udm::DerivedAttr< HasExceptions, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< HasExceptions, Pred>(impl); };
		::Udm::ArchetypeAttr< HasExceptions> Archetype() const;
		::Udm::ChildrenAttr< ::CQML::ExceptionRef> ExceptionRef_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ExceptionRef, Pred> ExceptionRef_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ExceptionRef, Pred>(impl, meta_ExceptionRef_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ExceptionRef> ExceptionRef_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ExceptionRef, Pred> ExceptionRef_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ExceptionRef, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;

		static ::Uml::Class meta;
		static ::Uml::CompositionChildRole meta_ExceptionRef_children;

	};

	class CQML_Export OnewayOperation :  public OperationBase {
	public:
		OnewayOperation();
		OnewayOperation(::Udm::ObjectImpl *impl);
		OnewayOperation(const OnewayOperation &master);

#ifdef UDM_RVALUE
		OnewayOperation(OnewayOperation &&master);

		static OnewayOperation Cast(::Udm::Object &&a);
		OnewayOperation& operator=(OnewayOperation &&a);

#endif
		static OnewayOperation Cast(const ::Udm::Object &a);
		static OnewayOperation Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		OnewayOperation CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< OnewayOperation> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< OnewayOperation, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< OnewayOperation, Pred>(impl); };
		OnewayOperation CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< OnewayOperation> Derived();
		template <class Pred> ::Udm::DerivedAttr< OnewayOperation, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< OnewayOperation, Pred>(impl); };
		::Udm::ArchetypeAttr< OnewayOperation> Archetype() const;
		::Udm::ParentAttr< ::CQML::HasOperations> HasOperations_parent() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_HasOperations_parent;

	};

	class CQML_Export FactoryOperation :  public HasExceptions {
	public:
		FactoryOperation();
		FactoryOperation(::Udm::ObjectImpl *impl);
		FactoryOperation(const FactoryOperation &master);

#ifdef UDM_RVALUE
		FactoryOperation(FactoryOperation &&master);

		static FactoryOperation Cast(::Udm::Object &&a);
		FactoryOperation& operator=(FactoryOperation &&a);

#endif
		static FactoryOperation Cast(const ::Udm::Object &a);
		static FactoryOperation Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		FactoryOperation CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< FactoryOperation> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< FactoryOperation, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< FactoryOperation, Pred>(impl); };
		FactoryOperation CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< FactoryOperation> Derived();
		template <class Pred> ::Udm::DerivedAttr< FactoryOperation, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< FactoryOperation, Pred>(impl); };
		::Udm::ArchetypeAttr< FactoryOperation> Archetype() const;
		::Udm::ParentAttr< ::CQML::ObjectByValue> ObjectByValue_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentFactory> ComponentFactory_parent() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ObjectByValue_parent;
		static ::Uml::CompositionParentRole meta_ComponentFactory_parent;

	};

	class CQML_Export LookupOperation :  public HasExceptions {
	public:
		LookupOperation();
		LookupOperation(::Udm::ObjectImpl *impl);
		LookupOperation(const LookupOperation &master);

#ifdef UDM_RVALUE
		LookupOperation(LookupOperation &&master);

		static LookupOperation Cast(::Udm::Object &&a);
		LookupOperation& operator=(LookupOperation &&a);

#endif
		static LookupOperation Cast(const ::Udm::Object &a);
		static LookupOperation Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		LookupOperation CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< LookupOperation> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< LookupOperation, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< LookupOperation, Pred>(impl); };
		LookupOperation CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< LookupOperation> Derived();
		template <class Pred> ::Udm::DerivedAttr< LookupOperation, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< LookupOperation, Pred>(impl); };
		::Udm::ArchetypeAttr< LookupOperation> Archetype() const;
		::Udm::ParentAttr< ::CQML::ComponentFactory> ComponentFactory_parent() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ComponentFactory_parent;

	};

	class CQML_Export TwowayOperation :  public HasExceptions {
	public:
		TwowayOperation();
		TwowayOperation(::Udm::ObjectImpl *impl);
		TwowayOperation(const TwowayOperation &master);

#ifdef UDM_RVALUE
		TwowayOperation(TwowayOperation &&master);

		static TwowayOperation Cast(::Udm::Object &&a);
		TwowayOperation& operator=(TwowayOperation &&a);

#endif
		static TwowayOperation Cast(const ::Udm::Object &a);
		static TwowayOperation Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		TwowayOperation CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< TwowayOperation> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< TwowayOperation, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< TwowayOperation, Pred>(impl); };
		TwowayOperation CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< TwowayOperation> Derived();
		template <class Pred> ::Udm::DerivedAttr< TwowayOperation, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< TwowayOperation, Pred>(impl); };
		::Udm::ArchetypeAttr< TwowayOperation> Archetype() const;
		::Udm::ChildrenAttr< ::CQML::InoutParameter> InoutParameter_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::InoutParameter, Pred> InoutParameter_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::InoutParameter, Pred>(impl, meta_InoutParameter_children); };
		::Udm::ChildrenAttr< ::CQML::OutParameter> OutParameter_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::OutParameter, Pred> OutParameter_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::OutParameter, Pred>(impl, meta_OutParameter_children); };
		::Udm::ChildAttr< ::CQML::ReturnType> ReturnType_child() const;
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ParameterType> ParameterType_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ParameterType, Pred> ParameterType_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ParameterType, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::OutParameter> OutParameter_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::OutParameter, Pred> OutParameter_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::OutParameter, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ReturnType> ReturnType_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ReturnType, Pred> ReturnType_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ReturnType, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::InoutParameter> InoutParameter_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::InoutParameter, Pred> InoutParameter_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::InoutParameter, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::HasOperations> HasOperations_parent() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionChildRole meta_InoutParameter_children;
		static ::Uml::CompositionChildRole meta_OutParameter_children;
		static ::Uml::CompositionChildRole meta_ReturnType_child;
		static ::Uml::CompositionParentRole meta_HasOperations_parent;

	};

	class CQML_Export ParameterType :  public MgaObject {
	public:
		ParameterType();
		ParameterType(::Udm::ObjectImpl *impl);
		ParameterType(const ParameterType &master);

#ifdef UDM_RVALUE
		ParameterType(ParameterType &&master);

		static ParameterType Cast(::Udm::Object &&a);
		ParameterType& operator=(ParameterType &&a);

#endif
		static ParameterType Cast(const ::Udm::Object &a);
		static ParameterType Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ParameterType CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ParameterType> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ParameterType, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ParameterType, Pred>(impl); };
		ParameterType CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ParameterType> Derived();
		template <class Pred> ::Udm::DerivedAttr< ParameterType, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ParameterType, Pred>(impl); };
		::Udm::ArchetypeAttr< ParameterType> Archetype() const;
		::Udm::PointerAttr< MemberType> ref() const;
		::Udm::ParentAttr< ::CQML::OperationBase> parent() const;

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_ref;

	};

	class CQML_Export InParameter :  public ParameterType {
	public:
		InParameter();
		InParameter(::Udm::ObjectImpl *impl);
		InParameter(const InParameter &master);

#ifdef UDM_RVALUE
		InParameter(InParameter &&master);

		static InParameter Cast(::Udm::Object &&a);
		InParameter& operator=(InParameter &&a);

#endif
		static InParameter Cast(const ::Udm::Object &a);
		static InParameter Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		InParameter CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< InParameter> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< InParameter, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< InParameter, Pred>(impl); };
		InParameter CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< InParameter> Derived();
		template <class Pred> ::Udm::DerivedAttr< InParameter, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< InParameter, Pred>(impl); };
		::Udm::ArchetypeAttr< InParameter> Archetype() const;
		::Udm::PointerAttr< MemberType> ref() const;
		::Udm::ParentAttr< ::CQML::OperationBase> OperationBase_parent() const;
		::Udm::ParentAttr< ::CQML::OperationBase> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::CompositionParentRole meta_OperationBase_parent;

	};

	class CQML_Export OutParameter :  public ParameterType {
	public:
		OutParameter();
		OutParameter(::Udm::ObjectImpl *impl);
		OutParameter(const OutParameter &master);

#ifdef UDM_RVALUE
		OutParameter(OutParameter &&master);

		static OutParameter Cast(::Udm::Object &&a);
		OutParameter& operator=(OutParameter &&a);

#endif
		static OutParameter Cast(const ::Udm::Object &a);
		static OutParameter Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		OutParameter CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< OutParameter> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< OutParameter, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< OutParameter, Pred>(impl); };
		OutParameter CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< OutParameter> Derived();
		template <class Pred> ::Udm::DerivedAttr< OutParameter, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< OutParameter, Pred>(impl); };
		::Udm::ArchetypeAttr< OutParameter> Archetype() const;
		::Udm::PointerAttr< MemberType> ref() const;
		::Udm::ParentAttr< ::CQML::TwowayOperation> TwowayOperation_parent() const;
		::Udm::ParentAttr< ::CQML::TwowayOperation> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::CompositionParentRole meta_TwowayOperation_parent;

	};

	class CQML_Export ReturnType :  public MgaObject {
	public:
		ReturnType();
		ReturnType(::Udm::ObjectImpl *impl);
		ReturnType(const ReturnType &master);

#ifdef UDM_RVALUE
		ReturnType(ReturnType &&master);

		static ReturnType Cast(::Udm::Object &&a);
		ReturnType& operator=(ReturnType &&a);

#endif
		static ReturnType Cast(const ::Udm::Object &a);
		static ReturnType Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ReturnType CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ReturnType> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ReturnType, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ReturnType, Pred>(impl); };
		ReturnType CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ReturnType> Derived();
		template <class Pred> ::Udm::DerivedAttr< ReturnType, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ReturnType, Pred>(impl); };
		::Udm::ArchetypeAttr< ReturnType> Archetype() const;
		::Udm::PointerAttr< MemberType> ref() const;
		::Udm::ParentAttr< ::CQML::TwowayOperation> TwowayOperation_parent() const;
		::Udm::ParentAttr< ::CQML::TwowayOperation> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::CompositionParentRole meta_TwowayOperation_parent;

	};

	class CQML_Export InoutParameter :  public ParameterType {
	public:
		InoutParameter();
		InoutParameter(::Udm::ObjectImpl *impl);
		InoutParameter(const InoutParameter &master);

#ifdef UDM_RVALUE
		InoutParameter(InoutParameter &&master);

		static InoutParameter Cast(::Udm::Object &&a);
		InoutParameter& operator=(InoutParameter &&a);

#endif
		static InoutParameter Cast(const ::Udm::Object &a);
		static InoutParameter Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		InoutParameter CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< InoutParameter> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< InoutParameter, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< InoutParameter, Pred>(impl); };
		InoutParameter CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< InoutParameter> Derived();
		template <class Pred> ::Udm::DerivedAttr< InoutParameter, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< InoutParameter, Pred>(impl); };
		::Udm::ArchetypeAttr< InoutParameter> Archetype() const;
		::Udm::PointerAttr< MemberType> ref() const;
		::Udm::ParentAttr< ::CQML::TwowayOperation> TwowayOperation_parent() const;
		::Udm::ParentAttr< ::CQML::TwowayOperation> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::CompositionParentRole meta_TwowayOperation_parent;

	};

	class CQML_Export Manageable :  virtual  public MgaObject {
	public:
		Manageable();
		Manageable(::Udm::ObjectImpl *impl);
		Manageable(const Manageable &master);

#ifdef UDM_RVALUE
		Manageable(Manageable &&master);

		static Manageable Cast(::Udm::Object &&a);
		Manageable& operator=(Manageable &&a);

#endif
		static Manageable Cast(const ::Udm::Object &a);
		static Manageable Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Manageable CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Manageable> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Manageable, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Manageable, Pred>(impl); };
		Manageable CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Manageable> Derived();
		template <class Pred> ::Udm::DerivedAttr< Manageable, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Manageable, Pred>(impl); };
		::Udm::ArchetypeAttr< Manageable> Archetype() const;
		::Udm::AClassAssocAttr< ManagesComponent, ComponentFactory> srcManagesComponent() const;
		template <class Pred> ::Udm::AClassAssocAttr< ManagesComponent, ComponentFactory, Pred> srcManagesComponent_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< ManagesComponent, ComponentFactory, Pred>(impl, meta_srcManagesComponent, meta_srcManagesComponent_rev); };
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_srcManagesComponent;
		static ::Uml::AssociationRole meta_srcManagesComponent_rev;

	};

	class CQML_Export ComponentBase :  virtual  public MgaObject {
	public:
		ComponentBase();
		ComponentBase(::Udm::ObjectImpl *impl);
		ComponentBase(const ComponentBase &master);

#ifdef UDM_RVALUE
		ComponentBase(ComponentBase &&master);

		static ComponentBase Cast(::Udm::Object &&a);
		ComponentBase& operator=(ComponentBase &&a);

#endif
		static ComponentBase Cast(const ::Udm::Object &a);
		static ComponentBase Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ComponentBase CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ComponentBase> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ComponentBase, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ComponentBase, Pred>(impl); };
		ComponentBase CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ComponentBase> Derived();
		template <class Pred> ::Udm::DerivedAttr< ComponentBase, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ComponentBase, Pred>(impl); };
		::Udm::ArchetypeAttr< ComponentBase> Archetype() const;
		::Udm::AClassAssocAttr< ComponentQoS, ComponentQoSCharacteristic> dstComponentQoS() const;
		template <class Pred> ::Udm::AClassAssocAttr< ComponentQoS, ComponentQoSCharacteristic, Pred> dstComponentQoS_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< ComponentQoS, ComponentQoSCharacteristic, Pred>(impl, meta_dstComponentQoS, meta_dstComponentQoS_rev); };
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_dstComponentQoS;
		static ::Uml::AssociationRole meta_dstComponentQoS_rev;

	};

	class CQML_Export SingleOutputBase :  virtual  public MgaObject {
	public:
		SingleOutputBase();
		SingleOutputBase(::Udm::ObjectImpl *impl);
		SingleOutputBase(const SingleOutputBase &master);

#ifdef UDM_RVALUE
		SingleOutputBase(SingleOutputBase &&master);

		static SingleOutputBase Cast(::Udm::Object &&a);
		SingleOutputBase& operator=(SingleOutputBase &&a);

#endif
		static SingleOutputBase Cast(const ::Udm::Object &a);
		static SingleOutputBase Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		SingleOutputBase CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< SingleOutputBase> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< SingleOutputBase, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< SingleOutputBase, Pred>(impl); };
		SingleOutputBase CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< SingleOutputBase> Derived();
		template <class Pred> ::Udm::DerivedAttr< SingleOutputBase, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< SingleOutputBase, Pred>(impl); };
		::Udm::ArchetypeAttr< SingleOutputBase> Archetype() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> parent() const;

		static ::Uml::Class meta;

	};

	class CQML_Export MultiInputBase :  virtual  public MgaObject {
	public:
		MultiInputBase();
		MultiInputBase(::Udm::ObjectImpl *impl);
		MultiInputBase(const MultiInputBase &master);

#ifdef UDM_RVALUE
		MultiInputBase(MultiInputBase &&master);

		static MultiInputBase Cast(::Udm::Object &&a);
		MultiInputBase& operator=(MultiInputBase &&a);

#endif
		static MultiInputBase Cast(const ::Udm::Object &a);
		static MultiInputBase Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		MultiInputBase CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< MultiInputBase> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< MultiInputBase, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< MultiInputBase, Pred>(impl); };
		MultiInputBase CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< MultiInputBase> Derived();
		template <class Pred> ::Udm::DerivedAttr< MultiInputBase, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< MultiInputBase, Pred>(impl); };
		::Udm::ArchetypeAttr< MultiInputBase> Archetype() const;
		::Udm::AClassAssocAttr< MultiInput, MultiInputAction> dstMultiInput() const;
		template <class Pred> ::Udm::AClassAssocAttr< MultiInput, MultiInputAction, Pred> dstMultiInput_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< MultiInput, MultiInputAction, Pred>(impl, meta_dstMultiInput, meta_dstMultiInput_rev); };
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_dstMultiInput;
		static ::Uml::AssociationRole meta_dstMultiInput_rev;

	};

	class CQML_Export MultiOutputBase :  virtual  public MgaObject {
	public:
		MultiOutputBase();
		MultiOutputBase(::Udm::ObjectImpl *impl);
		MultiOutputBase(const MultiOutputBase &master);

#ifdef UDM_RVALUE
		MultiOutputBase(MultiOutputBase &&master);

		static MultiOutputBase Cast(::Udm::Object &&a);
		MultiOutputBase& operator=(MultiOutputBase &&a);

#endif
		static MultiOutputBase Cast(const ::Udm::Object &a);
		static MultiOutputBase Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		MultiOutputBase CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< MultiOutputBase> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< MultiOutputBase, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< MultiOutputBase, Pred>(impl); };
		MultiOutputBase CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< MultiOutputBase> Derived();
		template <class Pred> ::Udm::DerivedAttr< MultiOutputBase, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< MultiOutputBase, Pred>(impl); };
		::Udm::ArchetypeAttr< MultiOutputBase> Archetype() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> parent() const;

		static ::Uml::Class meta;

	};

	class CQML_Export SingleInputBase :  virtual  public MgaObject {
	public:
		SingleInputBase();
		SingleInputBase(::Udm::ObjectImpl *impl);
		SingleInputBase(const SingleInputBase &master);

#ifdef UDM_RVALUE
		SingleInputBase(SingleInputBase &&master);

		static SingleInputBase Cast(::Udm::Object &&a);
		SingleInputBase& operator=(SingleInputBase &&a);

#endif
		static SingleInputBase Cast(const ::Udm::Object &a);
		static SingleInputBase Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		SingleInputBase CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< SingleInputBase> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< SingleInputBase, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< SingleInputBase, Pred>(impl); };
		SingleInputBase CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< SingleInputBase> Derived();
		template <class Pred> ::Udm::DerivedAttr< SingleInputBase, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< SingleInputBase, Pred>(impl); };
		::Udm::ArchetypeAttr< SingleInputBase> Archetype() const;
		::Udm::AClassPointerAttr< Input, InputAction> dstInput() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_dstInput;
		static ::Uml::AssociationRole meta_dstInput_rev;

	};

	class CQML_Export QueryInputBase :  virtual  public MgaObject {
	public:
		QueryInputBase();
		QueryInputBase(::Udm::ObjectImpl *impl);
		QueryInputBase(const QueryInputBase &master);

#ifdef UDM_RVALUE
		QueryInputBase(QueryInputBase &&master);

		static QueryInputBase Cast(::Udm::Object &&a);
		QueryInputBase& operator=(QueryInputBase &&a);

#endif
		static QueryInputBase Cast(const ::Udm::Object &a);
		static QueryInputBase Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		QueryInputBase CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< QueryInputBase> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< QueryInputBase, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< QueryInputBase, Pred>(impl); };
		QueryInputBase CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< QueryInputBase> Derived();
		template <class Pred> ::Udm::DerivedAttr< QueryInputBase, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< QueryInputBase, Pred>(impl); };
		::Udm::ArchetypeAttr< QueryInputBase> Archetype() const;
		::Udm::AClassPointerAttr< QueryInput, QueryInputAction> dstQueryInput() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> parent() const;

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_dstQueryInput;
		static ::Uml::AssociationRole meta_dstQueryInput_rev;

	};

	class CQML_Export CommonPortAttrs :  virtual  public MgaObject {
	public:
		CommonPortAttrs();
		CommonPortAttrs(::Udm::ObjectImpl *impl);
		CommonPortAttrs(const CommonPortAttrs &master);

#ifdef UDM_RVALUE
		CommonPortAttrs(CommonPortAttrs &&master);

		static CommonPortAttrs Cast(::Udm::Object &&a);
		CommonPortAttrs& operator=(CommonPortAttrs &&a);

#endif
		static CommonPortAttrs Cast(const ::Udm::Object &a);
		static CommonPortAttrs Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		CommonPortAttrs CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< CommonPortAttrs> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< CommonPortAttrs, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< CommonPortAttrs, Pred>(impl); };
		CommonPortAttrs CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< CommonPortAttrs> Derived();
		template <class Pred> ::Udm::DerivedAttr< CommonPortAttrs, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< CommonPortAttrs, Pred>(impl); };
		::Udm::ArchetypeAttr< CommonPortAttrs> Archetype() const;
		::Udm::BooleanAttr exclusiveUser() const;
		::Udm::BooleanAttr exclusiveProvider() const;
		::Udm::BooleanAttr optional() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_exclusiveUser;
		static ::Uml::Attribute meta_exclusiveProvider;
		static ::Uml::Attribute meta_optional;

	};

	class CQML_Export GraphVertex :  virtual  public MgaObject {
	public:
		GraphVertex();
		GraphVertex(::Udm::ObjectImpl *impl);
		GraphVertex(const GraphVertex &master);

#ifdef UDM_RVALUE
		GraphVertex(GraphVertex &&master);

		static GraphVertex Cast(::Udm::Object &&a);
		GraphVertex& operator=(GraphVertex &&a);

#endif
		static GraphVertex Cast(const ::Udm::Object &a);
		static GraphVertex Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		GraphVertex CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< GraphVertex> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< GraphVertex, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< GraphVertex, Pred>(impl); };
		GraphVertex CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< GraphVertex> Derived();
		template <class Pred> ::Udm::DerivedAttr< GraphVertex, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< GraphVertex, Pred>(impl); };
		::Udm::ArchetypeAttr< GraphVertex> Archetype() const;
		::Udm::AClassPointerAttr< DstEdge, Edge> dstDstEdge() const;
		::Udm::AClassPointerAttr< SrcEdge, Edge> srcSrcEdge() const;
		::Udm::ParentAttr< ::CQML::Path> Path_parent() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_dstDstEdge;
		static ::Uml::AssociationRole meta_dstDstEdge_rev;
		static ::Uml::AssociationRole meta_srcSrcEdge;
		static ::Uml::AssociationRole meta_srcSrcEdge_rev;
		static ::Uml::CompositionParentRole meta_Path_parent;

	};

	class CQML_Export Port :  public CommonPortAttrs,  public GraphVertex,  public Taggable {
	public:
		Port();
		Port(::Udm::ObjectImpl *impl);
		Port(const Port &master);

#ifdef UDM_RVALUE
		Port(Port &&master);

		static Port Cast(::Udm::Object &&a);
		Port& operator=(Port &&a);

#endif
		static Port Cast(const ::Udm::Object &a);
		static Port Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Port CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Port> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Port, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Port, Pred>(impl); };
		Port CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Port> Derived();
		template <class Pred> ::Udm::DerivedAttr< Port, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Port, Pred>(impl); };
		::Udm::ArchetypeAttr< Port> Archetype() const;
		::Udm::AClassAssocAttr< PortQoS, PortQoSCharacteristic> dstPortQoS() const;
		template <class Pred> ::Udm::AClassAssocAttr< PortQoS, PortQoSCharacteristic, Pred> dstPortQoS_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< PortQoS, PortQoSCharacteristic, Pred>(impl, meta_dstPortQoS, meta_dstPortQoS_rev); };
		::Udm::AClassAssocAttr< ExternalDelegate, ExternalPortReference> srcExternalDelegate() const;
		template <class Pred> ::Udm::AClassAssocAttr< ExternalDelegate, ExternalPortReference, Pred> srcExternalDelegate_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< ExternalDelegate, ExternalPortReference, Pred>(impl, meta_srcExternalDelegate, meta_srcExternalDelegate_rev); };
		::Udm::ParentAttr< ::CQML::Component> Component_parent() const;
		::Udm::ParentAttr< ::CQML::ConnectedComponent> ConnectedComponent_parent() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_dstPortQoS;
		static ::Uml::AssociationRole meta_dstPortQoS_rev;
		static ::Uml::AssociationRole meta_srcExternalDelegate;
		static ::Uml::AssociationRole meta_srcExternalDelegate_rev;
		static ::Uml::CompositionParentRole meta_Component_parent;
		static ::Uml::CompositionParentRole meta_ConnectedComponent_parent;

	};

	class CQML_Export OutEventPort :  public Port,  public SingleOutputBase {
	public:
		OutEventPort();
		OutEventPort(::Udm::ObjectImpl *impl);
		OutEventPort(const OutEventPort &master);

#ifdef UDM_RVALUE
		OutEventPort(OutEventPort &&master);

		static OutEventPort Cast(::Udm::Object &&a);
		OutEventPort& operator=(OutEventPort &&a);

#endif
		static OutEventPort Cast(const ::Udm::Object &a);
		static OutEventPort Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		OutEventPort CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< OutEventPort> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< OutEventPort, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< OutEventPort, Pred>(impl); };
		OutEventPort CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< OutEventPort> Derived();
		template <class Pred> ::Udm::DerivedAttr< OutEventPort, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< OutEventPort, Pred>(impl); };
		::Udm::ArchetypeAttr< OutEventPort> Archetype() const;
		::Udm::BooleanAttr single_destination() const;
		::Udm::StringAttr out_event_port_type() const;
		::Udm::PointerAttr< Event> ref() const;
		::Udm::AClassAssocAttr< EventSourcePublish, QoSConnector> dstEventSourcePublish() const;
		template <class Pred> ::Udm::AClassAssocAttr< EventSourcePublish, QoSConnector, Pred> dstEventSourcePublish_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< EventSourcePublish, QoSConnector, Pred>(impl, meta_dstEventSourcePublish, meta_dstEventSourcePublish_rev); };
		::Udm::AClassAssocAttr< publish, PublishConnector> dstpublish() const;
		template <class Pred> ::Udm::AClassAssocAttr< publish, PublishConnector, Pred> dstpublish_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< publish, PublishConnector, Pred>(impl, meta_dstpublish, meta_dstpublish_rev); };
		::Udm::AClassPointerAttr< emit, InEventPort> dstemit() const;
		::Udm::AClassAssocAttr< EventSourceDelegate, OutEventPort> dstEventSourceDelegate() const;
		template <class Pred> ::Udm::AClassAssocAttr< EventSourceDelegate, OutEventPort, Pred> dstEventSourceDelegate_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< EventSourceDelegate, OutEventPort, Pred>(impl, meta_dstEventSourceDelegate, meta_dstEventSourceDelegate_rev); };
		::Udm::AClassAssocAttr< EventSourceDelegate, OutEventPort> srcEventSourceDelegate() const;
		template <class Pred> ::Udm::AClassAssocAttr< EventSourceDelegate, OutEventPort, Pred> srcEventSourceDelegate_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< EventSourceDelegate, OutEventPort, Pred>(impl, meta_srcEventSourceDelegate, meta_srcEventSourceDelegate_rev); };
		::Udm::AssocAttr< EventSourcePort> referedbyEventSourcePort() const;
		template <class Pred> ::Udm::AssocAttr< EventSourcePort, Pred> referedbyEventSourcePort_sorted(const Pred &) const { return ::Udm::AssocAttr< EventSourcePort, Pred>(impl, meta_referedbyEventSourcePort); };
		::Udm::ParentAttr< ::CQML::ComponentAssembly> ComponentAssembly_parent() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_single_destination;
		static ::Uml::Attribute meta_out_event_port_type;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::AssociationRole meta_dstEventSourcePublish;
		static ::Uml::AssociationRole meta_dstEventSourcePublish_rev;
		static ::Uml::AssociationRole meta_dstpublish;
		static ::Uml::AssociationRole meta_dstpublish_rev;
		static ::Uml::AssociationRole meta_dstemit;
		static ::Uml::AssociationRole meta_dstemit_rev;
		static ::Uml::AssociationRole meta_dstEventSourceDelegate;
		static ::Uml::AssociationRole meta_dstEventSourceDelegate_rev;
		static ::Uml::AssociationRole meta_srcEventSourceDelegate;
		static ::Uml::AssociationRole meta_srcEventSourceDelegate_rev;
		static ::Uml::AssociationRole meta_referedbyEventSourcePort;
		static ::Uml::CompositionParentRole meta_ComponentAssembly_parent;

	};

	class CQML_Export ProvidedRequestPort :  public InvokePortBase,  public MultiInputBase,  public Port {
	public:
		ProvidedRequestPort();
		ProvidedRequestPort(::Udm::ObjectImpl *impl);
		ProvidedRequestPort(const ProvidedRequestPort &master);

#ifdef UDM_RVALUE
		ProvidedRequestPort(ProvidedRequestPort &&master);

		static ProvidedRequestPort Cast(::Udm::Object &&a);
		ProvidedRequestPort& operator=(ProvidedRequestPort &&a);

#endif
		static ProvidedRequestPort Cast(const ::Udm::Object &a);
		static ProvidedRequestPort Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ProvidedRequestPort CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ProvidedRequestPort> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ProvidedRequestPort, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ProvidedRequestPort, Pred>(impl); };
		ProvidedRequestPort CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ProvidedRequestPort> Derived();
		template <class Pred> ::Udm::DerivedAttr< ProvidedRequestPort, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ProvidedRequestPort, Pred>(impl); };
		::Udm::ArchetypeAttr< ProvidedRequestPort> Archetype() const;
		::Udm::AClassAssocAttr< SupportsDelegate, Supports> srcSupportsDelegate() const;
		template <class Pred> ::Udm::AClassAssocAttr< SupportsDelegate, Supports, Pred> srcSupportsDelegate_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< SupportsDelegate, Supports, Pred>(impl, meta_srcSupportsDelegate, meta_srcSupportsDelegate_rev); };
		::Udm::PointerAttr< Provideable> ref() const;
		::Udm::AClassAssocAttr< FacetDelegate, ProvidedRequestPort> dstFacetDelegate() const;
		template <class Pred> ::Udm::AClassAssocAttr< FacetDelegate, ProvidedRequestPort, Pred> dstFacetDelegate_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< FacetDelegate, ProvidedRequestPort, Pred>(impl, meta_dstFacetDelegate, meta_dstFacetDelegate_rev); };
		::Udm::AClassAssocAttr< FacetDelegate, ProvidedRequestPort> srcFacetDelegate() const;
		template <class Pred> ::Udm::AClassAssocAttr< FacetDelegate, ProvidedRequestPort, Pred> srcFacetDelegate_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< FacetDelegate, ProvidedRequestPort, Pred>(impl, meta_srcFacetDelegate, meta_srcFacetDelegate_rev); };
		::Udm::AClassAssocAttr< FacetInvoke, QoSConnector> srcFacetInvoke() const;
		template <class Pred> ::Udm::AClassAssocAttr< FacetInvoke, QoSConnector, Pred> srcFacetInvoke_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< FacetInvoke, QoSConnector, Pred>(impl, meta_srcFacetInvoke, meta_srcFacetInvoke_rev); };
		::Udm::ParentAttr< ::CQML::ComponentAssembly> ComponentAssembly_parent() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_srcSupportsDelegate;
		static ::Uml::AssociationRole meta_srcSupportsDelegate_rev;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::AssociationRole meta_dstFacetDelegate;
		static ::Uml::AssociationRole meta_dstFacetDelegate_rev;
		static ::Uml::AssociationRole meta_srcFacetDelegate;
		static ::Uml::AssociationRole meta_srcFacetDelegate_rev;
		static ::Uml::AssociationRole meta_srcFacetInvoke;
		static ::Uml::AssociationRole meta_srcFacetInvoke_rev;
		static ::Uml::CompositionParentRole meta_ComponentAssembly_parent;

	};

	class CQML_Export RequiredRequestPort :  public MultiOutputBase,  public Port {
	public:
		RequiredRequestPort();
		RequiredRequestPort(::Udm::ObjectImpl *impl);
		RequiredRequestPort(const RequiredRequestPort &master);

#ifdef UDM_RVALUE
		RequiredRequestPort(RequiredRequestPort &&master);

		static RequiredRequestPort Cast(::Udm::Object &&a);
		RequiredRequestPort& operator=(RequiredRequestPort &&a);

#endif
		static RequiredRequestPort Cast(const ::Udm::Object &a);
		static RequiredRequestPort Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		RequiredRequestPort CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< RequiredRequestPort> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< RequiredRequestPort, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< RequiredRequestPort, Pred>(impl); };
		RequiredRequestPort CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< RequiredRequestPort> Derived();
		template <class Pred> ::Udm::DerivedAttr< RequiredRequestPort, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< RequiredRequestPort, Pred>(impl); };
		::Udm::ArchetypeAttr< RequiredRequestPort> Archetype() const;
		::Udm::BooleanAttr multiple_connections() const;
		::Udm::PointerAttr< Provideable> ref() const;
		::Udm::AClassAssocAttr< RecepInvoke, QoSConnector> dstRecepInvoke() const;
		template <class Pred> ::Udm::AClassAssocAttr< RecepInvoke, QoSConnector, Pred> dstRecepInvoke_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< RecepInvoke, QoSConnector, Pred>(impl, meta_dstRecepInvoke, meta_dstRecepInvoke_rev); };
		::Udm::AClassAssocAttr< invoke, InvokePortBase> dstinvoke() const;
		template <class Pred> ::Udm::AClassAssocAttr< invoke, InvokePortBase, Pred> dstinvoke_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< invoke, InvokePortBase, Pred>(impl, meta_dstinvoke, meta_dstinvoke_rev); };
		::Udm::AClassAssocAttr< ReceptacleDelegate, RequiredRequestPort> dstReceptacleDelegate() const;
		template <class Pred> ::Udm::AClassAssocAttr< ReceptacleDelegate, RequiredRequestPort, Pred> dstReceptacleDelegate_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< ReceptacleDelegate, RequiredRequestPort, Pred>(impl, meta_dstReceptacleDelegate, meta_dstReceptacleDelegate_rev); };
		::Udm::AClassAssocAttr< ReceptacleDelegate, RequiredRequestPort> srcReceptacleDelegate() const;
		template <class Pred> ::Udm::AClassAssocAttr< ReceptacleDelegate, RequiredRequestPort, Pred> srcReceptacleDelegate_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< ReceptacleDelegate, RequiredRequestPort, Pred>(impl, meta_srcReceptacleDelegate, meta_srcReceptacleDelegate_rev); };
		::Udm::ParentAttr< ::CQML::ComponentAssembly> ComponentAssembly_parent() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_multiple_connections;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::AssociationRole meta_dstRecepInvoke;
		static ::Uml::AssociationRole meta_dstRecepInvoke_rev;
		static ::Uml::AssociationRole meta_dstinvoke;
		static ::Uml::AssociationRole meta_dstinvoke_rev;
		static ::Uml::AssociationRole meta_dstReceptacleDelegate;
		static ::Uml::AssociationRole meta_dstReceptacleDelegate_rev;
		static ::Uml::AssociationRole meta_srcReceptacleDelegate;
		static ::Uml::AssociationRole meta_srcReceptacleDelegate_rev;
		static ::Uml::CompositionParentRole meta_ComponentAssembly_parent;

	};

	class CQML_Export InEventPort :  public Port,  public QueryInputBase,  public SingleInputBase {
	public:
		InEventPort();
		InEventPort(::Udm::ObjectImpl *impl);
		InEventPort(const InEventPort &master);

#ifdef UDM_RVALUE
		InEventPort(InEventPort &&master);

		static InEventPort Cast(::Udm::Object &&a);
		InEventPort& operator=(InEventPort &&a);

#endif
		static InEventPort Cast(const ::Udm::Object &a);
		static InEventPort Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		InEventPort CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< InEventPort> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< InEventPort, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< InEventPort, Pred>(impl); };
		InEventPort CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< InEventPort> Derived();
		template <class Pred> ::Udm::DerivedAttr< InEventPort, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< InEventPort, Pred>(impl); };
		::Udm::ArchetypeAttr< InEventPort> Archetype() const;
		::Udm::AClassAssocAttr< emit, OutEventPort> srcemit() const;
		template <class Pred> ::Udm::AClassAssocAttr< emit, OutEventPort, Pred> srcemit_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< emit, OutEventPort, Pred>(impl, meta_srcemit, meta_srcemit_rev); };
		::Udm::PointerAttr< Event> ref() const;
		::Udm::AClassAssocAttr< EventSinkDelegate, InEventPort> dstEventSinkDelegate() const;
		template <class Pred> ::Udm::AClassAssocAttr< EventSinkDelegate, InEventPort, Pred> dstEventSinkDelegate_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< EventSinkDelegate, InEventPort, Pred>(impl, meta_dstEventSinkDelegate, meta_dstEventSinkDelegate_rev); };
		::Udm::AClassAssocAttr< EventSinkDelegate, InEventPort> srcEventSinkDelegate() const;
		template <class Pred> ::Udm::AClassAssocAttr< EventSinkDelegate, InEventPort, Pred> srcEventSinkDelegate_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< EventSinkDelegate, InEventPort, Pred>(impl, meta_srcEventSinkDelegate, meta_srcEventSinkDelegate_rev); };
		::Udm::AClassAssocAttr< deliverTo, PublishConnector> srcdeliverTo() const;
		template <class Pred> ::Udm::AClassAssocAttr< deliverTo, PublishConnector, Pred> srcdeliverTo_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< deliverTo, PublishConnector, Pred>(impl, meta_srcdeliverTo, meta_srcdeliverTo_rev); };
		::Udm::AClassAssocAttr< EventSinkPublish, QoSConnector> srcEventSinkPublish() const;
		template <class Pred> ::Udm::AClassAssocAttr< EventSinkPublish, QoSConnector, Pred> srcEventSinkPublish_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< EventSinkPublish, QoSConnector, Pred>(impl, meta_srcEventSinkPublish, meta_srcEventSinkPublish_rev); };
		::Udm::ParentAttr< ::CQML::ComponentAssembly> ComponentAssembly_parent() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_srcemit;
		static ::Uml::AssociationRole meta_srcemit_rev;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::AssociationRole meta_dstEventSinkDelegate;
		static ::Uml::AssociationRole meta_dstEventSinkDelegate_rev;
		static ::Uml::AssociationRole meta_srcEventSinkDelegate;
		static ::Uml::AssociationRole meta_srcEventSinkDelegate_rev;
		static ::Uml::AssociationRole meta_srcdeliverTo;
		static ::Uml::AssociationRole meta_srcdeliverTo_rev;
		static ::Uml::AssociationRole meta_srcEventSinkPublish;
		static ::Uml::AssociationRole meta_srcEventSinkPublish_rev;
		static ::Uml::CompositionParentRole meta_ComponentAssembly_parent;

	};

	class CQML_Export CollocationGroupMember :  virtual  public MgaObject {
	public:
		CollocationGroupMember();
		CollocationGroupMember(::Udm::ObjectImpl *impl);
		CollocationGroupMember(const CollocationGroupMember &master);

#ifdef UDM_RVALUE
		CollocationGroupMember(CollocationGroupMember &&master);

		static CollocationGroupMember Cast(::Udm::Object &&a);
		CollocationGroupMember& operator=(CollocationGroupMember &&a);

#endif
		static CollocationGroupMember Cast(const ::Udm::Object &a);
		static CollocationGroupMember Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		CollocationGroupMember CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< CollocationGroupMember> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< CollocationGroupMember, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< CollocationGroupMember, Pred>(impl); };
		CollocationGroupMember CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< CollocationGroupMember> Derived();
		template <class Pred> ::Udm::DerivedAttr< CollocationGroupMember, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< CollocationGroupMember, Pred>(impl); };
		::Udm::ArchetypeAttr< CollocationGroupMember> Archetype() const;
		::Udm::AssocAttr< CollocationGroup> setCollocationGroup() const;
		template <class Pred> ::Udm::AssocAttr< CollocationGroup, Pred> setCollocationGroup_sorted(const Pred &) const { return ::Udm::AssocAttr< CollocationGroup, Pred>(impl, meta_setCollocationGroup); };
		::Udm::ParentAttr< ::CQML::DeploymentPlan> DeploymentPlan_parent() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_setCollocationGroup;
		static ::Uml::CompositionParentRole meta_DeploymentPlan_parent;

	};

	class CQML_Export FTMonitorable :  virtual  public MgaObject {
	public:
		FTMonitorable();
		FTMonitorable(::Udm::ObjectImpl *impl);
		FTMonitorable(const FTMonitorable &master);

#ifdef UDM_RVALUE
		FTMonitorable(FTMonitorable &&master);

		static FTMonitorable Cast(::Udm::Object &&a);
		FTMonitorable& operator=(FTMonitorable &&a);

#endif
		static FTMonitorable Cast(const ::Udm::Object &a);
		static FTMonitorable Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		FTMonitorable CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< FTMonitorable> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< FTMonitorable, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< FTMonitorable, Pred>(impl); };
		FTMonitorable CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< FTMonitorable> Derived();
		template <class Pred> ::Udm::DerivedAttr< FTMonitorable, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< FTMonitorable, Pred>(impl); };
		::Udm::ArchetypeAttr< FTMonitorable> Archetype() const;
		::Udm::AClassPointerAttr< MonitorableGroupAssociation, RepicaGroupConfiguration> dstMonitorable2RepG() const;
		::Udm::ParentAttr< ::CQML::FailOverUnit> FailOverUnit_parent() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_dstMonitorable2RepG;
		static ::Uml::AssociationRole meta_dstMonitorable2RepG_rev;
		static ::Uml::CompositionParentRole meta_FailOverUnit_parent;

	};

	class CQML_Export ComponentRef :  public CollocationGroupMember,  public ComponentBase,  public FTMonitorable,  public Manageable {
	public:
		ComponentRef();
		ComponentRef(::Udm::ObjectImpl *impl);
		ComponentRef(const ComponentRef &master);

#ifdef UDM_RVALUE
		ComponentRef(ComponentRef &&master);

		static ComponentRef Cast(::Udm::Object &&a);
		ComponentRef& operator=(ComponentRef &&a);

#endif
		static ComponentRef Cast(const ::Udm::Object &a);
		static ComponentRef Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ComponentRef CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ComponentRef> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ComponentRef, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ComponentRef, Pred>(impl); };
		ComponentRef CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ComponentRef> Derived();
		template <class Pred> ::Udm::DerivedAttr< ComponentRef, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ComponentRef, Pred>(impl); };
		::Udm::ArchetypeAttr< ComponentRef> Archetype() const;
		::Udm::PointerAttr< Component> ref() const;
		::Udm::AClassAssocAttr< ComponentProperty, ComponentPropertyDescription> dstComponentProperty() const;
		template <class Pred> ::Udm::AClassAssocAttr< ComponentProperty, ComponentPropertyDescription, Pred> dstComponentProperty_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< ComponentProperty, ComponentPropertyDescription, Pred>(impl, meta_dstComponentProperty, meta_dstComponentProperty_rev); };
		::Udm::AClassAssocAttr< ComponentConfigProperty, Property> dstComponentConfigProperty() const;
		template <class Pred> ::Udm::AClassAssocAttr< ComponentConfigProperty, Property, Pred> dstComponentConfigProperty_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< ComponentConfigProperty, Property, Pred>(impl, meta_dstComponentConfigProperty, meta_dstComponentConfigProperty_rev); };
		::Udm::AClassAssocAttr< ComponentInfoProperty, Property> dstComponentInfoProperty() const;
		template <class Pred> ::Udm::AClassAssocAttr< ComponentInfoProperty, Property, Pred> dstComponentInfoProperty_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< ComponentInfoProperty, Property, Pred>(impl, meta_dstComponentInfoProperty, meta_dstComponentInfoProperty_rev); };
		::Udm::AClassPointerAttr< PackageInterface, ComponentPackage> srcPackageInterface() const;
		::Udm::AClassPointerAttr< Implements, ComponentImplementation> srcImplements() const;
		::Udm::AssocAttr< SharedComponentReference> referedbySharedComponentReference() const;
		template <class Pred> ::Udm::AssocAttr< SharedComponentReference, Pred> referedbySharedComponentReference_sorted(const Pred &) const { return ::Udm::AssocAttr< SharedComponentReference, Pred>(impl, meta_referedbySharedComponentReference); };
		::Udm::AClassPointerAttr< Deploys, ComponentFactoryRef> srcDeploys() const;
		::Udm::AClassAssocAttr< OnComponentConn, ComponentRule> srcOnComponentConn() const;
		template <class Pred> ::Udm::AClassAssocAttr< OnComponentConn, ComponentRule, Pred> srcOnComponentConn_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< OnComponentConn, ComponentRule, Pred>(impl, meta_srcOnComponentConn, meta_srcOnComponentConn_rev); };
		::Udm::ParentAttr< ::CQML::Package> Package_parent() const;
		::Udm::ParentAttr< ::CQML::File> File_parent() const;
		::Udm::ParentAttr< ::CQML::PackageContainer> PackageContainer_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentContainer> ComponentContainer_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentImplementationContainer> ComponentImplementationContainer_parent() const;
		::Udm::ParentAttr< ::CQML::Path> Path_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> ComponentAssembly_parent() const;
		::Udm::ParentAttr< ::CQML::Policy> Policy_parent() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::AssociationRole meta_dstComponentProperty;
		static ::Uml::AssociationRole meta_dstComponentProperty_rev;
		static ::Uml::AssociationRole meta_dstComponentConfigProperty;
		static ::Uml::AssociationRole meta_dstComponentConfigProperty_rev;
		static ::Uml::AssociationRole meta_dstComponentInfoProperty;
		static ::Uml::AssociationRole meta_dstComponentInfoProperty_rev;
		static ::Uml::AssociationRole meta_srcPackageInterface;
		static ::Uml::AssociationRole meta_srcPackageInterface_rev;
		static ::Uml::AssociationRole meta_srcImplements;
		static ::Uml::AssociationRole meta_srcImplements_rev;
		static ::Uml::AssociationRole meta_referedbySharedComponentReference;
		static ::Uml::AssociationRole meta_srcDeploys;
		static ::Uml::AssociationRole meta_srcDeploys_rev;
		static ::Uml::AssociationRole meta_srcOnComponentConn;
		static ::Uml::AssociationRole meta_srcOnComponentConn_rev;
		static ::Uml::CompositionParentRole meta_Package_parent;
		static ::Uml::CompositionParentRole meta_File_parent;
		static ::Uml::CompositionParentRole meta_PackageContainer_parent;
		static ::Uml::CompositionParentRole meta_ComponentContainer_parent;
		static ::Uml::CompositionParentRole meta_ComponentImplementationContainer_parent;
		static ::Uml::CompositionParentRole meta_Path_parent;
		static ::Uml::CompositionParentRole meta_ComponentAssembly_parent;
		static ::Uml::CompositionParentRole meta_Policy_parent;

	};

	class CQML_Export ManagesComponent :  public MgaObject {
	public:
		ManagesComponent();
		ManagesComponent(::Udm::ObjectImpl *impl);
		ManagesComponent(const ManagesComponent &master);

#ifdef UDM_RVALUE
		ManagesComponent(ManagesComponent &&master);

		static ManagesComponent Cast(::Udm::Object &&a);
		ManagesComponent& operator=(ManagesComponent &&a);

#endif
		static ManagesComponent Cast(const ::Udm::Object &a);
		static ManagesComponent Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ManagesComponent CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ManagesComponent> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ManagesComponent, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ManagesComponent, Pred>(impl); };
		ManagesComponent CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ManagesComponent> Derived();
		template <class Pred> ::Udm::DerivedAttr< ManagesComponent, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ManagesComponent, Pred>(impl); };
		::Udm::ArchetypeAttr< ManagesComponent> Archetype() const;
		::Udm::ParentAttr< ::CQML::Package> Package_parent() const;
		::Udm::ParentAttr< ::CQML::File> File_parent() const;
		::Udm::ParentAttr< ::CQML::Prefixable> parent() const;
		::Udm::AssocEndAttr< ::CQML::ComponentFactory> srcManagesComponent_end() const;
		::Udm::AssocEndAttr< ::CQML::Manageable> dstManagesComponent_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_Package_parent;
		static ::Uml::CompositionParentRole meta_File_parent;
		static ::Uml::AssociationRole meta_srcManagesComponent_end_;
		static ::Uml::AssociationRole meta_dstManagesComponent_end_;

	};

	class CQML_Export Domain :  public MgaObject {
	public:
		Domain();
		Domain(::Udm::ObjectImpl *impl);
		Domain(const Domain &master);

#ifdef UDM_RVALUE
		Domain(Domain &&master);

		static Domain Cast(::Udm::Object &&a);
		Domain& operator=(Domain &&a);

#endif
		static Domain Cast(const ::Udm::Object &a);
		static Domain Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Domain CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Domain> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Domain, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Domain, Pred>(impl); };
		Domain CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Domain> Derived();
		template <class Pred> ::Udm::DerivedAttr< Domain, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Domain, Pred>(impl); };
		::Udm::ArchetypeAttr< Domain> Archetype() const;
		::Udm::StringAttr UUID() const;
		::Udm::StringAttr label() const;
		::Udm::ChildrenAttr< ::CQML::InterconnectConnection> InterconnectConnection_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::InterconnectConnection, Pred> InterconnectConnection_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::InterconnectConnection, Pred>(impl, meta_InterconnectConnection_children); };
		::Udm::ChildrenAttr< ::CQML::Interconnect> Interconnect_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Interconnect, Pred> Interconnect_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Interconnect, Pred>(impl, meta_Interconnect_children); };
		::Udm::ChildrenAttr< ::CQML::Node> Node_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Node, Pred> Node_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Node, Pred>(impl, meta_Node_children); };
		::Udm::ChildrenAttr< ::CQML::BridgeConnection> BridgeConnection_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::BridgeConnection, Pred> BridgeConnection_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::BridgeConnection, Pred>(impl, meta_BridgeConnection_children); };
		::Udm::ChildrenAttr< ::CQML::Bridge> Bridge_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Bridge, Pred> Bridge_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Bridge, Pred>(impl, meta_Bridge_children); };
		::Udm::ChildrenAttr< ::CQML::SharedResource> SharedResource_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::SharedResource, Pred> SharedResource_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::SharedResource, Pred>(impl, meta_SharedResource_children); };
		::Udm::ChildrenAttr< ::CQML::Shares> Shares_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Shares, Pred> Shares_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Shares, Pred>(impl, meta_Shares_children); };
		::Udm::ChildrenAttr< ::CQML::Property> Property_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Property, Pred> Property_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Property, Pred>(impl, meta_Property_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Shares> Shares_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Shares, Pred> Shares_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Shares, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::InterconnectConnection> InterconnectConnection_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::InterconnectConnection, Pred> InterconnectConnection_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::InterconnectConnection, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::BridgeConnection> BridgeConnection_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::BridgeConnection, Pred> BridgeConnection_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::BridgeConnection, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Property> Property_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Property, Pred> Property_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Property, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::RequirementSatisfier> RequirementSatisfier_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::RequirementSatisfier, Pred> RequirementSatisfier_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::RequirementSatisfier, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::SharedResource> SharedResource_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::SharedResource, Pred> SharedResource_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::SharedResource, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Bridge> Bridge_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Bridge, Pred> Bridge_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Bridge, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Interconnect> Interconnect_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Interconnect, Pred> Interconnect_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Interconnect, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Node> Node_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Node, Pred> Node_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Node, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::Targets> Targets_parent() const;
		::Udm::ParentAttr< ::CQML::Targets> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_UUID;
		static ::Uml::Attribute meta_label;
		static ::Uml::CompositionChildRole meta_InterconnectConnection_children;
		static ::Uml::CompositionChildRole meta_Interconnect_children;
		static ::Uml::CompositionChildRole meta_Node_children;
		static ::Uml::CompositionChildRole meta_BridgeConnection_children;
		static ::Uml::CompositionChildRole meta_Bridge_children;
		static ::Uml::CompositionChildRole meta_SharedResource_children;
		static ::Uml::CompositionChildRole meta_Shares_children;
		static ::Uml::CompositionChildRole meta_Property_children;
		static ::Uml::CompositionParentRole meta_Targets_parent;

	};

	class CQML_Export Shares :  public MgaObject {
	public:
		Shares();
		Shares(::Udm::ObjectImpl *impl);
		Shares(const Shares &master);

#ifdef UDM_RVALUE
		Shares(Shares &&master);

		static Shares Cast(::Udm::Object &&a);
		Shares& operator=(Shares &&a);

#endif
		static Shares Cast(const ::Udm::Object &a);
		static Shares Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Shares CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Shares> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Shares, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Shares, Pred>(impl); };
		Shares CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Shares> Derived();
		template <class Pred> ::Udm::DerivedAttr< Shares, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Shares, Pred>(impl); };
		::Udm::ArchetypeAttr< Shares> Archetype() const;
		::Udm::ParentAttr< ::CQML::Domain> Domain_parent() const;
		::Udm::ParentAttr< ::CQML::Domain> parent() const;
		::Udm::AssocEndAttr< ::CQML::Node> srcShares_end() const;
		::Udm::AssocEndAttr< ::CQML::SharedResource> dstShares_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_Domain_parent;
		static ::Uml::AssociationRole meta_srcShares_end_;
		static ::Uml::AssociationRole meta_dstShares_end_;

	};

	class CQML_Export InterconnectConnection :  public MgaObject {
	public:
		InterconnectConnection();
		InterconnectConnection(::Udm::ObjectImpl *impl);
		InterconnectConnection(const InterconnectConnection &master);

#ifdef UDM_RVALUE
		InterconnectConnection(InterconnectConnection &&master);

		static InterconnectConnection Cast(::Udm::Object &&a);
		InterconnectConnection& operator=(InterconnectConnection &&a);

#endif
		static InterconnectConnection Cast(const ::Udm::Object &a);
		static InterconnectConnection Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		InterconnectConnection CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< InterconnectConnection> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< InterconnectConnection, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< InterconnectConnection, Pred>(impl); };
		InterconnectConnection CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< InterconnectConnection> Derived();
		template <class Pred> ::Udm::DerivedAttr< InterconnectConnection, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< InterconnectConnection, Pred>(impl); };
		::Udm::ArchetypeAttr< InterconnectConnection> Archetype() const;
		::Udm::ParentAttr< ::CQML::Domain> Domain_parent() const;
		::Udm::ParentAttr< ::CQML::Domain> parent() const;
		::Udm::AssocEndAttr< ::CQML::Node> srcInterconnectConnection_end() const;
		::Udm::AssocEndAttr< ::CQML::Interconnect> dstInterconnectConnection_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_Domain_parent;
		static ::Uml::AssociationRole meta_srcInterconnectConnection_end_;
		static ::Uml::AssociationRole meta_dstInterconnectConnection_end_;

	};

	class CQML_Export BridgeConnection :  public MgaObject {
	public:
		BridgeConnection();
		BridgeConnection(::Udm::ObjectImpl *impl);
		BridgeConnection(const BridgeConnection &master);

#ifdef UDM_RVALUE
		BridgeConnection(BridgeConnection &&master);

		static BridgeConnection Cast(::Udm::Object &&a);
		BridgeConnection& operator=(BridgeConnection &&a);

#endif
		static BridgeConnection Cast(const ::Udm::Object &a);
		static BridgeConnection Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		BridgeConnection CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< BridgeConnection> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< BridgeConnection, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< BridgeConnection, Pred>(impl); };
		BridgeConnection CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< BridgeConnection> Derived();
		template <class Pred> ::Udm::DerivedAttr< BridgeConnection, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< BridgeConnection, Pred>(impl); };
		::Udm::ArchetypeAttr< BridgeConnection> Archetype() const;
		::Udm::ParentAttr< ::CQML::Domain> Domain_parent() const;
		::Udm::ParentAttr< ::CQML::Domain> parent() const;
		::Udm::AssocEndAttr< ::CQML::Interconnect> srcBridgeConnection_end() const;
		::Udm::AssocEndAttr< ::CQML::Bridge> dstBridgeConnection_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_Domain_parent;
		static ::Uml::AssociationRole meta_srcBridgeConnection_end_;
		static ::Uml::AssociationRole meta_dstBridgeConnection_end_;

	};

	class CQML_Export RequirementBase :  public MgaObject {
	public:
		RequirementBase();
		RequirementBase(::Udm::ObjectImpl *impl);
		RequirementBase(const RequirementBase &master);

#ifdef UDM_RVALUE
		RequirementBase(RequirementBase &&master);

		static RequirementBase Cast(::Udm::Object &&a);
		RequirementBase& operator=(RequirementBase &&a);

#endif
		static RequirementBase Cast(const ::Udm::Object &a);
		static RequirementBase Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		RequirementBase CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< RequirementBase> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< RequirementBase, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< RequirementBase, Pred>(impl); };
		RequirementBase CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< RequirementBase> Derived();
		template <class Pred> ::Udm::DerivedAttr< RequirementBase, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< RequirementBase, Pred>(impl); };
		::Udm::ArchetypeAttr< RequirementBase> Archetype() const;
		::Udm::StringAttr resourceType() const;
		::Udm::ChildrenAttr< ::CQML::Property> Property_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Property, Pred> Property_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Property, Pred>(impl, meta_Property_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Property> Property_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Property, Pred> Property_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Property, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_resourceType;
		static ::Uml::CompositionChildRole meta_Property_children;

	};

	class CQML_Export Requirement :  public RequirementBase {
	public:
		Requirement();
		Requirement(::Udm::ObjectImpl *impl);
		Requirement(const Requirement &master);

#ifdef UDM_RVALUE
		Requirement(Requirement &&master);

		static Requirement Cast(::Udm::Object &&a);
		Requirement& operator=(Requirement &&a);

#endif
		static Requirement Cast(const ::Udm::Object &a);
		static Requirement Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Requirement CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Requirement> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Requirement, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Requirement, Pred>(impl); };
		Requirement CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Requirement> Derived();
		template <class Pred> ::Udm::DerivedAttr< Requirement, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Requirement, Pred>(impl); };
		::Udm::ArchetypeAttr< Requirement> Archetype() const;
		::Udm::AClassAssocAttr< AssemblyselectRequirement, Component> srcAssemblyselectRequirement() const;
		template <class Pred> ::Udm::AClassAssocAttr< AssemblyselectRequirement, Component, Pred> srcAssemblyselectRequirement_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< AssemblyselectRequirement, Component, Pred>(impl, meta_srcAssemblyselectRequirement, meta_srcAssemblyselectRequirement_rev); };
		::Udm::AClassAssocAttr< ArtifactDeployRequirement, ImplementationArtifact> srcArtifactDeployRequirement() const;
		template <class Pred> ::Udm::AClassAssocAttr< ArtifactDeployRequirement, ImplementationArtifact, Pred> srcArtifactDeployRequirement_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< ArtifactDeployRequirement, ImplementationArtifact, Pred>(impl, meta_srcArtifactDeployRequirement, meta_srcArtifactDeployRequirement_rev); };
		::Udm::AClassAssocAttr< PackageConfSelectRequirement, PackageConfiguration> srcPackageConfSelectRequirement() const;
		template <class Pred> ::Udm::AClassAssocAttr< PackageConfSelectRequirement, PackageConfiguration, Pred> srcPackageConfSelectRequirement_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< PackageConfSelectRequirement, PackageConfiguration, Pred>(impl, meta_srcPackageConfSelectRequirement, meta_srcPackageConfSelectRequirement_rev); };
		::Udm::AClassAssocAttr< AssemblyDeployRequirement, PublishConnector> srcAssemblyDeployRequirement() const;
		template <class Pred> ::Udm::AClassAssocAttr< AssemblyDeployRequirement, PublishConnector, Pred> srcAssemblyDeployRequirement_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< AssemblyDeployRequirement, PublishConnector, Pred>(impl, meta_srcAssemblyDeployRequirement, meta_srcAssemblyDeployRequirement_rev); };
		::Udm::ParentAttr< ::CQML::ArtifactContainer> ArtifactContainer_parent() const;
		::Udm::ParentAttr< ::CQML::PackageConfigurationContainer> PackageConfigurationContainer_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> ComponentAssembly_parent() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_srcAssemblyselectRequirement;
		static ::Uml::AssociationRole meta_srcAssemblyselectRequirement_rev;
		static ::Uml::AssociationRole meta_srcArtifactDeployRequirement;
		static ::Uml::AssociationRole meta_srcArtifactDeployRequirement_rev;
		static ::Uml::AssociationRole meta_srcPackageConfSelectRequirement;
		static ::Uml::AssociationRole meta_srcPackageConfSelectRequirement_rev;
		static ::Uml::AssociationRole meta_srcAssemblyDeployRequirement;
		static ::Uml::AssociationRole meta_srcAssemblyDeployRequirement_rev;
		static ::Uml::CompositionParentRole meta_ArtifactContainer_parent;
		static ::Uml::CompositionParentRole meta_PackageConfigurationContainer_parent;
		static ::Uml::CompositionParentRole meta_ComponentAssembly_parent;

	};

	class CQML_Export ECRequirements :  public Requirement {
	public:
		ECRequirements();
		ECRequirements(::Udm::ObjectImpl *impl);
		ECRequirements(const ECRequirements &master);

#ifdef UDM_RVALUE
		ECRequirements(ECRequirements &&master);

		static ECRequirements Cast(::Udm::Object &&a);
		ECRequirements& operator=(ECRequirements &&a);

#endif
		static ECRequirements Cast(const ::Udm::Object &a);
		static ECRequirements Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ECRequirements CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ECRequirements> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ECRequirements, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ECRequirements, Pred>(impl); };
		ECRequirements CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ECRequirements> Derived();
		template <class Pred> ::Udm::DerivedAttr< ECRequirements, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ECRequirements, Pred>(impl); };
		::Udm::ArchetypeAttr< ECRequirements> Archetype() const;
		::Udm::BooleanAttr ConfigureRTQoS() const;
		::Udm::ChildAttr< ::CQML::ECBehavior> ECBehavior_child() const;
		::Udm::ChildrenAttr< ::CQML::ECRole> ECRole_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ECRole, Pred> ECRole_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ECRole, Pred>(impl, meta_ECRole_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ECBehavior> ECBehavior_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ECBehavior, Pred> ECBehavior_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ECBehavior, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ECRole> ECRole_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ECRole, Pred> ECRole_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ECRole, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_ConfigureRTQoS;
		static ::Uml::CompositionChildRole meta_ECBehavior_child;
		static ::Uml::CompositionChildRole meta_ECRole_children;

	};

	class CQML_Export RTRequirements :  public Requirement {
	public:
		RTRequirements();
		RTRequirements(::Udm::ObjectImpl *impl);
		RTRequirements(const RTRequirements &master);

#ifdef UDM_RVALUE
		RTRequirements(RTRequirements &&master);

		static RTRequirements Cast(::Udm::Object &&a);
		RTRequirements& operator=(RTRequirements &&a);

#endif
		static RTRequirements Cast(const ::Udm::Object &a);
		static RTRequirements Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		RTRequirements CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< RTRequirements> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< RTRequirements, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< RTRequirements, Pred>(impl); };
		RTRequirements CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< RTRequirements> Derived();
		template <class Pred> ::Udm::DerivedAttr< RTRequirements, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< RTRequirements, Pred>(impl); };
		::Udm::ArchetypeAttr< RTRequirements> Archetype() const;
		::Udm::ChildAttr< ::CQML::ServiceProvider> ServiceProvider_child() const;
		::Udm::ChildAttr< ::CQML::ServiceConsumer> ServiceConsumer_child() const;
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ServiceProvider> ServiceProvider_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ServiceProvider, Pred> ServiceProvider_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ServiceProvider, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ServiceConsumer> ServiceConsumer_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ServiceConsumer, Pred> ServiceConsumer_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ServiceConsumer, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionChildRole meta_ServiceProvider_child;
		static ::Uml::CompositionChildRole meta_ServiceConsumer_child;

	};

	class CQML_Export ImplementationDependency :  public MgaObject {
	public:
		ImplementationDependency();
		ImplementationDependency(::Udm::ObjectImpl *impl);
		ImplementationDependency(const ImplementationDependency &master);

#ifdef UDM_RVALUE
		ImplementationDependency(ImplementationDependency &&master);

		static ImplementationDependency Cast(::Udm::Object &&a);
		ImplementationDependency& operator=(ImplementationDependency &&a);

#endif
		static ImplementationDependency Cast(const ::Udm::Object &a);
		static ImplementationDependency Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ImplementationDependency CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ImplementationDependency> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ImplementationDependency, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ImplementationDependency, Pred>(impl); };
		ImplementationDependency CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ImplementationDependency> Derived();
		template <class Pred> ::Udm::DerivedAttr< ImplementationDependency, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ImplementationDependency, Pred>(impl); };
		::Udm::ArchetypeAttr< ImplementationDependency> Archetype() const;
		::Udm::StringAttr requiredType() const;
		::Udm::AClassAssocAttr< ImplementationDependsOn, ComponentImplementation> srcImplementationDependsOn() const;
		template <class Pred> ::Udm::AClassAssocAttr< ImplementationDependsOn, ComponentImplementation, Pred> srcImplementationDependsOn_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< ImplementationDependsOn, ComponentImplementation, Pred>(impl, meta_srcImplementationDependsOn, meta_srcImplementationDependsOn_rev); };
		::Udm::ParentAttr< ::CQML::ComponentImplementationContainer> ComponentImplementationContainer_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentImplementationContainer> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_requiredType;
		static ::Uml::AssociationRole meta_srcImplementationDependsOn;
		static ::Uml::AssociationRole meta_srcImplementationDependsOn_rev;
		static ::Uml::CompositionParentRole meta_ComponentImplementationContainer_parent;

	};

	class CQML_Export Property :  public MgaObject {
	public:
		Property();
		Property(::Udm::ObjectImpl *impl);
		Property(const Property &master);

#ifdef UDM_RVALUE
		Property(Property &&master);

		static Property Cast(::Udm::Object &&a);
		Property& operator=(Property &&a);

#endif
		static Property Cast(const ::Udm::Object &a);
		static Property Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Property CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Property> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Property, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Property, Pred>(impl); };
		Property CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Property> Derived();
		template <class Pred> ::Udm::DerivedAttr< Property, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Property, Pred>(impl); };
		::Udm::ArchetypeAttr< Property> Archetype() const;
		::Udm::StringAttr DataValue() const;
		::Udm::AClassAssocAttr< AttributeValue, ReadonlyAttribute> srcAttributeValue() const;
		template <class Pred> ::Udm::AClassAssocAttr< AttributeValue, ReadonlyAttribute, Pred> srcAttributeValue_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< AttributeValue, ReadonlyAttribute, Pred>(impl, meta_srcAttributeValue, meta_srcAttributeValue_rev); };
		::Udm::AClassAssocAttr< AssemblyConfigProperty, Component> srcAssemblyConfigProperty() const;
		template <class Pred> ::Udm::AClassAssocAttr< AssemblyConfigProperty, Component, Pred> srcAssemblyConfigProperty_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< AssemblyConfigProperty, Component, Pred>(impl, meta_srcAssemblyConfigProperty, meta_srcAssemblyConfigProperty_rev); };
		::Udm::AClassAssocAttr< ComponentConfigProperty, ComponentRef> srcComponentConfigProperty() const;
		template <class Pred> ::Udm::AClassAssocAttr< ComponentConfigProperty, ComponentRef, Pred> srcComponentConfigProperty_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< ComponentConfigProperty, ComponentRef, Pred>(impl, meta_srcComponentConfigProperty, meta_srcComponentConfigProperty_rev); };
		::Udm::AClassAssocAttr< ComponentInfoProperty, ComponentRef> srcComponentInfoProperty() const;
		template <class Pred> ::Udm::AClassAssocAttr< ComponentInfoProperty, ComponentRef, Pred> srcComponentInfoProperty_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< ComponentInfoProperty, ComponentRef, Pred>(impl, meta_srcComponentInfoProperty, meta_srcComponentInfoProperty_rev); };
		::Udm::AClassAssocAttr< EdgeProperty, Edge> dstPropertyConnector() const;
		template <class Pred> ::Udm::AClassAssocAttr< EdgeProperty, Edge, Pred> dstPropertyConnector_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< EdgeProperty, Edge, Pred>(impl, meta_dstPropertyConnector, meta_dstPropertyConnector_rev); };
		::Udm::AClassAssocAttr< PackageConfigProperty, ComponentPackage> srcPackageConfigProperty() const;
		template <class Pred> ::Udm::AClassAssocAttr< PackageConfigProperty, ComponentPackage, Pred> srcPackageConfigProperty_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< PackageConfigProperty, ComponentPackage, Pred>(impl, meta_srcPackageConfigProperty, meta_srcPackageConfigProperty_rev); };
		::Udm::AClassAssocAttr< PackageInfoProperty, ComponentPackage> srcPackageInfoProperty() const;
		template <class Pred> ::Udm::AClassAssocAttr< PackageInfoProperty, ComponentPackage, Pred> srcPackageInfoProperty_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< PackageInfoProperty, ComponentPackage, Pred>(impl, meta_srcPackageInfoProperty, meta_srcPackageInfoProperty_rev); };
		::Udm::AClassAssocAttr< ArtifactExecParameter, ImplementationArtifact> srcArtifactExecParameter() const;
		template <class Pred> ::Udm::AClassAssocAttr< ArtifactExecParameter, ImplementationArtifact, Pred> srcArtifactExecParameter_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< ArtifactExecParameter, ImplementationArtifact, Pred>(impl, meta_srcArtifactExecParameter, meta_srcArtifactExecParameter_rev); };
		::Udm::AClassAssocAttr< ArtifactInfoProperty, ImplementationArtifact> srcArtifactInfoProperty() const;
		template <class Pred> ::Udm::AClassAssocAttr< ArtifactInfoProperty, ImplementationArtifact, Pred> srcArtifactInfoProperty_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< ArtifactInfoProperty, ImplementationArtifact, Pred>(impl, meta_srcArtifactInfoProperty, meta_srcArtifactInfoProperty_rev); };
		::Udm::AClassAssocAttr< PackageConfConfigProperty, PackageConfiguration> srcPackageConfConfigProperty() const;
		template <class Pred> ::Udm::AClassAssocAttr< PackageConfConfigProperty, PackageConfiguration, Pred> srcPackageConfConfigProperty_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< PackageConfConfigProperty, PackageConfiguration, Pred>(impl, meta_srcPackageConfConfigProperty, meta_srcPackageConfConfigProperty_rev); };
		::Udm::AClassPointerAttr< AttributeMappingValue, AttributeMapping> srcAttributeMappingValue() const;
		::Udm::AClassAssocAttr< PathProperty, Path> srcPathProperty() const;
		template <class Pred> ::Udm::AClassAssocAttr< PathProperty, Path, Pred> srcPathProperty_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< PathProperty, Path, Pred>(impl, meta_srcPathProperty, meta_srcPathProperty_rev); };
		::Udm::AClassAssocAttr< ConfigProperty, Implemenation> srcConfigProperty() const;
		template <class Pred> ::Udm::AClassAssocAttr< ConfigProperty, Implemenation, Pred> srcConfigProperty_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< ConfigProperty, Implemenation, Pred>(impl, meta_srcConfigProperty, meta_srcConfigProperty_rev); };
		::Udm::AClassAssocAttr< InfoProperty, Implemenation> srcInfoProperty() const;
		template <class Pred> ::Udm::AClassAssocAttr< InfoProperty, Implemenation, Pred> srcInfoProperty_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< InfoProperty, Implemenation, Pred>(impl, meta_srcInfoProperty, meta_srcInfoProperty_rev); };
		::Udm::AClassAssocAttr< MonolithExecParameter, MonolithicImplementationBase> srcMonolithExecParameter() const;
		template <class Pred> ::Udm::AClassAssocAttr< MonolithExecParameter, MonolithicImplementationBase, Pred> srcMonolithExecParameter_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< MonolithExecParameter, MonolithicImplementationBase, Pred>(impl, meta_srcMonolithExecParameter, meta_srcMonolithExecParameter_rev); };
		::Udm::ChildAttr< ::CQML::DataType> DataType_child() const;
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::DataType> DataType_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::DataType, Pred> DataType_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::DataType, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::Domain> Domain_parent() const;
		::Udm::ParentAttr< ::CQML::RequirementBase> RequirementBase_parent() const;
		::Udm::ParentAttr< ::CQML::PackageContainer> PackageContainer_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentContainer> ComponentContainer_parent() const;
		::Udm::ParentAttr< ::CQML::ArtifactContainer> ArtifactContainer_parent() const;
		::Udm::ParentAttr< ::CQML::PackageConfigurationContainer> PackageConfigurationContainer_parent() const;
		::Udm::ParentAttr< ::CQML::DeploymentPlan> DeploymentPlan_parent() const;
		::Udm::ParentAttr< ::CQML::Path> Path_parent() const;
		::Udm::ParentAttr< ::CQML::Paths> Paths_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> ComponentAssembly_parent() const;
		::Udm::ParentAttr< ::CQML::ImplementationContainer> ImplementationContainer_parent() const;
		::Udm::ParentAttr< ::CQML::BehaviorInputAction> BehaviorInputAction_parent() const;
		::Udm::ParentAttr< ::CQML::ActionBase> ActionBase_parent() const;
		::Udm::ParentAttr< ::CQML::QueryInputAction> QueryInputAction_parent() const;
		::Udm::ParentAttr< ::CQML::RepicaGroupConfiguration> RepicaGroupConfiguration_parent() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_DataValue;
		static ::Uml::AssociationRole meta_srcAttributeValue;
		static ::Uml::AssociationRole meta_srcAttributeValue_rev;
		static ::Uml::AssociationRole meta_srcAssemblyConfigProperty;
		static ::Uml::AssociationRole meta_srcAssemblyConfigProperty_rev;
		static ::Uml::AssociationRole meta_srcComponentConfigProperty;
		static ::Uml::AssociationRole meta_srcComponentConfigProperty_rev;
		static ::Uml::AssociationRole meta_srcComponentInfoProperty;
		static ::Uml::AssociationRole meta_srcComponentInfoProperty_rev;
		static ::Uml::AssociationRole meta_dstPropertyConnector;
		static ::Uml::AssociationRole meta_dstPropertyConnector_rev;
		static ::Uml::AssociationRole meta_srcPackageConfigProperty;
		static ::Uml::AssociationRole meta_srcPackageConfigProperty_rev;
		static ::Uml::AssociationRole meta_srcPackageInfoProperty;
		static ::Uml::AssociationRole meta_srcPackageInfoProperty_rev;
		static ::Uml::AssociationRole meta_srcArtifactExecParameter;
		static ::Uml::AssociationRole meta_srcArtifactExecParameter_rev;
		static ::Uml::AssociationRole meta_srcArtifactInfoProperty;
		static ::Uml::AssociationRole meta_srcArtifactInfoProperty_rev;
		static ::Uml::AssociationRole meta_srcPackageConfConfigProperty;
		static ::Uml::AssociationRole meta_srcPackageConfConfigProperty_rev;
		static ::Uml::AssociationRole meta_srcAttributeMappingValue;
		static ::Uml::AssociationRole meta_srcAttributeMappingValue_rev;
		static ::Uml::AssociationRole meta_srcPathProperty;
		static ::Uml::AssociationRole meta_srcPathProperty_rev;
		static ::Uml::AssociationRole meta_srcConfigProperty;
		static ::Uml::AssociationRole meta_srcConfigProperty_rev;
		static ::Uml::AssociationRole meta_srcInfoProperty;
		static ::Uml::AssociationRole meta_srcInfoProperty_rev;
		static ::Uml::AssociationRole meta_srcMonolithExecParameter;
		static ::Uml::AssociationRole meta_srcMonolithExecParameter_rev;
		static ::Uml::CompositionChildRole meta_DataType_child;
		static ::Uml::CompositionParentRole meta_Domain_parent;
		static ::Uml::CompositionParentRole meta_RequirementBase_parent;
		static ::Uml::CompositionParentRole meta_PackageContainer_parent;
		static ::Uml::CompositionParentRole meta_ComponentContainer_parent;
		static ::Uml::CompositionParentRole meta_ArtifactContainer_parent;
		static ::Uml::CompositionParentRole meta_PackageConfigurationContainer_parent;
		static ::Uml::CompositionParentRole meta_DeploymentPlan_parent;
		static ::Uml::CompositionParentRole meta_Path_parent;
		static ::Uml::CompositionParentRole meta_Paths_parent;
		static ::Uml::CompositionParentRole meta_ComponentAssembly_parent;
		static ::Uml::CompositionParentRole meta_ImplementationContainer_parent;
		static ::Uml::CompositionParentRole meta_BehaviorInputAction_parent;
		static ::Uml::CompositionParentRole meta_ActionBase_parent;
		static ::Uml::CompositionParentRole meta_QueryInputAction_parent;
		static ::Uml::CompositionParentRole meta_RepicaGroupConfiguration_parent;

	};

	class CQML_Export SatisfierProperty :  public MgaObject {
	public:
		SatisfierProperty();
		SatisfierProperty(::Udm::ObjectImpl *impl);
		SatisfierProperty(const SatisfierProperty &master);

#ifdef UDM_RVALUE
		SatisfierProperty(SatisfierProperty &&master);

		static SatisfierProperty Cast(::Udm::Object &&a);
		SatisfierProperty& operator=(SatisfierProperty &&a);

#endif
		static SatisfierProperty Cast(const ::Udm::Object &a);
		static SatisfierProperty Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		SatisfierProperty CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< SatisfierProperty> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< SatisfierProperty, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< SatisfierProperty, Pred>(impl); };
		SatisfierProperty CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< SatisfierProperty> Derived();
		template <class Pred> ::Udm::DerivedAttr< SatisfierProperty, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< SatisfierProperty, Pred>(impl); };
		::Udm::ArchetypeAttr< SatisfierProperty> Archetype() const;
		::Udm::StringAttr DataValue() const;
		::Udm::BooleanAttr dynamic() const;
		::Udm::StringAttr SatisfierPropertyKind() const;
		::Udm::ChildAttr< ::CQML::DataType> DataType_child() const;
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::DataType> DataType_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::DataType, Pred> DataType_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::DataType, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::RequirementSatisfier> RequirementSatisfier_parent() const;
		::Udm::ParentAttr< ::CQML::RequirementSatisfier> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_DataValue;
		static ::Uml::Attribute meta_dynamic;
		static ::Uml::Attribute meta_SatisfierPropertyKind;
		static ::Uml::CompositionChildRole meta_DataType_child;
		static ::Uml::CompositionParentRole meta_RequirementSatisfier_parent;

	};

	class CQML_Export RequirementSatisfier :  public MgaObject {
	public:
		RequirementSatisfier();
		RequirementSatisfier(::Udm::ObjectImpl *impl);
		RequirementSatisfier(const RequirementSatisfier &master);

#ifdef UDM_RVALUE
		RequirementSatisfier(RequirementSatisfier &&master);

		static RequirementSatisfier Cast(::Udm::Object &&a);
		RequirementSatisfier& operator=(RequirementSatisfier &&a);

#endif
		static RequirementSatisfier Cast(const ::Udm::Object &a);
		static RequirementSatisfier Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		RequirementSatisfier CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< RequirementSatisfier> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< RequirementSatisfier, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< RequirementSatisfier, Pred>(impl); };
		RequirementSatisfier CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< RequirementSatisfier> Derived();
		template <class Pred> ::Udm::DerivedAttr< RequirementSatisfier, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< RequirementSatisfier, Pred>(impl); };
		::Udm::ArchetypeAttr< RequirementSatisfier> Archetype() const;
		::Udm::StringAttr resourceType() const;
		::Udm::ChildrenAttr< ::CQML::SatisfierProperty> SatisfierProperty_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::SatisfierProperty, Pred> SatisfierProperty_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::SatisfierProperty, Pred>(impl, meta_SatisfierProperty_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::SatisfierProperty> SatisfierProperty_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::SatisfierProperty, Pred> SatisfierProperty_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::SatisfierProperty, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_resourceType;
		static ::Uml::CompositionChildRole meta_SatisfierProperty_children;

	};

	class CQML_Export Capability :  public RequirementSatisfier {
	public:
		Capability();
		Capability(::Udm::ObjectImpl *impl);
		Capability(const Capability &master);

#ifdef UDM_RVALUE
		Capability(Capability &&master);

		static Capability Cast(::Udm::Object &&a);
		Capability& operator=(Capability &&a);

#endif
		static Capability Cast(const ::Udm::Object &a);
		static Capability Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Capability CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Capability> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Capability, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Capability, Pred>(impl); };
		Capability CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Capability> Derived();
		template <class Pred> ::Udm::DerivedAttr< Capability, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Capability, Pred>(impl); };
		::Udm::ArchetypeAttr< Capability> Archetype() const;
		::Udm::AClassAssocAttr< ImplementationCapability, ComponentImplementation> srcImplementationCapability() const;
		template <class Pred> ::Udm::AClassAssocAttr< ImplementationCapability, ComponentImplementation, Pred> srcImplementationCapability_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< ImplementationCapability, ComponentImplementation, Pred>(impl, meta_srcImplementationCapability, meta_srcImplementationCapability_rev); };
		::Udm::ParentAttr< ::CQML::ComponentImplementationContainer> ComponentImplementationContainer_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentImplementationContainer> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_srcImplementationCapability;
		static ::Uml::AssociationRole meta_srcImplementationCapability_rev;
		static ::Uml::CompositionParentRole meta_ComponentImplementationContainer_parent;

	};

	class CQML_Export Resource :  public RequirementSatisfier {
	public:
		Resource();
		Resource(::Udm::ObjectImpl *impl);
		Resource(const Resource &master);

#ifdef UDM_RVALUE
		Resource(Resource &&master);

		static Resource Cast(::Udm::Object &&a);
		Resource& operator=(Resource &&a);

#endif
		static Resource Cast(const ::Udm::Object &a);
		static Resource Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Resource CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Resource> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Resource, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Resource, Pred>(impl); };
		Resource CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Resource> Derived();
		template <class Pred> ::Udm::DerivedAttr< Resource, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Resource, Pred>(impl); };
		::Udm::ArchetypeAttr< Resource> Archetype() const;
		::Udm::ParentAttr< ::CQML::Bridge> Bridge_parent() const;
		::Udm::ParentAttr< ::CQML::Interconnect> Interconnect_parent() const;
		::Udm::ParentAttr< ::CQML::Node> Node_parent() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_Bridge_parent;
		static ::Uml::CompositionParentRole meta_Interconnect_parent;
		static ::Uml::CompositionParentRole meta_Node_parent;

	};

	class CQML_Export SharedResource :  public RequirementSatisfier {
	public:
		SharedResource();
		SharedResource(::Udm::ObjectImpl *impl);
		SharedResource(const SharedResource &master);

#ifdef UDM_RVALUE
		SharedResource(SharedResource &&master);

		static SharedResource Cast(::Udm::Object &&a);
		SharedResource& operator=(SharedResource &&a);

#endif
		static SharedResource Cast(const ::Udm::Object &a);
		static SharedResource Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		SharedResource CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< SharedResource> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< SharedResource, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< SharedResource, Pred>(impl); };
		SharedResource CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< SharedResource> Derived();
		template <class Pred> ::Udm::DerivedAttr< SharedResource, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< SharedResource, Pred>(impl); };
		::Udm::ArchetypeAttr< SharedResource> Archetype() const;
		::Udm::AClassAssocAttr< Shares, Node> srcShares() const;
		template <class Pred> ::Udm::AClassAssocAttr< Shares, Node, Pred> srcShares_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< Shares, Node, Pred>(impl, meta_srcShares, meta_srcShares_rev); };
		::Udm::AssocAttr< SharedResourceReference> referedbySharedResourceReference() const;
		template <class Pred> ::Udm::AssocAttr< SharedResourceReference, Pred> referedbySharedResourceReference_sorted(const Pred &) const { return ::Udm::AssocAttr< SharedResourceReference, Pred>(impl, meta_referedbySharedResourceReference); };
		::Udm::ParentAttr< ::CQML::Domain> Domain_parent() const;
		::Udm::ParentAttr< ::CQML::Domain> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_srcShares;
		static ::Uml::AssociationRole meta_srcShares_rev;
		static ::Uml::AssociationRole meta_referedbySharedResourceReference;
		static ::Uml::CompositionParentRole meta_Domain_parent;

	};

	class CQML_Export ImplementationRequirement :  public RequirementBase {
	public:
		ImplementationRequirement();
		ImplementationRequirement(::Udm::ObjectImpl *impl);
		ImplementationRequirement(const ImplementationRequirement &master);

#ifdef UDM_RVALUE
		ImplementationRequirement(ImplementationRequirement &&master);

		static ImplementationRequirement Cast(::Udm::Object &&a);
		ImplementationRequirement& operator=(ImplementationRequirement &&a);

#endif
		static ImplementationRequirement Cast(const ::Udm::Object &a);
		static ImplementationRequirement Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ImplementationRequirement CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ImplementationRequirement> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ImplementationRequirement, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ImplementationRequirement, Pred>(impl); };
		ImplementationRequirement CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ImplementationRequirement> Derived();
		template <class Pred> ::Udm::DerivedAttr< ImplementationRequirement, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ImplementationRequirement, Pred>(impl); };
		::Udm::ArchetypeAttr< ImplementationRequirement> Archetype() const;
		::Udm::StringAttr ResourceUsageKind() const;
		::Udm::StringAttr resourcePort() const;
		::Udm::StringAttr componentPort() const;
		::Udm::AClassAssocAttr< MonolithDeployRequirement, MonolithicImplementationBase> srcMonolithDeployRequirement() const;
		template <class Pred> ::Udm::AClassAssocAttr< MonolithDeployRequirement, MonolithicImplementationBase, Pred> srcMonolithDeployRequirement_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< MonolithDeployRequirement, MonolithicImplementationBase, Pred>(impl, meta_srcMonolithDeployRequirement, meta_srcMonolithDeployRequirement_rev); };
		::Udm::ParentAttr< ::CQML::ImplementationContainer> ImplementationContainer_parent() const;
		::Udm::ParentAttr< ::CQML::ImplementationContainer> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_ResourceUsageKind;
		static ::Uml::Attribute meta_resourcePort;
		static ::Uml::Attribute meta_componentPort;
		static ::Uml::AssociationRole meta_srcMonolithDeployRequirement;
		static ::Uml::AssociationRole meta_srcMonolithDeployRequirement_rev;
		static ::Uml::CompositionParentRole meta_ImplementationContainer_parent;

	};

	class CQML_Export DataType :  public MgaObject {
	public:
		DataType();
		DataType(::Udm::ObjectImpl *impl);
		DataType(const DataType &master);

#ifdef UDM_RVALUE
		DataType(DataType &&master);

		static DataType Cast(::Udm::Object &&a);
		DataType& operator=(DataType &&a);

#endif
		static DataType Cast(const ::Udm::Object &a);
		static DataType Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		DataType CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< DataType> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< DataType, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< DataType, Pred>(impl); };
		DataType CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< DataType> Derived();
		template <class Pred> ::Udm::DerivedAttr< DataType, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< DataType, Pred>(impl); };
		::Udm::ArchetypeAttr< DataType> Archetype() const;
		::Udm::PointerAttr< MemberType> ref() const;
		::Udm::ParentAttr< ::CQML::Property> Property_parent() const;
		::Udm::ParentAttr< ::CQML::SatisfierProperty> SatisfierProperty_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentPropertyDescription> ComponentPropertyDescription_parent() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::CompositionParentRole meta_Property_parent;
		static ::Uml::CompositionParentRole meta_SatisfierProperty_parent;
		static ::Uml::CompositionParentRole meta_ComponentPropertyDescription_parent;

	};

	class CQML_Export PackageInterface :  public MgaObject {
	public:
		PackageInterface();
		PackageInterface(::Udm::ObjectImpl *impl);
		PackageInterface(const PackageInterface &master);

#ifdef UDM_RVALUE
		PackageInterface(PackageInterface &&master);

		static PackageInterface Cast(::Udm::Object &&a);
		PackageInterface& operator=(PackageInterface &&a);

#endif
		static PackageInterface Cast(const ::Udm::Object &a);
		static PackageInterface Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		PackageInterface CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< PackageInterface> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< PackageInterface, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< PackageInterface, Pred>(impl); };
		PackageInterface CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< PackageInterface> Derived();
		template <class Pred> ::Udm::DerivedAttr< PackageInterface, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< PackageInterface, Pred>(impl); };
		::Udm::ArchetypeAttr< PackageInterface> Archetype() const;
		::Udm::ParentAttr< ::CQML::PackageContainer> PackageContainer_parent() const;
		::Udm::ParentAttr< ::CQML::PackageContainer> parent() const;
		::Udm::AssocEndAttr< ::CQML::ComponentPackage> srcPackageInterface_end() const;
		::Udm::AssocEndAttr< ::CQML::ComponentRef> dstPackageInterface_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_PackageContainer_parent;
		static ::Uml::AssociationRole meta_srcPackageInterface_end_;
		static ::Uml::AssociationRole meta_dstPackageInterface_end_;

	};

	class CQML_Export Implementation :  public MgaObject {
	public:
		Implementation();
		Implementation(::Udm::ObjectImpl *impl);
		Implementation(const Implementation &master);

#ifdef UDM_RVALUE
		Implementation(Implementation &&master);

		static Implementation Cast(::Udm::Object &&a);
		Implementation& operator=(Implementation &&a);

#endif
		static Implementation Cast(const ::Udm::Object &a);
		static Implementation Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Implementation CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Implementation> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Implementation, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Implementation, Pred>(impl); };
		Implementation CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Implementation> Derived();
		template <class Pred> ::Udm::DerivedAttr< Implementation, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Implementation, Pred>(impl); };
		::Udm::ArchetypeAttr< Implementation> Archetype() const;
		::Udm::ParentAttr< ::CQML::PackageContainer> PackageContainer_parent() const;
		::Udm::ParentAttr< ::CQML::PackageContainer> parent() const;
		::Udm::AssocEndAttr< ::CQML::ComponentPackage> srcImplementation_end() const;
		::Udm::AssocEndAttr< ::CQML::ComponentImplementationReference> dstImplementation_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_PackageContainer_parent;
		static ::Uml::AssociationRole meta_srcImplementation_end_;
		static ::Uml::AssociationRole meta_dstImplementation_end_;

	};

	class CQML_Export PackageContainer :  public MgaObject {
	public:
		PackageContainer();
		PackageContainer(::Udm::ObjectImpl *impl);
		PackageContainer(const PackageContainer &master);

#ifdef UDM_RVALUE
		PackageContainer(PackageContainer &&master);

		static PackageContainer Cast(::Udm::Object &&a);
		PackageContainer& operator=(PackageContainer &&a);

#endif
		static PackageContainer Cast(const ::Udm::Object &a);
		static PackageContainer Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		PackageContainer CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< PackageContainer> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< PackageContainer, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< PackageContainer, Pred>(impl); };
		PackageContainer CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< PackageContainer> Derived();
		template <class Pred> ::Udm::DerivedAttr< PackageContainer, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< PackageContainer, Pred>(impl); };
		::Udm::ArchetypeAttr< PackageContainer> Archetype() const;
		::Udm::ChildAttr< ::CQML::PackageInterface> PackageInterface_child() const;
		::Udm::ChildrenAttr< ::CQML::Implementation> Implementation_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Implementation, Pred> Implementation_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Implementation, Pred>(impl, meta_Implementation_children); };
		::Udm::ChildrenAttr< ::CQML::ComponentImplementationReference> ComponentImplementationReference_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentImplementationReference, Pred> ComponentImplementationReference_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentImplementationReference, Pred>(impl, meta_ComponentImplementationReference_children); };
		::Udm::ChildAttr< ::CQML::ComponentRef> ComponentRef_child() const;
		::Udm::ChildrenAttr< ::CQML::PackageConfigProperty> PackageConfigProperty_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PackageConfigProperty, Pred> PackageConfigProperty_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PackageConfigProperty, Pred>(impl, meta_PackageConfigProperty_children); };
		::Udm::ChildrenAttr< ::CQML::Property> Property_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Property, Pred> Property_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Property, Pred>(impl, meta_Property_children); };
		::Udm::ChildrenAttr< ::CQML::PackageInfoProperty> PackageInfoProperty_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PackageInfoProperty, Pred> PackageInfoProperty_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PackageInfoProperty, Pred>(impl, meta_PackageInfoProperty_children); };
		::Udm::ChildAttr< ::CQML::ComponentPackage> ComponentPackage_child() const;
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Manageable> Manageable_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Manageable, Pred> Manageable_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Manageable, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentBase> ComponentBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentBase, Pred> ComponentBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentRef> ComponentRef_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentRef, Pred> ComponentRef_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentRef, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::CollocationGroupMember> CollocationGroupMember_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::CollocationGroupMember, Pred> CollocationGroupMember_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::CollocationGroupMember, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::FTMonitorable> FTMonitorable_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::FTMonitorable, Pred> FTMonitorable_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::FTMonitorable, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Property> Property_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Property, Pred> Property_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Property, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::PackageInterface> PackageInterface_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PackageInterface, Pred> PackageInterface_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PackageInterface, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Implementation> Implementation_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Implementation, Pred> Implementation_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Implementation, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::PackageConfigProperty> PackageConfigProperty_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PackageConfigProperty, Pred> PackageConfigProperty_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PackageConfigProperty, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::PackageInfoProperty> PackageInfoProperty_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PackageInfoProperty, Pred> PackageInfoProperty_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PackageInfoProperty, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentPackage> ComponentPackage_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentPackage, Pred> ComponentPackage_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentPackage, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentImplementationReference> ComponentImplementationReference_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentImplementationReference, Pred> ComponentImplementationReference_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentImplementationReference, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::ComponentPackages> ComponentPackages_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentPackages> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionChildRole meta_PackageInterface_child;
		static ::Uml::CompositionChildRole meta_Implementation_children;
		static ::Uml::CompositionChildRole meta_ComponentImplementationReference_children;
		static ::Uml::CompositionChildRole meta_ComponentRef_child;
		static ::Uml::CompositionChildRole meta_PackageConfigProperty_children;
		static ::Uml::CompositionChildRole meta_Property_children;
		static ::Uml::CompositionChildRole meta_PackageInfoProperty_children;
		static ::Uml::CompositionChildRole meta_ComponentPackage_child;
		static ::Uml::CompositionParentRole meta_ComponentPackages_parent;

	};

	class CQML_Export PackageConfigProperty :  public MgaObject {
	public:
		PackageConfigProperty();
		PackageConfigProperty(::Udm::ObjectImpl *impl);
		PackageConfigProperty(const PackageConfigProperty &master);

#ifdef UDM_RVALUE
		PackageConfigProperty(PackageConfigProperty &&master);

		static PackageConfigProperty Cast(::Udm::Object &&a);
		PackageConfigProperty& operator=(PackageConfigProperty &&a);

#endif
		static PackageConfigProperty Cast(const ::Udm::Object &a);
		static PackageConfigProperty Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		PackageConfigProperty CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< PackageConfigProperty> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< PackageConfigProperty, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< PackageConfigProperty, Pred>(impl); };
		PackageConfigProperty CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< PackageConfigProperty> Derived();
		template <class Pred> ::Udm::DerivedAttr< PackageConfigProperty, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< PackageConfigProperty, Pred>(impl); };
		::Udm::ArchetypeAttr< PackageConfigProperty> Archetype() const;
		::Udm::ParentAttr< ::CQML::PackageContainer> PackageContainer_parent() const;
		::Udm::ParentAttr< ::CQML::PackageContainer> parent() const;
		::Udm::AssocEndAttr< ::CQML::ComponentPackage> srcPackageConfigProperty_end() const;
		::Udm::AssocEndAttr< ::CQML::Property> dstPackageConfigProperty_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_PackageContainer_parent;
		static ::Uml::AssociationRole meta_srcPackageConfigProperty_end_;
		static ::Uml::AssociationRole meta_dstPackageConfigProperty_end_;

	};

	class CQML_Export PackageInfoProperty :  public MgaObject {
	public:
		PackageInfoProperty();
		PackageInfoProperty(::Udm::ObjectImpl *impl);
		PackageInfoProperty(const PackageInfoProperty &master);

#ifdef UDM_RVALUE
		PackageInfoProperty(PackageInfoProperty &&master);

		static PackageInfoProperty Cast(::Udm::Object &&a);
		PackageInfoProperty& operator=(PackageInfoProperty &&a);

#endif
		static PackageInfoProperty Cast(const ::Udm::Object &a);
		static PackageInfoProperty Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		PackageInfoProperty CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< PackageInfoProperty> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< PackageInfoProperty, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< PackageInfoProperty, Pred>(impl); };
		PackageInfoProperty CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< PackageInfoProperty> Derived();
		template <class Pred> ::Udm::DerivedAttr< PackageInfoProperty, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< PackageInfoProperty, Pred>(impl); };
		::Udm::ArchetypeAttr< PackageInfoProperty> Archetype() const;
		::Udm::ParentAttr< ::CQML::PackageContainer> PackageContainer_parent() const;
		::Udm::ParentAttr< ::CQML::PackageContainer> parent() const;
		::Udm::AssocEndAttr< ::CQML::ComponentPackage> srcPackageInfoProperty_end() const;
		::Udm::AssocEndAttr< ::CQML::Property> dstPackageInfoProperty_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_PackageContainer_parent;
		static ::Uml::AssociationRole meta_srcPackageInfoProperty_end_;
		static ::Uml::AssociationRole meta_dstPackageInfoProperty_end_;

	};

	class CQML_Export ComponentPackage :  public MgaObject {
	public:
		ComponentPackage();
		ComponentPackage(::Udm::ObjectImpl *impl);
		ComponentPackage(const ComponentPackage &master);

#ifdef UDM_RVALUE
		ComponentPackage(ComponentPackage &&master);

		static ComponentPackage Cast(::Udm::Object &&a);
		ComponentPackage& operator=(ComponentPackage &&a);

#endif
		static ComponentPackage Cast(const ::Udm::Object &a);
		static ComponentPackage Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ComponentPackage CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ComponentPackage> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ComponentPackage, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ComponentPackage, Pred>(impl); };
		ComponentPackage CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ComponentPackage> Derived();
		template <class Pred> ::Udm::DerivedAttr< ComponentPackage, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ComponentPackage, Pred>(impl); };
		::Udm::ArchetypeAttr< ComponentPackage> Archetype() const;
		::Udm::StringAttr label() const;
		::Udm::StringAttr UUID() const;
		::Udm::AClassPointerAttr< PackageInterface, ComponentRef> dstPackageInterface() const;
		::Udm::AClassAssocAttr< Implementation, ComponentImplementationReference> dstImplementation() const;
		template <class Pred> ::Udm::AClassAssocAttr< Implementation, ComponentImplementationReference, Pred> dstImplementation_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< Implementation, ComponentImplementationReference, Pred>(impl, meta_dstImplementation, meta_dstImplementation_rev); };
		::Udm::AClassAssocAttr< PackageConfigProperty, Property> dstPackageConfigProperty() const;
		template <class Pred> ::Udm::AClassAssocAttr< PackageConfigProperty, Property, Pred> dstPackageConfigProperty_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< PackageConfigProperty, Property, Pred>(impl, meta_dstPackageConfigProperty, meta_dstPackageConfigProperty_rev); };
		::Udm::AClassAssocAttr< PackageInfoProperty, Property> dstPackageInfoProperty() const;
		template <class Pred> ::Udm::AClassAssocAttr< PackageInfoProperty, Property, Pred> dstPackageInfoProperty_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< PackageInfoProperty, Property, Pred>(impl, meta_dstPackageInfoProperty, meta_dstPackageInfoProperty_rev); };
		::Udm::AssocAttr< ComponentPackageReference> referedbyComponentPackageReference() const;
		template <class Pred> ::Udm::AssocAttr< ComponentPackageReference, Pred> referedbyComponentPackageReference_sorted(const Pred &) const { return ::Udm::AssocAttr< ComponentPackageReference, Pred>(impl, meta_referedbyComponentPackageReference); };
		::Udm::AClassAssocAttr< PackageConfBasePackage, PackageConfiguration> srcPackageConfBasePackage() const;
		template <class Pred> ::Udm::AClassAssocAttr< PackageConfBasePackage, PackageConfiguration, Pred> srcPackageConfBasePackage_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< PackageConfBasePackage, PackageConfiguration, Pred>(impl, meta_srcPackageConfBasePackage, meta_srcPackageConfBasePackage_rev); };
		::Udm::ParentAttr< ::CQML::PackageContainer> PackageContainer_parent() const;
		::Udm::ParentAttr< ::CQML::PackageConfigurationContainer> PackageConfigurationContainer_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> ComponentAssembly_parent() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_label;
		static ::Uml::Attribute meta_UUID;
		static ::Uml::AssociationRole meta_dstPackageInterface;
		static ::Uml::AssociationRole meta_dstPackageInterface_rev;
		static ::Uml::AssociationRole meta_dstImplementation;
		static ::Uml::AssociationRole meta_dstImplementation_rev;
		static ::Uml::AssociationRole meta_dstPackageConfigProperty;
		static ::Uml::AssociationRole meta_dstPackageConfigProperty_rev;
		static ::Uml::AssociationRole meta_dstPackageInfoProperty;
		static ::Uml::AssociationRole meta_dstPackageInfoProperty_rev;
		static ::Uml::AssociationRole meta_referedbyComponentPackageReference;
		static ::Uml::AssociationRole meta_srcPackageConfBasePackage;
		static ::Uml::AssociationRole meta_srcPackageConfBasePackage_rev;
		static ::Uml::CompositionParentRole meta_PackageContainer_parent;
		static ::Uml::CompositionParentRole meta_PackageConfigurationContainer_parent;
		static ::Uml::CompositionParentRole meta_ComponentAssembly_parent;

	};

	class CQML_Export ComponentPackageReference :  public MgaObject {
	public:
		ComponentPackageReference();
		ComponentPackageReference(::Udm::ObjectImpl *impl);
		ComponentPackageReference(const ComponentPackageReference &master);

#ifdef UDM_RVALUE
		ComponentPackageReference(ComponentPackageReference &&master);

		static ComponentPackageReference Cast(::Udm::Object &&a);
		ComponentPackageReference& operator=(ComponentPackageReference &&a);

#endif
		static ComponentPackageReference Cast(const ::Udm::Object &a);
		static ComponentPackageReference Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ComponentPackageReference CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ComponentPackageReference> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ComponentPackageReference, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ComponentPackageReference, Pred>(impl); };
		ComponentPackageReference CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ComponentPackageReference> Derived();
		template <class Pred> ::Udm::DerivedAttr< ComponentPackageReference, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ComponentPackageReference, Pred>(impl); };
		::Udm::ArchetypeAttr< ComponentPackageReference> Archetype() const;
		::Udm::StringAttr requiredName() const;
		::Udm::StringAttr requiredType() const;
		::Udm::StringAttr requiredUUID() const;
		::Udm::PointerAttr< ComponentPackage> ref() const;
		::Udm::AClassAssocAttr< PackageConfReference, PackageConfiguration> srcPackageConfReference() const;
		template <class Pred> ::Udm::AClassAssocAttr< PackageConfReference, PackageConfiguration, Pred> srcPackageConfReference_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< PackageConfReference, PackageConfiguration, Pred>(impl, meta_srcPackageConfReference, meta_srcPackageConfReference_rev); };
		::Udm::ParentAttr< ::CQML::PackageConfigurationContainer> PackageConfigurationContainer_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> ComponentAssembly_parent() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_requiredName;
		static ::Uml::Attribute meta_requiredType;
		static ::Uml::Attribute meta_requiredUUID;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::AssociationRole meta_srcPackageConfReference;
		static ::Uml::AssociationRole meta_srcPackageConfReference_rev;
		static ::Uml::CompositionParentRole meta_PackageConfigurationContainer_parent;
		static ::Uml::CompositionParentRole meta_ComponentAssembly_parent;

	};

	class CQML_Export TopLevelPackageContainer :  public MgaObject {
	public:
		TopLevelPackageContainer();
		TopLevelPackageContainer(::Udm::ObjectImpl *impl);
		TopLevelPackageContainer(const TopLevelPackageContainer &master);

#ifdef UDM_RVALUE
		TopLevelPackageContainer(TopLevelPackageContainer &&master);

		static TopLevelPackageContainer Cast(::Udm::Object &&a);
		TopLevelPackageContainer& operator=(TopLevelPackageContainer &&a);

#endif
		static TopLevelPackageContainer Cast(const ::Udm::Object &a);
		static TopLevelPackageContainer Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		TopLevelPackageContainer CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< TopLevelPackageContainer> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< TopLevelPackageContainer, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< TopLevelPackageContainer, Pred>(impl); };
		TopLevelPackageContainer CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< TopLevelPackageContainer> Derived();
		template <class Pred> ::Udm::DerivedAttr< TopLevelPackageContainer, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< TopLevelPackageContainer, Pred>(impl); };
		::Udm::ArchetypeAttr< TopLevelPackageContainer> Archetype() const;
		::Udm::ChildAttr< ::CQML::PackageConfigurationReference> PackageConfigurationReference_child() const;
		::Udm::ChildAttr< ::CQML::TopLevelPackage> TopLevelPackage_child() const;
		::Udm::ChildAttr< ::CQML::package> package_child() const;
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::TopLevelPackage> TopLevelPackage_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::TopLevelPackage, Pred> TopLevelPackage_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::TopLevelPackage, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::package> package_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::package, Pred> package_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::package, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::PackageConfigurationReference> PackageConfigurationReference_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PackageConfigurationReference, Pred> PackageConfigurationReference_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PackageConfigurationReference, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::TopLevelPackages> TopLevelPackages_parent() const;
		::Udm::ParentAttr< ::CQML::TopLevelPackages> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionChildRole meta_PackageConfigurationReference_child;
		static ::Uml::CompositionChildRole meta_TopLevelPackage_child;
		static ::Uml::CompositionChildRole meta_package_child;
		static ::Uml::CompositionParentRole meta_TopLevelPackages_parent;

	};

	class CQML_Export TopLevelPackage :  public MgaObject {
	public:
		TopLevelPackage();
		TopLevelPackage(::Udm::ObjectImpl *impl);
		TopLevelPackage(const TopLevelPackage &master);

#ifdef UDM_RVALUE
		TopLevelPackage(TopLevelPackage &&master);

		static TopLevelPackage Cast(::Udm::Object &&a);
		TopLevelPackage& operator=(TopLevelPackage &&a);

#endif
		static TopLevelPackage Cast(const ::Udm::Object &a);
		static TopLevelPackage Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		TopLevelPackage CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< TopLevelPackage> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< TopLevelPackage, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< TopLevelPackage, Pred>(impl); };
		TopLevelPackage CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< TopLevelPackage> Derived();
		template <class Pred> ::Udm::DerivedAttr< TopLevelPackage, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< TopLevelPackage, Pred>(impl); };
		::Udm::ArchetypeAttr< TopLevelPackage> Archetype() const;
		::Udm::AClassPointerAttr< package, PackageConfigurationReference> dstpackage() const;
		::Udm::ParentAttr< ::CQML::TopLevelPackageContainer> TopLevelPackageContainer_parent() const;
		::Udm::ParentAttr< ::CQML::TopLevelPackageContainer> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_dstpackage;
		static ::Uml::AssociationRole meta_dstpackage_rev;
		static ::Uml::CompositionParentRole meta_TopLevelPackageContainer_parent;

	};

	class CQML_Export package :  public MgaObject {
	public:
		package();
		package(::Udm::ObjectImpl *impl);
		package(const package &master);

#ifdef UDM_RVALUE
		package(package &&master);

		static package Cast(::Udm::Object &&a);
		package& operator=(package &&a);

#endif
		static package Cast(const ::Udm::Object &a);
		static package Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		package CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< package> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< package, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< package, Pred>(impl); };
		package CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< package> Derived();
		template <class Pred> ::Udm::DerivedAttr< package, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< package, Pred>(impl); };
		::Udm::ArchetypeAttr< package> Archetype() const;
		::Udm::ParentAttr< ::CQML::TopLevelPackageContainer> TopLevelPackageContainer_parent() const;
		::Udm::ParentAttr< ::CQML::TopLevelPackageContainer> parent() const;
		::Udm::AssocEndAttr< ::CQML::TopLevelPackage> srcpackage_end() const;
		::Udm::AssocEndAttr< ::CQML::PackageConfigurationReference> dstpackage_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_TopLevelPackageContainer_parent;
		static ::Uml::AssociationRole meta_srcpackage_end_;
		static ::Uml::AssociationRole meta_dstpackage_end_;

	};

	class CQML_Export ComponentPropertyDescription :  public MgaObject {
	public:
		ComponentPropertyDescription();
		ComponentPropertyDescription(::Udm::ObjectImpl *impl);
		ComponentPropertyDescription(const ComponentPropertyDescription &master);

#ifdef UDM_RVALUE
		ComponentPropertyDescription(ComponentPropertyDescription &&master);

		static ComponentPropertyDescription Cast(::Udm::Object &&a);
		ComponentPropertyDescription& operator=(ComponentPropertyDescription &&a);

#endif
		static ComponentPropertyDescription Cast(const ::Udm::Object &a);
		static ComponentPropertyDescription Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ComponentPropertyDescription CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ComponentPropertyDescription> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ComponentPropertyDescription, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ComponentPropertyDescription, Pred>(impl); };
		ComponentPropertyDescription CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ComponentPropertyDescription> Derived();
		template <class Pred> ::Udm::DerivedAttr< ComponentPropertyDescription, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ComponentPropertyDescription, Pred>(impl); };
		::Udm::ArchetypeAttr< ComponentPropertyDescription> Archetype() const;
		::Udm::AClassAssocAttr< ComponentProperty, ComponentRef> srcComponentProperty() const;
		template <class Pred> ::Udm::AClassAssocAttr< ComponentProperty, ComponentRef, Pred> srcComponentProperty_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< ComponentProperty, ComponentRef, Pred>(impl, meta_srcComponentProperty, meta_srcComponentProperty_rev); };
		::Udm::ChildAttr< ::CQML::DataType> DataType_child() const;
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::DataType> DataType_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::DataType, Pred> DataType_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::DataType, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::ComponentContainer> ComponentContainer_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentContainer> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_srcComponentProperty;
		static ::Uml::AssociationRole meta_srcComponentProperty_rev;
		static ::Uml::CompositionChildRole meta_DataType_child;
		static ::Uml::CompositionParentRole meta_ComponentContainer_parent;

	};

	class CQML_Export ComponentProperty :  public MgaObject {
	public:
		ComponentProperty();
		ComponentProperty(::Udm::ObjectImpl *impl);
		ComponentProperty(const ComponentProperty &master);

#ifdef UDM_RVALUE
		ComponentProperty(ComponentProperty &&master);

		static ComponentProperty Cast(::Udm::Object &&a);
		ComponentProperty& operator=(ComponentProperty &&a);

#endif
		static ComponentProperty Cast(const ::Udm::Object &a);
		static ComponentProperty Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ComponentProperty CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ComponentProperty> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ComponentProperty, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ComponentProperty, Pred>(impl); };
		ComponentProperty CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ComponentProperty> Derived();
		template <class Pred> ::Udm::DerivedAttr< ComponentProperty, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ComponentProperty, Pred>(impl); };
		::Udm::ArchetypeAttr< ComponentProperty> Archetype() const;
		::Udm::ParentAttr< ::CQML::ComponentContainer> ComponentContainer_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentContainer> parent() const;
		::Udm::AssocEndAttr< ::CQML::ComponentRef> srcComponentProperty_end() const;
		::Udm::AssocEndAttr< ::CQML::ComponentPropertyDescription> dstComponentProperty_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ComponentContainer_parent;
		static ::Uml::AssociationRole meta_srcComponentProperty_end_;
		static ::Uml::AssociationRole meta_dstComponentProperty_end_;

	};

	class CQML_Export ComponentContainer :  public MgaObject {
	public:
		ComponentContainer();
		ComponentContainer(::Udm::ObjectImpl *impl);
		ComponentContainer(const ComponentContainer &master);

#ifdef UDM_RVALUE
		ComponentContainer(ComponentContainer &&master);

		static ComponentContainer Cast(::Udm::Object &&a);
		ComponentContainer& operator=(ComponentContainer &&a);

#endif
		static ComponentContainer Cast(const ::Udm::Object &a);
		static ComponentContainer Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ComponentContainer CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ComponentContainer> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ComponentContainer, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ComponentContainer, Pred>(impl); };
		ComponentContainer CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ComponentContainer> Derived();
		template <class Pred> ::Udm::DerivedAttr< ComponentContainer, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ComponentContainer, Pred>(impl); };
		::Udm::ArchetypeAttr< ComponentContainer> Archetype() const;
		::Udm::ChildrenAttr< ::CQML::Property> Property_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Property, Pred> Property_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Property, Pred>(impl, meta_Property_children); };
		::Udm::ChildrenAttr< ::CQML::ComponentConfigProperty> ComponentConfigProperty_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentConfigProperty, Pred> ComponentConfigProperty_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentConfigProperty, Pred>(impl, meta_ComponentConfigProperty_children); };
		::Udm::ChildrenAttr< ::CQML::ComponentInfoProperty> ComponentInfoProperty_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentInfoProperty, Pred> ComponentInfoProperty_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentInfoProperty, Pred>(impl, meta_ComponentInfoProperty_children); };
		::Udm::ChildrenAttr< ::CQML::ComponentProperty> ComponentProperty_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentProperty, Pred> ComponentProperty_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentProperty, Pred>(impl, meta_ComponentProperty_children); };
		::Udm::ChildrenAttr< ::CQML::ComponentPropertyDescription> ComponentPropertyDescription_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentPropertyDescription, Pred> ComponentPropertyDescription_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentPropertyDescription, Pred>(impl, meta_ComponentPropertyDescription_children); };
		::Udm::ChildAttr< ::CQML::ComponentRef> ComponentRef_child() const;
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Manageable> Manageable_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Manageable, Pred> Manageable_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Manageable, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentBase> ComponentBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentBase, Pred> ComponentBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentRef> ComponentRef_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentRef, Pred> ComponentRef_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentRef, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::CollocationGroupMember> CollocationGroupMember_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::CollocationGroupMember, Pred> CollocationGroupMember_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::CollocationGroupMember, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::FTMonitorable> FTMonitorable_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::FTMonitorable, Pred> FTMonitorable_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::FTMonitorable, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Property> Property_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Property, Pred> Property_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Property, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentPropertyDescription> ComponentPropertyDescription_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentPropertyDescription, Pred> ComponentPropertyDescription_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentPropertyDescription, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentProperty> ComponentProperty_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentProperty, Pred> ComponentProperty_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentProperty, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentConfigProperty> ComponentConfigProperty_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentConfigProperty, Pred> ComponentConfigProperty_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentConfigProperty, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentInfoProperty> ComponentInfoProperty_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentInfoProperty, Pred> ComponentInfoProperty_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentInfoProperty, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::ComponentTypes> ComponentTypes_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentTypes> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionChildRole meta_Property_children;
		static ::Uml::CompositionChildRole meta_ComponentConfigProperty_children;
		static ::Uml::CompositionChildRole meta_ComponentInfoProperty_children;
		static ::Uml::CompositionChildRole meta_ComponentProperty_children;
		static ::Uml::CompositionChildRole meta_ComponentPropertyDescription_children;
		static ::Uml::CompositionChildRole meta_ComponentRef_child;
		static ::Uml::CompositionParentRole meta_ComponentTypes_parent;

	};

	class CQML_Export ComponentConfigProperty :  public MgaObject {
	public:
		ComponentConfigProperty();
		ComponentConfigProperty(::Udm::ObjectImpl *impl);
		ComponentConfigProperty(const ComponentConfigProperty &master);

#ifdef UDM_RVALUE
		ComponentConfigProperty(ComponentConfigProperty &&master);

		static ComponentConfigProperty Cast(::Udm::Object &&a);
		ComponentConfigProperty& operator=(ComponentConfigProperty &&a);

#endif
		static ComponentConfigProperty Cast(const ::Udm::Object &a);
		static ComponentConfigProperty Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ComponentConfigProperty CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ComponentConfigProperty> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ComponentConfigProperty, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ComponentConfigProperty, Pred>(impl); };
		ComponentConfigProperty CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ComponentConfigProperty> Derived();
		template <class Pred> ::Udm::DerivedAttr< ComponentConfigProperty, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ComponentConfigProperty, Pred>(impl); };
		::Udm::ArchetypeAttr< ComponentConfigProperty> Archetype() const;
		::Udm::ParentAttr< ::CQML::ComponentContainer> ComponentContainer_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentContainer> parent() const;
		::Udm::AssocEndAttr< ::CQML::ComponentRef> srcComponentConfigProperty_end() const;
		::Udm::AssocEndAttr< ::CQML::Property> dstComponentConfigProperty_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ComponentContainer_parent;
		static ::Uml::AssociationRole meta_srcComponentConfigProperty_end_;
		static ::Uml::AssociationRole meta_dstComponentConfigProperty_end_;

	};

	class CQML_Export ComponentInfoProperty :  public MgaObject {
	public:
		ComponentInfoProperty();
		ComponentInfoProperty(::Udm::ObjectImpl *impl);
		ComponentInfoProperty(const ComponentInfoProperty &master);

#ifdef UDM_RVALUE
		ComponentInfoProperty(ComponentInfoProperty &&master);

		static ComponentInfoProperty Cast(::Udm::Object &&a);
		ComponentInfoProperty& operator=(ComponentInfoProperty &&a);

#endif
		static ComponentInfoProperty Cast(const ::Udm::Object &a);
		static ComponentInfoProperty Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ComponentInfoProperty CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ComponentInfoProperty> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ComponentInfoProperty, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ComponentInfoProperty, Pred>(impl); };
		ComponentInfoProperty CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ComponentInfoProperty> Derived();
		template <class Pred> ::Udm::DerivedAttr< ComponentInfoProperty, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ComponentInfoProperty, Pred>(impl); };
		::Udm::ArchetypeAttr< ComponentInfoProperty> Archetype() const;
		::Udm::ParentAttr< ::CQML::ComponentContainer> ComponentContainer_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentContainer> parent() const;
		::Udm::AssocEndAttr< ::CQML::ComponentRef> srcComponentInfoProperty_end() const;
		::Udm::AssocEndAttr< ::CQML::Property> dstComponentInfoProperty_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ComponentContainer_parent;
		static ::Uml::AssociationRole meta_srcComponentInfoProperty_end_;
		static ::Uml::AssociationRole meta_dstComponentInfoProperty_end_;

	};

	class CQML_Export ImplementationArtifactReference :  public MgaObject {
	public:
		ImplementationArtifactReference();
		ImplementationArtifactReference(::Udm::ObjectImpl *impl);
		ImplementationArtifactReference(const ImplementationArtifactReference &master);

#ifdef UDM_RVALUE
		ImplementationArtifactReference(ImplementationArtifactReference &&master);

		static ImplementationArtifactReference Cast(::Udm::Object &&a);
		ImplementationArtifactReference& operator=(ImplementationArtifactReference &&a);

#endif
		static ImplementationArtifactReference Cast(const ::Udm::Object &a);
		static ImplementationArtifactReference Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ImplementationArtifactReference CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ImplementationArtifactReference> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ImplementationArtifactReference, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ImplementationArtifactReference, Pred>(impl); };
		ImplementationArtifactReference CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ImplementationArtifactReference> Derived();
		template <class Pred> ::Udm::DerivedAttr< ImplementationArtifactReference, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ImplementationArtifactReference, Pred>(impl); };
		::Udm::ArchetypeAttr< ImplementationArtifactReference> Archetype() const;
		::Udm::PointerAttr< ImplementationArtifact> ref() const;
		::Udm::AClassAssocAttr< ArtifactDependsOn, ImplementationArtifact> srcArtifactDependsOn() const;
		template <class Pred> ::Udm::AClassAssocAttr< ArtifactDependsOn, ImplementationArtifact, Pred> srcArtifactDependsOn_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< ArtifactDependsOn, ImplementationArtifact, Pred>(impl, meta_srcArtifactDependsOn, meta_srcArtifactDependsOn_rev); };
		::Udm::AClassAssocAttr< MonolithprimaryArtifact, MonolithicImplementationBase> srcMonolithprimaryArtifact() const;
		template <class Pred> ::Udm::AClassAssocAttr< MonolithprimaryArtifact, MonolithicImplementationBase, Pred> srcMonolithprimaryArtifact_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< MonolithprimaryArtifact, MonolithicImplementationBase, Pred>(impl, meta_srcMonolithprimaryArtifact, meta_srcMonolithprimaryArtifact_rev); };
		::Udm::ParentAttr< ::CQML::StubProject> StubProject_parent() const;
		::Udm::ParentAttr< ::CQML::ServantProject> ServantProject_parent() const;
		::Udm::ParentAttr< ::CQML::ExecutorProject> ExecutorProject_parent() const;
		::Udm::ParentAttr< ::CQML::ArtifactContainer> ArtifactContainer_parent() const;
		::Udm::ParentAttr< ::CQML::ImplementationContainer> ImplementationContainer_parent() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::AssociationRole meta_srcArtifactDependsOn;
		static ::Uml::AssociationRole meta_srcArtifactDependsOn_rev;
		static ::Uml::AssociationRole meta_srcMonolithprimaryArtifact;
		static ::Uml::AssociationRole meta_srcMonolithprimaryArtifact_rev;
		static ::Uml::CompositionParentRole meta_StubProject_parent;
		static ::Uml::CompositionParentRole meta_ServantProject_parent;
		static ::Uml::CompositionParentRole meta_ExecutorProject_parent;
		static ::Uml::CompositionParentRole meta_ArtifactContainer_parent;
		static ::Uml::CompositionParentRole meta_ImplementationContainer_parent;

	};

	class CQML_Export ComponentServantArtifact :  public ImplementationArtifactReference {
	public:
		ComponentServantArtifact();
		ComponentServantArtifact(::Udm::ObjectImpl *impl);
		ComponentServantArtifact(const ComponentServantArtifact &master);

#ifdef UDM_RVALUE
		ComponentServantArtifact(ComponentServantArtifact &&master);

		static ComponentServantArtifact Cast(::Udm::Object &&a);
		ComponentServantArtifact& operator=(ComponentServantArtifact &&a);

#endif
		static ComponentServantArtifact Cast(const ::Udm::Object &a);
		static ComponentServantArtifact Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ComponentServantArtifact CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ComponentServantArtifact> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ComponentServantArtifact, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ComponentServantArtifact, Pred>(impl); };
		ComponentServantArtifact CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ComponentServantArtifact> Derived();
		template <class Pred> ::Udm::DerivedAttr< ComponentServantArtifact, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ComponentServantArtifact, Pred>(impl); };
		::Udm::ArchetypeAttr< ComponentServantArtifact> Archetype() const;
		::Udm::PointerAttr< ImplementationArtifact> ref() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_ref;

	};

	class CQML_Export ComponentImplementationArtifact :  public ImplementationArtifactReference {
	public:
		ComponentImplementationArtifact();
		ComponentImplementationArtifact(::Udm::ObjectImpl *impl);
		ComponentImplementationArtifact(const ComponentImplementationArtifact &master);

#ifdef UDM_RVALUE
		ComponentImplementationArtifact(ComponentImplementationArtifact &&master);

		static ComponentImplementationArtifact Cast(::Udm::Object &&a);
		ComponentImplementationArtifact& operator=(ComponentImplementationArtifact &&a);

#endif
		static ComponentImplementationArtifact Cast(const ::Udm::Object &a);
		static ComponentImplementationArtifact Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ComponentImplementationArtifact CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ComponentImplementationArtifact> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ComponentImplementationArtifact, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ComponentImplementationArtifact, Pred>(impl); };
		ComponentImplementationArtifact CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ComponentImplementationArtifact> Derived();
		template <class Pred> ::Udm::DerivedAttr< ComponentImplementationArtifact, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ComponentImplementationArtifact, Pred>(impl); };
		::Udm::ArchetypeAttr< ComponentImplementationArtifact> Archetype() const;
		::Udm::PointerAttr< ImplementationArtifact> ref() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_ref;

	};

	class CQML_Export ArtifactDependsOn :  public MgaObject {
	public:
		ArtifactDependsOn();
		ArtifactDependsOn(::Udm::ObjectImpl *impl);
		ArtifactDependsOn(const ArtifactDependsOn &master);

#ifdef UDM_RVALUE
		ArtifactDependsOn(ArtifactDependsOn &&master);

		static ArtifactDependsOn Cast(::Udm::Object &&a);
		ArtifactDependsOn& operator=(ArtifactDependsOn &&a);

#endif
		static ArtifactDependsOn Cast(const ::Udm::Object &a);
		static ArtifactDependsOn Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ArtifactDependsOn CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ArtifactDependsOn> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ArtifactDependsOn, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ArtifactDependsOn, Pred>(impl); };
		ArtifactDependsOn CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ArtifactDependsOn> Derived();
		template <class Pred> ::Udm::DerivedAttr< ArtifactDependsOn, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ArtifactDependsOn, Pred>(impl); };
		::Udm::ArchetypeAttr< ArtifactDependsOn> Archetype() const;
		::Udm::ParentAttr< ::CQML::ArtifactContainer> ArtifactContainer_parent() const;
		::Udm::ParentAttr< ::CQML::ArtifactContainer> parent() const;
		::Udm::AssocEndAttr< ::CQML::ImplementationArtifact> srcArtifactDependsOn_end() const;
		::Udm::AssocEndAttr< ::CQML::ImplementationArtifactReference> dstArtifactDependsOn_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ArtifactContainer_parent;
		static ::Uml::AssociationRole meta_srcArtifactDependsOn_end_;
		static ::Uml::AssociationRole meta_dstArtifactDependsOn_end_;

	};

	class CQML_Export ArtifactDeployRequirement :  public MgaObject {
	public:
		ArtifactDeployRequirement();
		ArtifactDeployRequirement(::Udm::ObjectImpl *impl);
		ArtifactDeployRequirement(const ArtifactDeployRequirement &master);

#ifdef UDM_RVALUE
		ArtifactDeployRequirement(ArtifactDeployRequirement &&master);

		static ArtifactDeployRequirement Cast(::Udm::Object &&a);
		ArtifactDeployRequirement& operator=(ArtifactDeployRequirement &&a);

#endif
		static ArtifactDeployRequirement Cast(const ::Udm::Object &a);
		static ArtifactDeployRequirement Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ArtifactDeployRequirement CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ArtifactDeployRequirement> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ArtifactDeployRequirement, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ArtifactDeployRequirement, Pred>(impl); };
		ArtifactDeployRequirement CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ArtifactDeployRequirement> Derived();
		template <class Pred> ::Udm::DerivedAttr< ArtifactDeployRequirement, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ArtifactDeployRequirement, Pred>(impl); };
		::Udm::ArchetypeAttr< ArtifactDeployRequirement> Archetype() const;
		::Udm::ParentAttr< ::CQML::ArtifactContainer> ArtifactContainer_parent() const;
		::Udm::ParentAttr< ::CQML::ArtifactContainer> parent() const;
		::Udm::AssocEndAttr< ::CQML::ImplementationArtifact> srcArtifactDeployRequirement_end() const;
		::Udm::AssocEndAttr< ::CQML::Requirement> dstArtifactDeployRequirement_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ArtifactContainer_parent;
		static ::Uml::AssociationRole meta_srcArtifactDeployRequirement_end_;
		static ::Uml::AssociationRole meta_dstArtifactDeployRequirement_end_;

	};

	class CQML_Export ArtifactContainer :  public MgaObject {
	public:
		ArtifactContainer();
		ArtifactContainer(::Udm::ObjectImpl *impl);
		ArtifactContainer(const ArtifactContainer &master);

#ifdef UDM_RVALUE
		ArtifactContainer(ArtifactContainer &&master);

		static ArtifactContainer Cast(::Udm::Object &&a);
		ArtifactContainer& operator=(ArtifactContainer &&a);

#endif
		static ArtifactContainer Cast(const ::Udm::Object &a);
		static ArtifactContainer Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ArtifactContainer CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ArtifactContainer> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ArtifactContainer, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ArtifactContainer, Pred>(impl); };
		ArtifactContainer CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ArtifactContainer> Derived();
		template <class Pred> ::Udm::DerivedAttr< ArtifactContainer, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ArtifactContainer, Pred>(impl); };
		::Udm::ArchetypeAttr< ArtifactContainer> Archetype() const;
		::Udm::ChildrenAttr< ::CQML::ArtifactDependsOn> ArtifactDependsOn_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ArtifactDependsOn, Pred> ArtifactDependsOn_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ArtifactDependsOn, Pred>(impl, meta_ArtifactDependsOn_children); };
		::Udm::ChildrenAttr< ::CQML::ImplementationArtifactReference> ImplementationArtifactReference_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ImplementationArtifactReference, Pred> ImplementationArtifactReference_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ImplementationArtifactReference, Pred>(impl, meta_ImplementationArtifactReference_children); };
		::Udm::ChildrenAttr< ::CQML::ArtifactDeployRequirement> ArtifactDeployRequirement_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ArtifactDeployRequirement, Pred> ArtifactDeployRequirement_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ArtifactDeployRequirement, Pred>(impl, meta_ArtifactDeployRequirement_children); };
		::Udm::ChildrenAttr< ::CQML::Requirement> Requirement_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Requirement, Pred> Requirement_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Requirement, Pred>(impl, meta_Requirement_children); };
		::Udm::ChildrenAttr< ::CQML::ArtifactExecParameter> ArtifactExecParameter_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ArtifactExecParameter, Pred> ArtifactExecParameter_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ArtifactExecParameter, Pred>(impl, meta_ArtifactExecParameter_children); };
		::Udm::ChildrenAttr< ::CQML::ArtifactInfoProperty> ArtifactInfoProperty_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ArtifactInfoProperty, Pred> ArtifactInfoProperty_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ArtifactInfoProperty, Pred>(impl, meta_ArtifactInfoProperty_children); };
		::Udm::ChildrenAttr< ::CQML::Property> Property_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Property, Pred> Property_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Property, Pred>(impl, meta_Property_children); };
		::Udm::ChildrenAttr< ::CQML::ImplementationArtifact> ImplementationArtifact_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ImplementationArtifact, Pred> ImplementationArtifact_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ImplementationArtifact, Pred>(impl, meta_ImplementationArtifact_children); };
		::Udm::ChildrenAttr< ::CQML::ArtifactDependency> ArtifactDependency_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ArtifactDependency, Pred> ArtifactDependency_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ArtifactDependency, Pred>(impl, meta_ArtifactDependency_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Requirement> Requirement_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Requirement, Pred> Requirement_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Requirement, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::RequirementBase> RequirementBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::RequirementBase, Pred> RequirementBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::RequirementBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ECRequirements> ECRequirements_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ECRequirements, Pred> ECRequirements_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ECRequirements, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::RTRequirements> RTRequirements_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::RTRequirements, Pred> RTRequirements_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::RTRequirements, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Property> Property_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Property, Pred> Property_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Property, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ImplementationArtifactReference> ImplementationArtifactReference_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ImplementationArtifactReference, Pred> ImplementationArtifactReference_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ImplementationArtifactReference, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentServantArtifact> ComponentServantArtifact_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentServantArtifact, Pred> ComponentServantArtifact_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentServantArtifact, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentImplementationArtifact> ComponentImplementationArtifact_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentImplementationArtifact, Pred> ComponentImplementationArtifact_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentImplementationArtifact, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ArtifactDependsOn> ArtifactDependsOn_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ArtifactDependsOn, Pred> ArtifactDependsOn_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ArtifactDependsOn, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ArtifactDeployRequirement> ArtifactDeployRequirement_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ArtifactDeployRequirement, Pred> ArtifactDeployRequirement_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ArtifactDeployRequirement, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ArtifactExecParameter> ArtifactExecParameter_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ArtifactExecParameter, Pred> ArtifactExecParameter_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ArtifactExecParameter, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ArtifactInfoProperty> ArtifactInfoProperty_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ArtifactInfoProperty, Pred> ArtifactInfoProperty_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ArtifactInfoProperty, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ImplementationArtifact> ImplementationArtifact_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ImplementationArtifact, Pred> ImplementationArtifact_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ImplementationArtifact, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ArtifactDependency> ArtifactDependency_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ArtifactDependency, Pred> ArtifactDependency_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ArtifactDependency, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::ImplementationArtifacts> ImplementationArtifacts_parent() const;
		::Udm::ParentAttr< ::CQML::ImplementationArtifacts> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionChildRole meta_ArtifactDependsOn_children;
		static ::Uml::CompositionChildRole meta_ImplementationArtifactReference_children;
		static ::Uml::CompositionChildRole meta_ArtifactDeployRequirement_children;
		static ::Uml::CompositionChildRole meta_Requirement_children;
		static ::Uml::CompositionChildRole meta_ArtifactExecParameter_children;
		static ::Uml::CompositionChildRole meta_ArtifactInfoProperty_children;
		static ::Uml::CompositionChildRole meta_Property_children;
		static ::Uml::CompositionChildRole meta_ImplementationArtifact_children;
		static ::Uml::CompositionChildRole meta_ArtifactDependency_children;
		static ::Uml::CompositionParentRole meta_ImplementationArtifacts_parent;

	};

	class CQML_Export ArtifactExecParameter :  public MgaObject {
	public:
		ArtifactExecParameter();
		ArtifactExecParameter(::Udm::ObjectImpl *impl);
		ArtifactExecParameter(const ArtifactExecParameter &master);

#ifdef UDM_RVALUE
		ArtifactExecParameter(ArtifactExecParameter &&master);

		static ArtifactExecParameter Cast(::Udm::Object &&a);
		ArtifactExecParameter& operator=(ArtifactExecParameter &&a);

#endif
		static ArtifactExecParameter Cast(const ::Udm::Object &a);
		static ArtifactExecParameter Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ArtifactExecParameter CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ArtifactExecParameter> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ArtifactExecParameter, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ArtifactExecParameter, Pred>(impl); };
		ArtifactExecParameter CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ArtifactExecParameter> Derived();
		template <class Pred> ::Udm::DerivedAttr< ArtifactExecParameter, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ArtifactExecParameter, Pred>(impl); };
		::Udm::ArchetypeAttr< ArtifactExecParameter> Archetype() const;
		::Udm::ParentAttr< ::CQML::ArtifactContainer> ArtifactContainer_parent() const;
		::Udm::ParentAttr< ::CQML::ArtifactContainer> parent() const;
		::Udm::AssocEndAttr< ::CQML::ImplementationArtifact> srcArtifactExecParameter_end() const;
		::Udm::AssocEndAttr< ::CQML::Property> dstArtifactExecParameter_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ArtifactContainer_parent;
		static ::Uml::AssociationRole meta_srcArtifactExecParameter_end_;
		static ::Uml::AssociationRole meta_dstArtifactExecParameter_end_;

	};

	class CQML_Export ArtifactInfoProperty :  public MgaObject {
	public:
		ArtifactInfoProperty();
		ArtifactInfoProperty(::Udm::ObjectImpl *impl);
		ArtifactInfoProperty(const ArtifactInfoProperty &master);

#ifdef UDM_RVALUE
		ArtifactInfoProperty(ArtifactInfoProperty &&master);

		static ArtifactInfoProperty Cast(::Udm::Object &&a);
		ArtifactInfoProperty& operator=(ArtifactInfoProperty &&a);

#endif
		static ArtifactInfoProperty Cast(const ::Udm::Object &a);
		static ArtifactInfoProperty Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ArtifactInfoProperty CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ArtifactInfoProperty> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ArtifactInfoProperty, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ArtifactInfoProperty, Pred>(impl); };
		ArtifactInfoProperty CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ArtifactInfoProperty> Derived();
		template <class Pred> ::Udm::DerivedAttr< ArtifactInfoProperty, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ArtifactInfoProperty, Pred>(impl); };
		::Udm::ArchetypeAttr< ArtifactInfoProperty> Archetype() const;
		::Udm::ParentAttr< ::CQML::ArtifactContainer> ArtifactContainer_parent() const;
		::Udm::ParentAttr< ::CQML::ArtifactContainer> parent() const;
		::Udm::AssocEndAttr< ::CQML::ImplementationArtifact> srcArtifactInfoProperty_end() const;
		::Udm::AssocEndAttr< ::CQML::Property> dstArtifactInfoProperty_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ArtifactContainer_parent;
		static ::Uml::AssociationRole meta_srcArtifactInfoProperty_end_;
		static ::Uml::AssociationRole meta_dstArtifactInfoProperty_end_;

	};

	class CQML_Export ImplementationArtifact :  public MgaObject {
	public:
		ImplementationArtifact();
		ImplementationArtifact(::Udm::ObjectImpl *impl);
		ImplementationArtifact(const ImplementationArtifact &master);

#ifdef UDM_RVALUE
		ImplementationArtifact(ImplementationArtifact &&master);

		static ImplementationArtifact Cast(::Udm::Object &&a);
		ImplementationArtifact& operator=(ImplementationArtifact &&a);

#endif
		static ImplementationArtifact Cast(const ::Udm::Object &a);
		static ImplementationArtifact Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ImplementationArtifact CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ImplementationArtifact> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ImplementationArtifact, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ImplementationArtifact, Pred>(impl); };
		ImplementationArtifact CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ImplementationArtifact> Derived();
		template <class Pred> ::Udm::DerivedAttr< ImplementationArtifact, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ImplementationArtifact, Pred>(impl); };
		::Udm::ArchetypeAttr< ImplementationArtifact> Archetype() const;
		::Udm::StringAttr artifactVersion() const;
		::Udm::StringAttr architecture() const;
		::Udm::StringAttr configuration() const;
		::Udm::StringAttr operatingSystem() const;
		::Udm::StringAttr location() const;
		::Udm::StringAttr UUID() const;
		::Udm::StringAttr label() const;
		::Udm::AssocAttr< ExternalResources> referedbyExternalResources() const;
		template <class Pred> ::Udm::AssocAttr< ExternalResources, Pred> referedbyExternalResources_sorted(const Pred &) const { return ::Udm::AssocAttr< ExternalResources, Pred>(impl, meta_referedbyExternalResources); };
		::Udm::AssocAttr< ImplementationArtifactReference> referedbyImplementationArtifactReference() const;
		template <class Pred> ::Udm::AssocAttr< ImplementationArtifactReference, Pred> referedbyImplementationArtifactReference_sorted(const Pred &) const { return ::Udm::AssocAttr< ImplementationArtifactReference, Pred>(impl, meta_referedbyImplementationArtifactReference); };
		::Udm::AClassAssocAttr< ArtifactDependsOn, ImplementationArtifactReference> dstArtifactDependsOn() const;
		template <class Pred> ::Udm::AClassAssocAttr< ArtifactDependsOn, ImplementationArtifactReference, Pred> dstArtifactDependsOn_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< ArtifactDependsOn, ImplementationArtifactReference, Pred>(impl, meta_dstArtifactDependsOn, meta_dstArtifactDependsOn_rev); };
		::Udm::AClassAssocAttr< ArtifactDeployRequirement, Requirement> dstArtifactDeployRequirement() const;
		template <class Pred> ::Udm::AClassAssocAttr< ArtifactDeployRequirement, Requirement, Pred> dstArtifactDeployRequirement_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< ArtifactDeployRequirement, Requirement, Pred>(impl, meta_dstArtifactDeployRequirement, meta_dstArtifactDeployRequirement_rev); };
		::Udm::AClassAssocAttr< ArtifactExecParameter, Property> dstArtifactExecParameter() const;
		template <class Pred> ::Udm::AClassAssocAttr< ArtifactExecParameter, Property, Pred> dstArtifactExecParameter_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< ArtifactExecParameter, Property, Pred>(impl, meta_dstArtifactExecParameter, meta_dstArtifactExecParameter_rev); };
		::Udm::AClassAssocAttr< ArtifactInfoProperty, Property> dstArtifactInfoProperty() const;
		template <class Pred> ::Udm::AClassAssocAttr< ArtifactInfoProperty, Property, Pred> dstArtifactInfoProperty_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< ArtifactInfoProperty, Property, Pred>(impl, meta_dstArtifactInfoProperty, meta_dstArtifactInfoProperty_rev); };
		::Udm::AClassAssocAttr< ArtifactDependency, ImplementationArtifact> dstArtifactDependency() const;
		template <class Pred> ::Udm::AClassAssocAttr< ArtifactDependency, ImplementationArtifact, Pred> dstArtifactDependency_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< ArtifactDependency, ImplementationArtifact, Pred>(impl, meta_dstArtifactDependency, meta_dstArtifactDependency_rev); };
		::Udm::AClassAssocAttr< ArtifactDependency, ImplementationArtifact> srcArtifactDependency() const;
		template <class Pred> ::Udm::AClassAssocAttr< ArtifactDependency, ImplementationArtifact, Pred> srcArtifactDependency_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< ArtifactDependency, ImplementationArtifact, Pred>(impl, meta_srcArtifactDependency, meta_srcArtifactDependency_rev); };
		::Udm::AssocAttr< ComponentServantArtifact> referedbyComponentServantArtifact() const;
		template <class Pred> ::Udm::AssocAttr< ComponentServantArtifact, Pred> referedbyComponentServantArtifact_sorted(const Pred &) const { return ::Udm::AssocAttr< ComponentServantArtifact, Pred>(impl, meta_referedbyComponentServantArtifact); };
		::Udm::AssocAttr< ComponentImplementationArtifact> referedbyComponentImplemenationArtifact() const;
		template <class Pred> ::Udm::AssocAttr< ComponentImplementationArtifact, Pred> referedbyComponentImplemenationArtifact_sorted(const Pred &) const { return ::Udm::AssocAttr< ComponentImplementationArtifact, Pred>(impl, meta_referedbyComponentImplemenationArtifact); };
		::Udm::ParentAttr< ::CQML::Project> Project_parent() const;
		::Udm::ParentAttr< ::CQML::ArtifactContainer> ArtifactContainer_parent() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_artifactVersion;
		static ::Uml::Attribute meta_architecture;
		static ::Uml::Attribute meta_configuration;
		static ::Uml::Attribute meta_operatingSystem;
		static ::Uml::Attribute meta_location;
		static ::Uml::Attribute meta_UUID;
		static ::Uml::Attribute meta_label;
		static ::Uml::AssociationRole meta_referedbyExternalResources;
		static ::Uml::AssociationRole meta_referedbyImplementationArtifactReference;
		static ::Uml::AssociationRole meta_dstArtifactDependsOn;
		static ::Uml::AssociationRole meta_dstArtifactDependsOn_rev;
		static ::Uml::AssociationRole meta_dstArtifactDeployRequirement;
		static ::Uml::AssociationRole meta_dstArtifactDeployRequirement_rev;
		static ::Uml::AssociationRole meta_dstArtifactExecParameter;
		static ::Uml::AssociationRole meta_dstArtifactExecParameter_rev;
		static ::Uml::AssociationRole meta_dstArtifactInfoProperty;
		static ::Uml::AssociationRole meta_dstArtifactInfoProperty_rev;
		static ::Uml::AssociationRole meta_dstArtifactDependency;
		static ::Uml::AssociationRole meta_dstArtifactDependency_rev;
		static ::Uml::AssociationRole meta_srcArtifactDependency;
		static ::Uml::AssociationRole meta_srcArtifactDependency_rev;
		static ::Uml::AssociationRole meta_referedbyComponentServantArtifact;
		static ::Uml::AssociationRole meta_referedbyComponentImplemenationArtifact;
		static ::Uml::CompositionParentRole meta_Project_parent;
		static ::Uml::CompositionParentRole meta_ArtifactContainer_parent;

	};

	class CQML_Export ArtifactDependency :  public MgaObject {
	public:
		ArtifactDependency();
		ArtifactDependency(::Udm::ObjectImpl *impl);
		ArtifactDependency(const ArtifactDependency &master);

#ifdef UDM_RVALUE
		ArtifactDependency(ArtifactDependency &&master);

		static ArtifactDependency Cast(::Udm::Object &&a);
		ArtifactDependency& operator=(ArtifactDependency &&a);

#endif
		static ArtifactDependency Cast(const ::Udm::Object &a);
		static ArtifactDependency Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ArtifactDependency CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ArtifactDependency> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ArtifactDependency, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ArtifactDependency, Pred>(impl); };
		ArtifactDependency CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ArtifactDependency> Derived();
		template <class Pred> ::Udm::DerivedAttr< ArtifactDependency, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ArtifactDependency, Pred>(impl); };
		::Udm::ArchetypeAttr< ArtifactDependency> Archetype() const;
		::Udm::ParentAttr< ::CQML::ArtifactContainer> ArtifactContainer_parent() const;
		::Udm::ParentAttr< ::CQML::ArtifactContainer> parent() const;
		::Udm::AssocEndAttr< ::CQML::ImplementationArtifact> srcArtifactDependency_end() const;
		::Udm::AssocEndAttr< ::CQML::ImplementationArtifact> dstArtifactDependency_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ArtifactContainer_parent;
		static ::Uml::AssociationRole meta_srcArtifactDependency_end_;
		static ::Uml::AssociationRole meta_dstArtifactDependency_end_;

	};

	class CQML_Export PackageConfBasePackage :  public MgaObject {
	public:
		PackageConfBasePackage();
		PackageConfBasePackage(::Udm::ObjectImpl *impl);
		PackageConfBasePackage(const PackageConfBasePackage &master);

#ifdef UDM_RVALUE
		PackageConfBasePackage(PackageConfBasePackage &&master);

		static PackageConfBasePackage Cast(::Udm::Object &&a);
		PackageConfBasePackage& operator=(PackageConfBasePackage &&a);

#endif
		static PackageConfBasePackage Cast(const ::Udm::Object &a);
		static PackageConfBasePackage Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		PackageConfBasePackage CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< PackageConfBasePackage> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< PackageConfBasePackage, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< PackageConfBasePackage, Pred>(impl); };
		PackageConfBasePackage CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< PackageConfBasePackage> Derived();
		template <class Pred> ::Udm::DerivedAttr< PackageConfBasePackage, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< PackageConfBasePackage, Pred>(impl); };
		::Udm::ArchetypeAttr< PackageConfBasePackage> Archetype() const;
		::Udm::ParentAttr< ::CQML::PackageConfigurationContainer> PackageConfigurationContainer_parent() const;
		::Udm::ParentAttr< ::CQML::PackageConfigurationContainer> parent() const;
		::Udm::AssocEndAttr< ::CQML::PackageConfiguration> srcPackageConfBasePackage_end() const;
		::Udm::AssocEndAttr< ::CQML::ComponentPackage> dstPackageConfBasePackage_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_PackageConfigurationContainer_parent;
		static ::Uml::AssociationRole meta_srcPackageConfBasePackage_end_;
		static ::Uml::AssociationRole meta_dstPackageConfBasePackage_end_;

	};

	class CQML_Export PackageConfReference :  public MgaObject {
	public:
		PackageConfReference();
		PackageConfReference(::Udm::ObjectImpl *impl);
		PackageConfReference(const PackageConfReference &master);

#ifdef UDM_RVALUE
		PackageConfReference(PackageConfReference &&master);

		static PackageConfReference Cast(::Udm::Object &&a);
		PackageConfReference& operator=(PackageConfReference &&a);

#endif
		static PackageConfReference Cast(const ::Udm::Object &a);
		static PackageConfReference Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		PackageConfReference CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< PackageConfReference> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< PackageConfReference, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< PackageConfReference, Pred>(impl); };
		PackageConfReference CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< PackageConfReference> Derived();
		template <class Pred> ::Udm::DerivedAttr< PackageConfReference, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< PackageConfReference, Pred>(impl); };
		::Udm::ArchetypeAttr< PackageConfReference> Archetype() const;
		::Udm::ParentAttr< ::CQML::PackageConfigurationContainer> PackageConfigurationContainer_parent() const;
		::Udm::ParentAttr< ::CQML::PackageConfigurationContainer> parent() const;
		::Udm::AssocEndAttr< ::CQML::PackageConfiguration> srcPackageConfReference_end() const;
		::Udm::AssocEndAttr< ::CQML::ComponentPackageReference> dstPackageConfReference_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_PackageConfigurationContainer_parent;
		static ::Uml::AssociationRole meta_srcPackageConfReference_end_;
		static ::Uml::AssociationRole meta_dstPackageConfReference_end_;

	};

	class CQML_Export PackageConfigurationReference :  public MgaObject {
	public:
		PackageConfigurationReference();
		PackageConfigurationReference(::Udm::ObjectImpl *impl);
		PackageConfigurationReference(const PackageConfigurationReference &master);

#ifdef UDM_RVALUE
		PackageConfigurationReference(PackageConfigurationReference &&master);

		static PackageConfigurationReference Cast(::Udm::Object &&a);
		PackageConfigurationReference& operator=(PackageConfigurationReference &&a);

#endif
		static PackageConfigurationReference Cast(const ::Udm::Object &a);
		static PackageConfigurationReference Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		PackageConfigurationReference CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< PackageConfigurationReference> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< PackageConfigurationReference, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< PackageConfigurationReference, Pred>(impl); };
		PackageConfigurationReference CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< PackageConfigurationReference> Derived();
		template <class Pred> ::Udm::DerivedAttr< PackageConfigurationReference, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< PackageConfigurationReference, Pred>(impl); };
		::Udm::ArchetypeAttr< PackageConfigurationReference> Archetype() const;
		::Udm::AClassPointerAttr< package, TopLevelPackage> srcpackage() const;
		::Udm::PointerAttr< PackageConfiguration> ref() const;
		::Udm::AClassAssocAttr< PackageConfSpecializedConfig, PackageConfiguration> srcPackageConfSpecializedConfig() const;
		template <class Pred> ::Udm::AClassAssocAttr< PackageConfSpecializedConfig, PackageConfiguration, Pred> srcPackageConfSpecializedConfig_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< PackageConfSpecializedConfig, PackageConfiguration, Pred>(impl, meta_srcPackageConfSpecializedConfig, meta_srcPackageConfSpecializedConfig_rev); };
		::Udm::ParentAttr< ::CQML::TopLevelPackageContainer> TopLevelPackageContainer_parent() const;
		::Udm::ParentAttr< ::CQML::TopLevelPackageContainer> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_srcpackage;
		static ::Uml::AssociationRole meta_srcpackage_rev;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::AssociationRole meta_srcPackageConfSpecializedConfig;
		static ::Uml::AssociationRole meta_srcPackageConfSpecializedConfig_rev;
		static ::Uml::CompositionParentRole meta_TopLevelPackageContainer_parent;

	};

	class CQML_Export PackageConfigurationContainer :  public MgaObject {
	public:
		PackageConfigurationContainer();
		PackageConfigurationContainer(::Udm::ObjectImpl *impl);
		PackageConfigurationContainer(const PackageConfigurationContainer &master);

#ifdef UDM_RVALUE
		PackageConfigurationContainer(PackageConfigurationContainer &&master);

		static PackageConfigurationContainer Cast(::Udm::Object &&a);
		PackageConfigurationContainer& operator=(PackageConfigurationContainer &&a);

#endif
		static PackageConfigurationContainer Cast(const ::Udm::Object &a);
		static PackageConfigurationContainer Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		PackageConfigurationContainer CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< PackageConfigurationContainer> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< PackageConfigurationContainer, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< PackageConfigurationContainer, Pred>(impl); };
		PackageConfigurationContainer CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< PackageConfigurationContainer> Derived();
		template <class Pred> ::Udm::DerivedAttr< PackageConfigurationContainer, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< PackageConfigurationContainer, Pred>(impl); };
		::Udm::ArchetypeAttr< PackageConfigurationContainer> Archetype() const;
		::Udm::ChildAttr< ::CQML::PackageConfBasePackage> PackageConfBasePackage_child() const;
		::Udm::ChildAttr< ::CQML::PackageConfReference> PackageConfReference_child() const;
		::Udm::ChildAttr< ::CQML::ComponentPackage> ComponentPackage_child() const;
		::Udm::ChildAttr< ::CQML::ComponentPackageReference> ComponentPackageReference_child() const;
		::Udm::ChildrenAttr< ::CQML::PackageConfConfigProperty> PackageConfConfigProperty_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PackageConfConfigProperty, Pred> PackageConfConfigProperty_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PackageConfConfigProperty, Pred>(impl, meta_PackageConfConfigProperty_children); };
		::Udm::ChildrenAttr< ::CQML::PackageConfSelectRequirement> PackageConfSelectRequirement_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PackageConfSelectRequirement, Pred> PackageConfSelectRequirement_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PackageConfSelectRequirement, Pred>(impl, meta_PackageConfSelectRequirement_children); };
		::Udm::ChildrenAttr< ::CQML::Requirement> Requirement_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Requirement, Pred> Requirement_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Requirement, Pred>(impl, meta_Requirement_children); };
		::Udm::ChildrenAttr< ::CQML::Property> Property_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Property, Pred> Property_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Property, Pred>(impl, meta_Property_children); };
		::Udm::ChildAttr< ::CQML::PackageConfSpecializedConfig> PackageConfSpecializedConfig_child() const;
		::Udm::ChildrenAttr< ::CQML::PackageConfiguration> PackageConfiguration_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PackageConfiguration, Pred> PackageConfiguration_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PackageConfiguration, Pred>(impl, meta_PackageConfiguration_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Requirement> Requirement_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Requirement, Pred> Requirement_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Requirement, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::RequirementBase> RequirementBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::RequirementBase, Pred> RequirementBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::RequirementBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ECRequirements> ECRequirements_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ECRequirements, Pred> ECRequirements_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ECRequirements, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::RTRequirements> RTRequirements_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::RTRequirements, Pred> RTRequirements_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::RTRequirements, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Property> Property_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Property, Pred> Property_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Property, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentPackage> ComponentPackage_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentPackage, Pred> ComponentPackage_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentPackage, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentPackageReference> ComponentPackageReference_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentPackageReference, Pred> ComponentPackageReference_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentPackageReference, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::PackageConfBasePackage> PackageConfBasePackage_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PackageConfBasePackage, Pred> PackageConfBasePackage_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PackageConfBasePackage, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::PackageConfReference> PackageConfReference_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PackageConfReference, Pred> PackageConfReference_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PackageConfReference, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::PackageConfConfigProperty> PackageConfConfigProperty_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PackageConfConfigProperty, Pred> PackageConfConfigProperty_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PackageConfConfigProperty, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::PackageConfSelectRequirement> PackageConfSelectRequirement_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PackageConfSelectRequirement, Pred> PackageConfSelectRequirement_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PackageConfSelectRequirement, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::PackageConfSpecializedConfig> PackageConfSpecializedConfig_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PackageConfSpecializedConfig, Pred> PackageConfSpecializedConfig_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PackageConfSpecializedConfig, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::PackageConfiguration> PackageConfiguration_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PackageConfiguration, Pred> PackageConfiguration_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PackageConfiguration, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::PackageConfigurations> PackageConfigurations_parent() const;
		::Udm::ParentAttr< ::CQML::PackageConfigurations> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionChildRole meta_PackageConfBasePackage_child;
		static ::Uml::CompositionChildRole meta_PackageConfReference_child;
		static ::Uml::CompositionChildRole meta_ComponentPackage_child;
		static ::Uml::CompositionChildRole meta_ComponentPackageReference_child;
		static ::Uml::CompositionChildRole meta_PackageConfConfigProperty_children;
		static ::Uml::CompositionChildRole meta_PackageConfSelectRequirement_children;
		static ::Uml::CompositionChildRole meta_Requirement_children;
		static ::Uml::CompositionChildRole meta_Property_children;
		static ::Uml::CompositionChildRole meta_PackageConfSpecializedConfig_child;
		static ::Uml::CompositionChildRole meta_PackageConfiguration_children;
		static ::Uml::CompositionParentRole meta_PackageConfigurations_parent;

	};

	class CQML_Export PackageConfConfigProperty :  public MgaObject {
	public:
		PackageConfConfigProperty();
		PackageConfConfigProperty(::Udm::ObjectImpl *impl);
		PackageConfConfigProperty(const PackageConfConfigProperty &master);

#ifdef UDM_RVALUE
		PackageConfConfigProperty(PackageConfConfigProperty &&master);

		static PackageConfConfigProperty Cast(::Udm::Object &&a);
		PackageConfConfigProperty& operator=(PackageConfConfigProperty &&a);

#endif
		static PackageConfConfigProperty Cast(const ::Udm::Object &a);
		static PackageConfConfigProperty Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		PackageConfConfigProperty CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< PackageConfConfigProperty> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< PackageConfConfigProperty, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< PackageConfConfigProperty, Pred>(impl); };
		PackageConfConfigProperty CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< PackageConfConfigProperty> Derived();
		template <class Pred> ::Udm::DerivedAttr< PackageConfConfigProperty, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< PackageConfConfigProperty, Pred>(impl); };
		::Udm::ArchetypeAttr< PackageConfConfigProperty> Archetype() const;
		::Udm::ParentAttr< ::CQML::PackageConfigurationContainer> PackageConfigurationContainer_parent() const;
		::Udm::ParentAttr< ::CQML::PackageConfigurationContainer> parent() const;
		::Udm::AssocEndAttr< ::CQML::PackageConfiguration> srcPackageConfConfigProperty_end() const;
		::Udm::AssocEndAttr< ::CQML::Property> dstPackageConfConfigProperty_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_PackageConfigurationContainer_parent;
		static ::Uml::AssociationRole meta_srcPackageConfConfigProperty_end_;
		static ::Uml::AssociationRole meta_dstPackageConfConfigProperty_end_;

	};

	class CQML_Export PackageConfSelectRequirement :  public MgaObject {
	public:
		PackageConfSelectRequirement();
		PackageConfSelectRequirement(::Udm::ObjectImpl *impl);
		PackageConfSelectRequirement(const PackageConfSelectRequirement &master);

#ifdef UDM_RVALUE
		PackageConfSelectRequirement(PackageConfSelectRequirement &&master);

		static PackageConfSelectRequirement Cast(::Udm::Object &&a);
		PackageConfSelectRequirement& operator=(PackageConfSelectRequirement &&a);

#endif
		static PackageConfSelectRequirement Cast(const ::Udm::Object &a);
		static PackageConfSelectRequirement Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		PackageConfSelectRequirement CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< PackageConfSelectRequirement> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< PackageConfSelectRequirement, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< PackageConfSelectRequirement, Pred>(impl); };
		PackageConfSelectRequirement CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< PackageConfSelectRequirement> Derived();
		template <class Pred> ::Udm::DerivedAttr< PackageConfSelectRequirement, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< PackageConfSelectRequirement, Pred>(impl); };
		::Udm::ArchetypeAttr< PackageConfSelectRequirement> Archetype() const;
		::Udm::ParentAttr< ::CQML::PackageConfigurationContainer> PackageConfigurationContainer_parent() const;
		::Udm::ParentAttr< ::CQML::PackageConfigurationContainer> parent() const;
		::Udm::AssocEndAttr< ::CQML::PackageConfiguration> srcPackageConfSelectRequirement_end() const;
		::Udm::AssocEndAttr< ::CQML::Requirement> dstPackageConfSelectRequirement_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_PackageConfigurationContainer_parent;
		static ::Uml::AssociationRole meta_srcPackageConfSelectRequirement_end_;
		static ::Uml::AssociationRole meta_dstPackageConfSelectRequirement_end_;

	};

	class CQML_Export PackageConfSpecializedConfig :  public MgaObject {
	public:
		PackageConfSpecializedConfig();
		PackageConfSpecializedConfig(::Udm::ObjectImpl *impl);
		PackageConfSpecializedConfig(const PackageConfSpecializedConfig &master);

#ifdef UDM_RVALUE
		PackageConfSpecializedConfig(PackageConfSpecializedConfig &&master);

		static PackageConfSpecializedConfig Cast(::Udm::Object &&a);
		PackageConfSpecializedConfig& operator=(PackageConfSpecializedConfig &&a);

#endif
		static PackageConfSpecializedConfig Cast(const ::Udm::Object &a);
		static PackageConfSpecializedConfig Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		PackageConfSpecializedConfig CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< PackageConfSpecializedConfig> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< PackageConfSpecializedConfig, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< PackageConfSpecializedConfig, Pred>(impl); };
		PackageConfSpecializedConfig CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< PackageConfSpecializedConfig> Derived();
		template <class Pred> ::Udm::DerivedAttr< PackageConfSpecializedConfig, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< PackageConfSpecializedConfig, Pred>(impl); };
		::Udm::ArchetypeAttr< PackageConfSpecializedConfig> Archetype() const;
		::Udm::ParentAttr< ::CQML::PackageConfigurationContainer> PackageConfigurationContainer_parent() const;
		::Udm::ParentAttr< ::CQML::PackageConfigurationContainer> parent() const;
		::Udm::AssocEndAttr< ::CQML::PackageConfiguration> srcPackageConfSpecializedConfig_end() const;
		::Udm::AssocEndAttr< ::CQML::PackageConfigurationReference> dstPackageConfSpecializedConfig_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_PackageConfigurationContainer_parent;
		static ::Uml::AssociationRole meta_srcPackageConfSpecializedConfig_end_;
		static ::Uml::AssociationRole meta_dstPackageConfSpecializedConfig_end_;

	};

	class CQML_Export PackageConfiguration :  public MgaObject {
	public:
		PackageConfiguration();
		PackageConfiguration(::Udm::ObjectImpl *impl);
		PackageConfiguration(const PackageConfiguration &master);

#ifdef UDM_RVALUE
		PackageConfiguration(PackageConfiguration &&master);

		static PackageConfiguration Cast(::Udm::Object &&a);
		PackageConfiguration& operator=(PackageConfiguration &&a);

#endif
		static PackageConfiguration Cast(const ::Udm::Object &a);
		static PackageConfiguration Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		PackageConfiguration CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< PackageConfiguration> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< PackageConfiguration, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< PackageConfiguration, Pred>(impl); };
		PackageConfiguration CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< PackageConfiguration> Derived();
		template <class Pred> ::Udm::DerivedAttr< PackageConfiguration, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< PackageConfiguration, Pred>(impl); };
		::Udm::ArchetypeAttr< PackageConfiguration> Archetype() const;
		::Udm::StringAttr label() const;
		::Udm::StringAttr UUID() const;
		::Udm::AssocAttr< PackageConfigurationReference> referedbyPackageConfigurationReference() const;
		template <class Pred> ::Udm::AssocAttr< PackageConfigurationReference, Pred> referedbyPackageConfigurationReference_sorted(const Pred &) const { return ::Udm::AssocAttr< PackageConfigurationReference, Pred>(impl, meta_referedbyPackageConfigurationReference); };
		::Udm::AClassPointerAttr< PackageConfBasePackage, ComponentPackage> dstPackageConfBasePackage() const;
		::Udm::AClassPointerAttr< PackageConfReference, ComponentPackageReference> dstPackageConfReference() const;
		::Udm::AClassAssocAttr< PackageConfSelectRequirement, Requirement> dstPackageConfSelectRequirement() const;
		template <class Pred> ::Udm::AClassAssocAttr< PackageConfSelectRequirement, Requirement, Pred> dstPackageConfSelectRequirement_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< PackageConfSelectRequirement, Requirement, Pred>(impl, meta_dstPackageConfSelectRequirement, meta_dstPackageConfSelectRequirement_rev); };
		::Udm::AClassAssocAttr< PackageConfConfigProperty, Property> dstPackageConfConfigProperty() const;
		template <class Pred> ::Udm::AClassAssocAttr< PackageConfConfigProperty, Property, Pred> dstPackageConfConfigProperty_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< PackageConfConfigProperty, Property, Pred>(impl, meta_dstPackageConfConfigProperty, meta_dstPackageConfConfigProperty_rev); };
		::Udm::AClassPointerAttr< PackageConfSpecializedConfig, PackageConfigurationReference> dstPackageConfSpecializedConfig() const;
		::Udm::ParentAttr< ::CQML::PackageConfigurationContainer> PackageConfigurationContainer_parent() const;
		::Udm::ParentAttr< ::CQML::PackageConfigurationContainer> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_label;
		static ::Uml::Attribute meta_UUID;
		static ::Uml::AssociationRole meta_referedbyPackageConfigurationReference;
		static ::Uml::AssociationRole meta_dstPackageConfBasePackage;
		static ::Uml::AssociationRole meta_dstPackageConfBasePackage_rev;
		static ::Uml::AssociationRole meta_dstPackageConfReference;
		static ::Uml::AssociationRole meta_dstPackageConfReference_rev;
		static ::Uml::AssociationRole meta_dstPackageConfSelectRequirement;
		static ::Uml::AssociationRole meta_dstPackageConfSelectRequirement_rev;
		static ::Uml::AssociationRole meta_dstPackageConfConfigProperty;
		static ::Uml::AssociationRole meta_dstPackageConfConfigProperty_rev;
		static ::Uml::AssociationRole meta_dstPackageConfSpecializedConfig;
		static ::Uml::AssociationRole meta_dstPackageConfSpecializedConfig_rev;
		static ::Uml::CompositionParentRole meta_PackageConfigurationContainer_parent;

	};

	class CQML_Export ImplementationCapability :  public MgaObject {
	public:
		ImplementationCapability();
		ImplementationCapability(::Udm::ObjectImpl *impl);
		ImplementationCapability(const ImplementationCapability &master);

#ifdef UDM_RVALUE
		ImplementationCapability(ImplementationCapability &&master);

		static ImplementationCapability Cast(::Udm::Object &&a);
		ImplementationCapability& operator=(ImplementationCapability &&a);

#endif
		static ImplementationCapability Cast(const ::Udm::Object &a);
		static ImplementationCapability Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ImplementationCapability CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ImplementationCapability> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ImplementationCapability, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ImplementationCapability, Pred>(impl); };
		ImplementationCapability CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ImplementationCapability> Derived();
		template <class Pred> ::Udm::DerivedAttr< ImplementationCapability, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ImplementationCapability, Pred>(impl); };
		::Udm::ArchetypeAttr< ImplementationCapability> Archetype() const;
		::Udm::ParentAttr< ::CQML::ComponentImplementationContainer> ComponentImplementationContainer_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentImplementationContainer> parent() const;
		::Udm::AssocEndAttr< ::CQML::ComponentImplementation> srcImplementationCapability_end() const;
		::Udm::AssocEndAttr< ::CQML::Capability> dstImplementationCapability_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ComponentImplementationContainer_parent;
		static ::Uml::AssociationRole meta_srcImplementationCapability_end_;
		static ::Uml::AssociationRole meta_dstImplementationCapability_end_;

	};

	class CQML_Export ImplementationDependsOn :  public MgaObject {
	public:
		ImplementationDependsOn();
		ImplementationDependsOn(::Udm::ObjectImpl *impl);
		ImplementationDependsOn(const ImplementationDependsOn &master);

#ifdef UDM_RVALUE
		ImplementationDependsOn(ImplementationDependsOn &&master);

		static ImplementationDependsOn Cast(::Udm::Object &&a);
		ImplementationDependsOn& operator=(ImplementationDependsOn &&a);

#endif
		static ImplementationDependsOn Cast(const ::Udm::Object &a);
		static ImplementationDependsOn Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ImplementationDependsOn CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ImplementationDependsOn> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ImplementationDependsOn, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ImplementationDependsOn, Pred>(impl); };
		ImplementationDependsOn CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ImplementationDependsOn> Derived();
		template <class Pred> ::Udm::DerivedAttr< ImplementationDependsOn, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ImplementationDependsOn, Pred>(impl); };
		::Udm::ArchetypeAttr< ImplementationDependsOn> Archetype() const;
		::Udm::ParentAttr< ::CQML::ComponentImplementationContainer> ComponentImplementationContainer_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentImplementationContainer> parent() const;
		::Udm::AssocEndAttr< ::CQML::ComponentImplementation> srcImplementationDependsOn_end() const;
		::Udm::AssocEndAttr< ::CQML::ImplementationDependency> dstImplementationDependsOn_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ComponentImplementationContainer_parent;
		static ::Uml::AssociationRole meta_srcImplementationDependsOn_end_;
		static ::Uml::AssociationRole meta_dstImplementationDependsOn_end_;

	};

	class CQML_Export Implements :  public MgaObject {
	public:
		Implements();
		Implements(::Udm::ObjectImpl *impl);
		Implements(const Implements &master);

#ifdef UDM_RVALUE
		Implements(Implements &&master);

		static Implements Cast(::Udm::Object &&a);
		Implements& operator=(Implements &&a);

#endif
		static Implements Cast(const ::Udm::Object &a);
		static Implements Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Implements CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Implements> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Implements, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Implements, Pred>(impl); };
		Implements CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Implements> Derived();
		template <class Pred> ::Udm::DerivedAttr< Implements, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Implements, Pred>(impl); };
		::Udm::ArchetypeAttr< Implements> Archetype() const;
		::Udm::ParentAttr< ::CQML::ComponentImplementationContainer> ComponentImplementationContainer_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentImplementationContainer> parent() const;
		::Udm::AssocEndAttr< ::CQML::ComponentImplementation> srcImplements_end() const;
		::Udm::AssocEndAttr< ::CQML::ComponentRef> dstImplements_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ComponentImplementationContainer_parent;
		static ::Uml::AssociationRole meta_srcImplements_end_;
		static ::Uml::AssociationRole meta_dstImplements_end_;

	};

	class CQML_Export ComponentImplementationReference :  public MgaObject {
	public:
		ComponentImplementationReference();
		ComponentImplementationReference(::Udm::ObjectImpl *impl);
		ComponentImplementationReference(const ComponentImplementationReference &master);

#ifdef UDM_RVALUE
		ComponentImplementationReference(ComponentImplementationReference &&master);

		static ComponentImplementationReference Cast(::Udm::Object &&a);
		ComponentImplementationReference& operator=(ComponentImplementationReference &&a);

#endif
		static ComponentImplementationReference Cast(const ::Udm::Object &a);
		static ComponentImplementationReference Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ComponentImplementationReference CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ComponentImplementationReference> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ComponentImplementationReference, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ComponentImplementationReference, Pred>(impl); };
		ComponentImplementationReference CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ComponentImplementationReference> Derived();
		template <class Pred> ::Udm::DerivedAttr< ComponentImplementationReference, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ComponentImplementationReference, Pred>(impl); };
		::Udm::ArchetypeAttr< ComponentImplementationReference> Archetype() const;
		::Udm::AClassAssocAttr< Implementation, ComponentPackage> srcImplementation() const;
		template <class Pred> ::Udm::AClassAssocAttr< Implementation, ComponentPackage, Pred> srcImplementation_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< Implementation, ComponentPackage, Pred>(impl, meta_srcImplementation, meta_srcImplementation_rev); };
		::Udm::PointerAttr< ComponentImplementation> ref() const;
		::Udm::ParentAttr< ::CQML::PackageContainer> PackageContainer_parent() const;
		::Udm::ParentAttr< ::CQML::PackageContainer> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_srcImplementation;
		static ::Uml::AssociationRole meta_srcImplementation_rev;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::CompositionParentRole meta_PackageContainer_parent;

	};

	class CQML_Export Implemenation :  virtual  public MgaObject {
	public:
		Implemenation();
		Implemenation(::Udm::ObjectImpl *impl);
		Implemenation(const Implemenation &master);

#ifdef UDM_RVALUE
		Implemenation(Implemenation &&master);

		static Implemenation Cast(::Udm::Object &&a);
		Implemenation& operator=(Implemenation &&a);

#endif
		static Implemenation Cast(const ::Udm::Object &a);
		static Implemenation Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Implemenation CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Implemenation> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Implemenation, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Implemenation, Pred>(impl); };
		Implemenation CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Implemenation> Derived();
		template <class Pred> ::Udm::DerivedAttr< Implemenation, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Implemenation, Pred>(impl); };
		::Udm::ArchetypeAttr< Implemenation> Archetype() const;
		::Udm::StringAttr label() const;
		::Udm::StringAttr UUID() const;
		::Udm::AClassAssocAttr< ConfigProperty, Property> dstConfigProperty() const;
		template <class Pred> ::Udm::AClassAssocAttr< ConfigProperty, Property, Pred> dstConfigProperty_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< ConfigProperty, Property, Pred>(impl, meta_dstConfigProperty, meta_dstConfigProperty_rev); };
		::Udm::AClassAssocAttr< InfoProperty, Property> dstInfoProperty() const;
		template <class Pred> ::Udm::AClassAssocAttr< InfoProperty, Property, Pred> dstInfoProperty_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< InfoProperty, Property, Pred>(impl, meta_dstInfoProperty, meta_dstInfoProperty_rev); };
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_label;
		static ::Uml::Attribute meta_UUID;
		static ::Uml::AssociationRole meta_dstConfigProperty;
		static ::Uml::AssociationRole meta_dstConfigProperty_rev;
		static ::Uml::AssociationRole meta_dstInfoProperty;
		static ::Uml::AssociationRole meta_dstInfoProperty_rev;

	};

	class CQML_Export ComponentImplementation :  virtual  public Implemenation {
	public:
		ComponentImplementation();
		ComponentImplementation(::Udm::ObjectImpl *impl);
		ComponentImplementation(const ComponentImplementation &master);

#ifdef UDM_RVALUE
		ComponentImplementation(ComponentImplementation &&master);

		static ComponentImplementation Cast(::Udm::Object &&a);
		ComponentImplementation& operator=(ComponentImplementation &&a);

#endif
		static ComponentImplementation Cast(const ::Udm::Object &a);
		static ComponentImplementation Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ComponentImplementation CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ComponentImplementation> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ComponentImplementation, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ComponentImplementation, Pred>(impl); };
		ComponentImplementation CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ComponentImplementation> Derived();
		template <class Pred> ::Udm::DerivedAttr< ComponentImplementation, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ComponentImplementation, Pred>(impl); };
		::Udm::ArchetypeAttr< ComponentImplementation> Archetype() const;
		::Udm::AssocAttr< ComponentImplementationReference> referedbyComponentImplementationReference() const;
		template <class Pred> ::Udm::AssocAttr< ComponentImplementationReference, Pred> referedbyComponentImplementationReference_sorted(const Pred &) const { return ::Udm::AssocAttr< ComponentImplementationReference, Pred>(impl, meta_referedbyComponentImplementationReference); };
		::Udm::AClassAssocAttr< ImplementationCapability, Capability> dstImplementationCapability() const;
		template <class Pred> ::Udm::AClassAssocAttr< ImplementationCapability, Capability, Pred> dstImplementationCapability_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< ImplementationCapability, Capability, Pred>(impl, meta_dstImplementationCapability, meta_dstImplementationCapability_rev); };
		::Udm::AClassAssocAttr< ImplementationDependsOn, ImplementationDependency> dstImplementationDependsOn() const;
		template <class Pred> ::Udm::AClassAssocAttr< ImplementationDependsOn, ImplementationDependency, Pred> dstImplementationDependsOn_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< ImplementationDependsOn, ImplementationDependency, Pred>(impl, meta_dstImplementationDependsOn, meta_dstImplementationDependsOn_rev); };
		::Udm::AClassPointerAttr< Implements, ComponentRef> dstImplements() const;
		::Udm::ParentAttr< ::CQML::ComponentImplementationContainer> ComponentImplementationContainer_parent() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_referedbyComponentImplementationReference;
		static ::Uml::AssociationRole meta_dstImplementationCapability;
		static ::Uml::AssociationRole meta_dstImplementationCapability_rev;
		static ::Uml::AssociationRole meta_dstImplementationDependsOn;
		static ::Uml::AssociationRole meta_dstImplementationDependsOn_rev;
		static ::Uml::AssociationRole meta_dstImplements;
		static ::Uml::AssociationRole meta_dstImplements_rev;
		static ::Uml::CompositionParentRole meta_ComponentImplementationContainer_parent;

	};

	class CQML_Export ImplementationContainer :  public MgaObject {
	public:
		ImplementationContainer();
		ImplementationContainer(::Udm::ObjectImpl *impl);
		ImplementationContainer(const ImplementationContainer &master);

#ifdef UDM_RVALUE
		ImplementationContainer(ImplementationContainer &&master);

		static ImplementationContainer Cast(::Udm::Object &&a);
		ImplementationContainer& operator=(ImplementationContainer &&a);

#endif
		static ImplementationContainer Cast(const ::Udm::Object &a);
		static ImplementationContainer Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ImplementationContainer CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ImplementationContainer> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ImplementationContainer, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ImplementationContainer, Pred>(impl); };
		ImplementationContainer CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ImplementationContainer> Derived();
		template <class Pred> ::Udm::DerivedAttr< ImplementationContainer, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ImplementationContainer, Pred>(impl); };
		::Udm::ArchetypeAttr< ImplementationContainer> Archetype() const;
		::Udm::ChildrenAttr< ::CQML::InfoProperty> InfoProperty_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::InfoProperty, Pred> InfoProperty_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::InfoProperty, Pred>(impl, meta_InfoProperty_children); };
		::Udm::ChildrenAttr< ::CQML::ConfigProperty> ConfigProperty_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ConfigProperty, Pred> ConfigProperty_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ConfigProperty, Pred>(impl, meta_ConfigProperty_children); };
		::Udm::ChildrenAttr< ::CQML::Property> Property_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Property, Pred> Property_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Property, Pred>(impl, meta_Property_children); };
		::Udm::ChildrenAttr< ::CQML::MonolithprimaryArtifact> MonolithprimaryArtifact_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MonolithprimaryArtifact, Pred> MonolithprimaryArtifact_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MonolithprimaryArtifact, Pred>(impl, meta_MonolithprimaryArtifact_children); };
		::Udm::ChildrenAttr< ::CQML::MonolithDeployRequirement> MonolithDeployRequirement_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MonolithDeployRequirement, Pred> MonolithDeployRequirement_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MonolithDeployRequirement, Pred>(impl, meta_MonolithDeployRequirement_children); };
		::Udm::ChildrenAttr< ::CQML::MonolithExecParameter> MonolithExecParameter_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MonolithExecParameter, Pred> MonolithExecParameter_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MonolithExecParameter, Pred>(impl, meta_MonolithExecParameter_children); };
		::Udm::ChildrenAttr< ::CQML::ImplementationArtifactReference> ImplementationArtifactReference_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ImplementationArtifactReference, Pred> ImplementationArtifactReference_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ImplementationArtifactReference, Pred>(impl, meta_ImplementationArtifactReference_children); };
		::Udm::ChildrenAttr< ::CQML::ImplementationRequirement> ImplementationRequirement_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ImplementationRequirement, Pred> ImplementationRequirement_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ImplementationRequirement, Pred>(impl, meta_ImplementationRequirement_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::RequirementBase> RequirementBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::RequirementBase, Pred> RequirementBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::RequirementBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Property> Property_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Property, Pred> Property_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Property, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ImplementationRequirement> ImplementationRequirement_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ImplementationRequirement, Pred> ImplementationRequirement_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ImplementationRequirement, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ImplementationArtifactReference> ImplementationArtifactReference_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ImplementationArtifactReference, Pred> ImplementationArtifactReference_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ImplementationArtifactReference, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentServantArtifact> ComponentServantArtifact_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentServantArtifact, Pred> ComponentServantArtifact_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentServantArtifact, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentImplementationArtifact> ComponentImplementationArtifact_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentImplementationArtifact, Pred> ComponentImplementationArtifact_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentImplementationArtifact, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ConfigProperty> ConfigProperty_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ConfigProperty, Pred> ConfigProperty_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ConfigProperty, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::InfoProperty> InfoProperty_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::InfoProperty, Pred> InfoProperty_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::InfoProperty, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::MonolithprimaryArtifact> MonolithprimaryArtifact_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MonolithprimaryArtifact, Pred> MonolithprimaryArtifact_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MonolithprimaryArtifact, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::MonolithDeployRequirement> MonolithDeployRequirement_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MonolithDeployRequirement, Pred> MonolithDeployRequirement_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MonolithDeployRequirement, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::MonolithExecParameter> MonolithExecParameter_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MonolithExecParameter, Pred> MonolithExecParameter_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MonolithExecParameter, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::Udm::Object> parent() const;

		static ::Uml::Class meta;
		static ::Uml::CompositionChildRole meta_InfoProperty_children;
		static ::Uml::CompositionChildRole meta_ConfigProperty_children;
		static ::Uml::CompositionChildRole meta_Property_children;
		static ::Uml::CompositionChildRole meta_MonolithprimaryArtifact_children;
		static ::Uml::CompositionChildRole meta_MonolithDeployRequirement_children;
		static ::Uml::CompositionChildRole meta_MonolithExecParameter_children;
		static ::Uml::CompositionChildRole meta_ImplementationArtifactReference_children;
		static ::Uml::CompositionChildRole meta_ImplementationRequirement_children;

	};

	class CQML_Export ComponentImplementationContainer :  public ImplementationContainer {
	public:
		ComponentImplementationContainer();
		ComponentImplementationContainer(::Udm::ObjectImpl *impl);
		ComponentImplementationContainer(const ComponentImplementationContainer &master);

#ifdef UDM_RVALUE
		ComponentImplementationContainer(ComponentImplementationContainer &&master);

		static ComponentImplementationContainer Cast(::Udm::Object &&a);
		ComponentImplementationContainer& operator=(ComponentImplementationContainer &&a);

#endif
		static ComponentImplementationContainer Cast(const ::Udm::Object &a);
		static ComponentImplementationContainer Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ComponentImplementationContainer CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ComponentImplementationContainer> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ComponentImplementationContainer, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ComponentImplementationContainer, Pred>(impl); };
		ComponentImplementationContainer CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ComponentImplementationContainer> Derived();
		template <class Pred> ::Udm::DerivedAttr< ComponentImplementationContainer, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ComponentImplementationContainer, Pred>(impl); };
		::Udm::ArchetypeAttr< ComponentImplementationContainer> Archetype() const;
		::Udm::ChildrenAttr< ::CQML::ImplementationDependsOn> ImplementationDependsOn_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ImplementationDependsOn, Pred> ImplementationDependsOn_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ImplementationDependsOn, Pred>(impl, meta_ImplementationDependsOn_children); };
		::Udm::ChildAttr< ::CQML::Implements> Implements_child() const;
		::Udm::ChildAttr< ::CQML::ComponentRef> ComponentRef_child() const;
		::Udm::ChildrenAttr< ::CQML::ImplementationDependency> ImplementationDependency_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ImplementationDependency, Pred> ImplementationDependency_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ImplementationDependency, Pred>(impl, meta_ImplementationDependency_children); };
		::Udm::ChildrenAttr< ::CQML::ImplementationCapability> ImplementationCapability_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ImplementationCapability, Pred> ImplementationCapability_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ImplementationCapability, Pred>(impl, meta_ImplementationCapability_children); };
		::Udm::ChildrenAttr< ::CQML::Capability> Capability_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Capability, Pred> Capability_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Capability, Pred>(impl, meta_Capability_children); };
		::Udm::ChildrenAttr< ::CQML::CriticalPath> CriticalPath_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::CriticalPath, Pred> CriticalPath_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::CriticalPath, Pred>(impl, meta_CriticalPath_children); };
		::Udm::ChildAttr< ::CQML::PathReference> PathReference_child() const;
		::Udm::ChildrenAttr< ::CQML::ComponentImplementation> ComponentImplementation_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentImplementation, Pred> ComponentImplementation_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentImplementation, Pred>(impl, meta_ComponentImplementation_children); };
		::Udm::ChildrenAttr< ::CQML::ComponentAssemblyQoSCharacteristic> AssemblyQoSComposition() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentAssemblyQoSCharacteristic, Pred> AssemblyQoSComposition_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentAssemblyQoSCharacteristic, Pred>(impl, meta_AssemblyQoSComposition); };
		::Udm::ChildrenAttr< ::CQML::PortQoSCharacteristic> PortQoSComposition() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PortQoSCharacteristic, Pred> PortQoSComposition_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PortQoSCharacteristic, Pred>(impl, meta_PortQoSComposition); };
		::Udm::ChildrenAttr< ::CQML::ComponentAssemblyQoS> ComponentAssemblyQoS_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentAssemblyQoS, Pred> ComponentAssemblyQoS_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentAssemblyQoS, Pred>(impl, meta_ComponentAssemblyQoS_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Manageable> Manageable_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Manageable, Pred> Manageable_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Manageable, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentBase> ComponentBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentBase, Pred> ComponentBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentRef> ComponentRef_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentRef, Pred> ComponentRef_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentRef, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::CollocationGroupMember> CollocationGroupMember_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::CollocationGroupMember, Pred> CollocationGroupMember_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::CollocationGroupMember, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::FTMonitorable> FTMonitorable_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::FTMonitorable, Pred> FTMonitorable_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::FTMonitorable, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ImplementationDependency> ImplementationDependency_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ImplementationDependency, Pred> ImplementationDependency_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ImplementationDependency, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::RequirementSatisfier> RequirementSatisfier_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::RequirementSatisfier, Pred> RequirementSatisfier_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::RequirementSatisfier, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Capability> Capability_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Capability, Pred> Capability_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Capability, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ImplementationCapability> ImplementationCapability_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ImplementationCapability, Pred> ImplementationCapability_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ImplementationCapability, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ImplementationDependsOn> ImplementationDependsOn_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ImplementationDependsOn, Pred> ImplementationDependsOn_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ImplementationDependsOn, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Implements> Implements_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Implements, Pred> Implements_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Implements, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentImplementation> ComponentImplementation_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentImplementation, Pred> ComponentImplementation_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentImplementation, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Implemenation> Implemenation_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Implemenation, Pred> Implemenation_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Implemenation, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentAssembly> ComponentAssembly_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentAssembly, Pred> ComponentAssembly_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentAssembly, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::MonolithicImplementation> MonolithicImplementation_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MonolithicImplementation, Pred> MonolithicImplementation_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MonolithicImplementation, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::CriticalPath> CriticalPath_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::CriticalPath, Pred> CriticalPath_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::CriticalPath, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::PathReference> PathReference_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PathReference, Pred> PathReference_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PathReference, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentAssemblyQoSCharacteristic> ComponentAssemblyQoSCharacteristic_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentAssemblyQoSCharacteristic, Pred> ComponentAssemblyQoSCharacteristic_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentAssemblyQoSCharacteristic, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::QoSCharacteristicBase> QoSCharacteristicBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::QoSCharacteristicBase, Pred> QoSCharacteristicBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::QoSCharacteristicBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::QoSCharRef> QoSCharRef_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::QoSCharRef, Pred> QoSCharRef_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::QoSCharRef, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentAssemblySecurityQoS> ComponentAssemblySecurityQoS_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentAssemblySecurityQoS, Pred> ComponentAssemblySecurityQoS_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentAssemblySecurityQoS, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::FailOverUnit> FailOverUnit_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::FailOverUnit, Pred> FailOverUnit_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::FailOverUnit, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::NetQoS> NetQoS_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::NetQoS, Pred> NetQoS_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::NetQoS, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentAssemblyQoS> ComponentAssemblyQoS_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentAssemblyQoS, Pred> ComponentAssemblyQoS_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentAssemblyQoS, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::PortQoSCharacteristic> PortQoSCharacteristic_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PortQoSCharacteristic, Pred> PortQoSCharacteristic_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PortQoSCharacteristic, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::PortSecurityQoS> PortSecurityQoS_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PortSecurityQoS, Pred> PortSecurityQoS_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PortSecurityQoS, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::ComponentImplementations> ComponentImplementations_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentImplementations> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionChildRole meta_ImplementationDependsOn_children;
		static ::Uml::CompositionChildRole meta_Implements_child;
		static ::Uml::CompositionChildRole meta_ComponentRef_child;
		static ::Uml::CompositionChildRole meta_ImplementationDependency_children;
		static ::Uml::CompositionChildRole meta_ImplementationCapability_children;
		static ::Uml::CompositionChildRole meta_Capability_children;
		static ::Uml::CompositionChildRole meta_CriticalPath_children;
		static ::Uml::CompositionChildRole meta_PathReference_child;
		static ::Uml::CompositionChildRole meta_ComponentImplementation_children;
		static ::Uml::CompositionChildRole meta_AssemblyQoSComposition;
		static ::Uml::CompositionChildRole meta_PortQoSComposition;
		static ::Uml::CompositionChildRole meta_ComponentAssemblyQoS_children;
		static ::Uml::CompositionParentRole meta_ComponentImplementations_parent;

	};

	class CQML_Export MonolithicImplementationBase :  virtual  public Implemenation {
	public:
		MonolithicImplementationBase();
		MonolithicImplementationBase(::Udm::ObjectImpl *impl);
		MonolithicImplementationBase(const MonolithicImplementationBase &master);

#ifdef UDM_RVALUE
		MonolithicImplementationBase(MonolithicImplementationBase &&master);

		static MonolithicImplementationBase Cast(::Udm::Object &&a);
		MonolithicImplementationBase& operator=(MonolithicImplementationBase &&a);

#endif
		static MonolithicImplementationBase Cast(const ::Udm::Object &a);
		static MonolithicImplementationBase Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		MonolithicImplementationBase CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< MonolithicImplementationBase> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< MonolithicImplementationBase, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< MonolithicImplementationBase, Pred>(impl); };
		MonolithicImplementationBase CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< MonolithicImplementationBase> Derived();
		template <class Pred> ::Udm::DerivedAttr< MonolithicImplementationBase, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< MonolithicImplementationBase, Pred>(impl); };
		::Udm::ArchetypeAttr< MonolithicImplementationBase> Archetype() const;
		::Udm::AClassAssocAttr< MonolithDeployRequirement, ImplementationRequirement> dstMonolithDeployRequirement() const;
		template <class Pred> ::Udm::AClassAssocAttr< MonolithDeployRequirement, ImplementationRequirement, Pred> dstMonolithDeployRequirement_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< MonolithDeployRequirement, ImplementationRequirement, Pred>(impl, meta_dstMonolithDeployRequirement, meta_dstMonolithDeployRequirement_rev); };
		::Udm::AClassAssocAttr< MonolithExecParameter, Property> dstMonolithExecParameter() const;
		template <class Pred> ::Udm::AClassAssocAttr< MonolithExecParameter, Property, Pred> dstMonolithExecParameter_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< MonolithExecParameter, Property, Pred>(impl, meta_dstMonolithExecParameter, meta_dstMonolithExecParameter_rev); };
		::Udm::AClassAssocAttr< MonolithprimaryArtifact, ImplementationArtifactReference> dstMonolithprimaryArtifact() const;
		template <class Pred> ::Udm::AClassAssocAttr< MonolithprimaryArtifact, ImplementationArtifactReference, Pred> dstMonolithprimaryArtifact_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< MonolithprimaryArtifact, ImplementationArtifactReference, Pred>(impl, meta_dstMonolithprimaryArtifact, meta_dstMonolithprimaryArtifact_rev); };
		::Udm::ParentAttr< ::CQML::ComponentFactoryImplementationContainer> parent() const;

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_dstMonolithDeployRequirement;
		static ::Uml::AssociationRole meta_dstMonolithDeployRequirement_rev;
		static ::Uml::AssociationRole meta_dstMonolithExecParameter;
		static ::Uml::AssociationRole meta_dstMonolithExecParameter_rev;
		static ::Uml::AssociationRole meta_dstMonolithprimaryArtifact;
		static ::Uml::AssociationRole meta_dstMonolithprimaryArtifact_rev;

	};

	class CQML_Export MonolithicImplementation :  public ComponentImplementation,  public MonolithicImplementationBase {
	public:
		MonolithicImplementation();
		MonolithicImplementation(::Udm::ObjectImpl *impl);
		MonolithicImplementation(const MonolithicImplementation &master);

#ifdef UDM_RVALUE
		MonolithicImplementation(MonolithicImplementation &&master);

		static MonolithicImplementation Cast(::Udm::Object &&a);
		MonolithicImplementation& operator=(MonolithicImplementation &&a);

#endif
		static MonolithicImplementation Cast(const ::Udm::Object &a);
		static MonolithicImplementation Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		MonolithicImplementation CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< MonolithicImplementation> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< MonolithicImplementation, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< MonolithicImplementation, Pred>(impl); };
		MonolithicImplementation CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< MonolithicImplementation> Derived();
		template <class Pred> ::Udm::DerivedAttr< MonolithicImplementation, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< MonolithicImplementation, Pred>(impl); };
		::Udm::ArchetypeAttr< MonolithicImplementation> Archetype() const;
		::Udm::StringAttr defaultVersion() const;
		::Udm::ParentAttr< ::CQML::ComponentImplementationContainer> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_defaultVersion;

	};

	class CQML_Export CriticalPath :  public MgaObject {
	public:
		CriticalPath();
		CriticalPath(::Udm::ObjectImpl *impl);
		CriticalPath(const CriticalPath &master);

#ifdef UDM_RVALUE
		CriticalPath(CriticalPath &&master);

		static CriticalPath Cast(::Udm::Object &&a);
		CriticalPath& operator=(CriticalPath &&a);

#endif
		static CriticalPath Cast(const ::Udm::Object &a);
		static CriticalPath Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		CriticalPath CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< CriticalPath> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< CriticalPath, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< CriticalPath, Pred>(impl); };
		CriticalPath CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< CriticalPath> Derived();
		template <class Pred> ::Udm::DerivedAttr< CriticalPath, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< CriticalPath, Pred>(impl); };
		::Udm::ArchetypeAttr< CriticalPath> Archetype() const;
		::Udm::ParentAttr< ::CQML::ComponentImplementationContainer> ComponentImplementationContainer_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentImplementationContainer> parent() const;
		::Udm::AssocEndAttr< ::CQML::ComponentAssembly> srcCriticalPath_end() const;
		::Udm::AssocEndAttr< ::CQML::PathReference> dstCriticalPath_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ComponentImplementationContainer_parent;
		static ::Uml::AssociationRole meta_srcCriticalPath_end_;
		static ::Uml::AssociationRole meta_dstCriticalPath_end_;

	};

	class CQML_Export invoke :  public MgaObject {
	public:
		invoke();
		invoke(::Udm::ObjectImpl *impl);
		invoke(const invoke &master);

#ifdef UDM_RVALUE
		invoke(invoke &&master);

		static invoke Cast(::Udm::Object &&a);
		invoke& operator=(invoke &&a);

#endif
		static invoke Cast(const ::Udm::Object &a);
		static invoke Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		invoke CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< invoke> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< invoke, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< invoke, Pred>(impl); };
		invoke CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< invoke> Derived();
		template <class Pred> ::Udm::DerivedAttr< invoke, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< invoke, Pred>(impl); };
		::Udm::ArchetypeAttr< invoke> Archetype() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> ComponentAssembly_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> parent() const;
		::Udm::AssocEndAttr< ::CQML::RequiredRequestPort> srcinvoke_end() const;
		::Udm::AssocEndAttr< ::CQML::InvokePortBase> dstinvoke_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ComponentAssembly_parent;
		static ::Uml::AssociationRole meta_srcinvoke_end_;
		static ::Uml::AssociationRole meta_dstinvoke_end_;

	};

	class CQML_Export AssemblyselectRequirement :  public MgaObject {
	public:
		AssemblyselectRequirement();
		AssemblyselectRequirement(::Udm::ObjectImpl *impl);
		AssemblyselectRequirement(const AssemblyselectRequirement &master);

#ifdef UDM_RVALUE
		AssemblyselectRequirement(AssemblyselectRequirement &&master);

		static AssemblyselectRequirement Cast(::Udm::Object &&a);
		AssemblyselectRequirement& operator=(AssemblyselectRequirement &&a);

#endif
		static AssemblyselectRequirement Cast(const ::Udm::Object &a);
		static AssemblyselectRequirement Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		AssemblyselectRequirement CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< AssemblyselectRequirement> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< AssemblyselectRequirement, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< AssemblyselectRequirement, Pred>(impl); };
		AssemblyselectRequirement CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< AssemblyselectRequirement> Derived();
		template <class Pred> ::Udm::DerivedAttr< AssemblyselectRequirement, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< AssemblyselectRequirement, Pred>(impl); };
		::Udm::ArchetypeAttr< AssemblyselectRequirement> Archetype() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> ComponentAssembly_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> parent() const;
		::Udm::AssocEndAttr< ::CQML::Component> srcAssemblyselectRequirement_end() const;
		::Udm::AssocEndAttr< ::CQML::Requirement> dstAssemblyselectRequirement_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ComponentAssembly_parent;
		static ::Uml::AssociationRole meta_srcAssemblyselectRequirement_end_;
		static ::Uml::AssociationRole meta_dstAssemblyselectRequirement_end_;

	};

	class CQML_Export AssemblyConfigProperty :  public MgaObject {
	public:
		AssemblyConfigProperty();
		AssemblyConfigProperty(::Udm::ObjectImpl *impl);
		AssemblyConfigProperty(const AssemblyConfigProperty &master);

#ifdef UDM_RVALUE
		AssemblyConfigProperty(AssemblyConfigProperty &&master);

		static AssemblyConfigProperty Cast(::Udm::Object &&a);
		AssemblyConfigProperty& operator=(AssemblyConfigProperty &&a);

#endif
		static AssemblyConfigProperty Cast(const ::Udm::Object &a);
		static AssemblyConfigProperty Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		AssemblyConfigProperty CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< AssemblyConfigProperty> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< AssemblyConfigProperty, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< AssemblyConfigProperty, Pred>(impl); };
		AssemblyConfigProperty CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< AssemblyConfigProperty> Derived();
		template <class Pred> ::Udm::DerivedAttr< AssemblyConfigProperty, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< AssemblyConfigProperty, Pred>(impl); };
		::Udm::ArchetypeAttr< AssemblyConfigProperty> Archetype() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> ComponentAssembly_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> parent() const;
		::Udm::AssocEndAttr< ::CQML::Component> srcAssemblyConfigProperty_end() const;
		::Udm::AssocEndAttr< ::CQML::Property> dstAssemblyConfigProperty_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ComponentAssembly_parent;
		static ::Uml::AssociationRole meta_srcAssemblyConfigProperty_end_;
		static ::Uml::AssociationRole meta_dstAssemblyConfigProperty_end_;

	};

	class CQML_Export PublishConnector :  public MgaObject {
	public:
		PublishConnector();
		PublishConnector(::Udm::ObjectImpl *impl);
		PublishConnector(const PublishConnector &master);

#ifdef UDM_RVALUE
		PublishConnector(PublishConnector &&master);

		static PublishConnector Cast(::Udm::Object &&a);
		PublishConnector& operator=(PublishConnector &&a);

#endif
		static PublishConnector Cast(const ::Udm::Object &a);
		static PublishConnector Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		PublishConnector CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< PublishConnector> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< PublishConnector, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< PublishConnector, Pred>(impl); };
		PublishConnector CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< PublishConnector> Derived();
		template <class Pred> ::Udm::DerivedAttr< PublishConnector, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< PublishConnector, Pred>(impl); };
		::Udm::ArchetypeAttr< PublishConnector> Archetype() const;
		::Udm::AClassPointerAttr< publish, OutEventPort> srcpublish() const;
		::Udm::AClassAssocAttr< deliverTo, InEventPort> dstdeliverTo() const;
		template <class Pred> ::Udm::AClassAssocAttr< deliverTo, InEventPort, Pred> dstdeliverTo_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< deliverTo, InEventPort, Pred>(impl, meta_dstdeliverTo, meta_dstdeliverTo_rev); };
		::Udm::AClassAssocAttr< AssemblyDeployRequirement, Requirement> dstAssemblyDeployRequirement() const;
		template <class Pred> ::Udm::AClassAssocAttr< AssemblyDeployRequirement, Requirement, Pred> dstAssemblyDeployRequirement_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< AssemblyDeployRequirement, Requirement, Pred>(impl, meta_dstAssemblyDeployRequirement, meta_dstAssemblyDeployRequirement_rev); };
		::Udm::ParentAttr< ::CQML::ComponentAssembly> ComponentAssembly_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_srcpublish;
		static ::Uml::AssociationRole meta_srcpublish_rev;
		static ::Uml::AssociationRole meta_dstdeliverTo;
		static ::Uml::AssociationRole meta_dstdeliverTo_rev;
		static ::Uml::AssociationRole meta_dstAssemblyDeployRequirement;
		static ::Uml::AssociationRole meta_dstAssemblyDeployRequirement_rev;
		static ::Uml::CompositionParentRole meta_ComponentAssembly_parent;

	};

	class CQML_Export publish :  public MgaObject {
	public:
		publish();
		publish(::Udm::ObjectImpl *impl);
		publish(const publish &master);

#ifdef UDM_RVALUE
		publish(publish &&master);

		static publish Cast(::Udm::Object &&a);
		publish& operator=(publish &&a);

#endif
		static publish Cast(const ::Udm::Object &a);
		static publish Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		publish CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< publish> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< publish, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< publish, Pred>(impl); };
		publish CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< publish> Derived();
		template <class Pred> ::Udm::DerivedAttr< publish, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< publish, Pred>(impl); };
		::Udm::ArchetypeAttr< publish> Archetype() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> ComponentAssembly_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> parent() const;
		::Udm::AssocEndAttr< ::CQML::OutEventPort> srcpublish_end() const;
		::Udm::AssocEndAttr< ::CQML::PublishConnector> dstpublish_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ComponentAssembly_parent;
		static ::Uml::AssociationRole meta_srcpublish_end_;
		static ::Uml::AssociationRole meta_dstpublish_end_;

	};

	class CQML_Export deliverTo :  public MgaObject {
	public:
		deliverTo();
		deliverTo(::Udm::ObjectImpl *impl);
		deliverTo(const deliverTo &master);

#ifdef UDM_RVALUE
		deliverTo(deliverTo &&master);

		static deliverTo Cast(::Udm::Object &&a);
		deliverTo& operator=(deliverTo &&a);

#endif
		static deliverTo Cast(const ::Udm::Object &a);
		static deliverTo Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		deliverTo CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< deliverTo> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< deliverTo, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< deliverTo, Pred>(impl); };
		deliverTo CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< deliverTo> Derived();
		template <class Pred> ::Udm::DerivedAttr< deliverTo, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< deliverTo, Pred>(impl); };
		::Udm::ArchetypeAttr< deliverTo> Archetype() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> ComponentAssembly_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> parent() const;
		::Udm::AssocEndAttr< ::CQML::PublishConnector> srcdeliverTo_end() const;
		::Udm::AssocEndAttr< ::CQML::InEventPort> dstdeliverTo_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ComponentAssembly_parent;
		static ::Uml::AssociationRole meta_srcdeliverTo_end_;
		static ::Uml::AssociationRole meta_dstdeliverTo_end_;

	};

	class CQML_Export AssemblyDeployRequirement :  public MgaObject {
	public:
		AssemblyDeployRequirement();
		AssemblyDeployRequirement(::Udm::ObjectImpl *impl);
		AssemblyDeployRequirement(const AssemblyDeployRequirement &master);

#ifdef UDM_RVALUE
		AssemblyDeployRequirement(AssemblyDeployRequirement &&master);

		static AssemblyDeployRequirement Cast(::Udm::Object &&a);
		AssemblyDeployRequirement& operator=(AssemblyDeployRequirement &&a);

#endif
		static AssemblyDeployRequirement Cast(const ::Udm::Object &a);
		static AssemblyDeployRequirement Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		AssemblyDeployRequirement CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< AssemblyDeployRequirement> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< AssemblyDeployRequirement, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< AssemblyDeployRequirement, Pred>(impl); };
		AssemblyDeployRequirement CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< AssemblyDeployRequirement> Derived();
		template <class Pred> ::Udm::DerivedAttr< AssemblyDeployRequirement, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< AssemblyDeployRequirement, Pred>(impl); };
		::Udm::ArchetypeAttr< AssemblyDeployRequirement> Archetype() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> ComponentAssembly_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> parent() const;
		::Udm::AssocEndAttr< ::CQML::PublishConnector> srcAssemblyDeployRequirement_end() const;
		::Udm::AssocEndAttr< ::CQML::Requirement> dstAssemblyDeployRequirement_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ComponentAssembly_parent;
		static ::Uml::AssociationRole meta_srcAssemblyDeployRequirement_end_;
		static ::Uml::AssociationRole meta_dstAssemblyDeployRequirement_end_;

	};

	class CQML_Export emit :  public MgaObject {
	public:
		emit();
		emit(::Udm::ObjectImpl *impl);
		emit(const emit &master);

#ifdef UDM_RVALUE
		emit(emit &&master);

		static emit Cast(::Udm::Object &&a);
		emit& operator=(emit &&a);

#endif
		static emit Cast(const ::Udm::Object &a);
		static emit Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		emit CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< emit> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< emit, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< emit, Pred>(impl); };
		emit CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< emit> Derived();
		template <class Pred> ::Udm::DerivedAttr< emit, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< emit, Pred>(impl); };
		::Udm::ArchetypeAttr< emit> Archetype() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> ComponentAssembly_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> parent() const;
		::Udm::AssocEndAttr< ::CQML::OutEventPort> srcemit_end() const;
		::Udm::AssocEndAttr< ::CQML::InEventPort> dstemit_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ComponentAssembly_parent;
		static ::Uml::AssociationRole meta_srcemit_end_;
		static ::Uml::AssociationRole meta_dstemit_end_;

	};

	class CQML_Export ReceptacleDelegate :  public MgaObject {
	public:
		ReceptacleDelegate();
		ReceptacleDelegate(::Udm::ObjectImpl *impl);
		ReceptacleDelegate(const ReceptacleDelegate &master);

#ifdef UDM_RVALUE
		ReceptacleDelegate(ReceptacleDelegate &&master);

		static ReceptacleDelegate Cast(::Udm::Object &&a);
		ReceptacleDelegate& operator=(ReceptacleDelegate &&a);

#endif
		static ReceptacleDelegate Cast(const ::Udm::Object &a);
		static ReceptacleDelegate Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ReceptacleDelegate CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ReceptacleDelegate> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ReceptacleDelegate, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ReceptacleDelegate, Pred>(impl); };
		ReceptacleDelegate CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ReceptacleDelegate> Derived();
		template <class Pred> ::Udm::DerivedAttr< ReceptacleDelegate, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ReceptacleDelegate, Pred>(impl); };
		::Udm::ArchetypeAttr< ReceptacleDelegate> Archetype() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> ComponentAssembly_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> parent() const;
		::Udm::AssocEndAttr< ::CQML::RequiredRequestPort> srcReceptacleDelegate_end() const;
		::Udm::AssocEndAttr< ::CQML::RequiredRequestPort> dstReceptacleDelegate_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ComponentAssembly_parent;
		static ::Uml::AssociationRole meta_srcReceptacleDelegate_end_;
		static ::Uml::AssociationRole meta_dstReceptacleDelegate_end_;

	};

	class CQML_Export FacetDelegate :  public MgaObject {
	public:
		FacetDelegate();
		FacetDelegate(::Udm::ObjectImpl *impl);
		FacetDelegate(const FacetDelegate &master);

#ifdef UDM_RVALUE
		FacetDelegate(FacetDelegate &&master);

		static FacetDelegate Cast(::Udm::Object &&a);
		FacetDelegate& operator=(FacetDelegate &&a);

#endif
		static FacetDelegate Cast(const ::Udm::Object &a);
		static FacetDelegate Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		FacetDelegate CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< FacetDelegate> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< FacetDelegate, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< FacetDelegate, Pred>(impl); };
		FacetDelegate CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< FacetDelegate> Derived();
		template <class Pred> ::Udm::DerivedAttr< FacetDelegate, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< FacetDelegate, Pred>(impl); };
		::Udm::ArchetypeAttr< FacetDelegate> Archetype() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> ComponentAssembly_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> parent() const;
		::Udm::AssocEndAttr< ::CQML::ProvidedRequestPort> srcFacetDelegate_end() const;
		::Udm::AssocEndAttr< ::CQML::ProvidedRequestPort> dstFacetDelegate_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ComponentAssembly_parent;
		static ::Uml::AssociationRole meta_srcFacetDelegate_end_;
		static ::Uml::AssociationRole meta_dstFacetDelegate_end_;

	};

	class CQML_Export EventSourceDelegate :  public MgaObject {
	public:
		EventSourceDelegate();
		EventSourceDelegate(::Udm::ObjectImpl *impl);
		EventSourceDelegate(const EventSourceDelegate &master);

#ifdef UDM_RVALUE
		EventSourceDelegate(EventSourceDelegate &&master);

		static EventSourceDelegate Cast(::Udm::Object &&a);
		EventSourceDelegate& operator=(EventSourceDelegate &&a);

#endif
		static EventSourceDelegate Cast(const ::Udm::Object &a);
		static EventSourceDelegate Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		EventSourceDelegate CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< EventSourceDelegate> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< EventSourceDelegate, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< EventSourceDelegate, Pred>(impl); };
		EventSourceDelegate CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< EventSourceDelegate> Derived();
		template <class Pred> ::Udm::DerivedAttr< EventSourceDelegate, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< EventSourceDelegate, Pred>(impl); };
		::Udm::ArchetypeAttr< EventSourceDelegate> Archetype() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> ComponentAssembly_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> parent() const;
		::Udm::AssocEndAttr< ::CQML::OutEventPort> srcEventSourceDelegate_end() const;
		::Udm::AssocEndAttr< ::CQML::OutEventPort> dstEventSourceDelegate_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ComponentAssembly_parent;
		static ::Uml::AssociationRole meta_srcEventSourceDelegate_end_;
		static ::Uml::AssociationRole meta_dstEventSourceDelegate_end_;

	};

	class CQML_Export EventSinkDelegate :  public MgaObject {
	public:
		EventSinkDelegate();
		EventSinkDelegate(::Udm::ObjectImpl *impl);
		EventSinkDelegate(const EventSinkDelegate &master);

#ifdef UDM_RVALUE
		EventSinkDelegate(EventSinkDelegate &&master);

		static EventSinkDelegate Cast(::Udm::Object &&a);
		EventSinkDelegate& operator=(EventSinkDelegate &&a);

#endif
		static EventSinkDelegate Cast(const ::Udm::Object &a);
		static EventSinkDelegate Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		EventSinkDelegate CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< EventSinkDelegate> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< EventSinkDelegate, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< EventSinkDelegate, Pred>(impl); };
		EventSinkDelegate CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< EventSinkDelegate> Derived();
		template <class Pred> ::Udm::DerivedAttr< EventSinkDelegate, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< EventSinkDelegate, Pred>(impl); };
		::Udm::ArchetypeAttr< EventSinkDelegate> Archetype() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> ComponentAssembly_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> parent() const;
		::Udm::AssocEndAttr< ::CQML::InEventPort> srcEventSinkDelegate_end() const;
		::Udm::AssocEndAttr< ::CQML::InEventPort> dstEventSinkDelegate_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ComponentAssembly_parent;
		static ::Uml::AssociationRole meta_srcEventSinkDelegate_end_;
		static ::Uml::AssociationRole meta_dstEventSinkDelegate_end_;

	};

	class CQML_Export ExternalDelegate :  public MgaObject {
	public:
		ExternalDelegate();
		ExternalDelegate(::Udm::ObjectImpl *impl);
		ExternalDelegate(const ExternalDelegate &master);

#ifdef UDM_RVALUE
		ExternalDelegate(ExternalDelegate &&master);

		static ExternalDelegate Cast(::Udm::Object &&a);
		ExternalDelegate& operator=(ExternalDelegate &&a);

#endif
		static ExternalDelegate Cast(const ::Udm::Object &a);
		static ExternalDelegate Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ExternalDelegate CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ExternalDelegate> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ExternalDelegate, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ExternalDelegate, Pred>(impl); };
		ExternalDelegate CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ExternalDelegate> Derived();
		template <class Pred> ::Udm::DerivedAttr< ExternalDelegate, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ExternalDelegate, Pred>(impl); };
		::Udm::ArchetypeAttr< ExternalDelegate> Archetype() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> ComponentAssembly_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> parent() const;
		::Udm::AssocEndAttr< ::CQML::ExternalPortReference> srcExternalDelegate_end() const;
		::Udm::AssocEndAttr< ::CQML::Port> dstExternalDelegate_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ComponentAssembly_parent;
		static ::Uml::AssociationRole meta_srcExternalDelegate_end_;
		static ::Uml::AssociationRole meta_dstExternalDelegate_end_;

	};

	class CQML_Export AttributeValue :  public MgaObject {
	public:
		AttributeValue();
		AttributeValue(::Udm::ObjectImpl *impl);
		AttributeValue(const AttributeValue &master);

#ifdef UDM_RVALUE
		AttributeValue(AttributeValue &&master);

		static AttributeValue Cast(::Udm::Object &&a);
		AttributeValue& operator=(AttributeValue &&a);

#endif
		static AttributeValue Cast(const ::Udm::Object &a);
		static AttributeValue Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		AttributeValue CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< AttributeValue> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< AttributeValue, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< AttributeValue, Pred>(impl); };
		AttributeValue CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< AttributeValue> Derived();
		template <class Pred> ::Udm::DerivedAttr< AttributeValue, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< AttributeValue, Pred>(impl); };
		::Udm::ArchetypeAttr< AttributeValue> Archetype() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> ComponentAssembly_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> parent() const;
		::Udm::AssocEndAttr< ::CQML::ReadonlyAttribute> srcAttributeValue_end() const;
		::Udm::AssocEndAttr< ::CQML::Property> dstAttributeValue_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ComponentAssembly_parent;
		static ::Uml::AssociationRole meta_srcAttributeValue_end_;
		static ::Uml::AssociationRole meta_dstAttributeValue_end_;

	};

	class CQML_Export AttributeDelegate :  public MgaObject {
	public:
		AttributeDelegate();
		AttributeDelegate(::Udm::ObjectImpl *impl);
		AttributeDelegate(const AttributeDelegate &master);

#ifdef UDM_RVALUE
		AttributeDelegate(AttributeDelegate &&master);

		static AttributeDelegate Cast(::Udm::Object &&a);
		AttributeDelegate& operator=(AttributeDelegate &&a);

#endif
		static AttributeDelegate Cast(const ::Udm::Object &a);
		static AttributeDelegate Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		AttributeDelegate CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< AttributeDelegate> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< AttributeDelegate, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< AttributeDelegate, Pred>(impl); };
		AttributeDelegate CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< AttributeDelegate> Derived();
		template <class Pred> ::Udm::DerivedAttr< AttributeDelegate, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< AttributeDelegate, Pred>(impl); };
		::Udm::ArchetypeAttr< AttributeDelegate> Archetype() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> ComponentAssembly_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> parent() const;
		::Udm::AssocEndAttr< ::CQML::AttributeMapping> srcAttributeDelegate_end() const;
		::Udm::AssocEndAttr< ::CQML::ReadonlyAttribute> dstAttributeDelegate_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ComponentAssembly_parent;
		static ::Uml::AssociationRole meta_srcAttributeDelegate_end_;
		static ::Uml::AssociationRole meta_dstAttributeDelegate_end_;

	};

	class CQML_Export AttributeMapping :  public MgaObject {
	public:
		AttributeMapping();
		AttributeMapping(::Udm::ObjectImpl *impl);
		AttributeMapping(const AttributeMapping &master);

#ifdef UDM_RVALUE
		AttributeMapping(AttributeMapping &&master);

		static AttributeMapping Cast(::Udm::Object &&a);
		AttributeMapping& operator=(AttributeMapping &&a);

#endif
		static AttributeMapping Cast(const ::Udm::Object &a);
		static AttributeMapping Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		AttributeMapping CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< AttributeMapping> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< AttributeMapping, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< AttributeMapping, Pred>(impl); };
		AttributeMapping CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< AttributeMapping> Derived();
		template <class Pred> ::Udm::DerivedAttr< AttributeMapping, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< AttributeMapping, Pred>(impl); };
		::Udm::ArchetypeAttr< AttributeMapping> Archetype() const;
		::Udm::AClassAssocAttr< AttributeDelegate, ReadonlyAttribute> dstAttributeDelegate() const;
		template <class Pred> ::Udm::AClassAssocAttr< AttributeDelegate, ReadonlyAttribute, Pred> dstAttributeDelegate_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< AttributeDelegate, ReadonlyAttribute, Pred>(impl, meta_dstAttributeDelegate, meta_dstAttributeDelegate_rev); };
		::Udm::AClassPointerAttr< AttributeMappingValue, Property> dstAttributeMappingValue() const;
		::Udm::AClassAssocAttr< AttributeMappingDelegate, AttributeMapping> dstAttributeMappingDelegate() const;
		template <class Pred> ::Udm::AClassAssocAttr< AttributeMappingDelegate, AttributeMapping, Pred> dstAttributeMappingDelegate_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< AttributeMappingDelegate, AttributeMapping, Pred>(impl, meta_dstAttributeMappingDelegate, meta_dstAttributeMappingDelegate_rev); };
		::Udm::AClassPointerAttr< AttributeMappingDelegate, AttributeMapping> srcAttributeMappingDelegate() const;
		::Udm::PointerAttr< ReadonlyAttribute> ref() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> ComponentAssembly_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_dstAttributeDelegate;
		static ::Uml::AssociationRole meta_dstAttributeDelegate_rev;
		static ::Uml::AssociationRole meta_dstAttributeMappingValue;
		static ::Uml::AssociationRole meta_dstAttributeMappingValue_rev;
		static ::Uml::AssociationRole meta_dstAttributeMappingDelegate;
		static ::Uml::AssociationRole meta_dstAttributeMappingDelegate_rev;
		static ::Uml::AssociationRole meta_srcAttributeMappingDelegate;
		static ::Uml::AssociationRole meta_srcAttributeMappingDelegate_rev;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::CompositionParentRole meta_ComponentAssembly_parent;

	};

	class CQML_Export AttributeMappingValue :  public MgaObject {
	public:
		AttributeMappingValue();
		AttributeMappingValue(::Udm::ObjectImpl *impl);
		AttributeMappingValue(const AttributeMappingValue &master);

#ifdef UDM_RVALUE
		AttributeMappingValue(AttributeMappingValue &&master);

		static AttributeMappingValue Cast(::Udm::Object &&a);
		AttributeMappingValue& operator=(AttributeMappingValue &&a);

#endif
		static AttributeMappingValue Cast(const ::Udm::Object &a);
		static AttributeMappingValue Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		AttributeMappingValue CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< AttributeMappingValue> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< AttributeMappingValue, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< AttributeMappingValue, Pred>(impl); };
		AttributeMappingValue CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< AttributeMappingValue> Derived();
		template <class Pred> ::Udm::DerivedAttr< AttributeMappingValue, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< AttributeMappingValue, Pred>(impl); };
		::Udm::ArchetypeAttr< AttributeMappingValue> Archetype() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> ComponentAssembly_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> parent() const;
		::Udm::AssocEndAttr< ::CQML::AttributeMapping> srcAttributeMappingValue_end() const;
		::Udm::AssocEndAttr< ::CQML::Property> dstAttributeMappingValue_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ComponentAssembly_parent;
		static ::Uml::AssociationRole meta_srcAttributeMappingValue_end_;
		static ::Uml::AssociationRole meta_dstAttributeMappingValue_end_;

	};

	class CQML_Export AttributeMappingDelegate :  public MgaObject {
	public:
		AttributeMappingDelegate();
		AttributeMappingDelegate(::Udm::ObjectImpl *impl);
		AttributeMappingDelegate(const AttributeMappingDelegate &master);

#ifdef UDM_RVALUE
		AttributeMappingDelegate(AttributeMappingDelegate &&master);

		static AttributeMappingDelegate Cast(::Udm::Object &&a);
		AttributeMappingDelegate& operator=(AttributeMappingDelegate &&a);

#endif
		static AttributeMappingDelegate Cast(const ::Udm::Object &a);
		static AttributeMappingDelegate Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		AttributeMappingDelegate CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< AttributeMappingDelegate> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< AttributeMappingDelegate, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< AttributeMappingDelegate, Pred>(impl); };
		AttributeMappingDelegate CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< AttributeMappingDelegate> Derived();
		template <class Pred> ::Udm::DerivedAttr< AttributeMappingDelegate, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< AttributeMappingDelegate, Pred>(impl); };
		::Udm::ArchetypeAttr< AttributeMappingDelegate> Archetype() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> ComponentAssembly_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> parent() const;
		::Udm::AssocEndAttr< ::CQML::AttributeMapping> srcAttributeMappingDelegate_end() const;
		::Udm::AssocEndAttr< ::CQML::AttributeMapping> dstAttributeMappingDelegate_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ComponentAssembly_parent;
		static ::Uml::AssociationRole meta_srcAttributeMappingDelegate_end_;
		static ::Uml::AssociationRole meta_dstAttributeMappingDelegate_end_;

	};

	class CQML_Export SupportsDelegate :  public MgaObject {
	public:
		SupportsDelegate();
		SupportsDelegate(::Udm::ObjectImpl *impl);
		SupportsDelegate(const SupportsDelegate &master);

#ifdef UDM_RVALUE
		SupportsDelegate(SupportsDelegate &&master);

		static SupportsDelegate Cast(::Udm::Object &&a);
		SupportsDelegate& operator=(SupportsDelegate &&a);

#endif
		static SupportsDelegate Cast(const ::Udm::Object &a);
		static SupportsDelegate Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		SupportsDelegate CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< SupportsDelegate> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< SupportsDelegate, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< SupportsDelegate, Pred>(impl); };
		SupportsDelegate CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< SupportsDelegate> Derived();
		template <class Pred> ::Udm::DerivedAttr< SupportsDelegate, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< SupportsDelegate, Pred>(impl); };
		::Udm::ArchetypeAttr< SupportsDelegate> Archetype() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> ComponentAssembly_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> parent() const;
		::Udm::AssocEndAttr< ::CQML::Supports> srcSupportsDelegate_end() const;
		::Udm::AssocEndAttr< ::CQML::ProvidedRequestPort> dstSupportsDelegate_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ComponentAssembly_parent;
		static ::Uml::AssociationRole meta_srcSupportsDelegate_end_;
		static ::Uml::AssociationRole meta_dstSupportsDelegate_end_;

	};

	class CQML_Export DeploymentPlan :  public MgaObject {
	public:
		DeploymentPlan();
		DeploymentPlan(::Udm::ObjectImpl *impl);
		DeploymentPlan(const DeploymentPlan &master);

#ifdef UDM_RVALUE
		DeploymentPlan(DeploymentPlan &&master);

		static DeploymentPlan Cast(::Udm::Object &&a);
		DeploymentPlan& operator=(DeploymentPlan &&a);

#endif
		static DeploymentPlan Cast(const ::Udm::Object &a);
		static DeploymentPlan Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		DeploymentPlan CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< DeploymentPlan> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< DeploymentPlan, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< DeploymentPlan, Pred>(impl); };
		DeploymentPlan CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< DeploymentPlan> Derived();
		template <class Pred> ::Udm::DerivedAttr< DeploymentPlan, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< DeploymentPlan, Pred>(impl); };
		::Udm::ArchetypeAttr< DeploymentPlan> Archetype() const;
		::Udm::StringAttr label() const;
		::Udm::StringAttr UUID() const;
		::Udm::AssocAttr< DeploymentPlanRef> referedbyDeploymentPlanReference() const;
		template <class Pred> ::Udm::AssocAttr< DeploymentPlanRef, Pred> referedbyDeploymentPlanReference_sorted(const Pred &) const { return ::Udm::AssocAttr< DeploymentPlanRef, Pred>(impl, meta_referedbyDeploymentPlanReference); };
		::Udm::ChildrenAttr< ::CQML::NodeReference> NodeReference_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::NodeReference, Pred> NodeReference_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::NodeReference, Pred>(impl, meta_NodeReference_children); };
		::Udm::ChildrenAttr< ::CQML::InstanceMapping> InstanceMapping_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::InstanceMapping, Pred> InstanceMapping_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::InstanceMapping, Pred>(impl, meta_InstanceMapping_children); };
		::Udm::ChildrenAttr< ::CQML::CollocationGroup> CollocationGroup_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::CollocationGroup, Pred> CollocationGroup_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::CollocationGroup, Pred>(impl, meta_CollocationGroup_children); };
		::Udm::ChildrenAttr< ::CQML::Property> Property_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Property, Pred> Property_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Property, Pred>(impl, meta_Property_children); };
		::Udm::ChildrenAttr< ::CQML::Deploys> Deploys_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Deploys, Pred> Deploys_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Deploys, Pred>(impl, meta_Deploys_children); };
		::Udm::ChildrenAttr< ::CQML::CollocationGroupMember> CollocationGroupMember_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::CollocationGroupMember, Pred> CollocationGroupMember_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::CollocationGroupMember, Pred>(impl, meta_CollocationGroupMember_children); };
		::Udm::ChildrenAttr< ::CQML::DeploymentPlanQoS> DeploymentPlanQoS_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::DeploymentPlanQoS, Pred> DeploymentPlanQoS_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::DeploymentPlanQoS, Pred>(impl, meta_DeploymentPlanQoS_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentRef> ComponentRef_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentRef, Pred> ComponentRef_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentRef, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::CollocationGroupMember> CollocationGroupMember_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::CollocationGroupMember, Pred> CollocationGroupMember_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::CollocationGroupMember, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Property> Property_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Property, Pred> Property_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Property, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::InstanceMapping> InstanceMapping_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::InstanceMapping, Pred> InstanceMapping_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::InstanceMapping, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::CollocationGroup> CollocationGroup_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::CollocationGroup, Pred> CollocationGroup_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::CollocationGroup, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::SharedComponentReference> SharedComponentReference_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::SharedComponentReference, Pred> SharedComponentReference_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::SharedComponentReference, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentFactoryRef> ComponentFactoryRef_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentFactoryRef, Pred> ComponentFactoryRef_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentFactoryRef, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Deploys> Deploys_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Deploys, Pred> Deploys_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Deploys, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentAssemblyReference> ComponentAssemblyReference_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentAssemblyReference, Pred> ComponentAssemblyReference_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentAssemblyReference, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::NodeReference> NodeReference_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::NodeReference, Pred> NodeReference_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::NodeReference, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::DeploymentPlanQoS> DeploymentPlanQoS_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::DeploymentPlanQoS, Pred> DeploymentPlanQoS_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::DeploymentPlanQoS, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::DomainRiskGroupingRef> DomainRiskGroupingRef_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::DomainRiskGroupingRef, Pred> DomainRiskGroupingRef_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::DomainRiskGroupingRef, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::DeploymentPlans> DeploymentPlans_parent() const;
		::Udm::ParentAttr< ::CQML::DeploymentPlans> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_label;
		static ::Uml::Attribute meta_UUID;
		static ::Uml::AssociationRole meta_referedbyDeploymentPlanReference;
		static ::Uml::CompositionChildRole meta_NodeReference_children;
		static ::Uml::CompositionChildRole meta_InstanceMapping_children;
		static ::Uml::CompositionChildRole meta_CollocationGroup_children;
		static ::Uml::CompositionChildRole meta_Property_children;
		static ::Uml::CompositionChildRole meta_Deploys_children;
		static ::Uml::CompositionChildRole meta_CollocationGroupMember_children;
		static ::Uml::CompositionChildRole meta_DeploymentPlanQoS_children;
		static ::Uml::CompositionParentRole meta_DeploymentPlans_parent;

	};

	class CQML_Export InstanceMapping :  public MgaObject {
	public:
		InstanceMapping();
		InstanceMapping(::Udm::ObjectImpl *impl);
		InstanceMapping(const InstanceMapping &master);

#ifdef UDM_RVALUE
		InstanceMapping(InstanceMapping &&master);

		static InstanceMapping Cast(::Udm::Object &&a);
		InstanceMapping& operator=(InstanceMapping &&a);

#endif
		static InstanceMapping Cast(const ::Udm::Object &a);
		static InstanceMapping Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		InstanceMapping CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< InstanceMapping> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< InstanceMapping, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< InstanceMapping, Pred>(impl); };
		InstanceMapping CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< InstanceMapping> Derived();
		template <class Pred> ::Udm::DerivedAttr< InstanceMapping, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< InstanceMapping, Pred>(impl); };
		::Udm::ArchetypeAttr< InstanceMapping> Archetype() const;
		::Udm::ParentAttr< ::CQML::DeploymentPlan> DeploymentPlan_parent() const;
		::Udm::ParentAttr< ::CQML::DeploymentPlan> parent() const;
		::Udm::AssocEndAttr< ::CQML::CollocationGroup> srcInstanceMapping_end() const;
		::Udm::AssocEndAttr< ::CQML::NodeReference> dstInstanceMapping_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_DeploymentPlan_parent;
		static ::Uml::AssociationRole meta_srcInstanceMapping_end_;
		static ::Uml::AssociationRole meta_dstInstanceMapping_end_;

	};

	class CQML_Export CollocationGroup :  public MgaObject {
	public:
		CollocationGroup();
		CollocationGroup(::Udm::ObjectImpl *impl);
		CollocationGroup(const CollocationGroup &master);

#ifdef UDM_RVALUE
		CollocationGroup(CollocationGroup &&master);

		static CollocationGroup Cast(::Udm::Object &&a);
		CollocationGroup& operator=(CollocationGroup &&a);

#endif
		static CollocationGroup Cast(const ::Udm::Object &a);
		static CollocationGroup Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		CollocationGroup CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< CollocationGroup> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< CollocationGroup, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< CollocationGroup, Pred>(impl); };
		CollocationGroup CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< CollocationGroup> Derived();
		template <class Pred> ::Udm::DerivedAttr< CollocationGroup, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< CollocationGroup, Pred>(impl); };
		::Udm::ArchetypeAttr< CollocationGroup> Archetype() const;
		::Udm::AClassAssocAttr< InstanceMapping, NodeReference> dstInstanceMapping() const;
		template <class Pred> ::Udm::AClassAssocAttr< InstanceMapping, NodeReference, Pred> dstInstanceMapping_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< InstanceMapping, NodeReference, Pred>(impl, meta_dstInstanceMapping, meta_dstInstanceMapping_rev); };
		::Udm::AssocAttr< CollocationGroupMember> members() const;
		template <class Pred> ::Udm::AssocAttr< CollocationGroupMember, Pred> members_sorted(const Pred &) const { return ::Udm::AssocAttr< CollocationGroupMember, Pred>(impl, meta_members); };
		::Udm::ParentAttr< ::CQML::DeploymentPlan> DeploymentPlan_parent() const;
		::Udm::ParentAttr< ::CQML::DeploymentPlan> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_dstInstanceMapping;
		static ::Uml::AssociationRole meta_dstInstanceMapping_rev;
		static ::Uml::AssociationRole meta_members;
		static ::Uml::CompositionParentRole meta_DeploymentPlan_parent;

	};

	class CQML_Export SharedComponentReference :  public CollocationGroupMember {
	public:
		SharedComponentReference();
		SharedComponentReference(::Udm::ObjectImpl *impl);
		SharedComponentReference(const SharedComponentReference &master);

#ifdef UDM_RVALUE
		SharedComponentReference(SharedComponentReference &&master);

		static SharedComponentReference Cast(::Udm::Object &&a);
		SharedComponentReference& operator=(SharedComponentReference &&a);

#endif
		static SharedComponentReference Cast(const ::Udm::Object &a);
		static SharedComponentReference Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		SharedComponentReference CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< SharedComponentReference> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< SharedComponentReference, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< SharedComponentReference, Pred>(impl); };
		SharedComponentReference CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< SharedComponentReference> Derived();
		template <class Pred> ::Udm::DerivedAttr< SharedComponentReference, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< SharedComponentReference, Pred>(impl); };
		::Udm::ArchetypeAttr< SharedComponentReference> Archetype() const;
		::Udm::PointerAttr< ComponentRef> ref() const;
		::Udm::ParentAttr< ::CQML::DeploymentPlan> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_ref;

	};

	class CQML_Export ComponentFactoryRef :  public CollocationGroupMember {
	public:
		ComponentFactoryRef();
		ComponentFactoryRef(::Udm::ObjectImpl *impl);
		ComponentFactoryRef(const ComponentFactoryRef &master);

#ifdef UDM_RVALUE
		ComponentFactoryRef(ComponentFactoryRef &&master);

		static ComponentFactoryRef Cast(::Udm::Object &&a);
		ComponentFactoryRef& operator=(ComponentFactoryRef &&a);

#endif
		static ComponentFactoryRef Cast(const ::Udm::Object &a);
		static ComponentFactoryRef Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ComponentFactoryRef CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ComponentFactoryRef> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ComponentFactoryRef, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ComponentFactoryRef, Pred>(impl); };
		ComponentFactoryRef CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ComponentFactoryRef> Derived();
		template <class Pred> ::Udm::DerivedAttr< ComponentFactoryRef, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ComponentFactoryRef, Pred>(impl); };
		::Udm::ArchetypeAttr< ComponentFactoryRef> Archetype() const;
		::Udm::AClassAssocAttr< Deploys, ComponentRef> dstDeploys() const;
		template <class Pred> ::Udm::AClassAssocAttr< Deploys, ComponentRef, Pred> dstDeploys_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< Deploys, ComponentRef, Pred>(impl, meta_dstDeploys, meta_dstDeploys_rev); };
		::Udm::PointerAttr< ComponentFactoryInstance> ref() const;
		::Udm::ParentAttr< ::CQML::DeploymentPlan> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_dstDeploys;
		static ::Uml::AssociationRole meta_dstDeploys_rev;
		static ::Uml::AssociationRole meta_ref;

	};

	class CQML_Export Deploys :  public MgaObject {
	public:
		Deploys();
		Deploys(::Udm::ObjectImpl *impl);
		Deploys(const Deploys &master);

#ifdef UDM_RVALUE
		Deploys(Deploys &&master);

		static Deploys Cast(::Udm::Object &&a);
		Deploys& operator=(Deploys &&a);

#endif
		static Deploys Cast(const ::Udm::Object &a);
		static Deploys Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Deploys CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Deploys> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Deploys, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Deploys, Pred>(impl); };
		Deploys CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Deploys> Derived();
		template <class Pred> ::Udm::DerivedAttr< Deploys, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Deploys, Pred>(impl); };
		::Udm::ArchetypeAttr< Deploys> Archetype() const;
		::Udm::ParentAttr< ::CQML::DeploymentPlan> DeploymentPlan_parent() const;
		::Udm::ParentAttr< ::CQML::DeploymentPlan> parent() const;
		::Udm::AssocEndAttr< ::CQML::ComponentFactoryRef> srcDeploys_end() const;
		::Udm::AssocEndAttr< ::CQML::ComponentRef> dstDeploys_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_DeploymentPlan_parent;
		static ::Uml::AssociationRole meta_srcDeploys_end_;
		static ::Uml::AssociationRole meta_dstDeploys_end_;

	};

	class CQML_Export Bridge :  public MgaObject {
	public:
		Bridge();
		Bridge(::Udm::ObjectImpl *impl);
		Bridge(const Bridge &master);

#ifdef UDM_RVALUE
		Bridge(Bridge &&master);

		static Bridge Cast(::Udm::Object &&a);
		Bridge& operator=(Bridge &&a);

#endif
		static Bridge Cast(const ::Udm::Object &a);
		static Bridge Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Bridge CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Bridge> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Bridge, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Bridge, Pred>(impl); };
		Bridge CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Bridge> Derived();
		template <class Pred> ::Udm::DerivedAttr< Bridge, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Bridge, Pred>(impl); };
		::Udm::ArchetypeAttr< Bridge> Archetype() const;
		::Udm::StringAttr label() const;
		::Udm::AClassAssocAttr< BridgeConnection, Interconnect> srcBridgeConnection() const;
		template <class Pred> ::Udm::AClassAssocAttr< BridgeConnection, Interconnect, Pred> srcBridgeConnection_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< BridgeConnection, Interconnect, Pred>(impl, meta_srcBridgeConnection, meta_srcBridgeConnection_rev); };
		::Udm::ChildrenAttr< ::CQML::Resource> Resource_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Resource, Pred> Resource_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Resource, Pred>(impl, meta_Resource_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::RequirementSatisfier> RequirementSatisfier_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::RequirementSatisfier, Pred> RequirementSatisfier_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::RequirementSatisfier, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Resource> Resource_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Resource, Pred> Resource_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Resource, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::Domain> Domain_parent() const;
		::Udm::ParentAttr< ::CQML::Domain> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_label;
		static ::Uml::AssociationRole meta_srcBridgeConnection;
		static ::Uml::AssociationRole meta_srcBridgeConnection_rev;
		static ::Uml::CompositionChildRole meta_Resource_children;
		static ::Uml::CompositionParentRole meta_Domain_parent;

	};

	class CQML_Export Interconnect :  public MgaObject {
	public:
		Interconnect();
		Interconnect(::Udm::ObjectImpl *impl);
		Interconnect(const Interconnect &master);

#ifdef UDM_RVALUE
		Interconnect(Interconnect &&master);

		static Interconnect Cast(::Udm::Object &&a);
		Interconnect& operator=(Interconnect &&a);

#endif
		static Interconnect Cast(const ::Udm::Object &a);
		static Interconnect Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Interconnect CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Interconnect> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Interconnect, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Interconnect, Pred>(impl); };
		Interconnect CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Interconnect> Derived();
		template <class Pred> ::Udm::DerivedAttr< Interconnect, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Interconnect, Pred>(impl); };
		::Udm::ArchetypeAttr< Interconnect> Archetype() const;
		::Udm::StringAttr label() const;
		::Udm::AClassAssocAttr< BridgeConnection, Bridge> dstBridgeConnection() const;
		template <class Pred> ::Udm::AClassAssocAttr< BridgeConnection, Bridge, Pred> dstBridgeConnection_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< BridgeConnection, Bridge, Pred>(impl, meta_dstBridgeConnection, meta_dstBridgeConnection_rev); };
		::Udm::AClassAssocAttr< InterconnectConnection, Node> srcInterconnectConnection() const;
		template <class Pred> ::Udm::AClassAssocAttr< InterconnectConnection, Node, Pred> srcInterconnectConnection_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< InterconnectConnection, Node, Pred>(impl, meta_srcInterconnectConnection, meta_srcInterconnectConnection_rev); };
		::Udm::ChildrenAttr< ::CQML::Resource> Resource_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Resource, Pred> Resource_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Resource, Pred>(impl, meta_Resource_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::RequirementSatisfier> RequirementSatisfier_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::RequirementSatisfier, Pred> RequirementSatisfier_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::RequirementSatisfier, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Resource> Resource_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Resource, Pred> Resource_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Resource, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::Domain> Domain_parent() const;
		::Udm::ParentAttr< ::CQML::Domain> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_label;
		static ::Uml::AssociationRole meta_dstBridgeConnection;
		static ::Uml::AssociationRole meta_dstBridgeConnection_rev;
		static ::Uml::AssociationRole meta_srcInterconnectConnection;
		static ::Uml::AssociationRole meta_srcInterconnectConnection_rev;
		static ::Uml::CompositionChildRole meta_Resource_children;
		static ::Uml::CompositionParentRole meta_Domain_parent;

	};

	class CQML_Export Node :  public MgaObject {
	public:
		Node();
		Node(::Udm::ObjectImpl *impl);
		Node(const Node &master);

#ifdef UDM_RVALUE
		Node(Node &&master);

		static Node Cast(::Udm::Object &&a);
		Node& operator=(Node &&a);

#endif
		static Node Cast(const ::Udm::Object &a);
		static Node Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Node CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Node> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Node, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Node, Pred>(impl); };
		Node CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Node> Derived();
		template <class Pred> ::Udm::DerivedAttr< Node, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Node, Pred>(impl); };
		::Udm::ArchetypeAttr< Node> Archetype() const;
		::Udm::StringAttr operatingSystem() const;
		::Udm::StringAttr architecture() const;
		::Udm::StringAttr label() const;
		::Udm::AClassAssocAttr< Shares, SharedResource> dstShares() const;
		template <class Pred> ::Udm::AClassAssocAttr< Shares, SharedResource, Pred> dstShares_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< Shares, SharedResource, Pred>(impl, meta_dstShares, meta_dstShares_rev); };
		::Udm::AClassAssocAttr< InterconnectConnection, Interconnect> dstInterconnectConnection() const;
		template <class Pred> ::Udm::AClassAssocAttr< InterconnectConnection, Interconnect, Pred> dstInterconnectConnection_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< InterconnectConnection, Interconnect, Pred>(impl, meta_dstInterconnectConnection, meta_dstInterconnectConnection_rev); };
		::Udm::AssocAttr< NodeReference> referedbyNodeReference() const;
		template <class Pred> ::Udm::AssocAttr< NodeReference, Pred> referedbyNodeReference_sorted(const Pred &) const { return ::Udm::AssocAttr< NodeReference, Pred>(impl, meta_referedbyNodeReference); };
		::Udm::AssocAttr< HostReference> referedbyHostReference() const;
		template <class Pred> ::Udm::AssocAttr< HostReference, Pred> referedbyHostReference_sorted(const Pred &) const { return ::Udm::AssocAttr< HostReference, Pred>(impl, meta_referedbyHostReference); };
		::Udm::ChildrenAttr< ::CQML::Resource> Resource_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Resource, Pred> Resource_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Resource, Pred>(impl, meta_Resource_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::RequirementSatisfier> RequirementSatisfier_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::RequirementSatisfier, Pred> RequirementSatisfier_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::RequirementSatisfier, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Resource> Resource_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Resource, Pred> Resource_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Resource, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::Domain> Domain_parent() const;
		::Udm::ParentAttr< ::CQML::Domain> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_operatingSystem;
		static ::Uml::Attribute meta_architecture;
		static ::Uml::Attribute meta_label;
		static ::Uml::AssociationRole meta_dstShares;
		static ::Uml::AssociationRole meta_dstShares_rev;
		static ::Uml::AssociationRole meta_dstInterconnectConnection;
		static ::Uml::AssociationRole meta_dstInterconnectConnection_rev;
		static ::Uml::AssociationRole meta_referedbyNodeReference;
		static ::Uml::AssociationRole meta_referedbyHostReference;
		static ::Uml::CompositionChildRole meta_Resource_children;
		static ::Uml::CompositionParentRole meta_Domain_parent;

	};

	class CQML_Export NodeReference :  public MgaObject {
	public:
		NodeReference();
		NodeReference(::Udm::ObjectImpl *impl);
		NodeReference(const NodeReference &master);

#ifdef UDM_RVALUE
		NodeReference(NodeReference &&master);

		static NodeReference Cast(::Udm::Object &&a);
		NodeReference& operator=(NodeReference &&a);

#endif
		static NodeReference Cast(const ::Udm::Object &a);
		static NodeReference Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		NodeReference CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< NodeReference> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< NodeReference, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< NodeReference, Pred>(impl); };
		NodeReference CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< NodeReference> Derived();
		template <class Pred> ::Udm::DerivedAttr< NodeReference, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< NodeReference, Pred>(impl); };
		::Udm::ArchetypeAttr< NodeReference> Archetype() const;
		::Udm::AClassAssocAttr< InstanceMapping, CollocationGroup> srcInstanceMapping() const;
		template <class Pred> ::Udm::AClassAssocAttr< InstanceMapping, CollocationGroup, Pred> srcInstanceMapping_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< InstanceMapping, CollocationGroup, Pred>(impl, meta_srcInstanceMapping, meta_srcInstanceMapping_rev); };
		::Udm::PointerAttr< Node> ref() const;
		::Udm::ParentAttr< ::CQML::DeploymentPlan> DeploymentPlan_parent() const;
		::Udm::ParentAttr< ::CQML::DeploymentPlan> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_srcInstanceMapping;
		static ::Uml::AssociationRole meta_srcInstanceMapping_rev;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::CompositionParentRole meta_DeploymentPlan_parent;

	};

	class CQML_Export MetricConnection :  public MgaObject {
	public:
		MetricConnection();
		MetricConnection(::Udm::ObjectImpl *impl);
		MetricConnection(const MetricConnection &master);

#ifdef UDM_RVALUE
		MetricConnection(MetricConnection &&master);

		static MetricConnection Cast(::Udm::Object &&a);
		MetricConnection& operator=(MetricConnection &&a);

#endif
		static MetricConnection Cast(const ::Udm::Object &a);
		static MetricConnection Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		MetricConnection CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< MetricConnection> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< MetricConnection, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< MetricConnection, Pred>(impl); };
		MetricConnection CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< MetricConnection> Derived();
		template <class Pred> ::Udm::DerivedAttr< MetricConnection, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< MetricConnection, Pred>(impl); };
		::Udm::ArchetypeAttr< MetricConnection> Archetype() const;
		::Udm::ParentAttr< ::CQML::BenchmarkAnalysis> BenchmarkAnalysis_parent() const;
		::Udm::ParentAttr< ::CQML::BenchmarkAnalysis> parent() const;
		::Udm::AssocEndAttr< ::CQML::OperationRef> srcMetricConnection_end() const;
		::Udm::AssocEndAttr< ::CQML::MetricsBase> dstMetricConnection_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_BenchmarkAnalysis_parent;
		static ::Uml::AssociationRole meta_srcMetricConnection_end_;
		static ::Uml::AssociationRole meta_dstMetricConnection_end_;

	};

	class CQML_Export DataAnalysisBase :  public MgaObject {
	public:
		DataAnalysisBase();
		DataAnalysisBase(::Udm::ObjectImpl *impl);
		DataAnalysisBase(const DataAnalysisBase &master);

#ifdef UDM_RVALUE
		DataAnalysisBase(DataAnalysisBase &&master);

		static DataAnalysisBase Cast(::Udm::Object &&a);
		DataAnalysisBase& operator=(DataAnalysisBase &&a);

#endif
		static DataAnalysisBase Cast(const ::Udm::Object &a);
		static DataAnalysisBase Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		DataAnalysisBase CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< DataAnalysisBase> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< DataAnalysisBase, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< DataAnalysisBase, Pred>(impl); };
		DataAnalysisBase CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< DataAnalysisBase> Derived();
		template <class Pred> ::Udm::DerivedAttr< DataAnalysisBase, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< DataAnalysisBase, Pred>(impl); };
		::Udm::ArchetypeAttr< DataAnalysisBase> Archetype() const;
		::Udm::ParentAttr< ::CQML::BenchmarkAnalysis> BenchmarkAnalysis_parent() const;
		::Udm::ParentAttr< ::CQML::MetricsBase> MetricsBase_parent() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_BenchmarkAnalysis_parent;
		static ::Uml::CompositionParentRole meta_MetricsBase_parent;

	};

	class CQML_Export Average :  public DataAnalysisBase {
	public:
		Average();
		Average(::Udm::ObjectImpl *impl);
		Average(const Average &master);

#ifdef UDM_RVALUE
		Average(Average &&master);

		static Average Cast(::Udm::Object &&a);
		Average& operator=(Average &&a);

#endif
		static Average Cast(const ::Udm::Object &a);
		static Average Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Average CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Average> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Average, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Average, Pred>(impl); };
		Average CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Average> Derived();
		template <class Pred> ::Udm::DerivedAttr< Average, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Average, Pred>(impl); };
		::Udm::ArchetypeAttr< Average> Archetype() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;

	};

	class CQML_Export Minimum :  public DataAnalysisBase {
	public:
		Minimum();
		Minimum(::Udm::ObjectImpl *impl);
		Minimum(const Minimum &master);

#ifdef UDM_RVALUE
		Minimum(Minimum &&master);

		static Minimum Cast(::Udm::Object &&a);
		Minimum& operator=(Minimum &&a);

#endif
		static Minimum Cast(const ::Udm::Object &a);
		static Minimum Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Minimum CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Minimum> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Minimum, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Minimum, Pred>(impl); };
		Minimum CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Minimum> Derived();
		template <class Pred> ::Udm::DerivedAttr< Minimum, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Minimum, Pred>(impl); };
		::Udm::ArchetypeAttr< Minimum> Archetype() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;

	};

	class CQML_Export Maximum :  public DataAnalysisBase {
	public:
		Maximum();
		Maximum(::Udm::ObjectImpl *impl);
		Maximum(const Maximum &master);

#ifdef UDM_RVALUE
		Maximum(Maximum &&master);

		static Maximum Cast(::Udm::Object &&a);
		Maximum& operator=(Maximum &&a);

#endif
		static Maximum Cast(const ::Udm::Object &a);
		static Maximum Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Maximum CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Maximum> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Maximum, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Maximum, Pred>(impl); };
		Maximum CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Maximum> Derived();
		template <class Pred> ::Udm::DerivedAttr< Maximum, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Maximum, Pred>(impl); };
		::Udm::ArchetypeAttr< Maximum> Archetype() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;

	};

	class CQML_Export Jitter :  public DataAnalysisBase {
	public:
		Jitter();
		Jitter(::Udm::ObjectImpl *impl);
		Jitter(const Jitter &master);

#ifdef UDM_RVALUE
		Jitter(Jitter &&master);

		static Jitter Cast(::Udm::Object &&a);
		Jitter& operator=(Jitter &&a);

#endif
		static Jitter Cast(const ::Udm::Object &a);
		static Jitter Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Jitter CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Jitter> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Jitter, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Jitter, Pred>(impl); };
		Jitter CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Jitter> Derived();
		template <class Pred> ::Udm::DerivedAttr< Jitter, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Jitter, Pred>(impl); };
		::Udm::ArchetypeAttr< Jitter> Archetype() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;

	};

	class CQML_Export TimeProbe :  public MgaObject {
	public:
		TimeProbe();
		TimeProbe(::Udm::ObjectImpl *impl);
		TimeProbe(const TimeProbe &master);

#ifdef UDM_RVALUE
		TimeProbe(TimeProbe &&master);

		static TimeProbe Cast(::Udm::Object &&a);
		TimeProbe& operator=(TimeProbe &&a);

#endif
		static TimeProbe Cast(const ::Udm::Object &a);
		static TimeProbe Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		TimeProbe CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< TimeProbe> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< TimeProbe, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< TimeProbe, Pred>(impl); };
		TimeProbe CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< TimeProbe> Derived();
		template <class Pred> ::Udm::DerivedAttr< TimeProbe, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< TimeProbe, Pred>(impl); };
		::Udm::ArchetypeAttr< TimeProbe> Archetype() const;
		::Udm::AClassPointerAttr< TimerConnection, OperationRef> srcTimerConnection() const;
		::Udm::AClassPointerAttr< TimerEventSinkConn, EventRef> srcTimerEventSinkConn() const;
		::Udm::ParentAttr< ::CQML::BenchmarkAnalysis> BenchmarkAnalysis_parent() const;
		::Udm::ParentAttr< ::CQML::BenchmarkAnalysis> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_srcTimerConnection;
		static ::Uml::AssociationRole meta_srcTimerConnection_rev;
		static ::Uml::AssociationRole meta_srcTimerEventSinkConn;
		static ::Uml::AssociationRole meta_srcTimerEventSinkConn_rev;
		static ::Uml::CompositionParentRole meta_BenchmarkAnalysis_parent;

	};

	class CQML_Export TimerConnection :  public MgaObject {
	public:
		TimerConnection();
		TimerConnection(::Udm::ObjectImpl *impl);
		TimerConnection(const TimerConnection &master);

#ifdef UDM_RVALUE
		TimerConnection(TimerConnection &&master);

		static TimerConnection Cast(::Udm::Object &&a);
		TimerConnection& operator=(TimerConnection &&a);

#endif
		static TimerConnection Cast(const ::Udm::Object &a);
		static TimerConnection Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		TimerConnection CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< TimerConnection> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< TimerConnection, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< TimerConnection, Pred>(impl); };
		TimerConnection CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< TimerConnection> Derived();
		template <class Pred> ::Udm::DerivedAttr< TimerConnection, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< TimerConnection, Pred>(impl); };
		::Udm::ArchetypeAttr< TimerConnection> Archetype() const;
		::Udm::ParentAttr< ::CQML::BenchmarkAnalysis> BenchmarkAnalysis_parent() const;
		::Udm::ParentAttr< ::CQML::BenchmarkAnalysis> parent() const;
		::Udm::AssocEndAttr< ::CQML::OperationRef> srcTimerConnection_end() const;
		::Udm::AssocEndAttr< ::CQML::TimeProbe> dstTimerConnection_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_BenchmarkAnalysis_parent;
		static ::Uml::AssociationRole meta_srcTimerConnection_end_;
		static ::Uml::AssociationRole meta_dstTimerConnection_end_;

	};

	class CQML_Export MetricsBase :  public MgaObject {
	public:
		MetricsBase();
		MetricsBase(::Udm::ObjectImpl *impl);
		MetricsBase(const MetricsBase &master);

#ifdef UDM_RVALUE
		MetricsBase(MetricsBase &&master);

		static MetricsBase Cast(::Udm::Object &&a);
		MetricsBase& operator=(MetricsBase &&a);

#endif
		static MetricsBase Cast(const ::Udm::Object &a);
		static MetricsBase Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		MetricsBase CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< MetricsBase> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< MetricsBase, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< MetricsBase, Pred>(impl); };
		MetricsBase CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< MetricsBase> Derived();
		template <class Pred> ::Udm::DerivedAttr< MetricsBase, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< MetricsBase, Pred>(impl); };
		::Udm::ArchetypeAttr< MetricsBase> Archetype() const;
		::Udm::IntegerAttr rate() const;
		::Udm::StringAttr resolution() const;
		::Udm::IntegerAttr priority() const;
		::Udm::IntegerAttr iterations() const;
		::Udm::IntegerAttr warmup() const;
		::Udm::StringAttr fileName() const;
		::Udm::AClassPointerAttr< WorkloadCharacteristics, TaskSet> dstWorkloadCharacteristics() const;
		::Udm::AClassPointerAttr< MetricConnection, OperationRef> srcMetricConnection() const;
		::Udm::AClassPointerAttr< BenchmarkCharacteristics, BenchmarkType> srcBenchmarkCharacteristics() const;
		::Udm::ChildrenAttr< ::CQML::DataAnalysisBase> DataAnalysisBase_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::DataAnalysisBase, Pred> DataAnalysisBase_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::DataAnalysisBase, Pred>(impl, meta_DataAnalysisBase_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::DataAnalysisBase> DataAnalysisBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::DataAnalysisBase, Pred> DataAnalysisBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::DataAnalysisBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Average> Average_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Average, Pred> Average_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Average, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Minimum> Minimum_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Minimum, Pred> Minimum_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Minimum, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Maximum> Maximum_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Maximum, Pred> Maximum_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Maximum, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Jitter> Jitter_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Jitter, Pred> Jitter_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Jitter, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::BenchmarkAnalysis> BenchmarkAnalysis_parent() const;
		::Udm::ParentAttr< ::CQML::BenchmarkAnalysis> parent() const;

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_rate;
		static ::Uml::Attribute meta_resolution;
		static ::Uml::Attribute meta_priority;
		static ::Uml::Attribute meta_iterations;
		static ::Uml::Attribute meta_warmup;
		static ::Uml::Attribute meta_fileName;
		static ::Uml::AssociationRole meta_dstWorkloadCharacteristics;
		static ::Uml::AssociationRole meta_dstWorkloadCharacteristics_rev;
		static ::Uml::AssociationRole meta_srcMetricConnection;
		static ::Uml::AssociationRole meta_srcMetricConnection_rev;
		static ::Uml::AssociationRole meta_srcBenchmarkCharacteristics;
		static ::Uml::AssociationRole meta_srcBenchmarkCharacteristics_rev;
		static ::Uml::CompositionChildRole meta_DataAnalysisBase_children;
		static ::Uml::CompositionParentRole meta_BenchmarkAnalysis_parent;

	};

	class CQML_Export Latency :  public MetricsBase {
	public:
		Latency();
		Latency(::Udm::ObjectImpl *impl);
		Latency(const Latency &master);

#ifdef UDM_RVALUE
		Latency(Latency &&master);

		static Latency Cast(::Udm::Object &&a);
		Latency& operator=(Latency &&a);

#endif
		static Latency Cast(const ::Udm::Object &a);
		static Latency Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Latency CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Latency> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Latency, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Latency, Pred>(impl); };
		Latency CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Latency> Derived();
		template <class Pred> ::Udm::DerivedAttr< Latency, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Latency, Pred>(impl); };
		::Udm::ArchetypeAttr< Latency> Archetype() const;
		::Udm::ParentAttr< ::CQML::BenchmarkAnalysis> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;

	};

	class CQML_Export Throughput :  public MetricsBase {
	public:
		Throughput();
		Throughput(::Udm::ObjectImpl *impl);
		Throughput(const Throughput &master);

#ifdef UDM_RVALUE
		Throughput(Throughput &&master);

		static Throughput Cast(::Udm::Object &&a);
		Throughput& operator=(Throughput &&a);

#endif
		static Throughput Cast(const ::Udm::Object &a);
		static Throughput Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Throughput CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Throughput> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Throughput, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Throughput, Pred>(impl); };
		Throughput CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Throughput> Derived();
		template <class Pred> ::Udm::DerivedAttr< Throughput, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Throughput, Pred>(impl); };
		::Udm::ArchetypeAttr< Throughput> Archetype() const;
		::Udm::ParentAttr< ::CQML::BenchmarkAnalysis> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;

	};

	class CQML_Export BenchmarkAnalysis :  public MgaObject {
	public:
		BenchmarkAnalysis();
		BenchmarkAnalysis(::Udm::ObjectImpl *impl);
		BenchmarkAnalysis(const BenchmarkAnalysis &master);

#ifdef UDM_RVALUE
		BenchmarkAnalysis(BenchmarkAnalysis &&master);

		static BenchmarkAnalysis Cast(::Udm::Object &&a);
		BenchmarkAnalysis& operator=(BenchmarkAnalysis &&a);

#endif
		static BenchmarkAnalysis Cast(const ::Udm::Object &a);
		static BenchmarkAnalysis Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		BenchmarkAnalysis CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< BenchmarkAnalysis> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< BenchmarkAnalysis, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< BenchmarkAnalysis, Pred>(impl); };
		BenchmarkAnalysis CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< BenchmarkAnalysis> Derived();
		template <class Pred> ::Udm::DerivedAttr< BenchmarkAnalysis, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< BenchmarkAnalysis, Pred>(impl); };
		::Udm::ArchetypeAttr< BenchmarkAnalysis> Archetype() const;
		::Udm::ChildrenAttr< ::CQML::OperationBase> OperationBase_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::OperationBase, Pred> OperationBase_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::OperationBase, Pred>(impl, meta_OperationBase_children); };
		::Udm::ChildrenAttr< ::CQML::TimerConnection> TimerConnection_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::TimerConnection, Pred> TimerConnection_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::TimerConnection, Pred>(impl, meta_TimerConnection_children); };
		::Udm::ChildrenAttr< ::CQML::MetricConnection> MetricConnection_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MetricConnection, Pred> MetricConnection_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MetricConnection, Pred>(impl, meta_MetricConnection_children); };
		::Udm::ChildrenAttr< ::CQML::DataAnalysisBase> DataAnalysisBase_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::DataAnalysisBase, Pred> DataAnalysisBase_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::DataAnalysisBase, Pred>(impl, meta_DataAnalysisBase_children); };
		::Udm::ChildrenAttr< ::CQML::MetricsBase> MetricsBase_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MetricsBase, Pred> MetricsBase_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MetricsBase, Pred>(impl, meta_MetricsBase_children); };
		::Udm::ChildrenAttr< ::CQML::TimeProbe> TimeProbe_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::TimeProbe, Pred> TimeProbe_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::TimeProbe, Pred>(impl, meta_TimeProbe_children); };
		::Udm::ChildrenAttr< ::CQML::OperationRef> OperationRef_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::OperationRef, Pred> OperationRef_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::OperationRef, Pred>(impl, meta_OperationRef_children); };
		::Udm::ChildrenAttr< ::CQML::EventRef> EventRef_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::EventRef, Pred> EventRef_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::EventRef, Pred>(impl, meta_EventRef_children); };
		::Udm::ChildrenAttr< ::CQML::Event> Event_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Event, Pred> Event_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Event, Pred>(impl, meta_Event_children); };
		::Udm::ChildrenAttr< ::CQML::TimerEventSinkConn> TimerEventSinkConn_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::TimerEventSinkConn, Pred> TimerEventSinkConn_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::TimerEventSinkConn, Pred>(impl, meta_TimerEventSinkConn_children); };
		::Udm::ChildrenAttr< ::CQML::TaskSet> TaskSet_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::TaskSet, Pred> TaskSet_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::TaskSet, Pred>(impl, meta_TaskSet_children); };
		::Udm::ChildrenAttr< ::CQML::Task> Task_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Task, Pred> Task_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Task, Pred>(impl, meta_Task_children); };
		::Udm::ChildrenAttr< ::CQML::WorkloadCharacteristics> WorkloadCharacteristics_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::WorkloadCharacteristics, Pred> WorkloadCharacteristics_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::WorkloadCharacteristics, Pred>(impl, meta_WorkloadCharacteristics_children); };
		::Udm::ChildrenAttr< ::CQML::ComponentOperation> ComponentOperation_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentOperation, Pred> ComponentOperation_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentOperation, Pred>(impl, meta_ComponentOperation_children); };
		::Udm::ChildrenAttr< ::CQML::CompRef> CompRef_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::CompRef, Pred> CompRef_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::CompRef, Pred>(impl, meta_CompRef_children); };
		::Udm::ChildrenAttr< ::CQML::WorkLoadOperationConnection> WorkLoadOperationConnection_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::WorkLoadOperationConnection, Pred> WorkLoadOperationConnection_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::WorkLoadOperationConnection, Pred>(impl, meta_WorkLoadOperationConnection_children); };
		::Udm::ChildrenAttr< ::CQML::BenchmarkType> BenchmarkType_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::BenchmarkType, Pred> BenchmarkType_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::BenchmarkType, Pred>(impl, meta_BenchmarkType_children); };
		::Udm::ChildrenAttr< ::CQML::BenchmarkCharacteristics> BenchmarkCharacteristics_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::BenchmarkCharacteristics, Pred> BenchmarkCharacteristics_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::BenchmarkCharacteristics, Pred>(impl, meta_BenchmarkCharacteristics_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Prefixable> Prefixable_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Prefixable, Pred> Prefixable_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Prefixable, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Taggable> Taggable_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Taggable, Pred> Taggable_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Taggable, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::MemberType> MemberType_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MemberType, Pred> MemberType_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MemberType, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::NamedType> NamedType_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::NamedType, Pred> NamedType_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::NamedType, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Inheritable> Inheritable_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Inheritable, Pred> Inheritable_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Inheritable, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::HasOperations> HasOperations_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::HasOperations, Pred> HasOperations_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::HasOperations, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Event> Event_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Event, Pred> Event_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Event, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ObjectByValue> ObjectByValue_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ObjectByValue, Pred> ObjectByValue_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ObjectByValue, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ExternalPortReferenceType> ExternalPortReferenceType_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ExternalPortReferenceType, Pred> ExternalPortReferenceType_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ExternalPortReferenceType, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::SupportsInterfaces> SupportsInterfaces_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::SupportsInterfaces, Pred> SupportsInterfaces_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::SupportsInterfaces, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::OperationBase> OperationBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::OperationBase, Pred> OperationBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::OperationBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::HasExceptions> HasExceptions_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::HasExceptions, Pred> HasExceptions_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::HasExceptions, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::OnewayOperation> OnewayOperation_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::OnewayOperation, Pred> OnewayOperation_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::OnewayOperation, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::FactoryOperation> FactoryOperation_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::FactoryOperation, Pred> FactoryOperation_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::FactoryOperation, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::LookupOperation> LookupOperation_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::LookupOperation, Pred> LookupOperation_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::LookupOperation, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::TwowayOperation> TwowayOperation_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::TwowayOperation, Pred> TwowayOperation_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::TwowayOperation, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::MetricConnection> MetricConnection_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MetricConnection, Pred> MetricConnection_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MetricConnection, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::DataAnalysisBase> DataAnalysisBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::DataAnalysisBase, Pred> DataAnalysisBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::DataAnalysisBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Average> Average_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Average, Pred> Average_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Average, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Minimum> Minimum_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Minimum, Pred> Minimum_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Minimum, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Maximum> Maximum_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Maximum, Pred> Maximum_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Maximum, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Jitter> Jitter_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Jitter, Pred> Jitter_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Jitter, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::TimeProbe> TimeProbe_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::TimeProbe, Pred> TimeProbe_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::TimeProbe, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::TimerConnection> TimerConnection_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::TimerConnection, Pred> TimerConnection_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::TimerConnection, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Latency> Latency_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Latency, Pred> Latency_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Latency, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::MetricsBase> MetricsBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MetricsBase, Pred> MetricsBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MetricsBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Throughput> Throughput_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Throughput, Pred> Throughput_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Throughput, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::OperationRef> OperationRef_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::OperationRef, Pred> OperationRef_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::OperationRef, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ResourceActionBase> ResourceActionBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ResourceActionBase, Pred> ResourceActionBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ResourceActionBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::EventRef> EventRef_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::EventRef, Pred> EventRef_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::EventRef, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::TimerEventSinkConn> TimerEventSinkConn_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::TimerEventSinkConn, Pred> TimerEventSinkConn_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::TimerEventSinkConn, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::TaskSet> TaskSet_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::TaskSet, Pred> TaskSet_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::TaskSet, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Task> Task_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Task, Pred> Task_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Task, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::WorkloadCharacteristics> WorkloadCharacteristics_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::WorkloadCharacteristics, Pred> WorkloadCharacteristics_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::WorkloadCharacteristics, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentOperation> ComponentOperation_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentOperation, Pred> ComponentOperation_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentOperation, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::CompRef> CompRef_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::CompRef, Pred> CompRef_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::CompRef, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::WorkLoadOperationConnection> WorkLoadOperationConnection_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::WorkLoadOperationConnection, Pred> WorkLoadOperationConnection_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::WorkLoadOperationConnection, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::BenchmarkType> BenchmarkType_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::BenchmarkType, Pred> BenchmarkType_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::BenchmarkType, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::TriggerBenchmarks> TriggerBenchmarks_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::TriggerBenchmarks, Pred> TriggerBenchmarks_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::TriggerBenchmarks, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::PeriodicBenchmarks> PeriodicBenchmarks_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PeriodicBenchmarks, Pred> PeriodicBenchmarks_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PeriodicBenchmarks, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::FixedIterationBenchmarks> FixedIterationBenchmarks_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::FixedIterationBenchmarks, Pred> FixedIterationBenchmarks_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::FixedIterationBenchmarks, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::BenchmarkCharacteristics> BenchmarkCharacteristics_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::BenchmarkCharacteristics, Pred> BenchmarkCharacteristics_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::BenchmarkCharacteristics, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::ComponentAnalyses> ComponentAnalyses_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentAnalyses> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionChildRole meta_OperationBase_children;
		static ::Uml::CompositionChildRole meta_TimerConnection_children;
		static ::Uml::CompositionChildRole meta_MetricConnection_children;
		static ::Uml::CompositionChildRole meta_DataAnalysisBase_children;
		static ::Uml::CompositionChildRole meta_MetricsBase_children;
		static ::Uml::CompositionChildRole meta_TimeProbe_children;
		static ::Uml::CompositionChildRole meta_OperationRef_children;
		static ::Uml::CompositionChildRole meta_EventRef_children;
		static ::Uml::CompositionChildRole meta_Event_children;
		static ::Uml::CompositionChildRole meta_TimerEventSinkConn_children;
		static ::Uml::CompositionChildRole meta_TaskSet_children;
		static ::Uml::CompositionChildRole meta_Task_children;
		static ::Uml::CompositionChildRole meta_WorkloadCharacteristics_children;
		static ::Uml::CompositionChildRole meta_ComponentOperation_children;
		static ::Uml::CompositionChildRole meta_CompRef_children;
		static ::Uml::CompositionChildRole meta_WorkLoadOperationConnection_children;
		static ::Uml::CompositionChildRole meta_BenchmarkType_children;
		static ::Uml::CompositionChildRole meta_BenchmarkCharacteristics_children;
		static ::Uml::CompositionParentRole meta_ComponentAnalyses_parent;

	};

	class CQML_Export ResourceActionBase :  virtual  public MgaObject {
	public:
		ResourceActionBase();
		ResourceActionBase(::Udm::ObjectImpl *impl);
		ResourceActionBase(const ResourceActionBase &master);

#ifdef UDM_RVALUE
		ResourceActionBase(ResourceActionBase &&master);

		static ResourceActionBase Cast(::Udm::Object &&a);
		ResourceActionBase& operator=(ResourceActionBase &&a);

#endif
		static ResourceActionBase Cast(const ::Udm::Object &a);
		static ResourceActionBase Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ResourceActionBase CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ResourceActionBase> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ResourceActionBase, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ResourceActionBase, Pred>(impl); };
		ResourceActionBase CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ResourceActionBase> Derived();
		template <class Pred> ::Udm::DerivedAttr< ResourceActionBase, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ResourceActionBase, Pred>(impl); };
		::Udm::ArchetypeAttr< ResourceActionBase> Archetype() const;
		::Udm::AClassAssocAttr< OperationInvokeConn, PortRule> srcOperationInvokeConn() const;
		template <class Pred> ::Udm::AClassAssocAttr< OperationInvokeConn, PortRule, Pred> srcOperationInvokeConn_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< OperationInvokeConn, PortRule, Pred>(impl, meta_srcOperationInvokeConn, meta_srcOperationInvokeConn_rev); };
		::Udm::ParentAttr< ::CQML::Policy> Policy_parent() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_srcOperationInvokeConn;
		static ::Uml::AssociationRole meta_srcOperationInvokeConn_rev;
		static ::Uml::CompositionParentRole meta_Policy_parent;

	};

	class CQML_Export OperationRef :  public ResourceActionBase {
	public:
		OperationRef();
		OperationRef(::Udm::ObjectImpl *impl);
		OperationRef(const OperationRef &master);

#ifdef UDM_RVALUE
		OperationRef(OperationRef &&master);

		static OperationRef Cast(::Udm::Object &&a);
		OperationRef& operator=(OperationRef &&a);

#endif
		static OperationRef Cast(const ::Udm::Object &a);
		static OperationRef Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		OperationRef CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< OperationRef> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< OperationRef, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< OperationRef, Pred>(impl); };
		OperationRef CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< OperationRef> Derived();
		template <class Pred> ::Udm::DerivedAttr< OperationRef, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< OperationRef, Pred>(impl); };
		::Udm::ArchetypeAttr< OperationRef> Archetype() const;
		::Udm::AClassPointerAttr< MetricConnection, MetricsBase> dstMetricConnection() const;
		::Udm::AClassPointerAttr< TimerConnection, TimeProbe> dstTimerConnection() const;
		::Udm::AClassPointerAttr< ComponentOperation, CompRef> dstComponentOperation() const;
		::Udm::AClassPointerAttr< WorkLoadOperationConnection, Task> dstWorkLoadOperationConnection() const;
		::Udm::PointerAttr< OperationBase> ref() const;
		::Udm::ParentAttr< ::CQML::BenchmarkAnalysis> BenchmarkAnalysis_parent() const;
		::Udm::ParentAttr< ::CQML::OperationSet> OperationSet_parent() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_dstMetricConnection;
		static ::Uml::AssociationRole meta_dstMetricConnection_rev;
		static ::Uml::AssociationRole meta_dstTimerConnection;
		static ::Uml::AssociationRole meta_dstTimerConnection_rev;
		static ::Uml::AssociationRole meta_dstComponentOperation;
		static ::Uml::AssociationRole meta_dstComponentOperation_rev;
		static ::Uml::AssociationRole meta_dstWorkLoadOperationConnection;
		static ::Uml::AssociationRole meta_dstWorkLoadOperationConnection_rev;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::CompositionParentRole meta_BenchmarkAnalysis_parent;
		static ::Uml::CompositionParentRole meta_OperationSet_parent;

	};

	class CQML_Export EventRef :  public MgaObject {
	public:
		EventRef();
		EventRef(::Udm::ObjectImpl *impl);
		EventRef(const EventRef &master);

#ifdef UDM_RVALUE
		EventRef(EventRef &&master);

		static EventRef Cast(::Udm::Object &&a);
		EventRef& operator=(EventRef &&a);

#endif
		static EventRef Cast(const ::Udm::Object &a);
		static EventRef Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		EventRef CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< EventRef> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< EventRef, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< EventRef, Pred>(impl); };
		EventRef CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< EventRef> Derived();
		template <class Pred> ::Udm::DerivedAttr< EventRef, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< EventRef, Pred>(impl); };
		::Udm::ArchetypeAttr< EventRef> Archetype() const;
		::Udm::AClassAssocAttr< TimerEventSinkConn, TimeProbe> dstTimerEventSinkConn() const;
		template <class Pred> ::Udm::AClassAssocAttr< TimerEventSinkConn, TimeProbe, Pred> dstTimerEventSinkConn_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< TimerEventSinkConn, TimeProbe, Pred>(impl, meta_dstTimerEventSinkConn, meta_dstTimerEventSinkConn_rev); };
		::Udm::PointerAttr< Event> ref() const;
		::Udm::ParentAttr< ::CQML::BenchmarkAnalysis> BenchmarkAnalysis_parent() const;
		::Udm::ParentAttr< ::CQML::BenchmarkAnalysis> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_dstTimerEventSinkConn;
		static ::Uml::AssociationRole meta_dstTimerEventSinkConn_rev;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::CompositionParentRole meta_BenchmarkAnalysis_parent;

	};

	class CQML_Export TimerEventSinkConn :  public MgaObject {
	public:
		TimerEventSinkConn();
		TimerEventSinkConn(::Udm::ObjectImpl *impl);
		TimerEventSinkConn(const TimerEventSinkConn &master);

#ifdef UDM_RVALUE
		TimerEventSinkConn(TimerEventSinkConn &&master);

		static TimerEventSinkConn Cast(::Udm::Object &&a);
		TimerEventSinkConn& operator=(TimerEventSinkConn &&a);

#endif
		static TimerEventSinkConn Cast(const ::Udm::Object &a);
		static TimerEventSinkConn Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		TimerEventSinkConn CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< TimerEventSinkConn> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< TimerEventSinkConn, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< TimerEventSinkConn, Pred>(impl); };
		TimerEventSinkConn CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< TimerEventSinkConn> Derived();
		template <class Pred> ::Udm::DerivedAttr< TimerEventSinkConn, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< TimerEventSinkConn, Pred>(impl); };
		::Udm::ArchetypeAttr< TimerEventSinkConn> Archetype() const;
		::Udm::ParentAttr< ::CQML::BenchmarkAnalysis> BenchmarkAnalysis_parent() const;
		::Udm::ParentAttr< ::CQML::BenchmarkAnalysis> parent() const;
		::Udm::AssocEndAttr< ::CQML::EventRef> srcTimerEventSinkConn_end() const;
		::Udm::AssocEndAttr< ::CQML::TimeProbe> dstTimerEventSinkConn_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_BenchmarkAnalysis_parent;
		static ::Uml::AssociationRole meta_srcTimerEventSinkConn_end_;
		static ::Uml::AssociationRole meta_dstTimerEventSinkConn_end_;

	};

	class CQML_Export TaskSet :  public MgaObject {
	public:
		TaskSet();
		TaskSet(::Udm::ObjectImpl *impl);
		TaskSet(const TaskSet &master);

#ifdef UDM_RVALUE
		TaskSet(TaskSet &&master);

		static TaskSet Cast(::Udm::Object &&a);
		TaskSet& operator=(TaskSet &&a);

#endif
		static TaskSet Cast(const ::Udm::Object &a);
		static TaskSet Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		TaskSet CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< TaskSet> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< TaskSet, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< TaskSet, Pred>(impl); };
		TaskSet CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< TaskSet> Derived();
		template <class Pred> ::Udm::DerivedAttr< TaskSet, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< TaskSet, Pred>(impl); };
		::Udm::ArchetypeAttr< TaskSet> Archetype() const;
		::Udm::IntegerAttr priority() const;
		::Udm::IntegerAttr rate() const;
		::Udm::AClassPointerAttr< WorkloadCharacteristics, MetricsBase> srcWorkloadCharacteristics() const;
		::Udm::AssocAttr< Task> members() const;
		template <class Pred> ::Udm::AssocAttr< Task, Pred> members_sorted(const Pred &) const { return ::Udm::AssocAttr< Task, Pred>(impl, meta_members); };
		::Udm::ParentAttr< ::CQML::BenchmarkAnalysis> BenchmarkAnalysis_parent() const;
		::Udm::ParentAttr< ::CQML::BenchmarkAnalysis> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_priority;
		static ::Uml::Attribute meta_rate;
		static ::Uml::AssociationRole meta_srcWorkloadCharacteristics;
		static ::Uml::AssociationRole meta_srcWorkloadCharacteristics_rev;
		static ::Uml::AssociationRole meta_members;
		static ::Uml::CompositionParentRole meta_BenchmarkAnalysis_parent;

	};

	class CQML_Export Task :  public MgaObject {
	public:
		Task();
		Task(::Udm::ObjectImpl *impl);
		Task(const Task &master);

#ifdef UDM_RVALUE
		Task(Task &&master);

		static Task Cast(::Udm::Object &&a);
		Task& operator=(Task &&a);

#endif
		static Task Cast(const ::Udm::Object &a);
		static Task Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Task CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Task> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Task, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Task, Pred>(impl); };
		Task CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Task> Derived();
		template <class Pred> ::Udm::DerivedAttr< Task, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Task, Pred>(impl); };
		::Udm::ArchetypeAttr< Task> Archetype() const;
		::Udm::AClassPointerAttr< WorkLoadOperationConnection, OperationRef> srcWorkLoadOperationConnection() const;
		::Udm::AssocAttr< TaskSet> setTaskSet() const;
		template <class Pred> ::Udm::AssocAttr< TaskSet, Pred> setTaskSet_sorted(const Pred &) const { return ::Udm::AssocAttr< TaskSet, Pred>(impl, meta_setTaskSet); };
		::Udm::ParentAttr< ::CQML::BenchmarkAnalysis> BenchmarkAnalysis_parent() const;
		::Udm::ParentAttr< ::CQML::BenchmarkAnalysis> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_srcWorkLoadOperationConnection;
		static ::Uml::AssociationRole meta_srcWorkLoadOperationConnection_rev;
		static ::Uml::AssociationRole meta_setTaskSet;
		static ::Uml::CompositionParentRole meta_BenchmarkAnalysis_parent;

	};

	class CQML_Export WorkloadCharacteristics :  public MgaObject {
	public:
		WorkloadCharacteristics();
		WorkloadCharacteristics(::Udm::ObjectImpl *impl);
		WorkloadCharacteristics(const WorkloadCharacteristics &master);

#ifdef UDM_RVALUE
		WorkloadCharacteristics(WorkloadCharacteristics &&master);

		static WorkloadCharacteristics Cast(::Udm::Object &&a);
		WorkloadCharacteristics& operator=(WorkloadCharacteristics &&a);

#endif
		static WorkloadCharacteristics Cast(const ::Udm::Object &a);
		static WorkloadCharacteristics Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		WorkloadCharacteristics CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< WorkloadCharacteristics> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< WorkloadCharacteristics, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< WorkloadCharacteristics, Pred>(impl); };
		WorkloadCharacteristics CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< WorkloadCharacteristics> Derived();
		template <class Pred> ::Udm::DerivedAttr< WorkloadCharacteristics, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< WorkloadCharacteristics, Pred>(impl); };
		::Udm::ArchetypeAttr< WorkloadCharacteristics> Archetype() const;
		::Udm::ParentAttr< ::CQML::BenchmarkAnalysis> BenchmarkAnalysis_parent() const;
		::Udm::ParentAttr< ::CQML::BenchmarkAnalysis> parent() const;
		::Udm::AssocEndAttr< ::CQML::MetricsBase> srcWorkloadCharacteristics_end() const;
		::Udm::AssocEndAttr< ::CQML::TaskSet> dstWorkloadCharacteristics_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_BenchmarkAnalysis_parent;
		static ::Uml::AssociationRole meta_srcWorkloadCharacteristics_end_;
		static ::Uml::AssociationRole meta_dstWorkloadCharacteristics_end_;

	};

	class CQML_Export ComponentOperation :  public MgaObject {
	public:
		ComponentOperation();
		ComponentOperation(::Udm::ObjectImpl *impl);
		ComponentOperation(const ComponentOperation &master);

#ifdef UDM_RVALUE
		ComponentOperation(ComponentOperation &&master);

		static ComponentOperation Cast(::Udm::Object &&a);
		ComponentOperation& operator=(ComponentOperation &&a);

#endif
		static ComponentOperation Cast(const ::Udm::Object &a);
		static ComponentOperation Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ComponentOperation CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ComponentOperation> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ComponentOperation, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ComponentOperation, Pred>(impl); };
		ComponentOperation CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ComponentOperation> Derived();
		template <class Pred> ::Udm::DerivedAttr< ComponentOperation, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ComponentOperation, Pred>(impl); };
		::Udm::ArchetypeAttr< ComponentOperation> Archetype() const;
		::Udm::ParentAttr< ::CQML::BenchmarkAnalysis> BenchmarkAnalysis_parent() const;
		::Udm::ParentAttr< ::CQML::BenchmarkAnalysis> parent() const;
		::Udm::AssocEndAttr< ::CQML::OperationRef> srcComponentOperation_end() const;
		::Udm::AssocEndAttr< ::CQML::CompRef> dstComponentOperation_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_BenchmarkAnalysis_parent;
		static ::Uml::AssociationRole meta_srcComponentOperation_end_;
		static ::Uml::AssociationRole meta_dstComponentOperation_end_;

	};

	class CQML_Export CompRef :  public MgaObject {
	public:
		CompRef();
		CompRef(::Udm::ObjectImpl *impl);
		CompRef(const CompRef &master);

#ifdef UDM_RVALUE
		CompRef(CompRef &&master);

		static CompRef Cast(::Udm::Object &&a);
		CompRef& operator=(CompRef &&a);

#endif
		static CompRef Cast(const ::Udm::Object &a);
		static CompRef Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		CompRef CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< CompRef> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< CompRef, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< CompRef, Pred>(impl); };
		CompRef CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< CompRef> Derived();
		template <class Pred> ::Udm::DerivedAttr< CompRef, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< CompRef, Pred>(impl); };
		::Udm::ArchetypeAttr< CompRef> Archetype() const;
		::Udm::AClassPointerAttr< ComponentOperation, OperationRef> srcComponentOperation() const;
		::Udm::PointerAttr< Component> ref() const;
		::Udm::ParentAttr< ::CQML::BenchmarkAnalysis> BenchmarkAnalysis_parent() const;
		::Udm::ParentAttr< ::CQML::BenchmarkAnalysis> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_srcComponentOperation;
		static ::Uml::AssociationRole meta_srcComponentOperation_rev;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::CompositionParentRole meta_BenchmarkAnalysis_parent;

	};

	class CQML_Export WorkLoadOperationConnection :  public MgaObject {
	public:
		WorkLoadOperationConnection();
		WorkLoadOperationConnection(::Udm::ObjectImpl *impl);
		WorkLoadOperationConnection(const WorkLoadOperationConnection &master);

#ifdef UDM_RVALUE
		WorkLoadOperationConnection(WorkLoadOperationConnection &&master);

		static WorkLoadOperationConnection Cast(::Udm::Object &&a);
		WorkLoadOperationConnection& operator=(WorkLoadOperationConnection &&a);

#endif
		static WorkLoadOperationConnection Cast(const ::Udm::Object &a);
		static WorkLoadOperationConnection Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		WorkLoadOperationConnection CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< WorkLoadOperationConnection> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< WorkLoadOperationConnection, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< WorkLoadOperationConnection, Pred>(impl); };
		WorkLoadOperationConnection CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< WorkLoadOperationConnection> Derived();
		template <class Pred> ::Udm::DerivedAttr< WorkLoadOperationConnection, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< WorkLoadOperationConnection, Pred>(impl); };
		::Udm::ArchetypeAttr< WorkLoadOperationConnection> Archetype() const;
		::Udm::ParentAttr< ::CQML::BenchmarkAnalysis> BenchmarkAnalysis_parent() const;
		::Udm::ParentAttr< ::CQML::BenchmarkAnalysis> parent() const;
		::Udm::AssocEndAttr< ::CQML::OperationRef> srcWorkLoadOperationConnection_end() const;
		::Udm::AssocEndAttr< ::CQML::Task> dstWorkLoadOperationConnection_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_BenchmarkAnalysis_parent;
		static ::Uml::AssociationRole meta_srcWorkLoadOperationConnection_end_;
		static ::Uml::AssociationRole meta_dstWorkLoadOperationConnection_end_;

	};

	class CQML_Export BenchmarkType :  public MgaObject {
	public:
		BenchmarkType();
		BenchmarkType(::Udm::ObjectImpl *impl);
		BenchmarkType(const BenchmarkType &master);

#ifdef UDM_RVALUE
		BenchmarkType(BenchmarkType &&master);

		static BenchmarkType Cast(::Udm::Object &&a);
		BenchmarkType& operator=(BenchmarkType &&a);

#endif
		static BenchmarkType Cast(const ::Udm::Object &a);
		static BenchmarkType Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		BenchmarkType CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< BenchmarkType> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< BenchmarkType, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< BenchmarkType, Pred>(impl); };
		BenchmarkType CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< BenchmarkType> Derived();
		template <class Pred> ::Udm::DerivedAttr< BenchmarkType, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< BenchmarkType, Pred>(impl); };
		::Udm::ArchetypeAttr< BenchmarkType> Archetype() const;
		::Udm::AClassPointerAttr< BenchmarkCharacteristics, MetricsBase> dstBenchmarkCharacteristics() const;
		::Udm::ParentAttr< ::CQML::BenchmarkAnalysis> BenchmarkAnalysis_parent() const;
		::Udm::ParentAttr< ::CQML::BenchmarkAnalysis> parent() const;

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_dstBenchmarkCharacteristics;
		static ::Uml::AssociationRole meta_dstBenchmarkCharacteristics_rev;
		static ::Uml::CompositionParentRole meta_BenchmarkAnalysis_parent;

	};

	class CQML_Export TriggerBenchmarks :  public BenchmarkType {
	public:
		TriggerBenchmarks();
		TriggerBenchmarks(::Udm::ObjectImpl *impl);
		TriggerBenchmarks(const TriggerBenchmarks &master);

#ifdef UDM_RVALUE
		TriggerBenchmarks(TriggerBenchmarks &&master);

		static TriggerBenchmarks Cast(::Udm::Object &&a);
		TriggerBenchmarks& operator=(TriggerBenchmarks &&a);

#endif
		static TriggerBenchmarks Cast(const ::Udm::Object &a);
		static TriggerBenchmarks Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		TriggerBenchmarks CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< TriggerBenchmarks> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< TriggerBenchmarks, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< TriggerBenchmarks, Pred>(impl); };
		TriggerBenchmarks CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< TriggerBenchmarks> Derived();
		template <class Pred> ::Udm::DerivedAttr< TriggerBenchmarks, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< TriggerBenchmarks, Pred>(impl); };
		::Udm::ArchetypeAttr< TriggerBenchmarks> Archetype() const;
		::Udm::ParentAttr< ::CQML::BenchmarkAnalysis> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;

	};

	class CQML_Export PeriodicBenchmarks :  public BenchmarkType {
	public:
		PeriodicBenchmarks();
		PeriodicBenchmarks(::Udm::ObjectImpl *impl);
		PeriodicBenchmarks(const PeriodicBenchmarks &master);

#ifdef UDM_RVALUE
		PeriodicBenchmarks(PeriodicBenchmarks &&master);

		static PeriodicBenchmarks Cast(::Udm::Object &&a);
		PeriodicBenchmarks& operator=(PeriodicBenchmarks &&a);

#endif
		static PeriodicBenchmarks Cast(const ::Udm::Object &a);
		static PeriodicBenchmarks Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		PeriodicBenchmarks CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< PeriodicBenchmarks> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< PeriodicBenchmarks, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< PeriodicBenchmarks, Pred>(impl); };
		PeriodicBenchmarks CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< PeriodicBenchmarks> Derived();
		template <class Pred> ::Udm::DerivedAttr< PeriodicBenchmarks, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< PeriodicBenchmarks, Pred>(impl); };
		::Udm::ArchetypeAttr< PeriodicBenchmarks> Archetype() const;
		::Udm::IntegerAttr timeperiod() const;
		::Udm::ParentAttr< ::CQML::BenchmarkAnalysis> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_timeperiod;

	};

	class CQML_Export FixedIterationBenchmarks :  public BenchmarkType {
	public:
		FixedIterationBenchmarks();
		FixedIterationBenchmarks(::Udm::ObjectImpl *impl);
		FixedIterationBenchmarks(const FixedIterationBenchmarks &master);

#ifdef UDM_RVALUE
		FixedIterationBenchmarks(FixedIterationBenchmarks &&master);

		static FixedIterationBenchmarks Cast(::Udm::Object &&a);
		FixedIterationBenchmarks& operator=(FixedIterationBenchmarks &&a);

#endif
		static FixedIterationBenchmarks Cast(const ::Udm::Object &a);
		static FixedIterationBenchmarks Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		FixedIterationBenchmarks CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< FixedIterationBenchmarks> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< FixedIterationBenchmarks, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< FixedIterationBenchmarks, Pred>(impl); };
		FixedIterationBenchmarks CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< FixedIterationBenchmarks> Derived();
		template <class Pred> ::Udm::DerivedAttr< FixedIterationBenchmarks, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< FixedIterationBenchmarks, Pred>(impl); };
		::Udm::ArchetypeAttr< FixedIterationBenchmarks> Archetype() const;
		::Udm::IntegerAttr benchmarkIterations() const;
		::Udm::ParentAttr< ::CQML::BenchmarkAnalysis> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_benchmarkIterations;

	};

	class CQML_Export BenchmarkCharacteristics :  public MgaObject {
	public:
		BenchmarkCharacteristics();
		BenchmarkCharacteristics(::Udm::ObjectImpl *impl);
		BenchmarkCharacteristics(const BenchmarkCharacteristics &master);

#ifdef UDM_RVALUE
		BenchmarkCharacteristics(BenchmarkCharacteristics &&master);

		static BenchmarkCharacteristics Cast(::Udm::Object &&a);
		BenchmarkCharacteristics& operator=(BenchmarkCharacteristics &&a);

#endif
		static BenchmarkCharacteristics Cast(const ::Udm::Object &a);
		static BenchmarkCharacteristics Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		BenchmarkCharacteristics CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< BenchmarkCharacteristics> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< BenchmarkCharacteristics, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< BenchmarkCharacteristics, Pred>(impl); };
		BenchmarkCharacteristics CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< BenchmarkCharacteristics> Derived();
		template <class Pred> ::Udm::DerivedAttr< BenchmarkCharacteristics, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< BenchmarkCharacteristics, Pred>(impl); };
		::Udm::ArchetypeAttr< BenchmarkCharacteristics> Archetype() const;
		::Udm::ParentAttr< ::CQML::BenchmarkAnalysis> BenchmarkAnalysis_parent() const;
		::Udm::ParentAttr< ::CQML::BenchmarkAnalysis> parent() const;
		::Udm::AssocEndAttr< ::CQML::BenchmarkType> srcBenchmarkCharacteristics_end() const;
		::Udm::AssocEndAttr< ::CQML::MetricsBase> dstBenchmarkCharacteristics_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_BenchmarkAnalysis_parent;
		static ::Uml::AssociationRole meta_srcBenchmarkCharacteristics_end_;
		static ::Uml::AssociationRole meta_dstBenchmarkCharacteristics_end_;

	};

	class CQML_Export ConnectedComponent :  public GraphVertex {
	public:
		ConnectedComponent();
		ConnectedComponent(::Udm::ObjectImpl *impl);
		ConnectedComponent(const ConnectedComponent &master);

#ifdef UDM_RVALUE
		ConnectedComponent(ConnectedComponent &&master);

		static ConnectedComponent Cast(::Udm::Object &&a);
		ConnectedComponent& operator=(ConnectedComponent &&a);

#endif
		static ConnectedComponent Cast(const ::Udm::Object &a);
		static ConnectedComponent Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ConnectedComponent CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ConnectedComponent> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ConnectedComponent, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ConnectedComponent, Pred>(impl); };
		ConnectedComponent CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ConnectedComponent> Derived();
		template <class Pred> ::Udm::DerivedAttr< ConnectedComponent, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ConnectedComponent, Pred>(impl); };
		::Udm::ArchetypeAttr< ConnectedComponent> Archetype() const;
		::Udm::ChildrenAttr< ::CQML::DstEdge> DstEdge_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::DstEdge, Pred> DstEdge_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::DstEdge, Pred>(impl, meta_DstEdge_children); };
		::Udm::ChildrenAttr< ::CQML::Port> Port_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Port, Pred> Port_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Port, Pred>(impl, meta_Port_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Taggable> Taggable_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Taggable, Pred> Taggable_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Taggable, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::OutEventPort> OutEventPort_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::OutEventPort, Pred> OutEventPort_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::OutEventPort, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Port> Port_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Port, Pred> Port_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Port, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ProvidedRequestPort> ProvidedRequestPort_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ProvidedRequestPort, Pred> ProvidedRequestPort_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ProvidedRequestPort, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::RequiredRequestPort> RequiredRequestPort_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::RequiredRequestPort, Pred> RequiredRequestPort_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::RequiredRequestPort, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::InEventPort> InEventPort_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::InEventPort, Pred> InEventPort_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::InEventPort, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::CommonPortAttrs> CommonPortAttrs_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::CommonPortAttrs, Pred> CommonPortAttrs_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::CommonPortAttrs, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::GraphVertex> GraphVertex_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::GraphVertex, Pred> GraphVertex_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::GraphVertex, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::DstEdge> DstEdge_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::DstEdge, Pred> DstEdge_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::DstEdge, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::Path> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionChildRole meta_DstEdge_children;
		static ::Uml::CompositionChildRole meta_Port_children;

	};

	class CQML_Export Path :  public MgaObject {
	public:
		Path();
		Path(::Udm::ObjectImpl *impl);
		Path(const Path &master);

#ifdef UDM_RVALUE
		Path(Path &&master);

		static Path Cast(::Udm::Object &&a);
		Path& operator=(Path &&a);

#endif
		static Path Cast(const ::Udm::Object &a);
		static Path Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Path CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Path> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Path, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Path, Pred>(impl); };
		Path CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Path> Derived();
		template <class Pred> ::Udm::DerivedAttr< Path, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Path, Pred>(impl); };
		::Udm::ArchetypeAttr< Path> Archetype() const;
		::Udm::AClassAssocAttr< PathProperty, Property> dstPathProperty() const;
		template <class Pred> ::Udm::AClassAssocAttr< PathProperty, Property, Pred> dstPathProperty_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< PathProperty, Property, Pred>(impl, meta_dstPathProperty, meta_dstPathProperty_rev); };
		::Udm::AssocAttr< PathReference> referedbyPathReference() const;
		template <class Pred> ::Udm::AssocAttr< PathReference, Pred> referedbyPathReference_sorted(const Pred &) const { return ::Udm::AssocAttr< PathReference, Pred>(impl, meta_referedbyPathReference); };
		::Udm::AssocAttr< PathRef> referedbyPathRef() const;
		template <class Pred> ::Udm::AssocAttr< PathRef, Pred> referedbyPathRef_sorted(const Pred &) const { return ::Udm::AssocAttr< PathRef, Pred>(impl, meta_referedbyPathRef); };
		::Udm::ChildrenAttr< ::CQML::DstEdge> DstEdge_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::DstEdge, Pred> DstEdge_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::DstEdge, Pred>(impl, meta_DstEdge_children); };
		::Udm::ChildrenAttr< ::CQML::ComponentRef> ComponentRef_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentRef, Pred> ComponentRef_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentRef, Pred>(impl, meta_ComponentRef_children); };
		::Udm::ChildrenAttr< ::CQML::SrcEdge> SrcEdge_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::SrcEdge, Pred> SrcEdge_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::SrcEdge, Pred>(impl, meta_SrcEdge_children); };
		::Udm::ChildrenAttr< ::CQML::EdgeProperty> EdgeProperty_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::EdgeProperty, Pred> EdgeProperty_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::EdgeProperty, Pred>(impl, meta_EdgeProperty_children); };
		::Udm::ChildrenAttr< ::CQML::Edge> Edge_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Edge, Pred> Edge_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Edge, Pred>(impl, meta_Edge_children); };
		::Udm::ChildrenAttr< ::CQML::Property> Property_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Property, Pred> Property_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Property, Pred>(impl, meta_Property_children); };
		::Udm::ChildrenAttr< ::CQML::GraphVertex> GraphVertex_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::GraphVertex, Pred> GraphVertex_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::GraphVertex, Pred>(impl, meta_GraphVertex_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Manageable> Manageable_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Manageable, Pred> Manageable_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Manageable, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentBase> ComponentBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentBase, Pred> ComponentBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::OutEventPort> OutEventPort_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::OutEventPort, Pred> OutEventPort_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::OutEventPort, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Port> Port_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Port, Pred> Port_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Port, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ProvidedRequestPort> ProvidedRequestPort_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ProvidedRequestPort, Pred> ProvidedRequestPort_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ProvidedRequestPort, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::RequiredRequestPort> RequiredRequestPort_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::RequiredRequestPort, Pred> RequiredRequestPort_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::RequiredRequestPort, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::InEventPort> InEventPort_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::InEventPort, Pred> InEventPort_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::InEventPort, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::GraphVertex> GraphVertex_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::GraphVertex, Pred> GraphVertex_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::GraphVertex, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentRef> ComponentRef_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentRef, Pred> ComponentRef_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentRef, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::CollocationGroupMember> CollocationGroupMember_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::CollocationGroupMember, Pred> CollocationGroupMember_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::CollocationGroupMember, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::FTMonitorable> FTMonitorable_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::FTMonitorable, Pred> FTMonitorable_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::FTMonitorable, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Property> Property_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Property, Pred> Property_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Property, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ConnectedComponent> ConnectedComponent_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ConnectedComponent, Pred> ConnectedComponent_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ConnectedComponent, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::DstEdge> DstEdge_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::DstEdge, Pred> DstEdge_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::DstEdge, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::DisplayNode> DisplayNode_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::DisplayNode, Pred> DisplayNode_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::DisplayNode, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::SrcEdge> SrcEdge_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::SrcEdge, Pred> SrcEdge_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::SrcEdge, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::EdgeProperty> EdgeProperty_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::EdgeProperty, Pred> EdgeProperty_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::EdgeProperty, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Edge> Edge_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Edge, Pred> Edge_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Edge, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::Paths> Paths_parent() const;
		::Udm::ParentAttr< ::CQML::Paths> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_dstPathProperty;
		static ::Uml::AssociationRole meta_dstPathProperty_rev;
		static ::Uml::AssociationRole meta_referedbyPathReference;
		static ::Uml::AssociationRole meta_referedbyPathRef;
		static ::Uml::CompositionChildRole meta_DstEdge_children;
		static ::Uml::CompositionChildRole meta_ComponentRef_children;
		static ::Uml::CompositionChildRole meta_SrcEdge_children;
		static ::Uml::CompositionChildRole meta_EdgeProperty_children;
		static ::Uml::CompositionChildRole meta_Edge_children;
		static ::Uml::CompositionChildRole meta_Property_children;
		static ::Uml::CompositionChildRole meta_GraphVertex_children;
		static ::Uml::CompositionParentRole meta_Paths_parent;

	};

	class CQML_Export DstEdge :  public MgaObject {
	public:
		DstEdge();
		DstEdge(::Udm::ObjectImpl *impl);
		DstEdge(const DstEdge &master);

#ifdef UDM_RVALUE
		DstEdge(DstEdge &&master);

		static DstEdge Cast(::Udm::Object &&a);
		DstEdge& operator=(DstEdge &&a);

#endif
		static DstEdge Cast(const ::Udm::Object &a);
		static DstEdge Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		DstEdge CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< DstEdge> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< DstEdge, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< DstEdge, Pred>(impl); };
		DstEdge CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< DstEdge> Derived();
		template <class Pred> ::Udm::DerivedAttr< DstEdge, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< DstEdge, Pred>(impl); };
		::Udm::ArchetypeAttr< DstEdge> Archetype() const;
		::Udm::ParentAttr< ::CQML::ConnectedComponent> ConnectedComponent_parent() const;
		::Udm::ParentAttr< ::CQML::Path> Path_parent() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		::Udm::AssocEndAttr< ::CQML::GraphVertex> srcDstEdge_end() const;
		::Udm::AssocEndAttr< ::CQML::Edge> dstDstEdge_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ConnectedComponent_parent;
		static ::Uml::CompositionParentRole meta_Path_parent;
		static ::Uml::AssociationRole meta_srcDstEdge_end_;
		static ::Uml::AssociationRole meta_dstDstEdge_end_;

	};

	class CQML_Export DisplayNode :  public GraphVertex {
	public:
		DisplayNode();
		DisplayNode(::Udm::ObjectImpl *impl);
		DisplayNode(const DisplayNode &master);

#ifdef UDM_RVALUE
		DisplayNode(DisplayNode &&master);

		static DisplayNode Cast(::Udm::Object &&a);
		DisplayNode& operator=(DisplayNode &&a);

#endif
		static DisplayNode Cast(const ::Udm::Object &a);
		static DisplayNode Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		DisplayNode CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< DisplayNode> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< DisplayNode, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< DisplayNode, Pred>(impl); };
		DisplayNode CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< DisplayNode> Derived();
		template <class Pred> ::Udm::DerivedAttr< DisplayNode, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< DisplayNode, Pred>(impl); };
		::Udm::ArchetypeAttr< DisplayNode> Archetype() const;
		::Udm::ParentAttr< ::CQML::Path> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;

	};

	class CQML_Export SrcEdge :  public MgaObject {
	public:
		SrcEdge();
		SrcEdge(::Udm::ObjectImpl *impl);
		SrcEdge(const SrcEdge &master);

#ifdef UDM_RVALUE
		SrcEdge(SrcEdge &&master);

		static SrcEdge Cast(::Udm::Object &&a);
		SrcEdge& operator=(SrcEdge &&a);

#endif
		static SrcEdge Cast(const ::Udm::Object &a);
		static SrcEdge Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		SrcEdge CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< SrcEdge> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< SrcEdge, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< SrcEdge, Pred>(impl); };
		SrcEdge CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< SrcEdge> Derived();
		template <class Pred> ::Udm::DerivedAttr< SrcEdge, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< SrcEdge, Pred>(impl); };
		::Udm::ArchetypeAttr< SrcEdge> Archetype() const;
		::Udm::ParentAttr< ::CQML::Path> Path_parent() const;
		::Udm::ParentAttr< ::CQML::Path> parent() const;
		::Udm::AssocEndAttr< ::CQML::Edge> srcSrcEdge_end() const;
		::Udm::AssocEndAttr< ::CQML::GraphVertex> dstSrcEdge_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_Path_parent;
		static ::Uml::AssociationRole meta_srcSrcEdge_end_;
		static ::Uml::AssociationRole meta_dstSrcEdge_end_;

	};

	class CQML_Export EdgeProperty :  public MgaObject {
	public:
		EdgeProperty();
		EdgeProperty(::Udm::ObjectImpl *impl);
		EdgeProperty(const EdgeProperty &master);

#ifdef UDM_RVALUE
		EdgeProperty(EdgeProperty &&master);

		static EdgeProperty Cast(::Udm::Object &&a);
		EdgeProperty& operator=(EdgeProperty &&a);

#endif
		static EdgeProperty Cast(const ::Udm::Object &a);
		static EdgeProperty Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		EdgeProperty CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< EdgeProperty> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< EdgeProperty, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< EdgeProperty, Pred>(impl); };
		EdgeProperty CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< EdgeProperty> Derived();
		template <class Pred> ::Udm::DerivedAttr< EdgeProperty, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< EdgeProperty, Pred>(impl); };
		::Udm::ArchetypeAttr< EdgeProperty> Archetype() const;
		::Udm::ParentAttr< ::CQML::Path> Path_parent() const;
		::Udm::ParentAttr< ::CQML::Path> parent() const;
		::Udm::AssocEndAttr< ::CQML::Property> srcPropertyConnector_end() const;
		::Udm::AssocEndAttr< ::CQML::Edge> dstPropertyConnector_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_Path_parent;
		static ::Uml::AssociationRole meta_srcPropertyConnector_end_;
		static ::Uml::AssociationRole meta_dstPropertyConnector_end_;

	};

	class CQML_Export Edge :  public MgaObject {
	public:
		Edge();
		Edge(::Udm::ObjectImpl *impl);
		Edge(const Edge &master);

#ifdef UDM_RVALUE
		Edge(Edge &&master);

		static Edge Cast(::Udm::Object &&a);
		Edge& operator=(Edge &&a);

#endif
		static Edge Cast(const ::Udm::Object &a);
		static Edge Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Edge CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Edge> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Edge, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Edge, Pred>(impl); };
		Edge CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Edge> Derived();
		template <class Pred> ::Udm::DerivedAttr< Edge, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Edge, Pred>(impl); };
		::Udm::ArchetypeAttr< Edge> Archetype() const;
		::Udm::AClassAssocAttr< EdgeProperty, Property> srcPropertyConnector() const;
		template <class Pred> ::Udm::AClassAssocAttr< EdgeProperty, Property, Pred> srcPropertyConnector_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< EdgeProperty, Property, Pred>(impl, meta_srcPropertyConnector, meta_srcPropertyConnector_rev); };
		::Udm::AClassPointerAttr< DstEdge, GraphVertex> srcDstEdge() const;
		::Udm::AClassPointerAttr< SrcEdge, GraphVertex> dstSrcEdge() const;
		::Udm::ParentAttr< ::CQML::Path> Path_parent() const;
		::Udm::ParentAttr< ::CQML::Path> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_srcPropertyConnector;
		static ::Uml::AssociationRole meta_srcPropertyConnector_rev;
		static ::Uml::AssociationRole meta_srcDstEdge;
		static ::Uml::AssociationRole meta_srcDstEdge_rev;
		static ::Uml::AssociationRole meta_dstSrcEdge;
		static ::Uml::AssociationRole meta_dstSrcEdge_rev;
		static ::Uml::CompositionParentRole meta_Path_parent;

	};

	class CQML_Export Paths :  public MgaObject {
	public:
		Paths();
		Paths(::Udm::ObjectImpl *impl);
		Paths(const Paths &master);

#ifdef UDM_RVALUE
		Paths(Paths &&master);

		static Paths Cast(::Udm::Object &&a);
		Paths& operator=(Paths &&a);

#endif
		static Paths Cast(const ::Udm::Object &a);
		static Paths Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Paths CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Paths> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Paths, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Paths, Pred>(impl); };
		Paths CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Paths> Derived();
		template <class Pred> ::Udm::DerivedAttr< Paths, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Paths, Pred>(impl); };
		::Udm::ArchetypeAttr< Paths> Archetype() const;
		::Udm::ChildrenAttr< ::CQML::Path> Path_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Path, Pred> Path_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Path, Pred>(impl, meta_Path_children); };
		::Udm::ChildrenAttr< ::CQML::PathProperty> PathProperty_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PathProperty, Pred> PathProperty_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PathProperty, Pred>(impl, meta_PathProperty_children); };
		::Udm::ChildrenAttr< ::CQML::Property> Property_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Property, Pred> Property_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Property, Pred>(impl, meta_Property_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Property> Property_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Property, Pred> Property_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Property, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Path> Path_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Path, Pred> Path_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Path, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::PathProperty> PathProperty_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PathProperty, Pred> PathProperty_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PathProperty, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::PathDiagrams> PathDiagrams_parent() const;
		::Udm::ParentAttr< ::CQML::PathDiagrams> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionChildRole meta_Path_children;
		static ::Uml::CompositionChildRole meta_PathProperty_children;
		static ::Uml::CompositionChildRole meta_Property_children;
		static ::Uml::CompositionParentRole meta_PathDiagrams_parent;

	};

	class CQML_Export PathProperty :  public MgaObject {
	public:
		PathProperty();
		PathProperty(::Udm::ObjectImpl *impl);
		PathProperty(const PathProperty &master);

#ifdef UDM_RVALUE
		PathProperty(PathProperty &&master);

		static PathProperty Cast(::Udm::Object &&a);
		PathProperty& operator=(PathProperty &&a);

#endif
		static PathProperty Cast(const ::Udm::Object &a);
		static PathProperty Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		PathProperty CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< PathProperty> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< PathProperty, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< PathProperty, Pred>(impl); };
		PathProperty CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< PathProperty> Derived();
		template <class Pred> ::Udm::DerivedAttr< PathProperty, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< PathProperty, Pred>(impl); };
		::Udm::ArchetypeAttr< PathProperty> Archetype() const;
		::Udm::ParentAttr< ::CQML::Paths> Paths_parent() const;
		::Udm::ParentAttr< ::CQML::Paths> parent() const;
		::Udm::AssocEndAttr< ::CQML::Path> srcPathProperty_end() const;
		::Udm::AssocEndAttr< ::CQML::Property> dstPathProperty_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_Paths_parent;
		static ::Uml::AssociationRole meta_srcPathProperty_end_;
		static ::Uml::AssociationRole meta_dstPathProperty_end_;

	};

	class CQML_Export PathReference :  public MgaObject {
	public:
		PathReference();
		PathReference(::Udm::ObjectImpl *impl);
		PathReference(const PathReference &master);

#ifdef UDM_RVALUE
		PathReference(PathReference &&master);

		static PathReference Cast(::Udm::Object &&a);
		PathReference& operator=(PathReference &&a);

#endif
		static PathReference Cast(const ::Udm::Object &a);
		static PathReference Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		PathReference CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< PathReference> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< PathReference, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< PathReference, Pred>(impl); };
		PathReference CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< PathReference> Derived();
		template <class Pred> ::Udm::DerivedAttr< PathReference, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< PathReference, Pred>(impl); };
		::Udm::ArchetypeAttr< PathReference> Archetype() const;
		::Udm::PointerAttr< Path> ref() const;
		::Udm::AClassPointerAttr< CriticalPath, ComponentAssembly> srcCriticalPath() const;
		::Udm::ParentAttr< ::CQML::ComponentImplementationContainer> ComponentImplementationContainer_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentImplementationContainer> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::AssociationRole meta_srcCriticalPath;
		static ::Uml::AssociationRole meta_srcCriticalPath_rev;
		static ::Uml::CompositionParentRole meta_ComponentImplementationContainer_parent;

	};

	class CQML_Export ComponentAssemblyBase :  virtual  public MgaObject {
	public:
		ComponentAssemblyBase();
		ComponentAssemblyBase(::Udm::ObjectImpl *impl);
		ComponentAssemblyBase(const ComponentAssemblyBase &master);

#ifdef UDM_RVALUE
		ComponentAssemblyBase(ComponentAssemblyBase &&master);

		static ComponentAssemblyBase Cast(::Udm::Object &&a);
		ComponentAssemblyBase& operator=(ComponentAssemblyBase &&a);

#endif
		static ComponentAssemblyBase Cast(const ::Udm::Object &a);
		static ComponentAssemblyBase Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ComponentAssemblyBase CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ComponentAssemblyBase> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ComponentAssemblyBase, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ComponentAssemblyBase, Pred>(impl); };
		ComponentAssemblyBase CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ComponentAssemblyBase> Derived();
		template <class Pred> ::Udm::DerivedAttr< ComponentAssemblyBase, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ComponentAssemblyBase, Pred>(impl); };
		::Udm::ArchetypeAttr< ComponentAssemblyBase> Archetype() const;
		::Udm::AClassAssocAttr< ComponentAssemblyQoS, ComponentAssemblyQoSCharacteristic> dstComponentAssemblyQoS() const;
		template <class Pred> ::Udm::AClassAssocAttr< ComponentAssemblyQoS, ComponentAssemblyQoSCharacteristic, Pred> dstComponentAssemblyQoS_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< ComponentAssemblyQoS, ComponentAssemblyQoSCharacteristic, Pred>(impl, meta_dstComponentAssemblyQoS, meta_dstComponentAssemblyQoS_rev); };
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_dstComponentAssemblyQoS;
		static ::Uml::AssociationRole meta_dstComponentAssemblyQoS_rev;

	};

	class CQML_Export ComponentAssembly :  public ComponentAssemblyBase,  public ComponentImplementation {
	public:
		ComponentAssembly();
		ComponentAssembly(::Udm::ObjectImpl *impl);
		ComponentAssembly(const ComponentAssembly &master);

#ifdef UDM_RVALUE
		ComponentAssembly(ComponentAssembly &&master);

		static ComponentAssembly Cast(::Udm::Object &&a);
		ComponentAssembly& operator=(ComponentAssembly &&a);

#endif
		static ComponentAssembly Cast(const ::Udm::Object &a);
		static ComponentAssembly Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ComponentAssembly CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ComponentAssembly> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ComponentAssembly, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ComponentAssembly, Pred>(impl); };
		ComponentAssembly CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ComponentAssembly> Derived();
		template <class Pred> ::Udm::DerivedAttr< ComponentAssembly, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ComponentAssembly, Pred>(impl); };
		::Udm::ArchetypeAttr< ComponentAssembly> Archetype() const;
		::Udm::AClassPointerAttr< CriticalPath, PathReference> dstCriticalPath() const;
		::Udm::AssocAttr< ComponentAssemblyReference> referedbyComponentAssemblyReference() const;
		template <class Pred> ::Udm::AssocAttr< ComponentAssemblyReference, Pred> referedbyComponentAssemblyReference_sorted(const Pred &) const { return ::Udm::AssocAttr< ComponentAssemblyReference, Pred>(impl, meta_referedbyComponentAssemblyReference); };
		::Udm::ChildrenAttr< ::CQML::ComponentPackage> ComponentPackage_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentPackage, Pred> ComponentPackage_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentPackage, Pred>(impl, meta_ComponentPackage_children); };
		::Udm::ChildrenAttr< ::CQML::Property> Property_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Property, Pred> Property_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Property, Pred>(impl, meta_Property_children); };
		::Udm::ChildrenAttr< ::CQML::ComponentPackageReference> ComponentPackageReference_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentPackageReference, Pred> ComponentPackageReference_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentPackageReference, Pred>(impl, meta_ComponentPackageReference_children); };
		::Udm::ChildrenAttr< ::CQML::Requirement> Requirement_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Requirement, Pred> Requirement_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Requirement, Pred>(impl, meta_Requirement_children); };
		::Udm::ChildrenAttr< ::CQML::Component> Component_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Component, Pred> Component_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Component, Pred>(impl, meta_Component_children); };
		::Udm::ChildrenAttr< ::CQML::ComponentAssembly> ComponentAssembly_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentAssembly, Pred> ComponentAssembly_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentAssembly, Pred>(impl, meta_ComponentAssembly_children); };
		::Udm::ChildrenAttr< ::CQML::ProvidedRequestPort> ProvidedRequestPort_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ProvidedRequestPort, Pred> ProvidedRequestPort_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ProvidedRequestPort, Pred>(impl, meta_ProvidedRequestPort_children); };
		::Udm::ChildrenAttr< ::CQML::RequiredRequestPort> RequiredRequestPort_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::RequiredRequestPort, Pred> RequiredRequestPort_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::RequiredRequestPort, Pred>(impl, meta_RequiredRequestPort_children); };
		::Udm::ChildrenAttr< ::CQML::InEventPort> InEventPort_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::InEventPort, Pred> InEventPort_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::InEventPort, Pred>(impl, meta_InEventPort_children); };
		::Udm::ChildrenAttr< ::CQML::OutEventPort> OutEventPort_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::OutEventPort, Pred> OutEventPort_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::OutEventPort, Pred>(impl, meta_OutEventPort_children); };
		::Udm::ChildrenAttr< ::CQML::emit> emit_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::emit, Pred> emit_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::emit, Pred>(impl, meta_emit_children); };
		::Udm::ChildrenAttr< ::CQML::EventSourceDelegate> EventSourceDelegate_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::EventSourceDelegate, Pred> EventSourceDelegate_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::EventSourceDelegate, Pred>(impl, meta_EventSourceDelegate_children); };
		::Udm::ChildrenAttr< ::CQML::EventSinkDelegate> EventSinkDelegate_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::EventSinkDelegate, Pred> EventSinkDelegate_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::EventSinkDelegate, Pred>(impl, meta_EventSinkDelegate_children); };
		::Udm::ChildrenAttr< ::CQML::deliverTo> deliverTo_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::deliverTo, Pred> deliverTo_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::deliverTo, Pred>(impl, meta_deliverTo_children); };
		::Udm::ChildrenAttr< ::CQML::publish> publish_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::publish, Pred> publish_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::publish, Pred>(impl, meta_publish_children); };
		::Udm::ChildrenAttr< ::CQML::ComponentAssemblyReference> ComponentAssemblyReference_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentAssemblyReference, Pred> ComponentAssemblyReference_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentAssemblyReference, Pred>(impl, meta_ComponentAssemblyReference_children); };
		::Udm::ChildrenAttr< ::CQML::ComponentRef> ComponentRef_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentRef, Pred> ComponentRef_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentRef, Pred>(impl, meta_ComponentRef_children); };
		::Udm::ChildrenAttr< ::CQML::AssemblyselectRequirement> AssemblyselectRequirement_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::AssemblyselectRequirement, Pred> AssemblyselectRequirement_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::AssemblyselectRequirement, Pred>(impl, meta_AssemblyselectRequirement_children); };
		::Udm::ChildrenAttr< ::CQML::AttributeValue> AttributeValue_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::AttributeValue, Pred> AttributeValue_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::AttributeValue, Pred>(impl, meta_AttributeValue_children); };
		::Udm::ChildrenAttr< ::CQML::AttributeDelegate> AttributeDelegate_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::AttributeDelegate, Pred> AttributeDelegate_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::AttributeDelegate, Pred>(impl, meta_AttributeDelegate_children); };
		::Udm::ChildrenAttr< ::CQML::AttributeMappingValue> AttributeMappingValue_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::AttributeMappingValue, Pred> AttributeMappingValue_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::AttributeMappingValue, Pred>(impl, meta_AttributeMappingValue_children); };
		::Udm::ChildrenAttr< ::CQML::AssemblyConfigProperty> AssemblyConfigProperty_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::AssemblyConfigProperty, Pred> AssemblyConfigProperty_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::AssemblyConfigProperty, Pred>(impl, meta_AssemblyConfigProperty_children); };
		::Udm::ChildrenAttr< ::CQML::FacetDelegate> FacetDelegate_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::FacetDelegate, Pred> FacetDelegate_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::FacetDelegate, Pred>(impl, meta_FacetDelegate_children); };
		::Udm::ChildrenAttr< ::CQML::invoke> invoke_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::invoke, Pred> invoke_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::invoke, Pred>(impl, meta_invoke_children); };
		::Udm::ChildrenAttr< ::CQML::ReceptacleDelegate> ReceptacleDelegate_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ReceptacleDelegate, Pred> ReceptacleDelegate_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ReceptacleDelegate, Pred>(impl, meta_ReceptacleDelegate_children); };
		::Udm::ChildrenAttr< ::CQML::AttributeMappingDelegate> AttributeMappingDelegate_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::AttributeMappingDelegate, Pred> AttributeMappingDelegate_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::AttributeMappingDelegate, Pred>(impl, meta_AttributeMappingDelegate_children); };
		::Udm::ChildrenAttr< ::CQML::ExternalDelegate> ExternalDelegate_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ExternalDelegate, Pred> ExternalDelegate_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ExternalDelegate, Pred>(impl, meta_ExternalDelegate_children); };
		::Udm::ChildrenAttr< ::CQML::AttributeMapping> AttributeMapping_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::AttributeMapping, Pred> AttributeMapping_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::AttributeMapping, Pred>(impl, meta_AttributeMapping_children); };
		::Udm::ChildrenAttr< ::CQML::PublishConnector> PublishConnector_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PublishConnector, Pred> PublishConnector_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PublishConnector, Pred>(impl, meta_PublishConnector_children); };
		::Udm::ChildrenAttr< ::CQML::ExternalPortReference> ExternalPortReference_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ExternalPortReference, Pred> ExternalPortReference_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ExternalPortReference, Pred>(impl, meta_ExternalPortReference_children); };
		::Udm::ChildrenAttr< ::CQML::SupportsDelegate> SupportsDelegate_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::SupportsDelegate, Pred> SupportsDelegate_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::SupportsDelegate, Pred>(impl, meta_SupportsDelegate_children); };
		::Udm::ChildrenAttr< ::CQML::AssemblyDeployRequirement> AssemblyDeployRequirement_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::AssemblyDeployRequirement, Pred> AssemblyDeployRequirement_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::AssemblyDeployRequirement, Pred>(impl, meta_AssemblyDeployRequirement_children); };
		::Udm::ChildrenAttr< ::CQML::QoSConnector> QoSConnector_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::QoSConnector, Pred> QoSConnector_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::QoSConnector, Pred>(impl, meta_QoSConnector_children); };
		::Udm::ChildrenAttr< ::CQML::PortQoS> PortQoS_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PortQoS, Pred> PortQoS_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PortQoS, Pred>(impl, meta_PortQoS_children); };
		::Udm::ChildrenAttr< ::CQML::QoSReq> QoSReq_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::QoSReq, Pred> QoSReq_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::QoSReq, Pred>(impl, meta_QoSReq_children); };
		::Udm::ChildrenAttr< ::CQML::RecepInvoke> RecepInvoke_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::RecepInvoke, Pred> RecepInvoke_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::RecepInvoke, Pred>(impl, meta_RecepInvoke_children); };
		::Udm::ChildrenAttr< ::CQML::FacetInvoke> FacetInvoke_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::FacetInvoke, Pred> FacetInvoke_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::FacetInvoke, Pred>(impl, meta_FacetInvoke_children); };
		::Udm::ChildrenAttr< ::CQML::EventSourcePublish> EventSourcePublish_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::EventSourcePublish, Pred> EventSourcePublish_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::EventSourcePublish, Pred>(impl, meta_EventSourcePublish_children); };
		::Udm::ChildrenAttr< ::CQML::ComponentQoS> ComponentQoS_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentQoS, Pred> ComponentQoS_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentQoS, Pred>(impl, meta_ComponentQoS_children); };
		::Udm::ChildrenAttr< ::CQML::ComponentAssemblyQoS> ComponentAssemblyQoS_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentAssemblyQoS, Pred> ComponentAssemblyQoS_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentAssemblyQoS, Pred>(impl, meta_ComponentAssemblyQoS_children); };
		::Udm::ChildrenAttr< ::CQML::QoSCharacteristicBase> QoSCharacteristicBase_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::QoSCharacteristicBase, Pred> QoSCharacteristicBase_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::QoSCharacteristicBase, Pred>(impl, meta_QoSCharacteristicBase_children); };
		::Udm::ChildrenAttr< ::CQML::EventSinkPublish> EventSinkPublish_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::EventSinkPublish, Pred> EventSinkPublish_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::EventSinkPublish, Pred>(impl, meta_EventSinkPublish_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Taggable> Taggable_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Taggable, Pred> Taggable_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Taggable, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::MemberType> MemberType_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MemberType, Pred> MemberType_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MemberType, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::NamedType> NamedType_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::NamedType, Pred> NamedType_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::NamedType, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Component> Component_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Component, Pred> Component_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Component, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::SupportsInterfaces> SupportsInterfaces_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::SupportsInterfaces, Pred> SupportsInterfaces_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::SupportsInterfaces, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::InvokePortBase> InvokePortBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::InvokePortBase, Pred> InvokePortBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::InvokePortBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Manageable> Manageable_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Manageable, Pred> Manageable_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Manageable, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::TopLevelBehavior> TopLevelBehavior_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::TopLevelBehavior, Pred> TopLevelBehavior_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::TopLevelBehavior, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentBase> ComponentBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentBase, Pred> ComponentBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::OutEventPort> OutEventPort_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::OutEventPort, Pred> OutEventPort_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::OutEventPort, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Port> Port_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Port, Pred> Port_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Port, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::SingleOutputBase> SingleOutputBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::SingleOutputBase, Pred> SingleOutputBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::SingleOutputBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ProvidedRequestPort> ProvidedRequestPort_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ProvidedRequestPort, Pred> ProvidedRequestPort_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ProvidedRequestPort, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::MultiInputBase> MultiInputBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MultiInputBase, Pred> MultiInputBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MultiInputBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::RequiredRequestPort> RequiredRequestPort_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::RequiredRequestPort, Pred> RequiredRequestPort_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::RequiredRequestPort, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::MultiOutputBase> MultiOutputBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MultiOutputBase, Pred> MultiOutputBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MultiOutputBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::InEventPort> InEventPort_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::InEventPort, Pred> InEventPort_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::InEventPort, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::SingleInputBase> SingleInputBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::SingleInputBase, Pred> SingleInputBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::SingleInputBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::QueryInputBase> QueryInputBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::QueryInputBase, Pred> QueryInputBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::QueryInputBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::CommonPortAttrs> CommonPortAttrs_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::CommonPortAttrs, Pred> CommonPortAttrs_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::CommonPortAttrs, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::GraphVertex> GraphVertex_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::GraphVertex, Pred> GraphVertex_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::GraphVertex, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentRef> ComponentRef_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentRef, Pred> ComponentRef_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentRef, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::CollocationGroupMember> CollocationGroupMember_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::CollocationGroupMember, Pred> CollocationGroupMember_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::CollocationGroupMember, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::FTMonitorable> FTMonitorable_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::FTMonitorable, Pred> FTMonitorable_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::FTMonitorable, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Requirement> Requirement_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Requirement, Pred> Requirement_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Requirement, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::RequirementBase> RequirementBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::RequirementBase, Pred> RequirementBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::RequirementBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ECRequirements> ECRequirements_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ECRequirements, Pred> ECRequirements_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ECRequirements, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::RTRequirements> RTRequirements_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::RTRequirements, Pred> RTRequirements_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::RTRequirements, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Property> Property_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Property, Pred> Property_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Property, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentPackage> ComponentPackage_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentPackage, Pred> ComponentPackage_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentPackage, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentPackageReference> ComponentPackageReference_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentPackageReference, Pred> ComponentPackageReference_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentPackageReference, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentImplementation> ComponentImplementation_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentImplementation, Pred> ComponentImplementation_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentImplementation, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Implemenation> Implemenation_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Implemenation, Pred> Implemenation_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Implemenation, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentAssembly> ComponentAssembly_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentAssembly, Pred> ComponentAssembly_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentAssembly, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::invoke> invoke_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::invoke, Pred> invoke_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::invoke, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::AssemblyselectRequirement> AssemblyselectRequirement_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::AssemblyselectRequirement, Pred> AssemblyselectRequirement_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::AssemblyselectRequirement, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::AssemblyConfigProperty> AssemblyConfigProperty_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::AssemblyConfigProperty, Pred> AssemblyConfigProperty_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::AssemblyConfigProperty, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::PublishConnector> PublishConnector_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PublishConnector, Pred> PublishConnector_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PublishConnector, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::publish> publish_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::publish, Pred> publish_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::publish, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::deliverTo> deliverTo_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::deliverTo, Pred> deliverTo_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::deliverTo, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::AssemblyDeployRequirement> AssemblyDeployRequirement_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::AssemblyDeployRequirement, Pred> AssemblyDeployRequirement_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::AssemblyDeployRequirement, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::emit> emit_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::emit, Pred> emit_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::emit, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ReceptacleDelegate> ReceptacleDelegate_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ReceptacleDelegate, Pred> ReceptacleDelegate_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ReceptacleDelegate, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::FacetDelegate> FacetDelegate_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::FacetDelegate, Pred> FacetDelegate_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::FacetDelegate, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::EventSourceDelegate> EventSourceDelegate_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::EventSourceDelegate, Pred> EventSourceDelegate_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::EventSourceDelegate, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::EventSinkDelegate> EventSinkDelegate_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::EventSinkDelegate, Pred> EventSinkDelegate_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::EventSinkDelegate, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ExternalDelegate> ExternalDelegate_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ExternalDelegate, Pred> ExternalDelegate_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ExternalDelegate, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::AttributeValue> AttributeValue_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::AttributeValue, Pred> AttributeValue_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::AttributeValue, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::AttributeDelegate> AttributeDelegate_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::AttributeDelegate, Pred> AttributeDelegate_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::AttributeDelegate, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::AttributeMapping> AttributeMapping_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::AttributeMapping, Pred> AttributeMapping_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::AttributeMapping, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::AttributeMappingValue> AttributeMappingValue_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::AttributeMappingValue, Pred> AttributeMappingValue_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::AttributeMappingValue, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::AttributeMappingDelegate> AttributeMappingDelegate_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::AttributeMappingDelegate, Pred> AttributeMappingDelegate_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::AttributeMappingDelegate, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::SupportsDelegate> SupportsDelegate_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::SupportsDelegate, Pred> SupportsDelegate_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::SupportsDelegate, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentAssemblyReference> ComponentAssemblyReference_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentAssemblyReference, Pred> ComponentAssemblyReference_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentAssemblyReference, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentAssemblyBase> ComponentAssemblyBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentAssemblyBase, Pred> ComponentAssemblyBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentAssemblyBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ExternalPortReference> ExternalPortReference_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ExternalPortReference, Pred> ExternalPortReference_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ExternalPortReference, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::BehaviorModel> BehaviorModel_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::BehaviorModel, Pred> BehaviorModel_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::BehaviorModel, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentAssemblyQoSCharacteristic> ComponentAssemblyQoSCharacteristic_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentAssemblyQoSCharacteristic, Pred> ComponentAssemblyQoSCharacteristic_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentAssemblyQoSCharacteristic, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::QoSCharacteristicBase> QoSCharacteristicBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::QoSCharacteristicBase, Pred> QoSCharacteristicBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::QoSCharacteristicBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::QoSCharRef> QoSCharRef_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::QoSCharRef, Pred> QoSCharRef_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::QoSCharRef, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentAssemblySecurityQoS> ComponentAssemblySecurityQoS_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentAssemblySecurityQoS, Pred> ComponentAssemblySecurityQoS_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentAssemblySecurityQoS, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::FailOverUnit> FailOverUnit_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::FailOverUnit, Pred> FailOverUnit_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::FailOverUnit, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ConnectionQoSCharacteristic> ConnectionQoSCharacteristic_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ConnectionQoSCharacteristic, Pred> ConnectionQoSCharacteristic_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ConnectionQoSCharacteristic, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::CIAOEvents> CIAOEvents_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::CIAOEvents, Pred> CIAOEvents_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::CIAOEvents, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::NetQoS> NetQoS_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::NetQoS, Pred> NetQoS_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::NetQoS, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::RecepInvoke> RecepInvoke_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::RecepInvoke, Pred> RecepInvoke_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::RecepInvoke, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentAssemblyQoS> ComponentAssemblyQoS_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentAssemblyQoS, Pred> ComponentAssemblyQoS_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentAssemblyQoS, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentQoSCharacteristic> ComponentQoSCharacteristic_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentQoSCharacteristic, Pred> ComponentQoSCharacteristic_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentQoSCharacteristic, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::PortQoSCharacteristic> PortQoSCharacteristic_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PortQoSCharacteristic, Pred> PortQoSCharacteristic_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PortQoSCharacteristic, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::PortQoS> PortQoS_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PortQoS, Pred> PortQoS_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PortQoS, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::FacetInvoke> FacetInvoke_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::FacetInvoke, Pred> FacetInvoke_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::FacetInvoke, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::QoSReq> QoSReq_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::QoSReq, Pred> QoSReq_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::QoSReq, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::EventSourcePublish> EventSourcePublish_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::EventSourcePublish, Pred> EventSourcePublish_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::EventSourcePublish, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentQoS> ComponentQoS_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentQoS, Pred> ComponentQoS_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentQoS, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::EventSinkPublish> EventSinkPublish_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::EventSinkPublish, Pred> EventSinkPublish_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::EventSinkPublish, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::QoSConnector> QoSConnector_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::QoSConnector, Pred> QoSConnector_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::QoSConnector, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentSecurityQoS> ComponentSecurityQoS_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentSecurityQoS, Pred> ComponentSecurityQoS_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentSecurityQoS, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::RealTimeConfiguration> RealTimeConfiguration_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::RealTimeConfiguration, Pred> RealTimeConfiguration_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::RealTimeConfiguration, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::PortSecurityQoS> PortSecurityQoS_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PortSecurityQoS, Pred> PortSecurityQoS_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PortSecurityQoS, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::ComponentAssembly> ComponentAssembly_parent() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_dstCriticalPath;
		static ::Uml::AssociationRole meta_dstCriticalPath_rev;
		static ::Uml::AssociationRole meta_referedbyComponentAssemblyReference;
		static ::Uml::CompositionChildRole meta_ComponentPackage_children;
		static ::Uml::CompositionChildRole meta_Property_children;
		static ::Uml::CompositionChildRole meta_ComponentPackageReference_children;
		static ::Uml::CompositionChildRole meta_Requirement_children;
		static ::Uml::CompositionChildRole meta_Component_children;
		static ::Uml::CompositionChildRole meta_ComponentAssembly_children;
		static ::Uml::CompositionChildRole meta_ProvidedRequestPort_children;
		static ::Uml::CompositionChildRole meta_RequiredRequestPort_children;
		static ::Uml::CompositionChildRole meta_InEventPort_children;
		static ::Uml::CompositionChildRole meta_OutEventPort_children;
		static ::Uml::CompositionChildRole meta_emit_children;
		static ::Uml::CompositionChildRole meta_EventSourceDelegate_children;
		static ::Uml::CompositionChildRole meta_EventSinkDelegate_children;
		static ::Uml::CompositionChildRole meta_deliverTo_children;
		static ::Uml::CompositionChildRole meta_publish_children;
		static ::Uml::CompositionChildRole meta_ComponentAssemblyReference_children;
		static ::Uml::CompositionChildRole meta_ComponentRef_children;
		static ::Uml::CompositionChildRole meta_AssemblyselectRequirement_children;
		static ::Uml::CompositionChildRole meta_AttributeValue_children;
		static ::Uml::CompositionChildRole meta_AttributeDelegate_children;
		static ::Uml::CompositionChildRole meta_AttributeMappingValue_children;
		static ::Uml::CompositionChildRole meta_AssemblyConfigProperty_children;
		static ::Uml::CompositionChildRole meta_FacetDelegate_children;
		static ::Uml::CompositionChildRole meta_invoke_children;
		static ::Uml::CompositionChildRole meta_ReceptacleDelegate_children;
		static ::Uml::CompositionChildRole meta_AttributeMappingDelegate_children;
		static ::Uml::CompositionChildRole meta_ExternalDelegate_children;
		static ::Uml::CompositionChildRole meta_AttributeMapping_children;
		static ::Uml::CompositionChildRole meta_PublishConnector_children;
		static ::Uml::CompositionChildRole meta_ExternalPortReference_children;
		static ::Uml::CompositionChildRole meta_SupportsDelegate_children;
		static ::Uml::CompositionChildRole meta_AssemblyDeployRequirement_children;
		static ::Uml::CompositionChildRole meta_QoSConnector_children;
		static ::Uml::CompositionChildRole meta_PortQoS_children;
		static ::Uml::CompositionChildRole meta_QoSReq_children;
		static ::Uml::CompositionChildRole meta_RecepInvoke_children;
		static ::Uml::CompositionChildRole meta_FacetInvoke_children;
		static ::Uml::CompositionChildRole meta_EventSourcePublish_children;
		static ::Uml::CompositionChildRole meta_ComponentQoS_children;
		static ::Uml::CompositionChildRole meta_ComponentAssemblyQoS_children;
		static ::Uml::CompositionChildRole meta_QoSCharacteristicBase_children;
		static ::Uml::CompositionChildRole meta_EventSinkPublish_children;
		static ::Uml::CompositionParentRole meta_ComponentAssembly_parent;

	};

	class CQML_Export ComponentAssemblyReference :  public CollocationGroupMember,  public ComponentAssemblyBase,  public FTMonitorable {
	public:
		ComponentAssemblyReference();
		ComponentAssemblyReference(::Udm::ObjectImpl *impl);
		ComponentAssemblyReference(const ComponentAssemblyReference &master);

#ifdef UDM_RVALUE
		ComponentAssemblyReference(ComponentAssemblyReference &&master);

		static ComponentAssemblyReference Cast(::Udm::Object &&a);
		ComponentAssemblyReference& operator=(ComponentAssemblyReference &&a);

#endif
		static ComponentAssemblyReference Cast(const ::Udm::Object &a);
		static ComponentAssemblyReference Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ComponentAssemblyReference CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ComponentAssemblyReference> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ComponentAssemblyReference, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ComponentAssemblyReference, Pred>(impl); };
		ComponentAssemblyReference CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ComponentAssemblyReference> Derived();
		template <class Pred> ::Udm::DerivedAttr< ComponentAssemblyReference, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ComponentAssemblyReference, Pred>(impl); };
		::Udm::ArchetypeAttr< ComponentAssemblyReference> Archetype() const;
		::Udm::PointerAttr< ComponentAssembly> ref() const;
		::Udm::AClassAssocAttr< OnAssemblyConn, AssemblyRule> srcOnAssemblyConn() const;
		template <class Pred> ::Udm::AClassAssocAttr< OnAssemblyConn, AssemblyRule, Pred> srcOnAssemblyConn_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< OnAssemblyConn, AssemblyRule, Pred>(impl, meta_srcOnAssemblyConn, meta_srcOnAssemblyConn_rev); };
		::Udm::ParentAttr< ::CQML::ComponentAssembly> ComponentAssembly_parent() const;
		::Udm::ParentAttr< ::CQML::Policy> Policy_parent() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::AssociationRole meta_srcOnAssemblyConn;
		static ::Uml::AssociationRole meta_srcOnAssemblyConn_rev;
		static ::Uml::CompositionParentRole meta_ComponentAssembly_parent;
		static ::Uml::CompositionParentRole meta_Policy_parent;

	};

	class CQML_Export ExternalPortReference :  public MgaObject {
	public:
		ExternalPortReference();
		ExternalPortReference(::Udm::ObjectImpl *impl);
		ExternalPortReference(const ExternalPortReference &master);

#ifdef UDM_RVALUE
		ExternalPortReference(ExternalPortReference &&master);

		static ExternalPortReference Cast(::Udm::Object &&a);
		ExternalPortReference& operator=(ExternalPortReference &&a);

#endif
		static ExternalPortReference Cast(const ::Udm::Object &a);
		static ExternalPortReference Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ExternalPortReference CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ExternalPortReference> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ExternalPortReference, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ExternalPortReference, Pred>(impl); };
		ExternalPortReference CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ExternalPortReference> Derived();
		template <class Pred> ::Udm::DerivedAttr< ExternalPortReference, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ExternalPortReference, Pred>(impl); };
		::Udm::ArchetypeAttr< ExternalPortReference> Archetype() const;
		::Udm::StringAttr location() const;
		::Udm::StringAttr label() const;
		::Udm::PointerAttr< ExternalPortReferenceType> ref() const;
		::Udm::AClassAssocAttr< ExternalDelegate, Port> dstExternalDelegate() const;
		template <class Pred> ::Udm::AClassAssocAttr< ExternalDelegate, Port, Pred> dstExternalDelegate_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< ExternalDelegate, Port, Pred>(impl, meta_dstExternalDelegate, meta_dstExternalDelegate_rev); };
		::Udm::ParentAttr< ::CQML::ComponentAssembly> ComponentAssembly_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_location;
		static ::Uml::Attribute meta_label;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::AssociationRole meta_dstExternalDelegate;
		static ::Uml::AssociationRole meta_dstExternalDelegate_rev;
		static ::Uml::CompositionParentRole meta_ComponentAssembly_parent;

	};

	class CQML_Export ECBehavior :  public MgaObject {
	public:
		ECBehavior();
		ECBehavior(::Udm::ObjectImpl *impl);
		ECBehavior(const ECBehavior &master);

#ifdef UDM_RVALUE
		ECBehavior(ECBehavior &&master);

		static ECBehavior Cast(::Udm::Object &&a);
		ECBehavior& operator=(ECBehavior &&a);

#endif
		static ECBehavior Cast(const ::Udm::Object &a);
		static ECBehavior Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ECBehavior CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ECBehavior> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ECBehavior, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ECBehavior, Pred>(impl); };
		ECBehavior CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ECBehavior> Derived();
		template <class Pred> ::Udm::DerivedAttr< ECBehavior, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ECBehavior, Pred>(impl); };
		::Udm::ArchetypeAttr< ECBehavior> Archetype() const;
		::Udm::IntegerAttr DispatchingMultithreadingLevel() const;
		::Udm::BooleanAttr MultithreadedSupplier() const;
		::Udm::BooleanAttr MultithreadedConsumer() const;
		::Udm::BooleanAttr DisconnectDanglingConnections() const;
		::Udm::BooleanAttr ConsumerBasedFiltering() const;
		::Udm::BooleanAttr SupplierBasedFiltering() const;
		::Udm::ParentAttr< ::CQML::ECRequirements> ECRequirements_parent() const;
		::Udm::ParentAttr< ::CQML::ECRequirements> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_DispatchingMultithreadingLevel;
		static ::Uml::Attribute meta_MultithreadedSupplier;
		static ::Uml::Attribute meta_MultithreadedConsumer;
		static ::Uml::Attribute meta_DisconnectDanglingConnections;
		static ::Uml::Attribute meta_ConsumerBasedFiltering;
		static ::Uml::Attribute meta_SupplierBasedFiltering;
		static ::Uml::CompositionParentRole meta_ECRequirements_parent;

	};

	class CQML_Export ECRole :  public MgaObject {
	public:
		ECRole();
		ECRole(::Udm::ObjectImpl *impl);
		ECRole(const ECRole &master);

#ifdef UDM_RVALUE
		ECRole(ECRole &&master);

		static ECRole Cast(::Udm::Object &&a);
		ECRole& operator=(ECRole &&a);

#endif
		static ECRole Cast(const ::Udm::Object &a);
		static ECRole Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ECRole CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ECRole> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ECRole, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ECRole, Pred>(impl); };
		ECRole CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ECRole> Derived();
		template <class Pred> ::Udm::DerivedAttr< ECRole, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ECRole, Pred>(impl); };
		::Udm::ArchetypeAttr< ECRole> Archetype() const;
		::Udm::StringAttr ECFilterType() const;
		::Udm::StringAttr rolekind() const;
		::Udm::ParentAttr< ::CQML::ECRequirements> ECRequirements_parent() const;
		::Udm::ParentAttr< ::CQML::ECRequirements> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_ECFilterType;
		static ::Uml::Attribute meta_rolekind;
		static ::Uml::CompositionParentRole meta_ECRequirements_parent;

	};

	class CQML_Export ServiceProvider :  public MgaObject {
	public:
		ServiceProvider();
		ServiceProvider(::Udm::ObjectImpl *impl);
		ServiceProvider(const ServiceProvider &master);

#ifdef UDM_RVALUE
		ServiceProvider(ServiceProvider &&master);

		static ServiceProvider Cast(::Udm::Object &&a);
		ServiceProvider& operator=(ServiceProvider &&a);

#endif
		static ServiceProvider Cast(const ::Udm::Object &a);
		static ServiceProvider Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ServiceProvider CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ServiceProvider> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ServiceProvider, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ServiceProvider, Pred>(impl); };
		ServiceProvider CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ServiceProvider> Derived();
		template <class Pred> ::Udm::DerivedAttr< ServiceProvider, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ServiceProvider, Pred>(impl); };
		::Udm::ArchetypeAttr< ServiceProvider> Archetype() const;
		::Udm::BooleanAttr fixed_prioirty_service_execution() const;
		::Udm::ChildAttr< ::CQML::MultipleServiceRequests> MultipleServiceRequests_child() const;
		::Udm::ChildAttr< ::CQML::ServiceLevels> ServiceLevels_child() const;
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::MultipleServiceRequests> MultipleServiceRequests_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MultipleServiceRequests, Pred> MultipleServiceRequests_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MultipleServiceRequests, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ServiceLevels> ServiceLevels_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ServiceLevels, Pred> ServiceLevels_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ServiceLevels, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::RTRequirements> RTRequirements_parent() const;
		::Udm::ParentAttr< ::CQML::RTRequirements> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_fixed_prioirty_service_execution;
		static ::Uml::CompositionChildRole meta_MultipleServiceRequests_child;
		static ::Uml::CompositionChildRole meta_ServiceLevels_child;
		static ::Uml::CompositionParentRole meta_RTRequirements_parent;

	};

	class CQML_Export MultipleServiceRequests :  public MgaObject {
	public:
		MultipleServiceRequests();
		MultipleServiceRequests(::Udm::ObjectImpl *impl);
		MultipleServiceRequests(const MultipleServiceRequests &master);

#ifdef UDM_RVALUE
		MultipleServiceRequests(MultipleServiceRequests &&master);

		static MultipleServiceRequests Cast(::Udm::Object &&a);
		MultipleServiceRequests& operator=(MultipleServiceRequests &&a);

#endif
		static MultipleServiceRequests Cast(const ::Udm::Object &a);
		static MultipleServiceRequests Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		MultipleServiceRequests CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< MultipleServiceRequests> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< MultipleServiceRequests, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< MultipleServiceRequests, Pred>(impl); };
		MultipleServiceRequests CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< MultipleServiceRequests> Derived();
		template <class Pred> ::Udm::DerivedAttr< MultipleServiceRequests, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< MultipleServiceRequests, Pred>(impl); };
		::Udm::ArchetypeAttr< MultipleServiceRequests> Archetype() const;
		::Udm::BooleanAttr buffer_service_requests() const;
		::Udm::IntegerAttr maximum_simultaneous_service_level() const;
		::Udm::BooleanAttr simultaneous_service_execution() const;
		::Udm::IntegerAttr minimum_simultaneous_service_level() const;
		::Udm::ParentAttr< ::CQML::ServiceProvider> ServiceProvider_parent() const;
		::Udm::ParentAttr< ::CQML::ServiceProvider> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_buffer_service_requests;
		static ::Uml::Attribute meta_maximum_simultaneous_service_level;
		static ::Uml::Attribute meta_simultaneous_service_execution;
		static ::Uml::Attribute meta_minimum_simultaneous_service_level;
		static ::Uml::CompositionParentRole meta_ServiceProvider_parent;

	};

	class CQML_Export ServiceLevels :  public MgaObject {
	public:
		ServiceLevels();
		ServiceLevels(::Udm::ObjectImpl *impl);
		ServiceLevels(const ServiceLevels &master);

#ifdef UDM_RVALUE
		ServiceLevels(ServiceLevels &&master);

		static ServiceLevels Cast(::Udm::Object &&a);
		ServiceLevels& operator=(ServiceLevels &&a);

#endif
		static ServiceLevels Cast(const ::Udm::Object &a);
		static ServiceLevels Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ServiceLevels CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ServiceLevels> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ServiceLevels, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ServiceLevels, Pred>(impl); };
		ServiceLevels CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ServiceLevels> Derived();
		template <class Pred> ::Udm::DerivedAttr< ServiceLevels, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ServiceLevels, Pred>(impl); };
		::Udm::ArchetypeAttr< ServiceLevels> Archetype() const;
		::Udm::BooleanAttr varying_service_levels() const;
		::Udm::ParentAttr< ::CQML::ServiceProvider> ServiceProvider_parent() const;
		::Udm::ParentAttr< ::CQML::ServiceProvider> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_varying_service_levels;
		static ::Uml::CompositionParentRole meta_ServiceProvider_parent;

	};

	class CQML_Export ServiceConsumer :  public MgaObject {
	public:
		ServiceConsumer();
		ServiceConsumer(::Udm::ObjectImpl *impl);
		ServiceConsumer(const ServiceConsumer &master);

#ifdef UDM_RVALUE
		ServiceConsumer(ServiceConsumer &&master);

		static ServiceConsumer Cast(::Udm::Object &&a);
		ServiceConsumer& operator=(ServiceConsumer &&a);

#endif
		static ServiceConsumer Cast(const ::Udm::Object &a);
		static ServiceConsumer Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ServiceConsumer CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ServiceConsumer> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ServiceConsumer, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ServiceConsumer, Pred>(impl); };
		ServiceConsumer CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ServiceConsumer> Derived();
		template <class Pred> ::Udm::DerivedAttr< ServiceConsumer, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ServiceConsumer, Pred>(impl); };
		::Udm::ArchetypeAttr< ServiceConsumer> Archetype() const;
		::Udm::BooleanAttr prioritize_service_invocations() const;
		::Udm::ParentAttr< ::CQML::RTRequirements> RTRequirements_parent() const;
		::Udm::ParentAttr< ::CQML::RTRequirements> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_prioritize_service_invocations;
		static ::Uml::CompositionParentRole meta_RTRequirements_parent;

	};

	class CQML_Export ComponentFactoryImplementationContainer :  public ImplementationContainer {
	public:
		ComponentFactoryImplementationContainer();
		ComponentFactoryImplementationContainer(::Udm::ObjectImpl *impl);
		ComponentFactoryImplementationContainer(const ComponentFactoryImplementationContainer &master);

#ifdef UDM_RVALUE
		ComponentFactoryImplementationContainer(ComponentFactoryImplementationContainer &&master);

		static ComponentFactoryImplementationContainer Cast(::Udm::Object &&a);
		ComponentFactoryImplementationContainer& operator=(ComponentFactoryImplementationContainer &&a);

#endif
		static ComponentFactoryImplementationContainer Cast(const ::Udm::Object &a);
		static ComponentFactoryImplementationContainer Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ComponentFactoryImplementationContainer CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ComponentFactoryImplementationContainer> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ComponentFactoryImplementationContainer, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ComponentFactoryImplementationContainer, Pred>(impl); };
		ComponentFactoryImplementationContainer CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ComponentFactoryImplementationContainer> Derived();
		template <class Pred> ::Udm::DerivedAttr< ComponentFactoryImplementationContainer, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ComponentFactoryImplementationContainer, Pred>(impl); };
		::Udm::ArchetypeAttr< ComponentFactoryImplementationContainer> Archetype() const;
		::Udm::ChildrenAttr< ::CQML::ComponentFactoryInstance> ComponentFactoryInstance_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentFactoryInstance, Pred> ComponentFactoryInstance_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentFactoryInstance, Pred>(impl, meta_ComponentFactoryInstance_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Implemenation> Implemenation_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Implemenation, Pred> Implemenation_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Implemenation, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::MonolithicImplementationBase> MonolithicImplementationBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MonolithicImplementationBase, Pred> MonolithicImplementationBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MonolithicImplementationBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentFactoryInstance> ComponentFactoryInstance_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentFactoryInstance, Pred> ComponentFactoryInstance_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentFactoryInstance, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::ComponentFactoryImplementations> ComponentFactoryImplementations_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentFactoryImplementations> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionChildRole meta_ComponentFactoryInstance_children;
		static ::Uml::CompositionParentRole meta_ComponentFactoryImplementations_parent;

	};

	class CQML_Export ComponentFactoryInstance :  public MonolithicImplementationBase {
	public:
		ComponentFactoryInstance();
		ComponentFactoryInstance(::Udm::ObjectImpl *impl);
		ComponentFactoryInstance(const ComponentFactoryInstance &master);

#ifdef UDM_RVALUE
		ComponentFactoryInstance(ComponentFactoryInstance &&master);

		static ComponentFactoryInstance Cast(::Udm::Object &&a);
		ComponentFactoryInstance& operator=(ComponentFactoryInstance &&a);

#endif
		static ComponentFactoryInstance Cast(const ::Udm::Object &a);
		static ComponentFactoryInstance Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ComponentFactoryInstance CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ComponentFactoryInstance> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ComponentFactoryInstance, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ComponentFactoryInstance, Pred>(impl); };
		ComponentFactoryInstance CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ComponentFactoryInstance> Derived();
		template <class Pred> ::Udm::DerivedAttr< ComponentFactoryInstance, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ComponentFactoryInstance, Pred>(impl); };
		::Udm::ArchetypeAttr< ComponentFactoryInstance> Archetype() const;
		::Udm::AssocAttr< ComponentFactoryRef> referedbyComponentFactoryRef() const;
		template <class Pred> ::Udm::AssocAttr< ComponentFactoryRef, Pred> referedbyComponentFactoryRef_sorted(const Pred &) const { return ::Udm::AssocAttr< ComponentFactoryRef, Pred>(impl, meta_referedbyComponentFactoryRef); };
		::Udm::PointerAttr< ComponentFactory> ref() const;
		::Udm::ParentAttr< ::CQML::ComponentFactoryImplementationContainer> ComponentFactoryImplementationContainer_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentFactoryImplementationContainer> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_referedbyComponentFactoryRef;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::CompositionParentRole meta_ComponentFactoryImplementationContainer_parent;

	};

	class CQML_Export ConfigProperty :  public MgaObject {
	public:
		ConfigProperty();
		ConfigProperty(::Udm::ObjectImpl *impl);
		ConfigProperty(const ConfigProperty &master);

#ifdef UDM_RVALUE
		ConfigProperty(ConfigProperty &&master);

		static ConfigProperty Cast(::Udm::Object &&a);
		ConfigProperty& operator=(ConfigProperty &&a);

#endif
		static ConfigProperty Cast(const ::Udm::Object &a);
		static ConfigProperty Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ConfigProperty CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ConfigProperty> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ConfigProperty, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ConfigProperty, Pred>(impl); };
		ConfigProperty CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ConfigProperty> Derived();
		template <class Pred> ::Udm::DerivedAttr< ConfigProperty, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ConfigProperty, Pred>(impl); };
		::Udm::ArchetypeAttr< ConfigProperty> Archetype() const;
		::Udm::ParentAttr< ::CQML::ImplementationContainer> ImplementationContainer_parent() const;
		::Udm::ParentAttr< ::CQML::ImplementationContainer> parent() const;
		::Udm::AssocEndAttr< ::CQML::Implemenation> srcConfigProperty_end() const;
		::Udm::AssocEndAttr< ::CQML::Property> dstConfigProperty_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ImplementationContainer_parent;
		static ::Uml::AssociationRole meta_srcConfigProperty_end_;
		static ::Uml::AssociationRole meta_dstConfigProperty_end_;

	};

	class CQML_Export InfoProperty :  public MgaObject {
	public:
		InfoProperty();
		InfoProperty(::Udm::ObjectImpl *impl);
		InfoProperty(const InfoProperty &master);

#ifdef UDM_RVALUE
		InfoProperty(InfoProperty &&master);

		static InfoProperty Cast(::Udm::Object &&a);
		InfoProperty& operator=(InfoProperty &&a);

#endif
		static InfoProperty Cast(const ::Udm::Object &a);
		static InfoProperty Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		InfoProperty CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< InfoProperty> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< InfoProperty, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< InfoProperty, Pred>(impl); };
		InfoProperty CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< InfoProperty> Derived();
		template <class Pred> ::Udm::DerivedAttr< InfoProperty, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< InfoProperty, Pred>(impl); };
		::Udm::ArchetypeAttr< InfoProperty> Archetype() const;
		::Udm::ParentAttr< ::CQML::ImplementationContainer> ImplementationContainer_parent() const;
		::Udm::ParentAttr< ::CQML::ImplementationContainer> parent() const;
		::Udm::AssocEndAttr< ::CQML::Implemenation> srcInfoProperty_end() const;
		::Udm::AssocEndAttr< ::CQML::Property> dstInfoProperty_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ImplementationContainer_parent;
		static ::Uml::AssociationRole meta_srcInfoProperty_end_;
		static ::Uml::AssociationRole meta_dstInfoProperty_end_;

	};

	class CQML_Export MonolithprimaryArtifact :  public MgaObject {
	public:
		MonolithprimaryArtifact();
		MonolithprimaryArtifact(::Udm::ObjectImpl *impl);
		MonolithprimaryArtifact(const MonolithprimaryArtifact &master);

#ifdef UDM_RVALUE
		MonolithprimaryArtifact(MonolithprimaryArtifact &&master);

		static MonolithprimaryArtifact Cast(::Udm::Object &&a);
		MonolithprimaryArtifact& operator=(MonolithprimaryArtifact &&a);

#endif
		static MonolithprimaryArtifact Cast(const ::Udm::Object &a);
		static MonolithprimaryArtifact Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		MonolithprimaryArtifact CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< MonolithprimaryArtifact> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< MonolithprimaryArtifact, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< MonolithprimaryArtifact, Pred>(impl); };
		MonolithprimaryArtifact CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< MonolithprimaryArtifact> Derived();
		template <class Pred> ::Udm::DerivedAttr< MonolithprimaryArtifact, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< MonolithprimaryArtifact, Pred>(impl); };
		::Udm::ArchetypeAttr< MonolithprimaryArtifact> Archetype() const;
		::Udm::ParentAttr< ::CQML::ImplementationContainer> ImplementationContainer_parent() const;
		::Udm::ParentAttr< ::CQML::ImplementationContainer> parent() const;
		::Udm::AssocEndAttr< ::CQML::MonolithicImplementationBase> srcMonolithprimaryArtifact_end() const;
		::Udm::AssocEndAttr< ::CQML::ImplementationArtifactReference> dstMonolithprimaryArtifact_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ImplementationContainer_parent;
		static ::Uml::AssociationRole meta_srcMonolithprimaryArtifact_end_;
		static ::Uml::AssociationRole meta_dstMonolithprimaryArtifact_end_;

	};

	class CQML_Export MonolithDeployRequirement :  public MgaObject {
	public:
		MonolithDeployRequirement();
		MonolithDeployRequirement(::Udm::ObjectImpl *impl);
		MonolithDeployRequirement(const MonolithDeployRequirement &master);

#ifdef UDM_RVALUE
		MonolithDeployRequirement(MonolithDeployRequirement &&master);

		static MonolithDeployRequirement Cast(::Udm::Object &&a);
		MonolithDeployRequirement& operator=(MonolithDeployRequirement &&a);

#endif
		static MonolithDeployRequirement Cast(const ::Udm::Object &a);
		static MonolithDeployRequirement Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		MonolithDeployRequirement CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< MonolithDeployRequirement> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< MonolithDeployRequirement, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< MonolithDeployRequirement, Pred>(impl); };
		MonolithDeployRequirement CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< MonolithDeployRequirement> Derived();
		template <class Pred> ::Udm::DerivedAttr< MonolithDeployRequirement, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< MonolithDeployRequirement, Pred>(impl); };
		::Udm::ArchetypeAttr< MonolithDeployRequirement> Archetype() const;
		::Udm::ParentAttr< ::CQML::ImplementationContainer> ImplementationContainer_parent() const;
		::Udm::ParentAttr< ::CQML::ImplementationContainer> parent() const;
		::Udm::AssocEndAttr< ::CQML::MonolithicImplementationBase> srcMonolithDeployRequirement_end() const;
		::Udm::AssocEndAttr< ::CQML::ImplementationRequirement> dstMonolithDeployRequirement_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ImplementationContainer_parent;
		static ::Uml::AssociationRole meta_srcMonolithDeployRequirement_end_;
		static ::Uml::AssociationRole meta_dstMonolithDeployRequirement_end_;

	};

	class CQML_Export MonolithExecParameter :  public MgaObject {
	public:
		MonolithExecParameter();
		MonolithExecParameter(::Udm::ObjectImpl *impl);
		MonolithExecParameter(const MonolithExecParameter &master);

#ifdef UDM_RVALUE
		MonolithExecParameter(MonolithExecParameter &&master);

		static MonolithExecParameter Cast(::Udm::Object &&a);
		MonolithExecParameter& operator=(MonolithExecParameter &&a);

#endif
		static MonolithExecParameter Cast(const ::Udm::Object &a);
		static MonolithExecParameter Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		MonolithExecParameter CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< MonolithExecParameter> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< MonolithExecParameter, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< MonolithExecParameter, Pred>(impl); };
		MonolithExecParameter CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< MonolithExecParameter> Derived();
		template <class Pred> ::Udm::DerivedAttr< MonolithExecParameter, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< MonolithExecParameter, Pred>(impl); };
		::Udm::ArchetypeAttr< MonolithExecParameter> Archetype() const;
		::Udm::ParentAttr< ::CQML::ImplementationContainer> ImplementationContainer_parent() const;
		::Udm::ParentAttr< ::CQML::ImplementationContainer> parent() const;
		::Udm::AssocEndAttr< ::CQML::MonolithicImplementationBase> srcMonolithExecParameter_end() const;
		::Udm::AssocEndAttr< ::CQML::Property> dstMonolithExecParameter_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ImplementationContainer_parent;
		static ::Uml::AssociationRole meta_srcMonolithExecParameter_end_;
		static ::Uml::AssociationRole meta_dstMonolithExecParameter_end_;

	};

	class CQML_Export WorkerLibrary :  public MgaObject {
	public:
		WorkerLibrary();
		WorkerLibrary(::Udm::ObjectImpl *impl);
		WorkerLibrary(const WorkerLibrary &master);

#ifdef UDM_RVALUE
		WorkerLibrary(WorkerLibrary &&master);

		static WorkerLibrary Cast(::Udm::Object &&a);
		WorkerLibrary& operator=(WorkerLibrary &&a);

#endif
		static WorkerLibrary Cast(const ::Udm::Object &a);
		static WorkerLibrary Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		WorkerLibrary CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< WorkerLibrary> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< WorkerLibrary, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< WorkerLibrary, Pred>(impl); };
		WorkerLibrary CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< WorkerLibrary> Derived();
		template <class Pred> ::Udm::DerivedAttr< WorkerLibrary, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< WorkerLibrary, Pred>(impl); };
		::Udm::ArchetypeAttr< WorkerLibrary> Archetype() const;
		::Udm::StringAttr Location() const;
		::Udm::ChildrenAttr< ::CQML::WorkerFile> WorkerFile_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::WorkerFile, Pred> WorkerFile_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::WorkerFile, Pred>(impl, meta_WorkerFile_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::WorkerFile> WorkerFile_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::WorkerFile, Pred> WorkerFile_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::WorkerFile, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::WorkerPackageBase> WorkerPackageBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::WorkerPackageBase, Pred> WorkerPackageBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::WorkerPackageBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::WorkerLibraries> WorkerLibraries_parent() const;
		::Udm::ParentAttr< ::CQML::WorkerLibraries> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_Location;
		static ::Uml::CompositionChildRole meta_WorkerFile_children;
		static ::Uml::CompositionParentRole meta_WorkerLibraries_parent;

	};

	class CQML_Export Worker :  public MgaObject {
	public:
		Worker();
		Worker(::Udm::ObjectImpl *impl);
		Worker(const Worker &master);

#ifdef UDM_RVALUE
		Worker(Worker &&master);

		static Worker Cast(::Udm::Object &&a);
		Worker& operator=(Worker &&a);

#endif
		static Worker Cast(const ::Udm::Object &a);
		static Worker Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Worker CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Worker> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Worker, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Worker, Pred>(impl); };
		Worker CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Worker> Derived();
		template <class Pred> ::Udm::DerivedAttr< Worker, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Worker, Pred>(impl); };
		::Udm::ArchetypeAttr< Worker> Archetype() const;
		::Udm::BooleanAttr Abstract() const;
		::Udm::AssocAttr< WorkerType> referedbyWorkerType() const;
		template <class Pred> ::Udm::AssocAttr< WorkerType, Pred> referedbyWorkerType_sorted(const Pred &) const { return ::Udm::AssocAttr< WorkerType, Pred>(impl, meta_referedbyWorkerType); };
		::Udm::ChildrenAttr< ::CQML::Action> Action_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Action, Pred> Action_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Action, Pred>(impl, meta_Action_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Action> Action_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Action, Pred> Action_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Action, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ActionBase> ActionBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ActionBase, Pred> ActionBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ActionBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::WorkerPackageBase> WorkerPackageBase_parent() const;
		::Udm::ParentAttr< ::CQML::WorkerPackageBase> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_Abstract;
		static ::Uml::AssociationRole meta_referedbyWorkerType;
		static ::Uml::CompositionChildRole meta_Action_children;
		static ::Uml::CompositionParentRole meta_WorkerPackageBase_parent;

	};

	class CQML_Export WorkerPackageBase :  public MgaObject {
	public:
		WorkerPackageBase();
		WorkerPackageBase(::Udm::ObjectImpl *impl);
		WorkerPackageBase(const WorkerPackageBase &master);

#ifdef UDM_RVALUE
		WorkerPackageBase(WorkerPackageBase &&master);

		static WorkerPackageBase Cast(::Udm::Object &&a);
		WorkerPackageBase& operator=(WorkerPackageBase &&a);

#endif
		static WorkerPackageBase Cast(const ::Udm::Object &a);
		static WorkerPackageBase Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		WorkerPackageBase CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< WorkerPackageBase> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< WorkerPackageBase, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< WorkerPackageBase, Pred>(impl); };
		WorkerPackageBase CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< WorkerPackageBase> Derived();
		template <class Pred> ::Udm::DerivedAttr< WorkerPackageBase, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< WorkerPackageBase, Pred>(impl); };
		::Udm::ArchetypeAttr< WorkerPackageBase> Archetype() const;
		::Udm::ChildrenAttr< ::CQML::Worker> Worker_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Worker, Pred> Worker_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Worker, Pred>(impl, meta_Worker_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Worker> Worker_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Worker, Pred> Worker_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Worker, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;

		static ::Uml::Class meta;
		static ::Uml::CompositionChildRole meta_Worker_children;

	};

	class CQML_Export WorkerFile :  public WorkerPackageBase {
	public:
		WorkerFile();
		WorkerFile(::Udm::ObjectImpl *impl);
		WorkerFile(const WorkerFile &master);

#ifdef UDM_RVALUE
		WorkerFile(WorkerFile &&master);

		static WorkerFile Cast(::Udm::Object &&a);
		WorkerFile& operator=(WorkerFile &&a);

#endif
		static WorkerFile Cast(const ::Udm::Object &a);
		static WorkerFile Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		WorkerFile CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< WorkerFile> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< WorkerFile, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< WorkerFile, Pred>(impl); };
		WorkerFile CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< WorkerFile> Derived();
		template <class Pred> ::Udm::DerivedAttr< WorkerFile, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< WorkerFile, Pred>(impl); };
		::Udm::ArchetypeAttr< WorkerFile> Archetype() const;
		::Udm::StringAttr Location() const;
		::Udm::ChildrenAttr< ::CQML::WorkerPackage> WorkerPackage_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::WorkerPackage, Pred> WorkerPackage_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::WorkerPackage, Pred>(impl, meta_WorkerPackage_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::WorkerPackageBase> WorkerPackageBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::WorkerPackageBase, Pred> WorkerPackageBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::WorkerPackageBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::WorkerPackage> WorkerPackage_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::WorkerPackage, Pred> WorkerPackage_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::WorkerPackage, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::WorkerLibrary> WorkerLibrary_parent() const;
		::Udm::ParentAttr< ::CQML::WorkerLibrary> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_Location;
		static ::Uml::CompositionChildRole meta_WorkerPackage_children;
		static ::Uml::CompositionParentRole meta_WorkerLibrary_parent;

	};

	class CQML_Export WorkerPackage :  public WorkerPackageBase {
	public:
		WorkerPackage();
		WorkerPackage(::Udm::ObjectImpl *impl);
		WorkerPackage(const WorkerPackage &master);

#ifdef UDM_RVALUE
		WorkerPackage(WorkerPackage &&master);

		static WorkerPackage Cast(::Udm::Object &&a);
		WorkerPackage& operator=(WorkerPackage &&a);

#endif
		static WorkerPackage Cast(const ::Udm::Object &a);
		static WorkerPackage Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		WorkerPackage CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< WorkerPackage> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< WorkerPackage, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< WorkerPackage, Pred>(impl); };
		WorkerPackage CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< WorkerPackage> Derived();
		template <class Pred> ::Udm::DerivedAttr< WorkerPackage, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< WorkerPackage, Pred>(impl); };
		::Udm::ArchetypeAttr< WorkerPackage> Archetype() const;
		::Udm::ChildrenAttr< ::CQML::WorkerPackage> WorkerPackage_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::WorkerPackage, Pred> WorkerPackage_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::WorkerPackage, Pred>(impl, meta_WorkerPackage_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::WorkerPackageBase> WorkerPackageBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::WorkerPackageBase, Pred> WorkerPackageBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::WorkerPackageBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::WorkerPackage> WorkerPackage_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::WorkerPackage, Pred> WorkerPackage_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::WorkerPackage, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::WorkerFile> WorkerFile_parent() const;
		::Udm::ParentAttr< ::CQML::WorkerPackage> WorkerPackage_parent() const;
		::Udm::ParentAttr< ::CQML::WorkerPackageBase> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionChildRole meta_WorkerPackage_children;
		static ::Uml::CompositionParentRole meta_WorkerFile_parent;
		static ::Uml::CompositionParentRole meta_WorkerPackage_parent;

	};

	class CQML_Export WorkerType :  public MgaObject {
	public:
		WorkerType();
		WorkerType(::Udm::ObjectImpl *impl);
		WorkerType(const WorkerType &master);

#ifdef UDM_RVALUE
		WorkerType(WorkerType &&master);

		static WorkerType Cast(::Udm::Object &&a);
		WorkerType& operator=(WorkerType &&a);

#endif
		static WorkerType Cast(const ::Udm::Object &a);
		static WorkerType Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		WorkerType CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< WorkerType> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< WorkerType, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< WorkerType, Pred>(impl); };
		WorkerType CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< WorkerType> Derived();
		template <class Pred> ::Udm::DerivedAttr< WorkerType, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< WorkerType, Pred>(impl); };
		::Udm::ArchetypeAttr< WorkerType> Archetype() const;
		::Udm::PointerAttr< Worker> ref() const;
		::Udm::ParentAttr< ::CQML::Component> Component_parent() const;
		::Udm::ParentAttr< ::CQML::Component> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::CompositionParentRole meta_Component_parent;

	};

	class CQML_Export Variable :  public MgaObject {
	public:
		Variable();
		Variable(::Udm::ObjectImpl *impl);
		Variable(const Variable &master);

#ifdef UDM_RVALUE
		Variable(Variable &&master);

		static Variable Cast(::Udm::Object &&a);
		Variable& operator=(Variable &&a);

#endif
		static Variable Cast(const ::Udm::Object &a);
		static Variable Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Variable CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Variable> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Variable, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Variable, Pred>(impl); };
		Variable CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Variable> Derived();
		template <class Pred> ::Udm::DerivedAttr< Variable, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Variable, Pred>(impl); };
		::Udm::ArchetypeAttr< Variable> Archetype() const;
		::Udm::StringAttr InitialValue() const;
		::Udm::PointerAttr< PredefinedType> ref() const;
		::Udm::ParentAttr< ::CQML::BehaviorModel> BehaviorModel_parent() const;
		::Udm::ParentAttr< ::CQML::BehaviorModel> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_InitialValue;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::CompositionParentRole meta_BehaviorModel_parent;

	};

	class CQML_Export BehaviorModel :  virtual  public MgaObject {
	public:
		BehaviorModel();
		BehaviorModel(::Udm::ObjectImpl *impl);
		BehaviorModel(const BehaviorModel &master);

#ifdef UDM_RVALUE
		BehaviorModel(BehaviorModel &&master);

		static BehaviorModel Cast(::Udm::Object &&a);
		BehaviorModel& operator=(BehaviorModel &&a);

#endif
		static BehaviorModel Cast(const ::Udm::Object &a);
		static BehaviorModel Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		BehaviorModel CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< BehaviorModel> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< BehaviorModel, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< BehaviorModel, Pred>(impl); };
		BehaviorModel CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< BehaviorModel> Derived();
		template <class Pred> ::Udm::DerivedAttr< BehaviorModel, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< BehaviorModel, Pred>(impl); };
		::Udm::ArchetypeAttr< BehaviorModel> Archetype() const;
		::Udm::ChildrenAttr< ::CQML::Variable> Variable_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Variable, Pred> Variable_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Variable, Pred>(impl, meta_Variable_children); };
		::Udm::ChildrenAttr< ::CQML::TerminalTransition> TerminalTransition_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::TerminalTransition, Pred> TerminalTransition_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::TerminalTransition, Pred>(impl, meta_TerminalTransition_children); };
		::Udm::ChildrenAttr< ::CQML::Terminal> Terminal_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Terminal, Pred> Terminal_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Terminal, Pred>(impl, meta_Terminal_children); };
		::Udm::ChildrenAttr< ::CQML::TerminalEffect> TerminalEffect_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::TerminalEffect, Pred> TerminalEffect_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::TerminalEffect, Pred>(impl, meta_TerminalEffect_children); };
		::Udm::ChildrenAttr< ::CQML::StateBase> StateBase_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::StateBase, Pred> StateBase_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::StateBase, Pred>(impl, meta_StateBase_children); };
		::Udm::ChildrenAttr< ::CQML::BranchTransition> BranchTransition_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::BranchTransition, Pred> BranchTransition_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::BranchTransition, Pred>(impl, meta_BranchTransition_children); };
		::Udm::ChildrenAttr< ::CQML::Transition> Transition_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Transition, Pred> Transition_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Transition, Pred>(impl, meta_Transition_children); };
		::Udm::ChildrenAttr< ::CQML::LoopTransition> LoopTransition_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::LoopTransition, Pred> LoopTransition_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::LoopTransition, Pred>(impl, meta_LoopTransition_children); };
		::Udm::ChildrenAttr< ::CQML::Finish> Finish_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Finish, Pred> Finish_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Finish, Pred>(impl, meta_Finish_children); };
		::Udm::ChildrenAttr< ::CQML::BehaviorInputAction> BehaviorInputAction_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::BehaviorInputAction, Pred> BehaviorInputAction_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::BehaviorInputAction, Pred>(impl, meta_BehaviorInputAction_children); };
		::Udm::ChildrenAttr< ::CQML::ActionBase> ActionBase_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ActionBase, Pred> ActionBase_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ActionBase, Pred>(impl, meta_ActionBase_children); };
		::Udm::ChildrenAttr< ::CQML::InputEffect> InputEffect_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::InputEffect, Pred> InputEffect_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::InputEffect, Pred>(impl, meta_InputEffect_children); };
		::Udm::ChildrenAttr< ::CQML::Effect> Effect_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Effect, Pred> Effect_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Effect, Pred>(impl, meta_Effect_children); };
		::Udm::ChildrenAttr< ::CQML::QueryInputAction> QueryInputAction_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::QueryInputAction, Pred> QueryInputAction_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::QueryInputAction, Pred>(impl, meta_QueryInputAction_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Variable> Variable_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Variable, Pred> Variable_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Variable, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::BehaviorInputAction> BehaviorInputAction_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::BehaviorInputAction, Pred> BehaviorInputAction_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::BehaviorInputAction, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::InputAction> InputAction_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::InputAction, Pred> InputAction_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::InputAction, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::MultiInputAction> MultiInputAction_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MultiInputAction, Pred> MultiInputAction_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MultiInputAction, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Action> Action_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Action, Pred> Action_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Action, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ActionBase> ActionBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ActionBase, Pred> ActionBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ActionBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::OutputAction> OutputAction_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::OutputAction, Pred> OutputAction_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::OutputAction, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Finish> Finish_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Finish, Pred> Finish_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Finish, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::QueryAction> QueryAction_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::QueryAction, Pred> QueryAction_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::QueryAction, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::QueryInputAction> QueryInputAction_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::QueryInputAction, Pred> QueryInputAction_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::QueryInputAction, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Transition> Transition_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Transition, Pred> Transition_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Transition, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::State> State_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::State, Pred> State_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::State, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::StateBase> StateBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::StateBase, Pred> StateBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::StateBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::BranchState> BranchState_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::BranchState, Pred> BranchState_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::BranchState, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::BranchTransition> BranchTransition_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::BranchTransition, Pred> BranchTransition_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::BranchTransition, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::LoopState> LoopState_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::LoopState, Pred> LoopState_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::LoopState, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::DoWhileState> DoWhileState_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::DoWhileState, Pred> DoWhileState_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::DoWhileState, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ForState> ForState_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ForState, Pred> ForState_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ForState, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::WhileState> WhileState_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::WhileState, Pred> WhileState_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::WhileState, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::LoopTransition> LoopTransition_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::LoopTransition, Pred> LoopTransition_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::LoopTransition, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Terminal> Terminal_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Terminal, Pred> Terminal_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Terminal, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::TerminalTransition> TerminalTransition_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::TerminalTransition, Pred> TerminalTransition_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::TerminalTransition, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Effect> Effect_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Effect, Pred> Effect_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Effect, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::EffectBase> EffectBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::EffectBase, Pred> EffectBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::EffectBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::InputEffect> InputEffect_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::InputEffect, Pred> InputEffect_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::InputEffect, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::TerminalEffect> TerminalEffect_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::TerminalEffect, Pred> TerminalEffect_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::TerminalEffect, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::ComponentAssembly> parent() const;

		static ::Uml::Class meta;
		static ::Uml::CompositionChildRole meta_Variable_children;
		static ::Uml::CompositionChildRole meta_TerminalTransition_children;
		static ::Uml::CompositionChildRole meta_Terminal_children;
		static ::Uml::CompositionChildRole meta_TerminalEffect_children;
		static ::Uml::CompositionChildRole meta_StateBase_children;
		static ::Uml::CompositionChildRole meta_BranchTransition_children;
		static ::Uml::CompositionChildRole meta_Transition_children;
		static ::Uml::CompositionChildRole meta_LoopTransition_children;
		static ::Uml::CompositionChildRole meta_Finish_children;
		static ::Uml::CompositionChildRole meta_BehaviorInputAction_children;
		static ::Uml::CompositionChildRole meta_ActionBase_children;
		static ::Uml::CompositionChildRole meta_InputEffect_children;
		static ::Uml::CompositionChildRole meta_Effect_children;
		static ::Uml::CompositionChildRole meta_QueryInputAction_children;

	};

	class CQML_Export TopLevelBehavior :  public BehaviorModel {
	public:
		TopLevelBehavior();
		TopLevelBehavior(::Udm::ObjectImpl *impl);
		TopLevelBehavior(const TopLevelBehavior &master);

#ifdef UDM_RVALUE
		TopLevelBehavior(TopLevelBehavior &&master);

		static TopLevelBehavior Cast(::Udm::Object &&a);
		TopLevelBehavior& operator=(TopLevelBehavior &&a);

#endif
		static TopLevelBehavior Cast(const ::Udm::Object &a);
		static TopLevelBehavior Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		TopLevelBehavior CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< TopLevelBehavior> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< TopLevelBehavior, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< TopLevelBehavior, Pred>(impl); };
		TopLevelBehavior CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< TopLevelBehavior> Derived();
		template <class Pred> ::Udm::DerivedAttr< TopLevelBehavior, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< TopLevelBehavior, Pred>(impl); };
		::Udm::ArchetypeAttr< TopLevelBehavior> Archetype() const;
		::Udm::ChildrenAttr< ::CQML::MultiInput> MultiInput_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MultiInput, Pred> MultiInput_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MultiInput, Pred>(impl, meta_MultiInput_children); };
		::Udm::ChildrenAttr< ::CQML::Input> Input_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Input, Pred> Input_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Input, Pred>(impl, meta_Input_children); };
		::Udm::ChildrenAttr< ::CQML::QueryInput> QueryInput_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::QueryInput, Pred> QueryInput_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::QueryInput, Pred>(impl, meta_QueryInput_children); };
		::Udm::ChildrenAttr< ::CQML::PeriodicEvent> PeriodicEvent_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PeriodicEvent, Pred> PeriodicEvent_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PeriodicEvent, Pred>(impl, meta_PeriodicEvent_children); };
		::Udm::ChildrenAttr< ::CQML::ApplicationTask> ApplicationTask_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ApplicationTask, Pred> ApplicationTask_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ApplicationTask, Pred>(impl, meta_ApplicationTask_children); };
		::Udm::ChildAttr< ::CQML::Environment> Environment_child() const;
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::MultiInputBase> MultiInputBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MultiInputBase, Pred> MultiInputBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MultiInputBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::SingleInputBase> SingleInputBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::SingleInputBase, Pred> SingleInputBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::SingleInputBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Environment> Environment_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Environment, Pred> Environment_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Environment, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::PeriodicEvent> PeriodicEvent_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PeriodicEvent, Pred> PeriodicEvent_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PeriodicEvent, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ApplicationTask> ApplicationTask_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ApplicationTask, Pred> ApplicationTask_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ApplicationTask, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Input> Input_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Input, Pred> Input_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Input, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::MultiInput> MultiInput_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MultiInput, Pred> MultiInput_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MultiInput, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::QueryInput> QueryInput_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::QueryInput, Pred> QueryInput_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::QueryInput, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::ComponentAssembly> parent() const;

		static ::Uml::Class meta;
		static ::Uml::CompositionChildRole meta_MultiInput_children;
		static ::Uml::CompositionChildRole meta_Input_children;
		static ::Uml::CompositionChildRole meta_QueryInput_children;
		static ::Uml::CompositionChildRole meta_PeriodicEvent_children;
		static ::Uml::CompositionChildRole meta_ApplicationTask_children;
		static ::Uml::CompositionChildRole meta_Environment_child;

	};

	class CQML_Export Component :  public ComponentBase,  public Manageable,  public NamedType,  public SupportsInterfaces,  public TopLevelBehavior {
	public:
		Component();
		Component(::Udm::ObjectImpl *impl);
		Component(const Component &master);

#ifdef UDM_RVALUE
		Component(Component &&master);

		static Component Cast(::Udm::Object &&a);
		Component& operator=(Component &&a);

#endif
		static Component Cast(const ::Udm::Object &a);
		static Component Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Component CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Component> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Component, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Component, Pred>(impl); };
		Component CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Component> Derived();
		template <class Pred> ::Udm::DerivedAttr< Component, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Component, Pred>(impl); };
		::Udm::ArchetypeAttr< Component> Archetype() const;
		::Udm::StringAttr label() const;
		::Udm::StringAttr UUID() const;
		::Udm::AClassAssocAttr< AssemblyselectRequirement, Requirement> dstAssemblyselectRequirement() const;
		template <class Pred> ::Udm::AClassAssocAttr< AssemblyselectRequirement, Requirement, Pred> dstAssemblyselectRequirement_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< AssemblyselectRequirement, Requirement, Pred>(impl, meta_dstAssemblyselectRequirement, meta_dstAssemblyselectRequirement_rev); };
		::Udm::AClassAssocAttr< AssemblyConfigProperty, Property> dstAssemblyConfigProperty() const;
		template <class Pred> ::Udm::AClassAssocAttr< AssemblyConfigProperty, Property, Pred> dstAssemblyConfigProperty_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< AssemblyConfigProperty, Property, Pred>(impl, meta_dstAssemblyConfigProperty, meta_dstAssemblyConfigProperty_rev); };
		::Udm::AssocAttr< ComponentRef> referedbyComponentRef() const;
		template <class Pred> ::Udm::AssocAttr< ComponentRef, Pred> referedbyComponentRef_sorted(const Pred &) const { return ::Udm::AssocAttr< ComponentRef, Pred>(impl, meta_referedbyComponentRef); };
		::Udm::AssocAttr< CompRef> referedbyCompRef() const;
		template <class Pred> ::Udm::AssocAttr< CompRef, Pred> referedbyCompRef_sorted(const Pred &) const { return ::Udm::AssocAttr< CompRef, Pred>(impl, meta_referedbyCompRef); };
		::Udm::ChildrenAttr< ::CQML::Port> Port_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Port, Pred> Port_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Port, Pred>(impl, meta_Port_children); };
		::Udm::ChildrenAttr< ::CQML::ReadonlyAttribute> ReadonlyAttribute_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ReadonlyAttribute, Pred> ReadonlyAttribute_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ReadonlyAttribute, Pred>(impl, meta_ReadonlyAttribute_children); };
		::Udm::ChildrenAttr< ::CQML::WorkerType> WorkerType_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::WorkerType, Pred> WorkerType_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::WorkerType, Pred>(impl, meta_WorkerType_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Taggable> Taggable_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Taggable, Pred> Taggable_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Taggable, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ReadonlyAttribute> ReadonlyAttribute_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ReadonlyAttribute, Pred> ReadonlyAttribute_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ReadonlyAttribute, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Attribute> Attribute_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Attribute, Pred> Attribute_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Attribute, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::OutEventPort> OutEventPort_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::OutEventPort, Pred> OutEventPort_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::OutEventPort, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Port> Port_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Port, Pred> Port_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Port, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ProvidedRequestPort> ProvidedRequestPort_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ProvidedRequestPort, Pred> ProvidedRequestPort_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ProvidedRequestPort, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::RequiredRequestPort> RequiredRequestPort_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::RequiredRequestPort, Pred> RequiredRequestPort_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::RequiredRequestPort, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::InEventPort> InEventPort_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::InEventPort, Pred> InEventPort_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::InEventPort, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::CommonPortAttrs> CommonPortAttrs_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::CommonPortAttrs, Pred> CommonPortAttrs_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::CommonPortAttrs, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::GraphVertex> GraphVertex_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::GraphVertex, Pred> GraphVertex_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::GraphVertex, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::WorkerType> WorkerType_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::WorkerType, Pred> WorkerType_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::WorkerType, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::ComponentAssembly> ComponentAssembly_parent() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_label;
		static ::Uml::Attribute meta_UUID;
		static ::Uml::AssociationRole meta_dstAssemblyselectRequirement;
		static ::Uml::AssociationRole meta_dstAssemblyselectRequirement_rev;
		static ::Uml::AssociationRole meta_dstAssemblyConfigProperty;
		static ::Uml::AssociationRole meta_dstAssemblyConfigProperty_rev;
		static ::Uml::AssociationRole meta_referedbyComponentRef;
		static ::Uml::AssociationRole meta_referedbyCompRef;
		static ::Uml::CompositionChildRole meta_Port_children;
		static ::Uml::CompositionChildRole meta_ReadonlyAttribute_children;
		static ::Uml::CompositionChildRole meta_WorkerType_children;
		static ::Uml::CompositionParentRole meta_ComponentAssembly_parent;

	};

	class CQML_Export BehaviorInputAction :  public MgaObject {
	public:
		BehaviorInputAction();
		BehaviorInputAction(::Udm::ObjectImpl *impl);
		BehaviorInputAction(const BehaviorInputAction &master);

#ifdef UDM_RVALUE
		BehaviorInputAction(BehaviorInputAction &&master);

		static BehaviorInputAction Cast(::Udm::Object &&a);
		BehaviorInputAction& operator=(BehaviorInputAction &&a);

#endif
		static BehaviorInputAction Cast(const ::Udm::Object &a);
		static BehaviorInputAction Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		BehaviorInputAction CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< BehaviorInputAction> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< BehaviorInputAction, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< BehaviorInputAction, Pred>(impl); };
		BehaviorInputAction CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< BehaviorInputAction> Derived();
		template <class Pred> ::Udm::DerivedAttr< BehaviorInputAction, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< BehaviorInputAction, Pred>(impl); };
		::Udm::ArchetypeAttr< BehaviorInputAction> Archetype() const;
		::Udm::AClassPointerAttr< InputEffect, StateBase> dstInputEffect() const;
		::Udm::AClassPointerAttr< Finish, StateBase> srcFinish() const;
		::Udm::ChildrenAttr< ::CQML::Property> Property_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Property, Pred> Property_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Property, Pred>(impl, meta_Property_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Property> Property_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Property, Pred> Property_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Property, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::BehaviorModel> BehaviorModel_parent() const;
		::Udm::ParentAttr< ::CQML::BehaviorModel> parent() const;

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_dstInputEffect;
		static ::Uml::AssociationRole meta_dstInputEffect_rev;
		static ::Uml::AssociationRole meta_srcFinish;
		static ::Uml::AssociationRole meta_srcFinish_rev;
		static ::Uml::CompositionChildRole meta_Property_children;
		static ::Uml::CompositionParentRole meta_BehaviorModel_parent;

	};

	class CQML_Export InputAction :  public BehaviorInputAction {
	public:
		InputAction();
		InputAction(::Udm::ObjectImpl *impl);
		InputAction(const InputAction &master);

#ifdef UDM_RVALUE
		InputAction(InputAction &&master);

		static InputAction Cast(::Udm::Object &&a);
		InputAction& operator=(InputAction &&a);

#endif
		static InputAction Cast(const ::Udm::Object &a);
		static InputAction Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		InputAction CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< InputAction> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< InputAction, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< InputAction, Pred>(impl); };
		InputAction CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< InputAction> Derived();
		template <class Pred> ::Udm::DerivedAttr< InputAction, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< InputAction, Pred>(impl); };
		::Udm::ArchetypeAttr< InputAction> Archetype() const;
		::Udm::AClassPointerAttr< Input, SingleInputBase> srcInput() const;
		::Udm::ParentAttr< ::CQML::BehaviorModel> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_srcInput;
		static ::Uml::AssociationRole meta_srcInput_rev;

	};

	class CQML_Export MultiInputAction :  public BehaviorInputAction {
	public:
		MultiInputAction();
		MultiInputAction(::Udm::ObjectImpl *impl);
		MultiInputAction(const MultiInputAction &master);

#ifdef UDM_RVALUE
		MultiInputAction(MultiInputAction &&master);

		static MultiInputAction Cast(::Udm::Object &&a);
		MultiInputAction& operator=(MultiInputAction &&a);

#endif
		static MultiInputAction Cast(const ::Udm::Object &a);
		static MultiInputAction Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		MultiInputAction CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< MultiInputAction> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< MultiInputAction, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< MultiInputAction, Pred>(impl); };
		MultiInputAction CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< MultiInputAction> Derived();
		template <class Pred> ::Udm::DerivedAttr< MultiInputAction, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< MultiInputAction, Pred>(impl); };
		::Udm::ArchetypeAttr< MultiInputAction> Archetype() const;
		::Udm::AClassPointerAttr< MultiInput, MultiInputBase> srcMultiInput() const;
		::Udm::ParentAttr< ::CQML::BehaviorModel> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_srcMultiInput;
		static ::Uml::AssociationRole meta_srcMultiInput_rev;

	};

	class CQML_Export ActionBase :  public MgaObject {
	public:
		ActionBase();
		ActionBase(::Udm::ObjectImpl *impl);
		ActionBase(const ActionBase &master);

#ifdef UDM_RVALUE
		ActionBase(ActionBase &&master);

		static ActionBase Cast(::Udm::Object &&a);
		ActionBase& operator=(ActionBase &&a);

#endif
		static ActionBase Cast(const ::Udm::Object &a);
		static ActionBase Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ActionBase CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ActionBase> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ActionBase, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ActionBase, Pred>(impl); };
		ActionBase CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ActionBase> Derived();
		template <class Pred> ::Udm::DerivedAttr< ActionBase, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ActionBase, Pred>(impl); };
		::Udm::ArchetypeAttr< ActionBase> Archetype() const;
		::Udm::AClassPointerAttr< Effect, StateBase> dstEffect() const;
		::Udm::AClassPointerAttr< Transition, State> srcTransition() const;
		::Udm::AClassPointerAttr< BranchTransition, BranchState> srcBranchTransition() const;
		::Udm::AClassPointerAttr< LoopTransition, LoopState> srcLoopTransition() const;
		::Udm::ChildrenAttr< ::CQML::Property> Property_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Property, Pred> Property_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Property, Pred>(impl, meta_Property_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Property> Property_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Property, Pred> Property_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Property, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::BehaviorModel> BehaviorModel_parent() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_dstEffect;
		static ::Uml::AssociationRole meta_dstEffect_rev;
		static ::Uml::AssociationRole meta_srcTransition;
		static ::Uml::AssociationRole meta_srcTransition_rev;
		static ::Uml::AssociationRole meta_srcBranchTransition;
		static ::Uml::AssociationRole meta_srcBranchTransition_rev;
		static ::Uml::AssociationRole meta_srcLoopTransition;
		static ::Uml::AssociationRole meta_srcLoopTransition_rev;
		static ::Uml::CompositionChildRole meta_Property_children;
		static ::Uml::CompositionParentRole meta_BehaviorModel_parent;

	};

	class CQML_Export Action :  public ActionBase {
	public:
		Action();
		Action(::Udm::ObjectImpl *impl);
		Action(const Action &master);

#ifdef UDM_RVALUE
		Action(Action &&master);

		static Action Cast(::Udm::Object &&a);
		Action& operator=(Action &&a);

#endif
		static Action Cast(const ::Udm::Object &a);
		static Action Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Action CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Action> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Action, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Action, Pred>(impl); };
		Action CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Action> Derived();
		template <class Pred> ::Udm::DerivedAttr< Action, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Action, Pred>(impl); };
		::Udm::ArchetypeAttr< Action> Archetype() const;
		::Udm::IntegerAttr Duration() const;
		::Udm::BooleanAttr LogAction() const;
		::Udm::ParentAttr< ::CQML::Worker> Worker_parent() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_Duration;
		static ::Uml::Attribute meta_LogAction;
		static ::Uml::CompositionParentRole meta_Worker_parent;

	};

	class CQML_Export OutputAction :  public ActionBase {
	public:
		OutputAction();
		OutputAction(::Udm::ObjectImpl *impl);
		OutputAction(const OutputAction &master);

#ifdef UDM_RVALUE
		OutputAction(OutputAction &&master);

		static OutputAction Cast(::Udm::Object &&a);
		OutputAction& operator=(OutputAction &&a);

#endif
		static OutputAction Cast(const ::Udm::Object &a);
		static OutputAction Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		OutputAction CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< OutputAction> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< OutputAction, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< OutputAction, Pred>(impl); };
		OutputAction CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< OutputAction> Derived();
		template <class Pred> ::Udm::DerivedAttr< OutputAction, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< OutputAction, Pred>(impl); };
		::Udm::ArchetypeAttr< OutputAction> Archetype() const;
		::Udm::ParentAttr< ::CQML::BehaviorModel> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;

	};

	class CQML_Export Finish :  public MgaObject {
	public:
		Finish();
		Finish(::Udm::ObjectImpl *impl);
		Finish(const Finish &master);

#ifdef UDM_RVALUE
		Finish(Finish &&master);

		static Finish Cast(::Udm::Object &&a);
		Finish& operator=(Finish &&a);

#endif
		static Finish Cast(const ::Udm::Object &a);
		static Finish Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Finish CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Finish> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Finish, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Finish, Pred>(impl); };
		Finish CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Finish> Derived();
		template <class Pred> ::Udm::DerivedAttr< Finish, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Finish, Pred>(impl); };
		::Udm::ArchetypeAttr< Finish> Archetype() const;
		::Udm::ParentAttr< ::CQML::BehaviorModel> BehaviorModel_parent() const;
		::Udm::ParentAttr< ::CQML::BehaviorModel> parent() const;
		::Udm::AssocEndAttr< ::CQML::StateBase> srcFinish_end() const;
		::Udm::AssocEndAttr< ::CQML::BehaviorInputAction> dstFinish_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_BehaviorModel_parent;
		static ::Uml::AssociationRole meta_srcFinish_end_;
		static ::Uml::AssociationRole meta_dstFinish_end_;

	};

	class CQML_Export QueryAction :  public ActionBase {
	public:
		QueryAction();
		QueryAction(::Udm::ObjectImpl *impl);
		QueryAction(const QueryAction &master);

#ifdef UDM_RVALUE
		QueryAction(QueryAction &&master);

		static QueryAction Cast(::Udm::Object &&a);
		QueryAction& operator=(QueryAction &&a);

#endif
		static QueryAction Cast(const ::Udm::Object &a);
		static QueryAction Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		QueryAction CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< QueryAction> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< QueryAction, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< QueryAction, Pred>(impl); };
		QueryAction CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< QueryAction> Derived();
		template <class Pred> ::Udm::DerivedAttr< QueryAction, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< QueryAction, Pred>(impl); };
		::Udm::ArchetypeAttr< QueryAction> Archetype() const;
		::Udm::ParentAttr< ::CQML::BehaviorModel> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;

	};

	class CQML_Export QueryInputAction :  public MgaObject {
	public:
		QueryInputAction();
		QueryInputAction(::Udm::ObjectImpl *impl);
		QueryInputAction(const QueryInputAction &master);

#ifdef UDM_RVALUE
		QueryInputAction(QueryInputAction &&master);

		static QueryInputAction Cast(::Udm::Object &&a);
		QueryInputAction& operator=(QueryInputAction &&a);

#endif
		static QueryInputAction Cast(const ::Udm::Object &a);
		static QueryInputAction Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		QueryInputAction CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< QueryInputAction> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< QueryInputAction, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< QueryInputAction, Pred>(impl); };
		QueryInputAction CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< QueryInputAction> Derived();
		template <class Pred> ::Udm::DerivedAttr< QueryInputAction, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< QueryInputAction, Pred>(impl); };
		::Udm::ArchetypeAttr< QueryInputAction> Archetype() const;
		::Udm::AClassPointerAttr< QueryInput, QueryInputBase> srcQueryInput() const;
		::Udm::ChildrenAttr< ::CQML::Property> Property_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Property, Pred> Property_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Property, Pred>(impl, meta_Property_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Property> Property_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Property, Pred> Property_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Property, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::BehaviorModel> BehaviorModel_parent() const;
		::Udm::ParentAttr< ::CQML::BehaviorModel> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_srcQueryInput;
		static ::Uml::AssociationRole meta_srcQueryInput_rev;
		static ::Uml::CompositionChildRole meta_Property_children;
		static ::Uml::CompositionParentRole meta_BehaviorModel_parent;

	};

	class CQML_Export Environment :  public MultiInputBase {
	public:
		Environment();
		Environment(::Udm::ObjectImpl *impl);
		Environment(const Environment &master);

#ifdef UDM_RVALUE
		Environment(Environment &&master);

		static Environment Cast(::Udm::Object &&a);
		Environment& operator=(Environment &&a);

#endif
		static Environment Cast(const ::Udm::Object &a);
		static Environment Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Environment CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Environment> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Environment, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Environment, Pred>(impl); };
		Environment CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Environment> Derived();
		template <class Pred> ::Udm::DerivedAttr< Environment, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Environment, Pred>(impl); };
		::Udm::ArchetypeAttr< Environment> Archetype() const;
		::Udm::ParentAttr< ::CQML::TopLevelBehavior> TopLevelBehavior_parent() const;
		::Udm::ParentAttr< ::CQML::TopLevelBehavior> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_TopLevelBehavior_parent;

	};

	class CQML_Export PeriodicEvent :  public SingleInputBase {
	public:
		PeriodicEvent();
		PeriodicEvent(::Udm::ObjectImpl *impl);
		PeriodicEvent(const PeriodicEvent &master);

#ifdef UDM_RVALUE
		PeriodicEvent(PeriodicEvent &&master);

		static PeriodicEvent Cast(::Udm::Object &&a);
		PeriodicEvent& operator=(PeriodicEvent &&a);

#endif
		static PeriodicEvent Cast(const ::Udm::Object &a);
		static PeriodicEvent Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		PeriodicEvent CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< PeriodicEvent> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< PeriodicEvent, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< PeriodicEvent, Pred>(impl); };
		PeriodicEvent CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< PeriodicEvent> Derived();
		template <class Pred> ::Udm::DerivedAttr< PeriodicEvent, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< PeriodicEvent, Pred>(impl); };
		::Udm::ArchetypeAttr< PeriodicEvent> Archetype() const;
		::Udm::StringAttr Hertz() const;
		::Udm::StringAttr Distribution() const;
		::Udm::ParentAttr< ::CQML::TopLevelBehavior> TopLevelBehavior_parent() const;
		::Udm::ParentAttr< ::CQML::TopLevelBehavior> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_Hertz;
		static ::Uml::Attribute meta_Distribution;
		static ::Uml::CompositionParentRole meta_TopLevelBehavior_parent;

	};

	class CQML_Export ApplicationTask :  public SingleInputBase {
	public:
		ApplicationTask();
		ApplicationTask(::Udm::ObjectImpl *impl);
		ApplicationTask(const ApplicationTask &master);

#ifdef UDM_RVALUE
		ApplicationTask(ApplicationTask &&master);

		static ApplicationTask Cast(::Udm::Object &&a);
		ApplicationTask& operator=(ApplicationTask &&a);

#endif
		static ApplicationTask Cast(const ::Udm::Object &a);
		static ApplicationTask Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ApplicationTask CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ApplicationTask> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ApplicationTask, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ApplicationTask, Pred>(impl); };
		ApplicationTask CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ApplicationTask> Derived();
		template <class Pred> ::Udm::DerivedAttr< ApplicationTask, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ApplicationTask, Pred>(impl); };
		::Udm::ArchetypeAttr< ApplicationTask> Archetype() const;
		::Udm::ParentAttr< ::CQML::TopLevelBehavior> TopLevelBehavior_parent() const;
		::Udm::ParentAttr< ::CQML::TopLevelBehavior> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_TopLevelBehavior_parent;

	};

	class CQML_Export Input :  public MgaObject {
	public:
		Input();
		Input(::Udm::ObjectImpl *impl);
		Input(const Input &master);

#ifdef UDM_RVALUE
		Input(Input &&master);

		static Input Cast(::Udm::Object &&a);
		Input& operator=(Input &&a);

#endif
		static Input Cast(const ::Udm::Object &a);
		static Input Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Input CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Input> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Input, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Input, Pred>(impl); };
		Input CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Input> Derived();
		template <class Pred> ::Udm::DerivedAttr< Input, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Input, Pred>(impl); };
		::Udm::ArchetypeAttr< Input> Archetype() const;
		::Udm::ParentAttr< ::CQML::TopLevelBehavior> TopLevelBehavior_parent() const;
		::Udm::ParentAttr< ::CQML::TopLevelBehavior> parent() const;
		::Udm::AssocEndAttr< ::CQML::SingleInputBase> srcInput_end() const;
		::Udm::AssocEndAttr< ::CQML::InputAction> dstInput_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_TopLevelBehavior_parent;
		static ::Uml::AssociationRole meta_srcInput_end_;
		static ::Uml::AssociationRole meta_dstInput_end_;

	};

	class CQML_Export MultiInput :  public MgaObject {
	public:
		MultiInput();
		MultiInput(::Udm::ObjectImpl *impl);
		MultiInput(const MultiInput &master);

#ifdef UDM_RVALUE
		MultiInput(MultiInput &&master);

		static MultiInput Cast(::Udm::Object &&a);
		MultiInput& operator=(MultiInput &&a);

#endif
		static MultiInput Cast(const ::Udm::Object &a);
		static MultiInput Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		MultiInput CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< MultiInput> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< MultiInput, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< MultiInput, Pred>(impl); };
		MultiInput CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< MultiInput> Derived();
		template <class Pred> ::Udm::DerivedAttr< MultiInput, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< MultiInput, Pred>(impl); };
		::Udm::ArchetypeAttr< MultiInput> Archetype() const;
		::Udm::ParentAttr< ::CQML::TopLevelBehavior> TopLevelBehavior_parent() const;
		::Udm::ParentAttr< ::CQML::TopLevelBehavior> parent() const;
		::Udm::AssocEndAttr< ::CQML::MultiInputBase> srcMultiInput_end() const;
		::Udm::AssocEndAttr< ::CQML::MultiInputAction> dstMultiInput_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_TopLevelBehavior_parent;
		static ::Uml::AssociationRole meta_srcMultiInput_end_;
		static ::Uml::AssociationRole meta_dstMultiInput_end_;

	};

	class CQML_Export QueryInput :  public MgaObject {
	public:
		QueryInput();
		QueryInput(::Udm::ObjectImpl *impl);
		QueryInput(const QueryInput &master);

#ifdef UDM_RVALUE
		QueryInput(QueryInput &&master);

		static QueryInput Cast(::Udm::Object &&a);
		QueryInput& operator=(QueryInput &&a);

#endif
		static QueryInput Cast(const ::Udm::Object &a);
		static QueryInput Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		QueryInput CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< QueryInput> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< QueryInput, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< QueryInput, Pred>(impl); };
		QueryInput CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< QueryInput> Derived();
		template <class Pred> ::Udm::DerivedAttr< QueryInput, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< QueryInput, Pred>(impl); };
		::Udm::ArchetypeAttr< QueryInput> Archetype() const;
		::Udm::ParentAttr< ::CQML::TopLevelBehavior> TopLevelBehavior_parent() const;
		::Udm::ParentAttr< ::CQML::TopLevelBehavior> parent() const;
		::Udm::AssocEndAttr< ::CQML::QueryInputBase> srcQueryInput_end() const;
		::Udm::AssocEndAttr< ::CQML::QueryInputAction> dstQueryInput_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_TopLevelBehavior_parent;
		static ::Uml::AssociationRole meta_srcQueryInput_end_;
		static ::Uml::AssociationRole meta_dstQueryInput_end_;

	};

	class CQML_Export Transition :  public MgaObject {
	public:
		Transition();
		Transition(::Udm::ObjectImpl *impl);
		Transition(const Transition &master);

#ifdef UDM_RVALUE
		Transition(Transition &&master);

		static Transition Cast(::Udm::Object &&a);
		Transition& operator=(Transition &&a);

#endif
		static Transition Cast(const ::Udm::Object &a);
		static Transition Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Transition CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Transition> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Transition, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Transition, Pred>(impl); };
		Transition CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Transition> Derived();
		template <class Pred> ::Udm::DerivedAttr< Transition, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Transition, Pred>(impl); };
		::Udm::ArchetypeAttr< Transition> Archetype() const;
		::Udm::ParentAttr< ::CQML::BehaviorModel> BehaviorModel_parent() const;
		::Udm::ParentAttr< ::CQML::BehaviorModel> parent() const;
		::Udm::AssocEndAttr< ::CQML::State> srcTransition_end() const;
		::Udm::AssocEndAttr< ::CQML::ActionBase> dstTransition_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_BehaviorModel_parent;
		static ::Uml::AssociationRole meta_srcTransition_end_;
		static ::Uml::AssociationRole meta_dstTransition_end_;

	};

	class CQML_Export StateBase :  public MgaObject {
	public:
		StateBase();
		StateBase(::Udm::ObjectImpl *impl);
		StateBase(const StateBase &master);

#ifdef UDM_RVALUE
		StateBase(StateBase &&master);

		static StateBase Cast(::Udm::Object &&a);
		StateBase& operator=(StateBase &&a);

#endif
		static StateBase Cast(const ::Udm::Object &a);
		static StateBase Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		StateBase CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< StateBase> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< StateBase, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< StateBase, Pred>(impl); };
		StateBase CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< StateBase> Derived();
		template <class Pred> ::Udm::DerivedAttr< StateBase, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< StateBase, Pred>(impl); };
		::Udm::ArchetypeAttr< StateBase> Archetype() const;
		::Udm::AClassAssocAttr< InputEffect, BehaviorInputAction> srcInputEffect() const;
		template <class Pred> ::Udm::AClassAssocAttr< InputEffect, BehaviorInputAction, Pred> srcInputEffect_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< InputEffect, BehaviorInputAction, Pred>(impl, meta_srcInputEffect, meta_srcInputEffect_rev); };
		::Udm::AClassAssocAttr< Effect, ActionBase> srcEffect() const;
		template <class Pred> ::Udm::AClassAssocAttr< Effect, ActionBase, Pred> srcEffect_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< Effect, ActionBase, Pred>(impl, meta_srcEffect, meta_srcEffect_rev); };
		::Udm::AClassAssocAttr< Finish, BehaviorInputAction> dstFinish() const;
		template <class Pred> ::Udm::AClassAssocAttr< Finish, BehaviorInputAction, Pred> dstFinish_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< Finish, BehaviorInputAction, Pred>(impl, meta_dstFinish, meta_dstFinish_rev); };
		::Udm::AClassPointerAttr< TerminalEffect, Terminal> srcTerminalEffect() const;
		::Udm::ParentAttr< ::CQML::BehaviorModel> BehaviorModel_parent() const;
		::Udm::ParentAttr< ::CQML::BehaviorModel> parent() const;

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_srcInputEffect;
		static ::Uml::AssociationRole meta_srcInputEffect_rev;
		static ::Uml::AssociationRole meta_srcEffect;
		static ::Uml::AssociationRole meta_srcEffect_rev;
		static ::Uml::AssociationRole meta_dstFinish;
		static ::Uml::AssociationRole meta_dstFinish_rev;
		static ::Uml::AssociationRole meta_srcTerminalEffect;
		static ::Uml::AssociationRole meta_srcTerminalEffect_rev;
		static ::Uml::CompositionParentRole meta_BehaviorModel_parent;

	};

	class CQML_Export State :  public StateBase {
	public:
		State();
		State(::Udm::ObjectImpl *impl);
		State(const State &master);

#ifdef UDM_RVALUE
		State(State &&master);

		static State Cast(::Udm::Object &&a);
		State& operator=(State &&a);

#endif
		static State Cast(const ::Udm::Object &a);
		static State Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		State CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< State> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< State, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< State, Pred>(impl); };
		State CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< State> Derived();
		template <class Pred> ::Udm::DerivedAttr< State, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< State, Pred>(impl); };
		::Udm::ArchetypeAttr< State> Archetype() const;
		::Udm::AClassPointerAttr< Transition, ActionBase> dstTransition() const;
		::Udm::AClassPointerAttr< TerminalTransition, Terminal> dstTerminalTransition() const;
		::Udm::ParentAttr< ::CQML::BehaviorModel> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_dstTransition;
		static ::Uml::AssociationRole meta_dstTransition_rev;
		static ::Uml::AssociationRole meta_dstTerminalTransition;
		static ::Uml::AssociationRole meta_dstTerminalTransition_rev;

	};

	class CQML_Export BranchState :  public StateBase {
	public:
		BranchState();
		BranchState(::Udm::ObjectImpl *impl);
		BranchState(const BranchState &master);

#ifdef UDM_RVALUE
		BranchState(BranchState &&master);

		static BranchState Cast(::Udm::Object &&a);
		BranchState& operator=(BranchState &&a);

#endif
		static BranchState Cast(const ::Udm::Object &a);
		static BranchState Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		BranchState CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< BranchState> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< BranchState, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< BranchState, Pred>(impl); };
		BranchState CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< BranchState> Derived();
		template <class Pred> ::Udm::DerivedAttr< BranchState, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< BranchState, Pred>(impl); };
		::Udm::ArchetypeAttr< BranchState> Archetype() const;
		::Udm::AClassAssocAttr< BranchTransition, ActionBase> dstBranchTransition() const;
		template <class Pred> ::Udm::AClassAssocAttr< BranchTransition, ActionBase, Pred> dstBranchTransition_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< BranchTransition, ActionBase, Pred>(impl, meta_dstBranchTransition, meta_dstBranchTransition_rev); };
		::Udm::ParentAttr< ::CQML::BehaviorModel> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_dstBranchTransition;
		static ::Uml::AssociationRole meta_dstBranchTransition_rev;

	};

	class CQML_Export BranchTransition :  public MgaObject {
	public:
		BranchTransition();
		BranchTransition(::Udm::ObjectImpl *impl);
		BranchTransition(const BranchTransition &master);

#ifdef UDM_RVALUE
		BranchTransition(BranchTransition &&master);

		static BranchTransition Cast(::Udm::Object &&a);
		BranchTransition& operator=(BranchTransition &&a);

#endif
		static BranchTransition Cast(const ::Udm::Object &a);
		static BranchTransition Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		BranchTransition CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< BranchTransition> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< BranchTransition, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< BranchTransition, Pred>(impl); };
		BranchTransition CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< BranchTransition> Derived();
		template <class Pred> ::Udm::DerivedAttr< BranchTransition, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< BranchTransition, Pred>(impl); };
		::Udm::ArchetypeAttr< BranchTransition> Archetype() const;
		::Udm::StringAttr Condition() const;
		::Udm::ParentAttr< ::CQML::BehaviorModel> BehaviorModel_parent() const;
		::Udm::ParentAttr< ::CQML::BehaviorModel> parent() const;
		::Udm::AssocEndAttr< ::CQML::BranchState> srcBranchTransition_end() const;
		::Udm::AssocEndAttr< ::CQML::ActionBase> dstBranchTransition_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_Condition;
		static ::Uml::CompositionParentRole meta_BehaviorModel_parent;
		static ::Uml::AssociationRole meta_srcBranchTransition_end_;
		static ::Uml::AssociationRole meta_dstBranchTransition_end_;

	};

	class CQML_Export LoopState :  public StateBase {
	public:
		LoopState();
		LoopState(::Udm::ObjectImpl *impl);
		LoopState(const LoopState &master);

#ifdef UDM_RVALUE
		LoopState(LoopState &&master);

		static LoopState Cast(::Udm::Object &&a);
		LoopState& operator=(LoopState &&a);

#endif
		static LoopState Cast(const ::Udm::Object &a);
		static LoopState Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		LoopState CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< LoopState> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< LoopState, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< LoopState, Pred>(impl); };
		LoopState CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< LoopState> Derived();
		template <class Pred> ::Udm::DerivedAttr< LoopState, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< LoopState, Pred>(impl); };
		::Udm::ArchetypeAttr< LoopState> Archetype() const;
		::Udm::StringAttr LoopingCondition() const;
		::Udm::AClassPointerAttr< LoopTransition, ActionBase> dstLoopTransition() const;
		::Udm::ParentAttr< ::CQML::BehaviorModel> parent() const;

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_LoopingCondition;
		static ::Uml::AssociationRole meta_dstLoopTransition;
		static ::Uml::AssociationRole meta_dstLoopTransition_rev;

	};

	class CQML_Export DoWhileState :  public LoopState {
	public:
		DoWhileState();
		DoWhileState(::Udm::ObjectImpl *impl);
		DoWhileState(const DoWhileState &master);

#ifdef UDM_RVALUE
		DoWhileState(DoWhileState &&master);

		static DoWhileState Cast(::Udm::Object &&a);
		DoWhileState& operator=(DoWhileState &&a);

#endif
		static DoWhileState Cast(const ::Udm::Object &a);
		static DoWhileState Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		DoWhileState CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< DoWhileState> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< DoWhileState, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< DoWhileState, Pred>(impl); };
		DoWhileState CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< DoWhileState> Derived();
		template <class Pred> ::Udm::DerivedAttr< DoWhileState, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< DoWhileState, Pred>(impl); };
		::Udm::ArchetypeAttr< DoWhileState> Archetype() const;
		::Udm::ParentAttr< ::CQML::BehaviorModel> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;

	};

	class CQML_Export ForState :  public LoopState {
	public:
		ForState();
		ForState(::Udm::ObjectImpl *impl);
		ForState(const ForState &master);

#ifdef UDM_RVALUE
		ForState(ForState &&master);

		static ForState Cast(::Udm::Object &&a);
		ForState& operator=(ForState &&a);

#endif
		static ForState Cast(const ::Udm::Object &a);
		static ForState Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ForState CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ForState> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ForState, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ForState, Pred>(impl); };
		ForState CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ForState> Derived();
		template <class Pred> ::Udm::DerivedAttr< ForState, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ForState, Pred>(impl); };
		::Udm::ArchetypeAttr< ForState> Archetype() const;
		::Udm::StringAttr InitialCondition() const;
		::Udm::StringAttr IncrementExpr() const;
		::Udm::ParentAttr< ::CQML::BehaviorModel> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_InitialCondition;
		static ::Uml::Attribute meta_IncrementExpr;

	};

	class CQML_Export WhileState :  public LoopState {
	public:
		WhileState();
		WhileState(::Udm::ObjectImpl *impl);
		WhileState(const WhileState &master);

#ifdef UDM_RVALUE
		WhileState(WhileState &&master);

		static WhileState Cast(::Udm::Object &&a);
		WhileState& operator=(WhileState &&a);

#endif
		static WhileState Cast(const ::Udm::Object &a);
		static WhileState Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		WhileState CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< WhileState> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< WhileState, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< WhileState, Pred>(impl); };
		WhileState CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< WhileState> Derived();
		template <class Pred> ::Udm::DerivedAttr< WhileState, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< WhileState, Pred>(impl); };
		::Udm::ArchetypeAttr< WhileState> Archetype() const;
		::Udm::ParentAttr< ::CQML::BehaviorModel> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;

	};

	class CQML_Export LoopTransition :  public MgaObject {
	public:
		LoopTransition();
		LoopTransition(::Udm::ObjectImpl *impl);
		LoopTransition(const LoopTransition &master);

#ifdef UDM_RVALUE
		LoopTransition(LoopTransition &&master);

		static LoopTransition Cast(::Udm::Object &&a);
		LoopTransition& operator=(LoopTransition &&a);

#endif
		static LoopTransition Cast(const ::Udm::Object &a);
		static LoopTransition Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		LoopTransition CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< LoopTransition> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< LoopTransition, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< LoopTransition, Pred>(impl); };
		LoopTransition CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< LoopTransition> Derived();
		template <class Pred> ::Udm::DerivedAttr< LoopTransition, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< LoopTransition, Pred>(impl); };
		::Udm::ArchetypeAttr< LoopTransition> Archetype() const;
		::Udm::ParentAttr< ::CQML::BehaviorModel> BehaviorModel_parent() const;
		::Udm::ParentAttr< ::CQML::BehaviorModel> parent() const;
		::Udm::AssocEndAttr< ::CQML::LoopState> srcLoopTransition_end() const;
		::Udm::AssocEndAttr< ::CQML::ActionBase> dstLoopTransition_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_BehaviorModel_parent;
		static ::Uml::AssociationRole meta_srcLoopTransition_end_;
		static ::Uml::AssociationRole meta_dstLoopTransition_end_;

	};

	class CQML_Export Terminal :  public MgaObject {
	public:
		Terminal();
		Terminal(::Udm::ObjectImpl *impl);
		Terminal(const Terminal &master);

#ifdef UDM_RVALUE
		Terminal(Terminal &&master);

		static Terminal Cast(::Udm::Object &&a);
		Terminal& operator=(Terminal &&a);

#endif
		static Terminal Cast(const ::Udm::Object &a);
		static Terminal Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Terminal CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Terminal> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Terminal, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Terminal, Pred>(impl); };
		Terminal CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Terminal> Derived();
		template <class Pred> ::Udm::DerivedAttr< Terminal, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Terminal, Pred>(impl); };
		::Udm::ArchetypeAttr< Terminal> Archetype() const;
		::Udm::AClassAssocAttr< TerminalTransition, State> srcTerminalTransition() const;
		template <class Pred> ::Udm::AClassAssocAttr< TerminalTransition, State, Pred> srcTerminalTransition_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< TerminalTransition, State, Pred>(impl, meta_srcTerminalTransition, meta_srcTerminalTransition_rev); };
		::Udm::AClassPointerAttr< TerminalEffect, StateBase> dstTerminalEffect() const;
		::Udm::ParentAttr< ::CQML::BehaviorModel> BehaviorModel_parent() const;
		::Udm::ParentAttr< ::CQML::BehaviorModel> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_srcTerminalTransition;
		static ::Uml::AssociationRole meta_srcTerminalTransition_rev;
		static ::Uml::AssociationRole meta_dstTerminalEffect;
		static ::Uml::AssociationRole meta_dstTerminalEffect_rev;
		static ::Uml::CompositionParentRole meta_BehaviorModel_parent;

	};

	class CQML_Export TerminalTransition :  public MgaObject {
	public:
		TerminalTransition();
		TerminalTransition(::Udm::ObjectImpl *impl);
		TerminalTransition(const TerminalTransition &master);

#ifdef UDM_RVALUE
		TerminalTransition(TerminalTransition &&master);

		static TerminalTransition Cast(::Udm::Object &&a);
		TerminalTransition& operator=(TerminalTransition &&a);

#endif
		static TerminalTransition Cast(const ::Udm::Object &a);
		static TerminalTransition Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		TerminalTransition CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< TerminalTransition> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< TerminalTransition, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< TerminalTransition, Pred>(impl); };
		TerminalTransition CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< TerminalTransition> Derived();
		template <class Pred> ::Udm::DerivedAttr< TerminalTransition, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< TerminalTransition, Pred>(impl); };
		::Udm::ArchetypeAttr< TerminalTransition> Archetype() const;
		::Udm::ParentAttr< ::CQML::BehaviorModel> BehaviorModel_parent() const;
		::Udm::ParentAttr< ::CQML::BehaviorModel> parent() const;
		::Udm::AssocEndAttr< ::CQML::State> srcTerminalTransition_end() const;
		::Udm::AssocEndAttr< ::CQML::Terminal> dstTerminalTransition_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_BehaviorModel_parent;
		static ::Uml::AssociationRole meta_srcTerminalTransition_end_;
		static ::Uml::AssociationRole meta_dstTerminalTransition_end_;

	};

	class CQML_Export EffectBase :  public MgaObject {
	public:
		EffectBase();
		EffectBase(::Udm::ObjectImpl *impl);
		EffectBase(const EffectBase &master);

#ifdef UDM_RVALUE
		EffectBase(EffectBase &&master);

		static EffectBase Cast(::Udm::Object &&a);
		EffectBase& operator=(EffectBase &&a);

#endif
		static EffectBase Cast(const ::Udm::Object &a);
		static EffectBase Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		EffectBase CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< EffectBase> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< EffectBase, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< EffectBase, Pred>(impl); };
		EffectBase CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< EffectBase> Derived();
		template <class Pred> ::Udm::DerivedAttr< EffectBase, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< EffectBase, Pred>(impl); };
		::Udm::ArchetypeAttr< EffectBase> Archetype() const;
		::Udm::StringAttr Postcondition() const;
		::Udm::ParentAttr< ::CQML::BehaviorModel> parent() const;

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_Postcondition;

	};

	class CQML_Export Effect :  public EffectBase {
	public:
		Effect();
		Effect(::Udm::ObjectImpl *impl);
		Effect(const Effect &master);

#ifdef UDM_RVALUE
		Effect(Effect &&master);

		static Effect Cast(::Udm::Object &&a);
		Effect& operator=(Effect &&a);

#endif
		static Effect Cast(const ::Udm::Object &a);
		static Effect Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Effect CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Effect> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Effect, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Effect, Pred>(impl); };
		Effect CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Effect> Derived();
		template <class Pred> ::Udm::DerivedAttr< Effect, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Effect, Pred>(impl); };
		::Udm::ArchetypeAttr< Effect> Archetype() const;
		::Udm::ParentAttr< ::CQML::BehaviorModel> BehaviorModel_parent() const;
		::Udm::ParentAttr< ::CQML::BehaviorModel> parent() const;
		::Udm::AssocEndAttr< ::CQML::ActionBase> srcEffect_end() const;
		::Udm::AssocEndAttr< ::CQML::StateBase> dstEffect_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_BehaviorModel_parent;
		static ::Uml::AssociationRole meta_srcEffect_end_;
		static ::Uml::AssociationRole meta_dstEffect_end_;

	};

	class CQML_Export InputEffect :  public EffectBase {
	public:
		InputEffect();
		InputEffect(::Udm::ObjectImpl *impl);
		InputEffect(const InputEffect &master);

#ifdef UDM_RVALUE
		InputEffect(InputEffect &&master);

		static InputEffect Cast(::Udm::Object &&a);
		InputEffect& operator=(InputEffect &&a);

#endif
		static InputEffect Cast(const ::Udm::Object &a);
		static InputEffect Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		InputEffect CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< InputEffect> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< InputEffect, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< InputEffect, Pred>(impl); };
		InputEffect CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< InputEffect> Derived();
		template <class Pred> ::Udm::DerivedAttr< InputEffect, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< InputEffect, Pred>(impl); };
		::Udm::ArchetypeAttr< InputEffect> Archetype() const;
		::Udm::ParentAttr< ::CQML::BehaviorModel> BehaviorModel_parent() const;
		::Udm::ParentAttr< ::CQML::BehaviorModel> parent() const;
		::Udm::AssocEndAttr< ::CQML::BehaviorInputAction> srcInputEffect_end() const;
		::Udm::AssocEndAttr< ::CQML::StateBase> dstInputEffect_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_BehaviorModel_parent;
		static ::Uml::AssociationRole meta_srcInputEffect_end_;
		static ::Uml::AssociationRole meta_dstInputEffect_end_;

	};

	class CQML_Export TerminalEffect :  public EffectBase {
	public:
		TerminalEffect();
		TerminalEffect(::Udm::ObjectImpl *impl);
		TerminalEffect(const TerminalEffect &master);

#ifdef UDM_RVALUE
		TerminalEffect(TerminalEffect &&master);

		static TerminalEffect Cast(::Udm::Object &&a);
		TerminalEffect& operator=(TerminalEffect &&a);

#endif
		static TerminalEffect Cast(const ::Udm::Object &a);
		static TerminalEffect Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		TerminalEffect CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< TerminalEffect> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< TerminalEffect, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< TerminalEffect, Pred>(impl); };
		TerminalEffect CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< TerminalEffect> Derived();
		template <class Pred> ::Udm::DerivedAttr< TerminalEffect, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< TerminalEffect, Pred>(impl); };
		::Udm::ArchetypeAttr< TerminalEffect> Archetype() const;
		::Udm::ParentAttr< ::CQML::BehaviorModel> BehaviorModel_parent() const;
		::Udm::ParentAttr< ::CQML::BehaviorModel> parent() const;
		::Udm::AssocEndAttr< ::CQML::Terminal> srcTerminalEffect_end() const;
		::Udm::AssocEndAttr< ::CQML::StateBase> dstTerminalEffect_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_BehaviorModel_parent;
		static ::Uml::AssociationRole meta_srcTerminalEffect_end_;
		static ::Uml::AssociationRole meta_dstTerminalEffect_end_;

	};

	class CQML_Export QoSCharacteristicBase :  virtual  public MgaObject {
	public:
		QoSCharacteristicBase();
		QoSCharacteristicBase(::Udm::ObjectImpl *impl);
		QoSCharacteristicBase(const QoSCharacteristicBase &master);

#ifdef UDM_RVALUE
		QoSCharacteristicBase(QoSCharacteristicBase &&master);

		static QoSCharacteristicBase Cast(::Udm::Object &&a);
		QoSCharacteristicBase& operator=(QoSCharacteristicBase &&a);

#endif
		static QoSCharacteristicBase Cast(const ::Udm::Object &a);
		static QoSCharacteristicBase Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		QoSCharacteristicBase CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< QoSCharacteristicBase> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< QoSCharacteristicBase, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< QoSCharacteristicBase, Pred>(impl); };
		QoSCharacteristicBase CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< QoSCharacteristicBase> Derived();
		template <class Pred> ::Udm::DerivedAttr< QoSCharacteristicBase, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< QoSCharacteristicBase, Pred>(impl); };
		::Udm::ArchetypeAttr< QoSCharacteristicBase> Archetype() const;
		::Udm::AssocAttr< QoSCharRef> referedbyQoSCharRef() const;
		template <class Pred> ::Udm::AssocAttr< QoSCharRef, Pred> referedbyQoSCharRef_sorted(const Pred &) const { return ::Udm::AssocAttr< QoSCharRef, Pred>(impl, meta_referedbyQoSCharRef); };
		::Udm::ParentAttr< ::CQML::ComponentAssembly> ComponentAssembly_parent() const;
		::Udm::ParentAttr< ::Udm::Object> parent() const;

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_referedbyQoSCharRef;
		static ::Uml::CompositionParentRole meta_ComponentAssembly_parent;

	};

	class CQML_Export ComponentAssemblyQoSCharacteristic :  virtual  public QoSCharacteristicBase {
	public:
		ComponentAssemblyQoSCharacteristic();
		ComponentAssemblyQoSCharacteristic(::Udm::ObjectImpl *impl);
		ComponentAssemblyQoSCharacteristic(const ComponentAssemblyQoSCharacteristic &master);

#ifdef UDM_RVALUE
		ComponentAssemblyQoSCharacteristic(ComponentAssemblyQoSCharacteristic &&master);

		static ComponentAssemblyQoSCharacteristic Cast(::Udm::Object &&a);
		ComponentAssemblyQoSCharacteristic& operator=(ComponentAssemblyQoSCharacteristic &&a);

#endif
		static ComponentAssemblyQoSCharacteristic Cast(const ::Udm::Object &a);
		static ComponentAssemblyQoSCharacteristic Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ComponentAssemblyQoSCharacteristic CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ComponentAssemblyQoSCharacteristic> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ComponentAssemblyQoSCharacteristic, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ComponentAssemblyQoSCharacteristic, Pred>(impl); };
		ComponentAssemblyQoSCharacteristic CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ComponentAssemblyQoSCharacteristic> Derived();
		template <class Pred> ::Udm::DerivedAttr< ComponentAssemblyQoSCharacteristic, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ComponentAssemblyQoSCharacteristic, Pred>(impl); };
		::Udm::ArchetypeAttr< ComponentAssemblyQoSCharacteristic> Archetype() const;
		::Udm::AClassAssocAttr< ComponentAssemblyQoS, ComponentAssemblyBase> srcComponentAssemblyQoS() const;
		template <class Pred> ::Udm::AClassAssocAttr< ComponentAssemblyQoS, ComponentAssemblyBase, Pred> srcComponentAssemblyQoS_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< ComponentAssemblyQoS, ComponentAssemblyBase, Pred>(impl, meta_srcComponentAssemblyQoS, meta_srcComponentAssemblyQoS_rev); };
		::Udm::ParentAttr< ::CQML::ComponentImplementationContainer> AssemblyQoSComposition_ComponentImplementationContainer_parent() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_srcComponentAssemblyQoS;
		static ::Uml::AssociationRole meta_srcComponentAssemblyQoS_rev;
		static ::Uml::CompositionParentRole meta_AssemblyQoSComposition_ComponentImplementationContainer_parent;

	};

	class CQML_Export ConnectionQoSCharacteristic :  virtual  public QoSCharacteristicBase {
	public:
		ConnectionQoSCharacteristic();
		ConnectionQoSCharacteristic(::Udm::ObjectImpl *impl);
		ConnectionQoSCharacteristic(const ConnectionQoSCharacteristic &master);

#ifdef UDM_RVALUE
		ConnectionQoSCharacteristic(ConnectionQoSCharacteristic &&master);

		static ConnectionQoSCharacteristic Cast(::Udm::Object &&a);
		ConnectionQoSCharacteristic& operator=(ConnectionQoSCharacteristic &&a);

#endif
		static ConnectionQoSCharacteristic Cast(const ::Udm::Object &a);
		static ConnectionQoSCharacteristic Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ConnectionQoSCharacteristic CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ConnectionQoSCharacteristic> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ConnectionQoSCharacteristic, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ConnectionQoSCharacteristic, Pred>(impl); };
		ConnectionQoSCharacteristic CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ConnectionQoSCharacteristic> Derived();
		template <class Pred> ::Udm::DerivedAttr< ConnectionQoSCharacteristic, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ConnectionQoSCharacteristic, Pred>(impl); };
		::Udm::ArchetypeAttr< ConnectionQoSCharacteristic> Archetype() const;
		::Udm::AClassAssocAttr< QoSReq, QoSConnector> srcQoSReq() const;
		template <class Pred> ::Udm::AClassAssocAttr< QoSReq, QoSConnector, Pred> srcQoSReq_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< QoSReq, QoSConnector, Pred>(impl, meta_srcQoSReq, meta_srcQoSReq_rev); };
		::Udm::ParentAttr< ::Udm::Object> parent() const;

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_srcQoSReq;
		static ::Uml::AssociationRole meta_srcQoSReq_rev;

	};

	class CQML_Export CIAOEvents :  public ConnectionQoSCharacteristic {
	public:
		CIAOEvents();
		CIAOEvents(::Udm::ObjectImpl *impl);
		CIAOEvents(const CIAOEvents &master);

#ifdef UDM_RVALUE
		CIAOEvents(CIAOEvents &&master);

		static CIAOEvents Cast(::Udm::Object &&a);
		CIAOEvents& operator=(CIAOEvents &&a);

#endif
		static CIAOEvents Cast(const ::Udm::Object &a);
		static CIAOEvents Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		CIAOEvents CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< CIAOEvents> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< CIAOEvents, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< CIAOEvents, Pred>(impl); };
		CIAOEvents CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< CIAOEvents> Derived();
		template <class Pred> ::Udm::DerivedAttr< CIAOEvents, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< CIAOEvents, Pred>(impl); };
		::Udm::ArchetypeAttr< CIAOEvents> Archetype() const;
		::Udm::StringAttr id() const;
		::Udm::ChildrenAttr< ::CQML::SenderConnection> SenderConnection_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::SenderConnection, Pred> SenderConnection_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::SenderConnection, Pred>(impl, meta_SenderConnection_children); };
		::Udm::ChildrenAttr< ::CQML::eventServiceConfiguration> eventServiceConfiguration_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::eventServiceConfiguration, Pred> eventServiceConfiguration_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::eventServiceConfiguration, Pred>(impl, meta_eventServiceConfiguration_children); };
		::Udm::ChildrenAttr< ::CQML::ReceiverConnection> ReceiverConnection_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ReceiverConnection, Pred> ReceiverConnection_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ReceiverConnection, Pred>(impl, meta_ReceiverConnection_children); };
		::Udm::ChildrenAttr< ::CQML::EventChannelCommunicationPoint> EventChannelCommunicationPoint_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::EventChannelCommunicationPoint, Pred> EventChannelCommunicationPoint_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::EventChannelCommunicationPoint, Pred>(impl, meta_EventChannelCommunicationPoint_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::EventChannelCommunicationPoint> EventChannelCommunicationPoint_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::EventChannelCommunicationPoint, Pred> EventChannelCommunicationPoint_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::EventChannelCommunicationPoint, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ReceiverConnection> ReceiverConnection_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ReceiverConnection, Pred> ReceiverConnection_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ReceiverConnection, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::eventServiceConfiguration> eventServiceConfiguration_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::eventServiceConfiguration, Pred> eventServiceConfiguration_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::eventServiceConfiguration, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::SenderConnection> SenderConnection_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::SenderConnection, Pred> SenderConnection_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::SenderConnection, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::RootFolder> RootFolder_parent() const;
		::Udm::ParentAttr< ::Udm::Object> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_id;
		static ::Uml::CompositionChildRole meta_SenderConnection_children;
		static ::Uml::CompositionChildRole meta_eventServiceConfiguration_children;
		static ::Uml::CompositionChildRole meta_ReceiverConnection_children;
		static ::Uml::CompositionChildRole meta_EventChannelCommunicationPoint_children;
		static ::Uml::CompositionParentRole meta_RootFolder_parent;

	};

	class CQML_Export DeploymentPlanQoS :  public MgaObject {
	public:
		DeploymentPlanQoS();
		DeploymentPlanQoS(::Udm::ObjectImpl *impl);
		DeploymentPlanQoS(const DeploymentPlanQoS &master);

#ifdef UDM_RVALUE
		DeploymentPlanQoS(DeploymentPlanQoS &&master);

		static DeploymentPlanQoS Cast(::Udm::Object &&a);
		DeploymentPlanQoS& operator=(DeploymentPlanQoS &&a);

#endif
		static DeploymentPlanQoS Cast(const ::Udm::Object &a);
		static DeploymentPlanQoS Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		DeploymentPlanQoS CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< DeploymentPlanQoS> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< DeploymentPlanQoS, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< DeploymentPlanQoS, Pred>(impl); };
		DeploymentPlanQoS CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< DeploymentPlanQoS> Derived();
		template <class Pred> ::Udm::DerivedAttr< DeploymentPlanQoS, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< DeploymentPlanQoS, Pred>(impl); };
		::Udm::ArchetypeAttr< DeploymentPlanQoS> Archetype() const;
		::Udm::ParentAttr< ::CQML::DeploymentPlan> DeploymentPlan_parent() const;
		::Udm::ParentAttr< ::CQML::DeploymentPlan> parent() const;

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_DeploymentPlan_parent;

	};

	class CQML_Export DomainRiskGroupingRef :  public DeploymentPlanQoS {
	public:
		DomainRiskGroupingRef();
		DomainRiskGroupingRef(::Udm::ObjectImpl *impl);
		DomainRiskGroupingRef(const DomainRiskGroupingRef &master);

#ifdef UDM_RVALUE
		DomainRiskGroupingRef(DomainRiskGroupingRef &&master);

		static DomainRiskGroupingRef Cast(::Udm::Object &&a);
		DomainRiskGroupingRef& operator=(DomainRiskGroupingRef &&a);

#endif
		static DomainRiskGroupingRef Cast(const ::Udm::Object &a);
		static DomainRiskGroupingRef Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		DomainRiskGroupingRef CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< DomainRiskGroupingRef> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< DomainRiskGroupingRef, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< DomainRiskGroupingRef, Pred>(impl); };
		DomainRiskGroupingRef CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< DomainRiskGroupingRef> Derived();
		template <class Pred> ::Udm::DerivedAttr< DomainRiskGroupingRef, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< DomainRiskGroupingRef, Pred>(impl); };
		::Udm::ArchetypeAttr< DomainRiskGroupingRef> Archetype() const;
		::Udm::PointerAttr< DomainRiskGrouping> ref() const;
		::Udm::ParentAttr< ::CQML::DeploymentPlan> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_ref;

	};

	class CQML_Export RecepInvoke :  public MgaObject {
	public:
		RecepInvoke();
		RecepInvoke(::Udm::ObjectImpl *impl);
		RecepInvoke(const RecepInvoke &master);

#ifdef UDM_RVALUE
		RecepInvoke(RecepInvoke &&master);

		static RecepInvoke Cast(::Udm::Object &&a);
		RecepInvoke& operator=(RecepInvoke &&a);

#endif
		static RecepInvoke Cast(const ::Udm::Object &a);
		static RecepInvoke Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		RecepInvoke CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< RecepInvoke> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< RecepInvoke, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< RecepInvoke, Pred>(impl); };
		RecepInvoke CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< RecepInvoke> Derived();
		template <class Pred> ::Udm::DerivedAttr< RecepInvoke, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< RecepInvoke, Pred>(impl); };
		::Udm::ArchetypeAttr< RecepInvoke> Archetype() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> ComponentAssembly_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> parent() const;
		::Udm::AssocEndAttr< ::CQML::RequiredRequestPort> srcRecepInvoke_end() const;
		::Udm::AssocEndAttr< ::CQML::QoSConnector> dstRecepInvoke_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ComponentAssembly_parent;
		static ::Uml::AssociationRole meta_srcRecepInvoke_end_;
		static ::Uml::AssociationRole meta_dstRecepInvoke_end_;

	};

	class CQML_Export ComponentAssemblyQoS :  public MgaObject {
	public:
		ComponentAssemblyQoS();
		ComponentAssemblyQoS(::Udm::ObjectImpl *impl);
		ComponentAssemblyQoS(const ComponentAssemblyQoS &master);

#ifdef UDM_RVALUE
		ComponentAssemblyQoS(ComponentAssemblyQoS &&master);

		static ComponentAssemblyQoS Cast(::Udm::Object &&a);
		ComponentAssemblyQoS& operator=(ComponentAssemblyQoS &&a);

#endif
		static ComponentAssemblyQoS Cast(const ::Udm::Object &a);
		static ComponentAssemblyQoS Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ComponentAssemblyQoS CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ComponentAssemblyQoS> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ComponentAssemblyQoS, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ComponentAssemblyQoS, Pred>(impl); };
		ComponentAssemblyQoS CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ComponentAssemblyQoS> Derived();
		template <class Pred> ::Udm::DerivedAttr< ComponentAssemblyQoS, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ComponentAssemblyQoS, Pred>(impl); };
		::Udm::ArchetypeAttr< ComponentAssemblyQoS> Archetype() const;
		::Udm::ParentAttr< ::CQML::ComponentImplementationContainer> ComponentImplementationContainer_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> ComponentAssembly_parent() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		::Udm::AssocEndAttr< ::CQML::ComponentAssemblyBase> srcComponentAssemblyQoS_end() const;
		::Udm::AssocEndAttr< ::CQML::ComponentAssemblyQoSCharacteristic> dstComponentAssemblyQoS_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ComponentImplementationContainer_parent;
		static ::Uml::CompositionParentRole meta_ComponentAssembly_parent;
		static ::Uml::AssociationRole meta_srcComponentAssemblyQoS_end_;
		static ::Uml::AssociationRole meta_dstComponentAssemblyQoS_end_;

	};

	class CQML_Export ComponentQoSCharacteristic :  virtual  public QoSCharacteristicBase {
	public:
		ComponentQoSCharacteristic();
		ComponentQoSCharacteristic(::Udm::ObjectImpl *impl);
		ComponentQoSCharacteristic(const ComponentQoSCharacteristic &master);

#ifdef UDM_RVALUE
		ComponentQoSCharacteristic(ComponentQoSCharacteristic &&master);

		static ComponentQoSCharacteristic Cast(::Udm::Object &&a);
		ComponentQoSCharacteristic& operator=(ComponentQoSCharacteristic &&a);

#endif
		static ComponentQoSCharacteristic Cast(const ::Udm::Object &a);
		static ComponentQoSCharacteristic Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ComponentQoSCharacteristic CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ComponentQoSCharacteristic> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ComponentQoSCharacteristic, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ComponentQoSCharacteristic, Pred>(impl); };
		ComponentQoSCharacteristic CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ComponentQoSCharacteristic> Derived();
		template <class Pred> ::Udm::DerivedAttr< ComponentQoSCharacteristic, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ComponentQoSCharacteristic, Pred>(impl); };
		::Udm::ArchetypeAttr< ComponentQoSCharacteristic> Archetype() const;
		::Udm::AClassAssocAttr< ComponentQoS, ComponentBase> srcComponentQoS() const;
		template <class Pred> ::Udm::AClassAssocAttr< ComponentQoS, ComponentBase, Pred> srcComponentQoS_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< ComponentQoS, ComponentBase, Pred>(impl, meta_srcComponentQoS, meta_srcComponentQoS_rev); };
		::Udm::ParentAttr< ::CQML::ComponentAssembly> parent() const;

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_srcComponentQoS;
		static ::Uml::AssociationRole meta_srcComponentQoS_rev;

	};

	class CQML_Export FailOverUnit :  public ComponentAssemblyQoSCharacteristic,  public ComponentQoSCharacteristic {
	public:
		FailOverUnit();
		FailOverUnit(::Udm::ObjectImpl *impl);
		FailOverUnit(const FailOverUnit &master);

#ifdef UDM_RVALUE
		FailOverUnit(FailOverUnit &&master);

		static FailOverUnit Cast(::Udm::Object &&a);
		FailOverUnit& operator=(FailOverUnit &&a);

#endif
		static FailOverUnit Cast(const ::Udm::Object &a);
		static FailOverUnit Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		FailOverUnit CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< FailOverUnit> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< FailOverUnit, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< FailOverUnit, Pred>(impl); };
		FailOverUnit CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< FailOverUnit> Derived();
		template <class Pred> ::Udm::DerivedAttr< FailOverUnit, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< FailOverUnit, Pred>(impl); };
		::Udm::ArchetypeAttr< FailOverUnit> Archetype() const;
		::Udm::IntegerAttr Replica() const;
		::Udm::ChildrenAttr< ::CQML::MonitorableGroupAssociation> MonitorableGroupAssociation_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MonitorableGroupAssociation, Pred> MonitorableGroupAssociation_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MonitorableGroupAssociation, Pred>(impl, meta_MonitorableGroupAssociation_children); };
		::Udm::ChildrenAttr< ::CQML::FTMonitorable> FTMonitorable_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::FTMonitorable, Pred> FTMonitorable_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::FTMonitorable, Pred>(impl, meta_FTMonitorable_children); };
		::Udm::ChildrenAttr< ::CQML::RepicaGroupConfiguration> RepicaGroupConfiguration_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::RepicaGroupConfiguration, Pred> RepicaGroupConfiguration_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::RepicaGroupConfiguration, Pred>(impl, meta_RepicaGroupConfiguration_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentRef> ComponentRef_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentRef, Pred> ComponentRef_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentRef, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::FTMonitorable> FTMonitorable_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::FTMonitorable, Pred> FTMonitorable_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::FTMonitorable, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentAssemblyReference> ComponentAssemblyReference_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentAssemblyReference, Pred> ComponentAssemblyReference_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentAssemblyReference, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::RepicaGroupConfiguration> RepicaGroupConfiguration_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::RepicaGroupConfiguration, Pred> RepicaGroupConfiguration_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::RepicaGroupConfiguration, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::MonitorableGroupAssociation> MonitorableGroupAssociation_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MonitorableGroupAssociation, Pred> MonitorableGroupAssociation_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MonitorableGroupAssociation, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_Replica;
		static ::Uml::CompositionChildRole meta_MonitorableGroupAssociation_children;
		static ::Uml::CompositionChildRole meta_FTMonitorable_children;
		static ::Uml::CompositionChildRole meta_RepicaGroupConfiguration_children;

	};

	class CQML_Export PortQoSCharacteristic :  virtual  public QoSCharacteristicBase {
	public:
		PortQoSCharacteristic();
		PortQoSCharacteristic(::Udm::ObjectImpl *impl);
		PortQoSCharacteristic(const PortQoSCharacteristic &master);

#ifdef UDM_RVALUE
		PortQoSCharacteristic(PortQoSCharacteristic &&master);

		static PortQoSCharacteristic Cast(::Udm::Object &&a);
		PortQoSCharacteristic& operator=(PortQoSCharacteristic &&a);

#endif
		static PortQoSCharacteristic Cast(const ::Udm::Object &a);
		static PortQoSCharacteristic Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		PortQoSCharacteristic CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< PortQoSCharacteristic> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< PortQoSCharacteristic, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< PortQoSCharacteristic, Pred>(impl); };
		PortQoSCharacteristic CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< PortQoSCharacteristic> Derived();
		template <class Pred> ::Udm::DerivedAttr< PortQoSCharacteristic, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< PortQoSCharacteristic, Pred>(impl); };
		::Udm::ArchetypeAttr< PortQoSCharacteristic> Archetype() const;
		::Udm::AClassAssocAttr< PortQoS, Port> srcPortQoS() const;
		template <class Pred> ::Udm::AClassAssocAttr< PortQoS, Port, Pred> srcPortQoS_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< PortQoS, Port, Pred>(impl, meta_srcPortQoS, meta_srcPortQoS_rev); };
		::Udm::ParentAttr< ::CQML::ComponentImplementationContainer> PortQoSComposition_ComponentImplementationContainer_parent() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_srcPortQoS;
		static ::Uml::AssociationRole meta_srcPortQoS_rev;
		static ::Uml::CompositionParentRole meta_PortQoSComposition_ComponentImplementationContainer_parent;

	};

	class CQML_Export QoSCharRef :  public ComponentAssemblyQoSCharacteristic,  public ComponentQoSCharacteristic,  public ConnectionQoSCharacteristic,  public PortQoSCharacteristic {
	public:
		QoSCharRef();
		QoSCharRef(::Udm::ObjectImpl *impl);
		QoSCharRef(const QoSCharRef &master);

#ifdef UDM_RVALUE
		QoSCharRef(QoSCharRef &&master);

		static QoSCharRef Cast(::Udm::Object &&a);
		QoSCharRef& operator=(QoSCharRef &&a);

#endif
		static QoSCharRef Cast(const ::Udm::Object &a);
		static QoSCharRef Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		QoSCharRef CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< QoSCharRef> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< QoSCharRef, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< QoSCharRef, Pred>(impl); };
		QoSCharRef CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< QoSCharRef> Derived();
		template <class Pred> ::Udm::DerivedAttr< QoSCharRef, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< QoSCharRef, Pred>(impl); };
		::Udm::ArchetypeAttr< QoSCharRef> Archetype() const;
		::Udm::PointerAttr< QoSCharacteristicBase> ref() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_ref;

	};

	class CQML_Export NetQoS :  public ConnectionQoSCharacteristic,  public PortQoSCharacteristic {
	public:
		NetQoS();
		NetQoS(::Udm::ObjectImpl *impl);
		NetQoS(const NetQoS &master);

#ifdef UDM_RVALUE
		NetQoS(NetQoS &&master);

		static NetQoS Cast(::Udm::Object &&a);
		NetQoS& operator=(NetQoS &&a);

#endif
		static NetQoS Cast(const ::Udm::Object &a);
		static NetQoS Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		NetQoS CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< NetQoS> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< NetQoS, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< NetQoS, Pred>(impl); };
		NetQoS CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< NetQoS> Derived();
		template <class Pred> ::Udm::DerivedAttr< NetQoS, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< NetQoS, Pred>(impl); };
		::Udm::ArchetypeAttr< NetQoS> Archetype() const;
		::Udm::IntegerAttr fwdBW() const;
		::Udm::StringAttr quality() const;
		::Udm::IntegerAttr revBW() const;
		::Udm::StringAttr admissionPriority() const;
		::Udm::StringAttr custom() const;
		::Udm::StringAttr NetPriorityModel() const;
		::Udm::StringAttr rev_quality() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_fwdBW;
		static ::Uml::Attribute meta_quality;
		static ::Uml::Attribute meta_revBW;
		static ::Uml::Attribute meta_admissionPriority;
		static ::Uml::Attribute meta_custom;
		static ::Uml::Attribute meta_NetPriorityModel;
		static ::Uml::Attribute meta_rev_quality;

	};

	class CQML_Export PortQoS :  public MgaObject {
	public:
		PortQoS();
		PortQoS(::Udm::ObjectImpl *impl);
		PortQoS(const PortQoS &master);

#ifdef UDM_RVALUE
		PortQoS(PortQoS &&master);

		static PortQoS Cast(::Udm::Object &&a);
		PortQoS& operator=(PortQoS &&a);

#endif
		static PortQoS Cast(const ::Udm::Object &a);
		static PortQoS Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		PortQoS CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< PortQoS> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< PortQoS, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< PortQoS, Pred>(impl); };
		PortQoS CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< PortQoS> Derived();
		template <class Pred> ::Udm::DerivedAttr< PortQoS, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< PortQoS, Pred>(impl); };
		::Udm::ArchetypeAttr< PortQoS> Archetype() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> ComponentAssembly_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> parent() const;
		::Udm::AssocEndAttr< ::CQML::Port> srcPortQoS_end() const;
		::Udm::AssocEndAttr< ::CQML::PortQoSCharacteristic> dstPortQoS_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ComponentAssembly_parent;
		static ::Uml::AssociationRole meta_srcPortQoS_end_;
		static ::Uml::AssociationRole meta_dstPortQoS_end_;

	};

	class CQML_Export FacetInvoke :  public MgaObject {
	public:
		FacetInvoke();
		FacetInvoke(::Udm::ObjectImpl *impl);
		FacetInvoke(const FacetInvoke &master);

#ifdef UDM_RVALUE
		FacetInvoke(FacetInvoke &&master);

		static FacetInvoke Cast(::Udm::Object &&a);
		FacetInvoke& operator=(FacetInvoke &&a);

#endif
		static FacetInvoke Cast(const ::Udm::Object &a);
		static FacetInvoke Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		FacetInvoke CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< FacetInvoke> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< FacetInvoke, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< FacetInvoke, Pred>(impl); };
		FacetInvoke CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< FacetInvoke> Derived();
		template <class Pred> ::Udm::DerivedAttr< FacetInvoke, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< FacetInvoke, Pred>(impl); };
		::Udm::ArchetypeAttr< FacetInvoke> Archetype() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> ComponentAssembly_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> parent() const;
		::Udm::AssocEndAttr< ::CQML::QoSConnector> srcFacetInvoke_end() const;
		::Udm::AssocEndAttr< ::CQML::ProvidedRequestPort> dstFacetInvoke_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ComponentAssembly_parent;
		static ::Uml::AssociationRole meta_srcFacetInvoke_end_;
		static ::Uml::AssociationRole meta_dstFacetInvoke_end_;

	};

	class CQML_Export QoSReq :  public MgaObject {
	public:
		QoSReq();
		QoSReq(::Udm::ObjectImpl *impl);
		QoSReq(const QoSReq &master);

#ifdef UDM_RVALUE
		QoSReq(QoSReq &&master);

		static QoSReq Cast(::Udm::Object &&a);
		QoSReq& operator=(QoSReq &&a);

#endif
		static QoSReq Cast(const ::Udm::Object &a);
		static QoSReq Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		QoSReq CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< QoSReq> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< QoSReq, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< QoSReq, Pred>(impl); };
		QoSReq CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< QoSReq> Derived();
		template <class Pred> ::Udm::DerivedAttr< QoSReq, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< QoSReq, Pred>(impl); };
		::Udm::ArchetypeAttr< QoSReq> Archetype() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> ComponentAssembly_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> parent() const;
		::Udm::AssocEndAttr< ::CQML::QoSConnector> srcQoSReq_end() const;
		::Udm::AssocEndAttr< ::CQML::ConnectionQoSCharacteristic> dstQoSReq_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ComponentAssembly_parent;
		static ::Uml::AssociationRole meta_srcQoSReq_end_;
		static ::Uml::AssociationRole meta_dstQoSReq_end_;

	};

	class CQML_Export EventSourcePublish :  public MgaObject {
	public:
		EventSourcePublish();
		EventSourcePublish(::Udm::ObjectImpl *impl);
		EventSourcePublish(const EventSourcePublish &master);

#ifdef UDM_RVALUE
		EventSourcePublish(EventSourcePublish &&master);

		static EventSourcePublish Cast(::Udm::Object &&a);
		EventSourcePublish& operator=(EventSourcePublish &&a);

#endif
		static EventSourcePublish Cast(const ::Udm::Object &a);
		static EventSourcePublish Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		EventSourcePublish CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< EventSourcePublish> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< EventSourcePublish, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< EventSourcePublish, Pred>(impl); };
		EventSourcePublish CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< EventSourcePublish> Derived();
		template <class Pred> ::Udm::DerivedAttr< EventSourcePublish, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< EventSourcePublish, Pred>(impl); };
		::Udm::ArchetypeAttr< EventSourcePublish> Archetype() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> ComponentAssembly_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> parent() const;
		::Udm::AssocEndAttr< ::CQML::OutEventPort> srcEventSourcePublish_end() const;
		::Udm::AssocEndAttr< ::CQML::QoSConnector> dstEventSourcePublish_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ComponentAssembly_parent;
		static ::Uml::AssociationRole meta_srcEventSourcePublish_end_;
		static ::Uml::AssociationRole meta_dstEventSourcePublish_end_;

	};

	class CQML_Export ComponentQoS :  public MgaObject {
	public:
		ComponentQoS();
		ComponentQoS(::Udm::ObjectImpl *impl);
		ComponentQoS(const ComponentQoS &master);

#ifdef UDM_RVALUE
		ComponentQoS(ComponentQoS &&master);

		static ComponentQoS Cast(::Udm::Object &&a);
		ComponentQoS& operator=(ComponentQoS &&a);

#endif
		static ComponentQoS Cast(const ::Udm::Object &a);
		static ComponentQoS Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ComponentQoS CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ComponentQoS> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ComponentQoS, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ComponentQoS, Pred>(impl); };
		ComponentQoS CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ComponentQoS> Derived();
		template <class Pred> ::Udm::DerivedAttr< ComponentQoS, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ComponentQoS, Pred>(impl); };
		::Udm::ArchetypeAttr< ComponentQoS> Archetype() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> ComponentAssembly_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> parent() const;
		::Udm::AssocEndAttr< ::CQML::ComponentBase> srcComponentQoS_end() const;
		::Udm::AssocEndAttr< ::CQML::ComponentQoSCharacteristic> dstComponentQoS_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ComponentAssembly_parent;
		static ::Uml::AssociationRole meta_srcComponentQoS_end_;
		static ::Uml::AssociationRole meta_dstComponentQoS_end_;

	};

	class CQML_Export EventSinkPublish :  public MgaObject {
	public:
		EventSinkPublish();
		EventSinkPublish(::Udm::ObjectImpl *impl);
		EventSinkPublish(const EventSinkPublish &master);

#ifdef UDM_RVALUE
		EventSinkPublish(EventSinkPublish &&master);

		static EventSinkPublish Cast(::Udm::Object &&a);
		EventSinkPublish& operator=(EventSinkPublish &&a);

#endif
		static EventSinkPublish Cast(const ::Udm::Object &a);
		static EventSinkPublish Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		EventSinkPublish CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< EventSinkPublish> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< EventSinkPublish, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< EventSinkPublish, Pred>(impl); };
		EventSinkPublish CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< EventSinkPublish> Derived();
		template <class Pred> ::Udm::DerivedAttr< EventSinkPublish, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< EventSinkPublish, Pred>(impl); };
		::Udm::ArchetypeAttr< EventSinkPublish> Archetype() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> ComponentAssembly_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> parent() const;
		::Udm::AssocEndAttr< ::CQML::QoSConnector> srcEventSinkPublish_end() const;
		::Udm::AssocEndAttr< ::CQML::InEventPort> dstEventSinkPublish_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_ComponentAssembly_parent;
		static ::Uml::AssociationRole meta_srcEventSinkPublish_end_;
		static ::Uml::AssociationRole meta_dstEventSinkPublish_end_;

	};

	class CQML_Export QoSConnector :  public MgaObject {
	public:
		QoSConnector();
		QoSConnector(::Udm::ObjectImpl *impl);
		QoSConnector(const QoSConnector &master);

#ifdef UDM_RVALUE
		QoSConnector(QoSConnector &&master);

		static QoSConnector Cast(::Udm::Object &&a);
		QoSConnector& operator=(QoSConnector &&a);

#endif
		static QoSConnector Cast(const ::Udm::Object &a);
		static QoSConnector Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		QoSConnector CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< QoSConnector> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< QoSConnector, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< QoSConnector, Pred>(impl); };
		QoSConnector CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< QoSConnector> Derived();
		template <class Pred> ::Udm::DerivedAttr< QoSConnector, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< QoSConnector, Pred>(impl); };
		::Udm::ArchetypeAttr< QoSConnector> Archetype() const;
		::Udm::AClassPointerAttr< EventSourcePublish, OutEventPort> srcEventSourcePublish() const;
		::Udm::AClassPointerAttr< RecepInvoke, RequiredRequestPort> srcRecepInvoke() const;
		::Udm::AClassAssocAttr< QoSReq, ConnectionQoSCharacteristic> dstQoSReq() const;
		template <class Pred> ::Udm::AClassAssocAttr< QoSReq, ConnectionQoSCharacteristic, Pred> dstQoSReq_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< QoSReq, ConnectionQoSCharacteristic, Pred>(impl, meta_dstQoSReq, meta_dstQoSReq_rev); };
		::Udm::AClassAssocAttr< EventSinkPublish, InEventPort> dstEventSinkPublish() const;
		template <class Pred> ::Udm::AClassAssocAttr< EventSinkPublish, InEventPort, Pred> dstEventSinkPublish_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< EventSinkPublish, InEventPort, Pred>(impl, meta_dstEventSinkPublish, meta_dstEventSinkPublish_rev); };
		::Udm::AClassPointerAttr< FacetInvoke, ProvidedRequestPort> dstFacetInvoke() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> ComponentAssembly_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentAssembly> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_srcEventSourcePublish;
		static ::Uml::AssociationRole meta_srcEventSourcePublish_rev;
		static ::Uml::AssociationRole meta_srcRecepInvoke;
		static ::Uml::AssociationRole meta_srcRecepInvoke_rev;
		static ::Uml::AssociationRole meta_dstQoSReq;
		static ::Uml::AssociationRole meta_dstQoSReq_rev;
		static ::Uml::AssociationRole meta_dstEventSinkPublish;
		static ::Uml::AssociationRole meta_dstEventSinkPublish_rev;
		static ::Uml::AssociationRole meta_dstFacetInvoke;
		static ::Uml::AssociationRole meta_dstFacetInvoke_rev;
		static ::Uml::CompositionParentRole meta_ComponentAssembly_parent;

	};

	class CQML_Export RealTimeConfiguration :  public ComponentQoSCharacteristic {
	public:
		RealTimeConfiguration();
		RealTimeConfiguration(::Udm::ObjectImpl *impl);
		RealTimeConfiguration(const RealTimeConfiguration &master);

#ifdef UDM_RVALUE
		RealTimeConfiguration(RealTimeConfiguration &&master);

		static RealTimeConfiguration Cast(::Udm::Object &&a);
		RealTimeConfiguration& operator=(RealTimeConfiguration &&a);

#endif
		static RealTimeConfiguration Cast(const ::Udm::Object &a);
		static RealTimeConfiguration Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		RealTimeConfiguration CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< RealTimeConfiguration> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< RealTimeConfiguration, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< RealTimeConfiguration, Pred>(impl); };
		RealTimeConfiguration CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< RealTimeConfiguration> Derived();
		template <class Pred> ::Udm::DerivedAttr< RealTimeConfiguration, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< RealTimeConfiguration, Pred>(impl); };
		::Udm::ArchetypeAttr< RealTimeConfiguration> Archetype() const;
		::Udm::ChildrenAttr< ::CQML::PriorityBands> PriorityBands_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PriorityBands, Pred> PriorityBands_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PriorityBands, Pred>(impl, meta_PriorityBands_children); };
		::Udm::ChildAttr< ::CQML::PriorityModelPolicy> PriorityModelPolicy_child() const;
		::Udm::ChildrenAttr< ::CQML::Lane> Lane_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Lane, Pred> Lane_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Lane, Pred>(impl, meta_Lane_children); };
		::Udm::ChildAttr< ::CQML::ThreadPool> ThreadPool_child() const;
		::Udm::ChildrenAttr< ::CQML::PolicyPerThreadPool> PolicyPerThreadPool_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PolicyPerThreadPool, Pred> PolicyPerThreadPool_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PolicyPerThreadPool, Pred>(impl, meta_PolicyPerThreadPool_children); };
		::Udm::ChildAttr< ::CQML::EnvironmentConf> EnvironmentConf_child() const;
		::Udm::ChildrenAttr< ::CQML::LanePerThreadPool> LanePerThreadPool_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::LanePerThreadPool, Pred> LanePerThreadPool_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::LanePerThreadPool, Pred>(impl, meta_LanePerThreadPool_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::PriorityBands> PriorityBands_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PriorityBands, Pred> PriorityBands_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PriorityBands, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::LanePerThreadPool> LanePerThreadPool_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::LanePerThreadPool, Pred> LanePerThreadPool_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::LanePerThreadPool, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ThreadPool> ThreadPool_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ThreadPool, Pred> ThreadPool_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ThreadPool, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::EnvironmentConf> EnvironmentConf_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::EnvironmentConf, Pred> EnvironmentConf_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::EnvironmentConf, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::PolicyPerThreadPool> PolicyPerThreadPool_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PolicyPerThreadPool, Pred> PolicyPerThreadPool_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PolicyPerThreadPool, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Lane> Lane_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Lane, Pred> Lane_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Lane, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::PriorityModelPolicy> PriorityModelPolicy_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PriorityModelPolicy, Pred> PriorityModelPolicy_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PriorityModelPolicy, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::ComponentAssembly> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionChildRole meta_PriorityBands_children;
		static ::Uml::CompositionChildRole meta_PriorityModelPolicy_child;
		static ::Uml::CompositionChildRole meta_Lane_children;
		static ::Uml::CompositionChildRole meta_ThreadPool_child;
		static ::Uml::CompositionChildRole meta_PolicyPerThreadPool_children;
		static ::Uml::CompositionChildRole meta_EnvironmentConf_child;
		static ::Uml::CompositionChildRole meta_LanePerThreadPool_children;

	};

	class CQML_Export PriorityBands :  public MgaObject {
	public:
		PriorityBands();
		PriorityBands(::Udm::ObjectImpl *impl);
		PriorityBands(const PriorityBands &master);

#ifdef UDM_RVALUE
		PriorityBands(PriorityBands &&master);

		static PriorityBands Cast(::Udm::Object &&a);
		PriorityBands& operator=(PriorityBands &&a);

#endif
		static PriorityBands Cast(const ::Udm::Object &a);
		static PriorityBands Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		PriorityBands CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< PriorityBands> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< PriorityBands, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< PriorityBands, Pred>(impl); };
		PriorityBands CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< PriorityBands> Derived();
		template <class Pred> ::Udm::DerivedAttr< PriorityBands, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< PriorityBands, Pred>(impl); };
		::Udm::ArchetypeAttr< PriorityBands> Archetype() const;
		::Udm::IntegerAttr high() const;
		::Udm::IntegerAttr low() const;
		::Udm::ParentAttr< ::CQML::RealTimeConfiguration> RealTimeConfiguration_parent() const;
		::Udm::ParentAttr< ::CQML::RealTimeConfiguration> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_high;
		static ::Uml::Attribute meta_low;
		static ::Uml::CompositionParentRole meta_RealTimeConfiguration_parent;

	};

	class CQML_Export LanePerThreadPool :  public MgaObject {
	public:
		LanePerThreadPool();
		LanePerThreadPool(::Udm::ObjectImpl *impl);
		LanePerThreadPool(const LanePerThreadPool &master);

#ifdef UDM_RVALUE
		LanePerThreadPool(LanePerThreadPool &&master);

		static LanePerThreadPool Cast(::Udm::Object &&a);
		LanePerThreadPool& operator=(LanePerThreadPool &&a);

#endif
		static LanePerThreadPool Cast(const ::Udm::Object &a);
		static LanePerThreadPool Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		LanePerThreadPool CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< LanePerThreadPool> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< LanePerThreadPool, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< LanePerThreadPool, Pred>(impl); };
		LanePerThreadPool CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< LanePerThreadPool> Derived();
		template <class Pred> ::Udm::DerivedAttr< LanePerThreadPool, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< LanePerThreadPool, Pred>(impl); };
		::Udm::ArchetypeAttr< LanePerThreadPool> Archetype() const;
		::Udm::ParentAttr< ::CQML::RealTimeConfiguration> RealTimeConfiguration_parent() const;
		::Udm::ParentAttr< ::CQML::RealTimeConfiguration> parent() const;
		::Udm::AssocEndAttr< ::CQML::Lane> srcLanePerThreadPool_end() const;
		::Udm::AssocEndAttr< ::CQML::ThreadPool> dstLanePerThreadPool_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_RealTimeConfiguration_parent;
		static ::Uml::AssociationRole meta_srcLanePerThreadPool_end_;
		static ::Uml::AssociationRole meta_dstLanePerThreadPool_end_;

	};

	class CQML_Export ThreadPool :  public MgaObject {
	public:
		ThreadPool();
		ThreadPool(::Udm::ObjectImpl *impl);
		ThreadPool(const ThreadPool &master);

#ifdef UDM_RVALUE
		ThreadPool(ThreadPool &&master);

		static ThreadPool Cast(::Udm::Object &&a);
		ThreadPool& operator=(ThreadPool &&a);

#endif
		static ThreadPool Cast(const ::Udm::Object &a);
		static ThreadPool Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ThreadPool CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ThreadPool> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ThreadPool, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ThreadPool, Pred>(impl); };
		ThreadPool CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ThreadPool> Derived();
		template <class Pred> ::Udm::DerivedAttr< ThreadPool, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ThreadPool, Pred>(impl); };
		::Udm::ArchetypeAttr< ThreadPool> Archetype() const;
		::Udm::BooleanAttr allow_request_buffering() const;
		::Udm::IntegerAttr max_buffered_requests() const;
		::Udm::IntegerAttr max_buffer_size() const;
		::Udm::BooleanAttr allow_borrowing() const;
		::Udm::IntegerAttr stacksize() const;
		::Udm::AClassAssocAttr< LanePerThreadPool, Lane> srcLanePerThreadPool() const;
		template <class Pred> ::Udm::AClassAssocAttr< LanePerThreadPool, Lane, Pred> srcLanePerThreadPool_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< LanePerThreadPool, Lane, Pred>(impl, meta_srcLanePerThreadPool, meta_srcLanePerThreadPool_rev); };
		::Udm::AClassAssocAttr< PolicyPerThreadPool, PriorityModelPolicy> srcPolicyPerThreadPool() const;
		template <class Pred> ::Udm::AClassAssocAttr< PolicyPerThreadPool, PriorityModelPolicy, Pred> srcPolicyPerThreadPool_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< PolicyPerThreadPool, PriorityModelPolicy, Pred>(impl, meta_srcPolicyPerThreadPool, meta_srcPolicyPerThreadPool_rev); };
		::Udm::ParentAttr< ::CQML::RealTimeConfiguration> RealTimeConfiguration_parent() const;
		::Udm::ParentAttr< ::CQML::RealTimeConfiguration> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_allow_request_buffering;
		static ::Uml::Attribute meta_max_buffered_requests;
		static ::Uml::Attribute meta_max_buffer_size;
		static ::Uml::Attribute meta_allow_borrowing;
		static ::Uml::Attribute meta_stacksize;
		static ::Uml::AssociationRole meta_srcLanePerThreadPool;
		static ::Uml::AssociationRole meta_srcLanePerThreadPool_rev;
		static ::Uml::AssociationRole meta_srcPolicyPerThreadPool;
		static ::Uml::AssociationRole meta_srcPolicyPerThreadPool_rev;
		static ::Uml::CompositionParentRole meta_RealTimeConfiguration_parent;

	};

	class CQML_Export EnvironmentConf :  public MgaObject {
	public:
		EnvironmentConf();
		EnvironmentConf(::Udm::ObjectImpl *impl);
		EnvironmentConf(const EnvironmentConf &master);

#ifdef UDM_RVALUE
		EnvironmentConf(EnvironmentConf &&master);

		static EnvironmentConf Cast(::Udm::Object &&a);
		EnvironmentConf& operator=(EnvironmentConf &&a);

#endif
		static EnvironmentConf Cast(const ::Udm::Object &a);
		static EnvironmentConf Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		EnvironmentConf CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< EnvironmentConf> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< EnvironmentConf, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< EnvironmentConf, Pred>(impl); };
		EnvironmentConf CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< EnvironmentConf> Derived();
		template <class Pred> ::Udm::DerivedAttr< EnvironmentConf, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< EnvironmentConf, Pred>(impl); };
		::Udm::ArchetypeAttr< EnvironmentConf> Archetype() const;
		::Udm::StringAttr SvcConf() const;
		::Udm::StringAttr CmdLineOptions() const;
		::Udm::ParentAttr< ::CQML::RealTimeConfiguration> RealTimeConfiguration_parent() const;
		::Udm::ParentAttr< ::CQML::RealTimeConfiguration> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_SvcConf;
		static ::Uml::Attribute meta_CmdLineOptions;
		static ::Uml::CompositionParentRole meta_RealTimeConfiguration_parent;

	};

	class CQML_Export PolicyPerThreadPool :  public MgaObject {
	public:
		PolicyPerThreadPool();
		PolicyPerThreadPool(::Udm::ObjectImpl *impl);
		PolicyPerThreadPool(const PolicyPerThreadPool &master);

#ifdef UDM_RVALUE
		PolicyPerThreadPool(PolicyPerThreadPool &&master);

		static PolicyPerThreadPool Cast(::Udm::Object &&a);
		PolicyPerThreadPool& operator=(PolicyPerThreadPool &&a);

#endif
		static PolicyPerThreadPool Cast(const ::Udm::Object &a);
		static PolicyPerThreadPool Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		PolicyPerThreadPool CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< PolicyPerThreadPool> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< PolicyPerThreadPool, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< PolicyPerThreadPool, Pred>(impl); };
		PolicyPerThreadPool CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< PolicyPerThreadPool> Derived();
		template <class Pred> ::Udm::DerivedAttr< PolicyPerThreadPool, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< PolicyPerThreadPool, Pred>(impl); };
		::Udm::ArchetypeAttr< PolicyPerThreadPool> Archetype() const;
		::Udm::ParentAttr< ::CQML::RealTimeConfiguration> RealTimeConfiguration_parent() const;
		::Udm::ParentAttr< ::CQML::RealTimeConfiguration> parent() const;
		::Udm::AssocEndAttr< ::CQML::PriorityModelPolicy> srcPolicyPerThreadPool_end() const;
		::Udm::AssocEndAttr< ::CQML::ThreadPool> dstPolicyPerThreadPool_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_RealTimeConfiguration_parent;
		static ::Uml::AssociationRole meta_srcPolicyPerThreadPool_end_;
		static ::Uml::AssociationRole meta_dstPolicyPerThreadPool_end_;

	};

	class CQML_Export Lane :  public MgaObject {
	public:
		Lane();
		Lane(::Udm::ObjectImpl *impl);
		Lane(const Lane &master);

#ifdef UDM_RVALUE
		Lane(Lane &&master);

		static Lane Cast(::Udm::Object &&a);
		Lane& operator=(Lane &&a);

#endif
		static Lane Cast(const ::Udm::Object &a);
		static Lane Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Lane CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Lane> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Lane, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Lane, Pred>(impl); };
		Lane CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Lane> Derived();
		template <class Pred> ::Udm::DerivedAttr< Lane, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Lane, Pred>(impl); };
		::Udm::ArchetypeAttr< Lane> Archetype() const;
		::Udm::IntegerAttr lane_priority() const;
		::Udm::IntegerAttr static_threads() const;
		::Udm::IntegerAttr dynamic_threads() const;
		::Udm::AClassPointerAttr< LanePerThreadPool, ThreadPool> dstLanePerThreadPool() const;
		::Udm::ParentAttr< ::CQML::RealTimeConfiguration> RealTimeConfiguration_parent() const;
		::Udm::ParentAttr< ::CQML::RealTimeConfiguration> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_lane_priority;
		static ::Uml::Attribute meta_static_threads;
		static ::Uml::Attribute meta_dynamic_threads;
		static ::Uml::AssociationRole meta_dstLanePerThreadPool;
		static ::Uml::AssociationRole meta_dstLanePerThreadPool_rev;
		static ::Uml::CompositionParentRole meta_RealTimeConfiguration_parent;

	};

	class CQML_Export PriorityModelPolicy :  public MgaObject {
	public:
		PriorityModelPolicy();
		PriorityModelPolicy(::Udm::ObjectImpl *impl);
		PriorityModelPolicy(const PriorityModelPolicy &master);

#ifdef UDM_RVALUE
		PriorityModelPolicy(PriorityModelPolicy &&master);

		static PriorityModelPolicy Cast(::Udm::Object &&a);
		PriorityModelPolicy& operator=(PriorityModelPolicy &&a);

#endif
		static PriorityModelPolicy Cast(const ::Udm::Object &a);
		static PriorityModelPolicy Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		PriorityModelPolicy CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< PriorityModelPolicy> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< PriorityModelPolicy, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< PriorityModelPolicy, Pred>(impl); };
		PriorityModelPolicy CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< PriorityModelPolicy> Derived();
		template <class Pred> ::Udm::DerivedAttr< PriorityModelPolicy, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< PriorityModelPolicy, Pred>(impl); };
		::Udm::ArchetypeAttr< PriorityModelPolicy> Archetype() const;
		::Udm::IntegerAttr priority_value() const;
		::Udm::StringAttr priority_model() const;
		::Udm::AClassAssocAttr< PolicyPerThreadPool, ThreadPool> dstPolicyPerThreadPool() const;
		template <class Pred> ::Udm::AClassAssocAttr< PolicyPerThreadPool, ThreadPool, Pred> dstPolicyPerThreadPool_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< PolicyPerThreadPool, ThreadPool, Pred>(impl, meta_dstPolicyPerThreadPool, meta_dstPolicyPerThreadPool_rev); };
		::Udm::ParentAttr< ::CQML::RealTimeConfiguration> RealTimeConfiguration_parent() const;
		::Udm::ParentAttr< ::CQML::RealTimeConfiguration> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_priority_value;
		static ::Uml::Attribute meta_priority_model;
		static ::Uml::AssociationRole meta_dstPolicyPerThreadPool;
		static ::Uml::AssociationRole meta_dstPolicyPerThreadPool_rev;
		static ::Uml::CompositionParentRole meta_RealTimeConfiguration_parent;

	};

	class CQML_Export Destructible :  public MgaObject {
	public:
		Destructible();
		Destructible(::Udm::ObjectImpl *impl);
		Destructible(const Destructible &master);

#ifdef UDM_RVALUE
		Destructible(Destructible &&master);

		static Destructible Cast(::Udm::Object &&a);
		Destructible& operator=(Destructible &&a);

#endif
		static Destructible Cast(const ::Udm::Object &a);
		static Destructible Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Destructible CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Destructible> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Destructible, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Destructible, Pred>(impl); };
		Destructible CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Destructible> Derived();
		template <class Pred> ::Udm::DerivedAttr< Destructible, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Destructible, Pred>(impl); };
		::Udm::ArchetypeAttr< Destructible> Archetype() const;
		::Udm::RealAttr Metric() const;
		::Udm::ParentAttr< ::CQML::DomainRiskGrouping> parent() const;

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_Metric;

	};

	class CQML_Export RootRiskGroup :  public Destructible {
	public:
		RootRiskGroup();
		RootRiskGroup(::Udm::ObjectImpl *impl);
		RootRiskGroup(const RootRiskGroup &master);

#ifdef UDM_RVALUE
		RootRiskGroup(RootRiskGroup &&master);

		static RootRiskGroup Cast(::Udm::Object &&a);
		RootRiskGroup& operator=(RootRiskGroup &&a);

#endif
		static RootRiskGroup Cast(const ::Udm::Object &a);
		static RootRiskGroup Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		RootRiskGroup CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< RootRiskGroup> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< RootRiskGroup, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< RootRiskGroup, Pred>(impl); };
		RootRiskGroup CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< RootRiskGroup> Derived();
		template <class Pred> ::Udm::DerivedAttr< RootRiskGroup, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< RootRiskGroup, Pred>(impl); };
		::Udm::ArchetypeAttr< RootRiskGroup> Archetype() const;
		::Udm::AClassAssocAttr< RootRiskAssociation, SRGBase> dstRootRiskAssociation() const;
		template <class Pred> ::Udm::AClassAssocAttr< RootRiskAssociation, SRGBase, Pred> dstRootRiskAssociation_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< RootRiskAssociation, SRGBase, Pred>(impl, meta_dstRootRiskAssociation, meta_dstRootRiskAssociation_rev); };
		::Udm::ChildrenAttr< ::CQML::SharedResourceReference> SharedResourceReference_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::SharedResourceReference, Pred> SharedResourceReference_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::SharedResourceReference, Pred>(impl, meta_SharedResourceReference_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::SharedResourceReference> SharedResourceReference_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::SharedResourceReference, Pred> SharedResourceReference_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::SharedResourceReference, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::DomainRiskGrouping> DomainRiskGrouping_parent() const;
		::Udm::ParentAttr< ::CQML::DomainRiskGrouping> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_dstRootRiskAssociation;
		static ::Uml::AssociationRole meta_dstRootRiskAssociation_rev;
		static ::Uml::CompositionChildRole meta_SharedResourceReference_children;
		static ::Uml::CompositionParentRole meta_DomainRiskGrouping_parent;

	};

	class CQML_Export SRGBase :  public Destructible {
	public:
		SRGBase();
		SRGBase(::Udm::ObjectImpl *impl);
		SRGBase(const SRGBase &master);

#ifdef UDM_RVALUE
		SRGBase(SRGBase &&master);

		static SRGBase Cast(::Udm::Object &&a);
		SRGBase& operator=(SRGBase &&a);

#endif
		static SRGBase Cast(const ::Udm::Object &a);
		static SRGBase Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		SRGBase CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< SRGBase> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< SRGBase, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< SRGBase, Pred>(impl); };
		SRGBase CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< SRGBase> Derived();
		template <class Pred> ::Udm::DerivedAttr< SRGBase, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< SRGBase, Pred>(impl); };
		::Udm::ArchetypeAttr< SRGBase> Archetype() const;
		::Udm::AClassPointerAttr< RootRiskAssociation, RootRiskGroup> srcRootRiskAssociation() const;
		::Udm::AClassPointerAttr< SRGRiskAssociation, SharedRiskGroup> srcSRGRiskAssociation() const;
		::Udm::ParentAttr< ::CQML::DomainRiskGrouping> DomainRiskGrouping_parent() const;
		::Udm::ParentAttr< ::CQML::DomainRiskGrouping> parent() const;

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_srcRootRiskAssociation;
		static ::Uml::AssociationRole meta_srcRootRiskAssociation_rev;
		static ::Uml::AssociationRole meta_srcSRGRiskAssociation;
		static ::Uml::AssociationRole meta_srcSRGRiskAssociation_rev;
		static ::Uml::CompositionParentRole meta_DomainRiskGrouping_parent;

	};

	class CQML_Export DeploymentPlanRef :  public MgaObject {
	public:
		DeploymentPlanRef();
		DeploymentPlanRef(::Udm::ObjectImpl *impl);
		DeploymentPlanRef(const DeploymentPlanRef &master);

#ifdef UDM_RVALUE
		DeploymentPlanRef(DeploymentPlanRef &&master);

		static DeploymentPlanRef Cast(::Udm::Object &&a);
		DeploymentPlanRef& operator=(DeploymentPlanRef &&a);

#endif
		static DeploymentPlanRef Cast(const ::Udm::Object &a);
		static DeploymentPlanRef Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		DeploymentPlanRef CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< DeploymentPlanRef> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< DeploymentPlanRef, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< DeploymentPlanRef, Pred>(impl); };
		DeploymentPlanRef CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< DeploymentPlanRef> Derived();
		template <class Pred> ::Udm::DerivedAttr< DeploymentPlanRef, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< DeploymentPlanRef, Pred>(impl); };
		::Udm::ArchetypeAttr< DeploymentPlanRef> Archetype() const;
		::Udm::AClassPointerAttr< FTDeployDepends, DomainRiskGrouping> dstFTDeployDepends() const;
		::Udm::PointerAttr< DeploymentPlan> ref() const;
		::Udm::ParentAttr< ::CQML::FTDeployment> FTDeployment_parent() const;
		::Udm::ParentAttr< ::CQML::FTDeployment> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_dstFTDeployDepends;
		static ::Uml::AssociationRole meta_dstFTDeployDepends_rev;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::CompositionParentRole meta_FTDeployment_parent;

	};

	class CQML_Export SRGRiskAssociation :  public MgaObject {
	public:
		SRGRiskAssociation();
		SRGRiskAssociation(::Udm::ObjectImpl *impl);
		SRGRiskAssociation(const SRGRiskAssociation &master);

#ifdef UDM_RVALUE
		SRGRiskAssociation(SRGRiskAssociation &&master);

		static SRGRiskAssociation Cast(::Udm::Object &&a);
		SRGRiskAssociation& operator=(SRGRiskAssociation &&a);

#endif
		static SRGRiskAssociation Cast(const ::Udm::Object &a);
		static SRGRiskAssociation Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		SRGRiskAssociation CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< SRGRiskAssociation> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< SRGRiskAssociation, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< SRGRiskAssociation, Pred>(impl); };
		SRGRiskAssociation CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< SRGRiskAssociation> Derived();
		template <class Pred> ::Udm::DerivedAttr< SRGRiskAssociation, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< SRGRiskAssociation, Pred>(impl); };
		::Udm::ArchetypeAttr< SRGRiskAssociation> Archetype() const;
		::Udm::ParentAttr< ::CQML::DomainRiskGrouping> DomainRiskGrouping_parent() const;
		::Udm::ParentAttr< ::CQML::DomainRiskGrouping> parent() const;
		::Udm::AssocEndAttr< ::CQML::SharedRiskGroup> srcSRGRiskAssociation_end() const;
		::Udm::AssocEndAttr< ::CQML::SRGBase> dstSRGRiskAssociation_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_DomainRiskGrouping_parent;
		static ::Uml::AssociationRole meta_srcSRGRiskAssociation_end_;
		static ::Uml::AssociationRole meta_dstSRGRiskAssociation_end_;

	};

	class CQML_Export RepicaGroupConfiguration :  public MgaObject {
	public:
		RepicaGroupConfiguration();
		RepicaGroupConfiguration(::Udm::ObjectImpl *impl);
		RepicaGroupConfiguration(const RepicaGroupConfiguration &master);

#ifdef UDM_RVALUE
		RepicaGroupConfiguration(RepicaGroupConfiguration &&master);

		static RepicaGroupConfiguration Cast(::Udm::Object &&a);
		RepicaGroupConfiguration& operator=(RepicaGroupConfiguration &&a);

#endif
		static RepicaGroupConfiguration Cast(const ::Udm::Object &a);
		static RepicaGroupConfiguration Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		RepicaGroupConfiguration CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< RepicaGroupConfiguration> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< RepicaGroupConfiguration, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< RepicaGroupConfiguration, Pred>(impl); };
		RepicaGroupConfiguration CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< RepicaGroupConfiguration> Derived();
		template <class Pred> ::Udm::DerivedAttr< RepicaGroupConfiguration, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< RepicaGroupConfiguration, Pred>(impl); };
		::Udm::ArchetypeAttr< RepicaGroupConfiguration> Archetype() const;
		::Udm::StringAttr ReplicationStyle() const;
		::Udm::AClassPointerAttr< MonitorableGroupAssociation, FTMonitorable> srcMonitorable2RepG() const;
		::Udm::ChildrenAttr< ::CQML::Property> Property_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Property, Pred> Property_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Property, Pred>(impl, meta_Property_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Property> Property_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Property, Pred> Property_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Property, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::FailOverUnit> FailOverUnit_parent() const;
		::Udm::ParentAttr< ::CQML::FailOverUnit> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_ReplicationStyle;
		static ::Uml::AssociationRole meta_srcMonitorable2RepG;
		static ::Uml::AssociationRole meta_srcMonitorable2RepG_rev;
		static ::Uml::CompositionChildRole meta_Property_children;
		static ::Uml::CompositionParentRole meta_FailOverUnit_parent;

	};

	class CQML_Export DomainRiskGrouping :  public MgaObject {
	public:
		DomainRiskGrouping();
		DomainRiskGrouping(::Udm::ObjectImpl *impl);
		DomainRiskGrouping(const DomainRiskGrouping &master);

#ifdef UDM_RVALUE
		DomainRiskGrouping(DomainRiskGrouping &&master);

		static DomainRiskGrouping Cast(::Udm::Object &&a);
		DomainRiskGrouping& operator=(DomainRiskGrouping &&a);

#endif
		static DomainRiskGrouping Cast(const ::Udm::Object &a);
		static DomainRiskGrouping Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		DomainRiskGrouping CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< DomainRiskGrouping> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< DomainRiskGrouping, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< DomainRiskGrouping, Pred>(impl); };
		DomainRiskGrouping CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< DomainRiskGrouping> Derived();
		template <class Pred> ::Udm::DerivedAttr< DomainRiskGrouping, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< DomainRiskGrouping, Pred>(impl); };
		::Udm::ArchetypeAttr< DomainRiskGrouping> Archetype() const;
		::Udm::AClassAssocAttr< FTDeployDepends, DeploymentPlanRef> srcFTDeployDepends() const;
		template <class Pred> ::Udm::AClassAssocAttr< FTDeployDepends, DeploymentPlanRef, Pred> srcFTDeployDepends_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< FTDeployDepends, DeploymentPlanRef, Pred>(impl, meta_srcFTDeployDepends, meta_srcFTDeployDepends_rev); };
		::Udm::AssocAttr< DomainRiskGroupingRef> referedbyDomainRiskGroupingRef() const;
		template <class Pred> ::Udm::AssocAttr< DomainRiskGroupingRef, Pred> referedbyDomainRiskGroupingRef_sorted(const Pred &) const { return ::Udm::AssocAttr< DomainRiskGroupingRef, Pred>(impl, meta_referedbyDomainRiskGroupingRef); };
		::Udm::ChildrenAttr< ::CQML::RootRiskAssociation> RootRiskAssociation_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::RootRiskAssociation, Pred> RootRiskAssociation_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::RootRiskAssociation, Pred>(impl, meta_RootRiskAssociation_children); };
		::Udm::ChildrenAttr< ::CQML::SRGRiskAssociation> SRGRiskAssociation_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::SRGRiskAssociation, Pred> SRGRiskAssociation_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::SRGRiskAssociation, Pred>(impl, meta_SRGRiskAssociation_children); };
		::Udm::ChildrenAttr< ::CQML::SRGBase> SRGBase_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::SRGBase, Pred> SRGBase_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::SRGBase, Pred>(impl, meta_SRGBase_children); };
		::Udm::ChildAttr< ::CQML::RootRiskGroup> RootRiskGroup_child() const;
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Destructible> Destructible_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Destructible, Pred> Destructible_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Destructible, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::RootRiskGroup> RootRiskGroup_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::RootRiskGroup, Pred> RootRiskGroup_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::RootRiskGroup, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::SRGBase> SRGBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::SRGBase, Pred> SRGBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::SRGBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::SRGRiskAssociation> SRGRiskAssociation_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::SRGRiskAssociation, Pred> SRGRiskAssociation_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::SRGRiskAssociation, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::RootRiskAssociation> RootRiskAssociation_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::RootRiskAssociation, Pred> RootRiskAssociation_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::RootRiskAssociation, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::SharedRiskGroup> SharedRiskGroup_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::SharedRiskGroup, Pred> SharedRiskGroup_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::SharedRiskGroup, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::HostReference> HostReference_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::HostReference, Pred> HostReference_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::HostReference, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::FTDeployment> FTDeployment_parent() const;
		::Udm::ParentAttr< ::CQML::FTDeployment> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_srcFTDeployDepends;
		static ::Uml::AssociationRole meta_srcFTDeployDepends_rev;
		static ::Uml::AssociationRole meta_referedbyDomainRiskGroupingRef;
		static ::Uml::CompositionChildRole meta_RootRiskAssociation_children;
		static ::Uml::CompositionChildRole meta_SRGRiskAssociation_children;
		static ::Uml::CompositionChildRole meta_SRGBase_children;
		static ::Uml::CompositionChildRole meta_RootRiskGroup_child;
		static ::Uml::CompositionParentRole meta_FTDeployment_parent;

	};

	class CQML_Export RootRiskAssociation :  public MgaObject {
	public:
		RootRiskAssociation();
		RootRiskAssociation(::Udm::ObjectImpl *impl);
		RootRiskAssociation(const RootRiskAssociation &master);

#ifdef UDM_RVALUE
		RootRiskAssociation(RootRiskAssociation &&master);

		static RootRiskAssociation Cast(::Udm::Object &&a);
		RootRiskAssociation& operator=(RootRiskAssociation &&a);

#endif
		static RootRiskAssociation Cast(const ::Udm::Object &a);
		static RootRiskAssociation Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		RootRiskAssociation CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< RootRiskAssociation> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< RootRiskAssociation, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< RootRiskAssociation, Pred>(impl); };
		RootRiskAssociation CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< RootRiskAssociation> Derived();
		template <class Pred> ::Udm::DerivedAttr< RootRiskAssociation, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< RootRiskAssociation, Pred>(impl); };
		::Udm::ArchetypeAttr< RootRiskAssociation> Archetype() const;
		::Udm::ParentAttr< ::CQML::DomainRiskGrouping> DomainRiskGrouping_parent() const;
		::Udm::ParentAttr< ::CQML::DomainRiskGrouping> parent() const;
		::Udm::AssocEndAttr< ::CQML::RootRiskGroup> srcRootRiskAssociation_end() const;
		::Udm::AssocEndAttr< ::CQML::SRGBase> dstRootRiskAssociation_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_DomainRiskGrouping_parent;
		static ::Uml::AssociationRole meta_srcRootRiskAssociation_end_;
		static ::Uml::AssociationRole meta_dstRootRiskAssociation_end_;

	};

	class CQML_Export SharedRiskGroup :  public SRGBase {
	public:
		SharedRiskGroup();
		SharedRiskGroup(::Udm::ObjectImpl *impl);
		SharedRiskGroup(const SharedRiskGroup &master);

#ifdef UDM_RVALUE
		SharedRiskGroup(SharedRiskGroup &&master);

		static SharedRiskGroup Cast(::Udm::Object &&a);
		SharedRiskGroup& operator=(SharedRiskGroup &&a);

#endif
		static SharedRiskGroup Cast(const ::Udm::Object &a);
		static SharedRiskGroup Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		SharedRiskGroup CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< SharedRiskGroup> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< SharedRiskGroup, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< SharedRiskGroup, Pred>(impl); };
		SharedRiskGroup CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< SharedRiskGroup> Derived();
		template <class Pred> ::Udm::DerivedAttr< SharedRiskGroup, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< SharedRiskGroup, Pred>(impl); };
		::Udm::ArchetypeAttr< SharedRiskGroup> Archetype() const;
		::Udm::AClassAssocAttr< SRGRiskAssociation, SRGBase> dstSRGRiskAssociation() const;
		template <class Pred> ::Udm::AClassAssocAttr< SRGRiskAssociation, SRGBase, Pred> dstSRGRiskAssociation_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< SRGRiskAssociation, SRGBase, Pred>(impl, meta_dstSRGRiskAssociation, meta_dstSRGRiskAssociation_rev); };
		::Udm::ChildrenAttr< ::CQML::SharedResourceReference> SharedResourceReference_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::SharedResourceReference, Pred> SharedResourceReference_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::SharedResourceReference, Pred>(impl, meta_SharedResourceReference_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::SharedResourceReference> SharedResourceReference_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::SharedResourceReference, Pred> SharedResourceReference_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::SharedResourceReference, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::DomainRiskGrouping> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_dstSRGRiskAssociation;
		static ::Uml::AssociationRole meta_dstSRGRiskAssociation_rev;
		static ::Uml::CompositionChildRole meta_SharedResourceReference_children;

	};

	class CQML_Export MonitorableGroupAssociation :  public MgaObject {
	public:
		MonitorableGroupAssociation();
		MonitorableGroupAssociation(::Udm::ObjectImpl *impl);
		MonitorableGroupAssociation(const MonitorableGroupAssociation &master);

#ifdef UDM_RVALUE
		MonitorableGroupAssociation(MonitorableGroupAssociation &&master);

		static MonitorableGroupAssociation Cast(::Udm::Object &&a);
		MonitorableGroupAssociation& operator=(MonitorableGroupAssociation &&a);

#endif
		static MonitorableGroupAssociation Cast(const ::Udm::Object &a);
		static MonitorableGroupAssociation Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		MonitorableGroupAssociation CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< MonitorableGroupAssociation> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< MonitorableGroupAssociation, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< MonitorableGroupAssociation, Pred>(impl); };
		MonitorableGroupAssociation CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< MonitorableGroupAssociation> Derived();
		template <class Pred> ::Udm::DerivedAttr< MonitorableGroupAssociation, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< MonitorableGroupAssociation, Pred>(impl); };
		::Udm::ArchetypeAttr< MonitorableGroupAssociation> Archetype() const;
		::Udm::ParentAttr< ::CQML::FailOverUnit> FailOverUnit_parent() const;
		::Udm::ParentAttr< ::CQML::FailOverUnit> parent() const;
		::Udm::AssocEndAttr< ::CQML::FTMonitorable> srcMonitorable2RepG_end() const;
		::Udm::AssocEndAttr< ::CQML::RepicaGroupConfiguration> dstMonitorable2RepG_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_FailOverUnit_parent;
		static ::Uml::AssociationRole meta_srcMonitorable2RepG_end_;
		static ::Uml::AssociationRole meta_dstMonitorable2RepG_end_;

	};

	class CQML_Export SharedResourceReference :  public MgaObject {
	public:
		SharedResourceReference();
		SharedResourceReference(::Udm::ObjectImpl *impl);
		SharedResourceReference(const SharedResourceReference &master);

#ifdef UDM_RVALUE
		SharedResourceReference(SharedResourceReference &&master);

		static SharedResourceReference Cast(::Udm::Object &&a);
		SharedResourceReference& operator=(SharedResourceReference &&a);

#endif
		static SharedResourceReference Cast(const ::Udm::Object &a);
		static SharedResourceReference Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		SharedResourceReference CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< SharedResourceReference> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< SharedResourceReference, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< SharedResourceReference, Pred>(impl); };
		SharedResourceReference CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< SharedResourceReference> Derived();
		template <class Pred> ::Udm::DerivedAttr< SharedResourceReference, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< SharedResourceReference, Pred>(impl); };
		::Udm::ArchetypeAttr< SharedResourceReference> Archetype() const;
		::Udm::PointerAttr< SharedResource> ref() const;
		::Udm::ParentAttr< ::CQML::RootRiskGroup> RootRiskGroup_parent() const;
		::Udm::ParentAttr< ::CQML::SharedRiskGroup> SharedRiskGroup_parent() const;
		::Udm::ParentAttr< ::CQML::Destructible> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::CompositionParentRole meta_RootRiskGroup_parent;
		static ::Uml::CompositionParentRole meta_SharedRiskGroup_parent;

	};

	class CQML_Export FTDeployDepends :  public MgaObject {
	public:
		FTDeployDepends();
		FTDeployDepends(::Udm::ObjectImpl *impl);
		FTDeployDepends(const FTDeployDepends &master);

#ifdef UDM_RVALUE
		FTDeployDepends(FTDeployDepends &&master);

		static FTDeployDepends Cast(::Udm::Object &&a);
		FTDeployDepends& operator=(FTDeployDepends &&a);

#endif
		static FTDeployDepends Cast(const ::Udm::Object &a);
		static FTDeployDepends Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		FTDeployDepends CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< FTDeployDepends> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< FTDeployDepends, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< FTDeployDepends, Pred>(impl); };
		FTDeployDepends CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< FTDeployDepends> Derived();
		template <class Pred> ::Udm::DerivedAttr< FTDeployDepends, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< FTDeployDepends, Pred>(impl); };
		::Udm::ArchetypeAttr< FTDeployDepends> Archetype() const;
		::Udm::ParentAttr< ::CQML::FTDeployment> FTDeployment_parent() const;
		::Udm::ParentAttr< ::CQML::FTDeployment> parent() const;
		::Udm::AssocEndAttr< ::CQML::DeploymentPlanRef> srcFTDeployDepends_end() const;
		::Udm::AssocEndAttr< ::CQML::DomainRiskGrouping> dstFTDeployDepends_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_FTDeployment_parent;
		static ::Uml::AssociationRole meta_srcFTDeployDepends_end_;
		static ::Uml::AssociationRole meta_dstFTDeployDepends_end_;

	};

	class CQML_Export HostReference :  public SRGBase {
	public:
		HostReference();
		HostReference(::Udm::ObjectImpl *impl);
		HostReference(const HostReference &master);

#ifdef UDM_RVALUE
		HostReference(HostReference &&master);

		static HostReference Cast(::Udm::Object &&a);
		HostReference& operator=(HostReference &&a);

#endif
		static HostReference Cast(const ::Udm::Object &a);
		static HostReference Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		HostReference CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< HostReference> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< HostReference, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< HostReference, Pred>(impl); };
		HostReference CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< HostReference> Derived();
		template <class Pred> ::Udm::DerivedAttr< HostReference, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< HostReference, Pred>(impl); };
		::Udm::ArchetypeAttr< HostReference> Archetype() const;
		::Udm::PointerAttr< Node> ref() const;
		::Udm::ParentAttr< ::CQML::DomainRiskGrouping> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_ref;

	};

	class CQML_Export FTDeployment :  public MgaObject {
	public:
		FTDeployment();
		FTDeployment(::Udm::ObjectImpl *impl);
		FTDeployment(const FTDeployment &master);

#ifdef UDM_RVALUE
		FTDeployment(FTDeployment &&master);

		static FTDeployment Cast(::Udm::Object &&a);
		FTDeployment& operator=(FTDeployment &&a);

#endif
		static FTDeployment Cast(const ::Udm::Object &a);
		static FTDeployment Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		FTDeployment CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< FTDeployment> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< FTDeployment, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< FTDeployment, Pred>(impl); };
		FTDeployment CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< FTDeployment> Derived();
		template <class Pred> ::Udm::DerivedAttr< FTDeployment, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< FTDeployment, Pred>(impl); };
		::Udm::ArchetypeAttr< FTDeployment> Archetype() const;
		::Udm::ChildrenAttr< ::CQML::FTDeployDepends> FTDeployDepends_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::FTDeployDepends, Pred> FTDeployDepends_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::FTDeployDepends, Pred>(impl, meta_FTDeployDepends_children); };
		::Udm::ChildrenAttr< ::CQML::DeploymentPlanRef> DeploymentPlanRef_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::DeploymentPlanRef, Pred> DeploymentPlanRef_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::DeploymentPlanRef, Pred>(impl, meta_DeploymentPlanRef_children); };
		::Udm::ChildrenAttr< ::CQML::DomainRiskGrouping> DomainRiskGrouping_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::DomainRiskGrouping, Pred> DomainRiskGrouping_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::DomainRiskGrouping, Pred>(impl, meta_DomainRiskGrouping_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::DeploymentPlanRef> DeploymentPlanRef_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::DeploymentPlanRef, Pred> DeploymentPlanRef_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::DeploymentPlanRef, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::DomainRiskGrouping> DomainRiskGrouping_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::DomainRiskGrouping, Pred> DomainRiskGrouping_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::DomainRiskGrouping, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::FTDeployDepends> FTDeployDepends_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::FTDeployDepends, Pred> FTDeployDepends_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::FTDeployDepends, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::RootFolder> RootFolder_parent() const;
		::Udm::ParentAttr< ::CQML::RootFolder> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionChildRole meta_FTDeployDepends_children;
		static ::Uml::CompositionChildRole meta_DeploymentPlanRef_children;
		static ::Uml::CompositionChildRole meta_DomainRiskGrouping_children;
		static ::Uml::CompositionParentRole meta_RootFolder_parent;

	};

	class CQML_Export EventChannelCommunicationPoint :  public MgaObject {
	public:
		EventChannelCommunicationPoint();
		EventChannelCommunicationPoint(::Udm::ObjectImpl *impl);
		EventChannelCommunicationPoint(const EventChannelCommunicationPoint &master);

#ifdef UDM_RVALUE
		EventChannelCommunicationPoint(EventChannelCommunicationPoint &&master);

		static EventChannelCommunicationPoint Cast(::Udm::Object &&a);
		EventChannelCommunicationPoint& operator=(EventChannelCommunicationPoint &&a);

#endif
		static EventChannelCommunicationPoint Cast(const ::Udm::Object &a);
		static EventChannelCommunicationPoint Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		EventChannelCommunicationPoint CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< EventChannelCommunicationPoint> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< EventChannelCommunicationPoint, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< EventChannelCommunicationPoint, Pred>(impl); };
		EventChannelCommunicationPoint CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< EventChannelCommunicationPoint> Derived();
		template <class Pred> ::Udm::DerivedAttr< EventChannelCommunicationPoint, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< EventChannelCommunicationPoint, Pred>(impl); };
		::Udm::ArchetypeAttr< EventChannelCommunicationPoint> Archetype() const;
		::Udm::BooleanAttr udp() const;
		::Udm::BooleanAttr is_multicast() const;
		::Udm::IntegerAttr port() const;
		::Udm::StringAttr address() const;
		::Udm::AClassAssocAttr< ReceiverConnection, eventServiceConfiguration> dstReceiverConnection() const;
		template <class Pred> ::Udm::AClassAssocAttr< ReceiverConnection, eventServiceConfiguration, Pred> dstReceiverConnection_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< ReceiverConnection, eventServiceConfiguration, Pred>(impl, meta_dstReceiverConnection, meta_dstReceiverConnection_rev); };
		::Udm::AClassAssocAttr< SenderConnection, eventServiceConfiguration> srcSenderConnection() const;
		template <class Pred> ::Udm::AClassAssocAttr< SenderConnection, eventServiceConfiguration, Pred> srcSenderConnection_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< SenderConnection, eventServiceConfiguration, Pred>(impl, meta_srcSenderConnection, meta_srcSenderConnection_rev); };
		::Udm::ParentAttr< ::CQML::CIAOEvents> CIAOEvents_parent() const;
		::Udm::ParentAttr< ::CQML::CIAOEvents> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_udp;
		static ::Uml::Attribute meta_is_multicast;
		static ::Uml::Attribute meta_port;
		static ::Uml::Attribute meta_address;
		static ::Uml::AssociationRole meta_dstReceiverConnection;
		static ::Uml::AssociationRole meta_dstReceiverConnection_rev;
		static ::Uml::AssociationRole meta_srcSenderConnection;
		static ::Uml::AssociationRole meta_srcSenderConnection_rev;
		static ::Uml::CompositionParentRole meta_CIAOEvents_parent;

	};

	class CQML_Export ReceiverConnection :  public MgaObject {
	public:
		ReceiverConnection();
		ReceiverConnection(::Udm::ObjectImpl *impl);
		ReceiverConnection(const ReceiverConnection &master);

#ifdef UDM_RVALUE
		ReceiverConnection(ReceiverConnection &&master);

		static ReceiverConnection Cast(::Udm::Object &&a);
		ReceiverConnection& operator=(ReceiverConnection &&a);

#endif
		static ReceiverConnection Cast(const ::Udm::Object &a);
		static ReceiverConnection Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ReceiverConnection CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ReceiverConnection> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ReceiverConnection, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ReceiverConnection, Pred>(impl); };
		ReceiverConnection CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ReceiverConnection> Derived();
		template <class Pred> ::Udm::DerivedAttr< ReceiverConnection, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ReceiverConnection, Pred>(impl); };
		::Udm::ArchetypeAttr< ReceiverConnection> Archetype() const;
		::Udm::ParentAttr< ::CQML::CIAOEvents> CIAOEvents_parent() const;
		::Udm::ParentAttr< ::CQML::CIAOEvents> parent() const;
		::Udm::AssocEndAttr< ::CQML::EventChannelCommunicationPoint> srcReceiverConnection_end() const;
		::Udm::AssocEndAttr< ::CQML::eventServiceConfiguration> dstReceiverConnection_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_CIAOEvents_parent;
		static ::Uml::AssociationRole meta_srcReceiverConnection_end_;
		static ::Uml::AssociationRole meta_dstReceiverConnection_end_;

	};

	class CQML_Export ConsumerBehavior :  public MgaObject {
	public:
		ConsumerBehavior();
		ConsumerBehavior(::Udm::ObjectImpl *impl);
		ConsumerBehavior(const ConsumerBehavior &master);

#ifdef UDM_RVALUE
		ConsumerBehavior(ConsumerBehavior &&master);

		static ConsumerBehavior Cast(::Udm::Object &&a);
		ConsumerBehavior& operator=(ConsumerBehavior &&a);

#endif
		static ConsumerBehavior Cast(const ::Udm::Object &a);
		static ConsumerBehavior Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ConsumerBehavior CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ConsumerBehavior> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ConsumerBehavior, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ConsumerBehavior, Pred>(impl); };
		ConsumerBehavior CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ConsumerBehavior> Derived();
		template <class Pred> ::Udm::DerivedAttr< ConsumerBehavior, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ConsumerBehavior, Pred>(impl); };
		::Udm::ArchetypeAttr< ConsumerBehavior> Archetype() const;
		::Udm::StringAttr ECProxyPushConsumerCollectionSynch() const;
		::Udm::StringAttr ECConsumerControl() const;
		::Udm::StringAttr ECConsumerLock() const;
		::Udm::IntegerAttr ECConsumerControlPeriod() const;
		::Udm::StringAttr ECProxyPushConsumerCollectionFlag() const;
		::Udm::StringAttr ECProxyPushConsumerCollectionIterator() const;
		::Udm::StringAttr ECFiltering() const;
		::Udm::ParentAttr< ::CQML::eventServiceConfiguration> eventServiceConfiguration_parent() const;
		::Udm::ParentAttr< ::CQML::eventServiceConfiguration> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_ECProxyPushConsumerCollectionSynch;
		static ::Uml::Attribute meta_ECConsumerControl;
		static ::Uml::Attribute meta_ECConsumerLock;
		static ::Uml::Attribute meta_ECConsumerControlPeriod;
		static ::Uml::Attribute meta_ECProxyPushConsumerCollectionFlag;
		static ::Uml::Attribute meta_ECProxyPushConsumerCollectionIterator;
		static ::Uml::Attribute meta_ECFiltering;
		static ::Uml::CompositionParentRole meta_eventServiceConfiguration_parent;

	};

	class CQML_Export Filter :  public MgaObject {
	public:
		Filter();
		Filter(::Udm::ObjectImpl *impl);
		Filter(const Filter &master);

#ifdef UDM_RVALUE
		Filter(Filter &&master);

		static Filter Cast(::Udm::Object &&a);
		Filter& operator=(Filter &&a);

#endif
		static Filter Cast(const ::Udm::Object &a);
		static Filter Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Filter CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Filter> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Filter, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Filter, Pred>(impl); };
		Filter CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Filter> Derived();
		template <class Pred> ::Udm::DerivedAttr< Filter, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Filter, Pred>(impl); };
		::Udm::ArchetypeAttr< Filter> Archetype() const;
		::Udm::StringAttr filter_id() const;
		::Udm::StringAttr filter_type() const;
		::Udm::ChildrenAttr< ::CQML::EventSourcePort> EventSourcePort_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::EventSourcePort, Pred> EventSourcePort_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::EventSourcePort, Pred>(impl, meta_EventSourcePort_children); };
		::Udm::ChildrenAttr< ::CQML::EventSource> EventSource_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::EventSource, Pred> EventSource_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::EventSource, Pred>(impl, meta_EventSource_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::EventSource> EventSource_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::EventSource, Pred> EventSource_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::EventSource, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::EventSourcePort> EventSourcePort_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::EventSourcePort, Pred> EventSourcePort_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::EventSourcePort, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::eventServiceConfiguration> eventServiceConfiguration_parent() const;
		::Udm::ParentAttr< ::CQML::eventServiceConfiguration> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_filter_id;
		static ::Uml::Attribute meta_filter_type;
		static ::Uml::CompositionChildRole meta_EventSourcePort_children;
		static ::Uml::CompositionChildRole meta_EventSource_children;
		static ::Uml::CompositionParentRole meta_eventServiceConfiguration_parent;

	};

	class CQML_Export EventSource :  public MgaObject {
	public:
		EventSource();
		EventSource(::Udm::ObjectImpl *impl);
		EventSource(const EventSource &master);

#ifdef UDM_RVALUE
		EventSource(EventSource &&master);

		static EventSource Cast(::Udm::Object &&a);
		EventSource& operator=(EventSource &&a);

#endif
		static EventSource Cast(const ::Udm::Object &a);
		static EventSource Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		EventSource CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< EventSource> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< EventSource, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< EventSource, Pred>(impl); };
		EventSource CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< EventSource> Derived();
		template <class Pred> ::Udm::DerivedAttr< EventSource, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< EventSource, Pred>(impl); };
		::Udm::ArchetypeAttr< EventSource> Archetype() const;
		::Udm::ParentAttr< ::CQML::Filter> Filter_parent() const;
		::Udm::ParentAttr< ::CQML::Filter> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_Filter_parent;

	};

	class CQML_Export SupplierBehavior :  public MgaObject {
	public:
		SupplierBehavior();
		SupplierBehavior(::Udm::ObjectImpl *impl);
		SupplierBehavior(const SupplierBehavior &master);

#ifdef UDM_RVALUE
		SupplierBehavior(SupplierBehavior &&master);

		static SupplierBehavior Cast(::Udm::Object &&a);
		SupplierBehavior& operator=(SupplierBehavior &&a);

#endif
		static SupplierBehavior Cast(const ::Udm::Object &a);
		static SupplierBehavior Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		SupplierBehavior CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< SupplierBehavior> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< SupplierBehavior, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< SupplierBehavior, Pred>(impl); };
		SupplierBehavior CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< SupplierBehavior> Derived();
		template <class Pred> ::Udm::DerivedAttr< SupplierBehavior, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< SupplierBehavior, Pred>(impl); };
		::Udm::ArchetypeAttr< SupplierBehavior> Archetype() const;
		::Udm::StringAttr ECProxySupplierLock() const;
		::Udm::StringAttr ECSupplierControl() const;
		::Udm::IntegerAttr ECSupplierControlPeriod() const;
		::Udm::StringAttr ECProxyPushSupplierCollectionFlag() const;
		::Udm::StringAttr ECProxyPushSupplierCollectionIterator() const;
		::Udm::StringAttr ECProxyPushSupplierCollectionSynch() const;
		::Udm::StringAttr ECSupplierFiltering() const;
		::Udm::ParentAttr< ::CQML::eventServiceConfiguration> eventServiceConfiguration_parent() const;
		::Udm::ParentAttr< ::CQML::eventServiceConfiguration> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_ECProxySupplierLock;
		static ::Uml::Attribute meta_ECSupplierControl;
		static ::Uml::Attribute meta_ECSupplierControlPeriod;
		static ::Uml::Attribute meta_ECProxyPushSupplierCollectionFlag;
		static ::Uml::Attribute meta_ECProxyPushSupplierCollectionIterator;
		static ::Uml::Attribute meta_ECProxyPushSupplierCollectionSynch;
		static ::Uml::Attribute meta_ECSupplierFiltering;
		static ::Uml::CompositionParentRole meta_eventServiceConfiguration_parent;

	};

	class CQML_Export eventServiceConfiguration :  public MgaObject {
	public:
		eventServiceConfiguration();
		eventServiceConfiguration(::Udm::ObjectImpl *impl);
		eventServiceConfiguration(const eventServiceConfiguration &master);

#ifdef UDM_RVALUE
		eventServiceConfiguration(eventServiceConfiguration &&master);

		static eventServiceConfiguration Cast(::Udm::Object &&a);
		eventServiceConfiguration& operator=(eventServiceConfiguration &&a);

#endif
		static eventServiceConfiguration Cast(const ::Udm::Object &a);
		static eventServiceConfiguration Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		eventServiceConfiguration CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< eventServiceConfiguration> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< eventServiceConfiguration, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< eventServiceConfiguration, Pred>(impl); };
		eventServiceConfiguration CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< eventServiceConfiguration> Derived();
		template <class Pred> ::Udm::DerivedAttr< eventServiceConfiguration, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< eventServiceConfiguration, Pred>(impl); };
		::Udm::ArchetypeAttr< eventServiceConfiguration> Archetype() const;
		::Udm::StringAttr type() const;
		::Udm::StringAttr svc_cfg_file() const;
		::Udm::StringAttr node() const;
		::Udm::StringAttr configuration_id() const;
		::Udm::AClassAssocAttr< ReceiverConnection, EventChannelCommunicationPoint> srcReceiverConnection() const;
		template <class Pred> ::Udm::AClassAssocAttr< ReceiverConnection, EventChannelCommunicationPoint, Pred> srcReceiverConnection_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< ReceiverConnection, EventChannelCommunicationPoint, Pred>(impl, meta_srcReceiverConnection, meta_srcReceiverConnection_rev); };
		::Udm::AClassAssocAttr< SenderConnection, EventChannelCommunicationPoint> dstSenderConnection() const;
		template <class Pred> ::Udm::AClassAssocAttr< SenderConnection, EventChannelCommunicationPoint, Pred> dstSenderConnection_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< SenderConnection, EventChannelCommunicationPoint, Pred>(impl, meta_dstSenderConnection, meta_dstSenderConnection_rev); };
		::Udm::ChildAttr< ::CQML::ConsumerBehavior> ConsumerBehavior_child() const;
		::Udm::ChildAttr< ::CQML::EventChannelFactory> EventChannelFactory_child() const;
		::Udm::ChildAttr< ::CQML::SupplierBehavior> SupplierBehavior_child() const;
		::Udm::ChildrenAttr< ::CQML::Filter> Filter_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Filter, Pred> Filter_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Filter, Pred>(impl, meta_Filter_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ConsumerBehavior> ConsumerBehavior_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ConsumerBehavior, Pred> ConsumerBehavior_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ConsumerBehavior, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Filter> Filter_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Filter, Pred> Filter_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Filter, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::SupplierBehavior> SupplierBehavior_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::SupplierBehavior, Pred> SupplierBehavior_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::SupplierBehavior, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::EventChannelFactory> EventChannelFactory_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::EventChannelFactory, Pred> EventChannelFactory_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::EventChannelFactory, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::CIAOEvents> CIAOEvents_parent() const;
		::Udm::ParentAttr< ::CQML::CIAOEvents> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_type;
		static ::Uml::Attribute meta_svc_cfg_file;
		static ::Uml::Attribute meta_node;
		static ::Uml::Attribute meta_configuration_id;
		static ::Uml::AssociationRole meta_srcReceiverConnection;
		static ::Uml::AssociationRole meta_srcReceiverConnection_rev;
		static ::Uml::AssociationRole meta_dstSenderConnection;
		static ::Uml::AssociationRole meta_dstSenderConnection_rev;
		static ::Uml::CompositionChildRole meta_ConsumerBehavior_child;
		static ::Uml::CompositionChildRole meta_EventChannelFactory_child;
		static ::Uml::CompositionChildRole meta_SupplierBehavior_child;
		static ::Uml::CompositionChildRole meta_Filter_children;
		static ::Uml::CompositionParentRole meta_CIAOEvents_parent;

	};

	class CQML_Export EventChannelFactory :  public MgaObject {
	public:
		EventChannelFactory();
		EventChannelFactory(::Udm::ObjectImpl *impl);
		EventChannelFactory(const EventChannelFactory &master);

#ifdef UDM_RVALUE
		EventChannelFactory(EventChannelFactory &&master);

		static EventChannelFactory Cast(::Udm::Object &&a);
		EventChannelFactory& operator=(EventChannelFactory &&a);

#endif
		static EventChannelFactory Cast(const ::Udm::Object &a);
		static EventChannelFactory Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		EventChannelFactory CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< EventChannelFactory> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< EventChannelFactory, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< EventChannelFactory, Pred>(impl); };
		EventChannelFactory CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< EventChannelFactory> Derived();
		template <class Pred> ::Udm::DerivedAttr< EventChannelFactory, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< EventChannelFactory, Pred>(impl); };
		::Udm::ArchetypeAttr< EventChannelFactory> Archetype() const;
		::Udm::IntegerAttr ECDispatchingThreads() const;
		::Udm::StringAttr ECUseORBId() const;
		::Udm::StringAttr ECTimeout() const;
		::Udm::StringAttr ECDispatching() const;
		::Udm::StringAttr ECObserver() const;
		::Udm::StringAttr ECScheduling() const;
		::Udm::ParentAttr< ::CQML::eventServiceConfiguration> eventServiceConfiguration_parent() const;
		::Udm::ParentAttr< ::CQML::eventServiceConfiguration> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_ECDispatchingThreads;
		static ::Uml::Attribute meta_ECUseORBId;
		static ::Uml::Attribute meta_ECTimeout;
		static ::Uml::Attribute meta_ECDispatching;
		static ::Uml::Attribute meta_ECObserver;
		static ::Uml::Attribute meta_ECScheduling;
		static ::Uml::CompositionParentRole meta_eventServiceConfiguration_parent;

	};

	class CQML_Export EventSourcePort :  public MgaObject {
	public:
		EventSourcePort();
		EventSourcePort(::Udm::ObjectImpl *impl);
		EventSourcePort(const EventSourcePort &master);

#ifdef UDM_RVALUE
		EventSourcePort(EventSourcePort &&master);

		static EventSourcePort Cast(::Udm::Object &&a);
		EventSourcePort& operator=(EventSourcePort &&a);

#endif
		static EventSourcePort Cast(const ::Udm::Object &a);
		static EventSourcePort Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		EventSourcePort CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< EventSourcePort> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< EventSourcePort, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< EventSourcePort, Pred>(impl); };
		EventSourcePort CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< EventSourcePort> Derived();
		template <class Pred> ::Udm::DerivedAttr< EventSourcePort, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< EventSourcePort, Pred>(impl); };
		::Udm::ArchetypeAttr< EventSourcePort> Archetype() const;
		::Udm::PointerAttr< OutEventPort> ref() const;
		::Udm::ParentAttr< ::CQML::Filter> Filter_parent() const;
		::Udm::ParentAttr< ::CQML::Filter> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::CompositionParentRole meta_Filter_parent;

	};

	class CQML_Export SenderConnection :  public MgaObject {
	public:
		SenderConnection();
		SenderConnection(::Udm::ObjectImpl *impl);
		SenderConnection(const SenderConnection &master);

#ifdef UDM_RVALUE
		SenderConnection(SenderConnection &&master);

		static SenderConnection Cast(::Udm::Object &&a);
		SenderConnection& operator=(SenderConnection &&a);

#endif
		static SenderConnection Cast(const ::Udm::Object &a);
		static SenderConnection Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		SenderConnection CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< SenderConnection> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< SenderConnection, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< SenderConnection, Pred>(impl); };
		SenderConnection CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< SenderConnection> Derived();
		template <class Pred> ::Udm::DerivedAttr< SenderConnection, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< SenderConnection, Pred>(impl); };
		::Udm::ArchetypeAttr< SenderConnection> Archetype() const;
		::Udm::ParentAttr< ::CQML::CIAOEvents> CIAOEvents_parent() const;
		::Udm::ParentAttr< ::CQML::CIAOEvents> parent() const;
		::Udm::AssocEndAttr< ::CQML::eventServiceConfiguration> srcSenderConnection_end() const;
		::Udm::AssocEndAttr< ::CQML::EventChannelCommunicationPoint> dstSenderConnection_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_CIAOEvents_parent;
		static ::Uml::AssociationRole meta_srcSenderConnection_end_;
		static ::Uml::AssociationRole meta_dstSenderConnection_end_;

	};

	class CQML_Export SecurityQoS :  virtual  public MgaObject {
	public:
		SecurityQoS();
		SecurityQoS(::Udm::ObjectImpl *impl);
		SecurityQoS(const SecurityQoS &master);

#ifdef UDM_RVALUE
		SecurityQoS(SecurityQoS &&master);

		static SecurityQoS Cast(::Udm::Object &&a);
		SecurityQoS& operator=(SecurityQoS &&a);

#endif
		static SecurityQoS Cast(const ::Udm::Object &a);
		static SecurityQoS Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		SecurityQoS CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< SecurityQoS> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< SecurityQoS, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< SecurityQoS, Pred>(impl); };
		SecurityQoS CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< SecurityQoS> Derived();
		template <class Pred> ::Udm::DerivedAttr< SecurityQoS, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< SecurityQoS, Pred>(impl); };
		::Udm::ArchetypeAttr< SecurityQoS> Archetype() const;
		::Udm::StringAttr IntegrityLevel() const;
		::Udm::BooleanAttr Authentication() const;
		::Udm::StringAttr AuditLevel() const;
		::Udm::StringAttr ConfidentialityLevel() const;
		::Udm::StringAttr SecurityLevel() const;
		::Udm::BooleanAttr NonRepudiation() const;
		::Udm::StringAttr SecurityPolicy() const;
		::Udm::StringAttr DelegationPolicy() const;
		::Udm::ChildrenAttr< ::CQML::PortRuleRef> PortRuleRef_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PortRuleRef, Pred> PortRuleRef_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PortRuleRef, Pred>(impl, meta_PortRuleRef_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::PortRuleRef> PortRuleRef_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PortRuleRef, Pred> PortRuleRef_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PortRuleRef, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::Udm::Object> parent() const;

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_IntegrityLevel;
		static ::Uml::Attribute meta_Authentication;
		static ::Uml::Attribute meta_AuditLevel;
		static ::Uml::Attribute meta_ConfidentialityLevel;
		static ::Uml::Attribute meta_SecurityLevel;
		static ::Uml::Attribute meta_NonRepudiation;
		static ::Uml::Attribute meta_SecurityPolicy;
		static ::Uml::Attribute meta_DelegationPolicy;
		static ::Uml::CompositionChildRole meta_PortRuleRef_children;

	};

	class CQML_Export ComponentAssemblySecurityQoS :  public ComponentAssemblyQoSCharacteristic,  public SecurityQoS {
	public:
		ComponentAssemblySecurityQoS();
		ComponentAssemblySecurityQoS(::Udm::ObjectImpl *impl);
		ComponentAssemblySecurityQoS(const ComponentAssemblySecurityQoS &master);

#ifdef UDM_RVALUE
		ComponentAssemblySecurityQoS(ComponentAssemblySecurityQoS &&master);

		static ComponentAssemblySecurityQoS Cast(::Udm::Object &&a);
		ComponentAssemblySecurityQoS& operator=(ComponentAssemblySecurityQoS &&a);

#endif
		static ComponentAssemblySecurityQoS Cast(const ::Udm::Object &a);
		static ComponentAssemblySecurityQoS Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ComponentAssemblySecurityQoS CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ComponentAssemblySecurityQoS> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ComponentAssemblySecurityQoS, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ComponentAssemblySecurityQoS, Pred>(impl); };
		ComponentAssemblySecurityQoS CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ComponentAssemblySecurityQoS> Derived();
		template <class Pred> ::Udm::DerivedAttr< ComponentAssemblySecurityQoS, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ComponentAssemblySecurityQoS, Pred>(impl); };
		::Udm::ArchetypeAttr< ComponentAssemblySecurityQoS> Archetype() const;
		::Udm::ChildrenAttr< ::CQML::AssemblyRuleRef> AssemblyRuleRef_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::AssemblyRuleRef, Pred> AssemblyRuleRef_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::AssemblyRuleRef, Pred>(impl, meta_AssemblyRuleRef_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::AssemblyRuleRef> AssemblyRuleRef_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::AssemblyRuleRef, Pred> AssemblyRuleRef_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::AssemblyRuleRef, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionChildRole meta_AssemblyRuleRef_children;

	};

	class CQML_Export ComponentSecurityQoS :  public ComponentQoSCharacteristic,  public SecurityQoS {
	public:
		ComponentSecurityQoS();
		ComponentSecurityQoS(::Udm::ObjectImpl *impl);
		ComponentSecurityQoS(const ComponentSecurityQoS &master);

#ifdef UDM_RVALUE
		ComponentSecurityQoS(ComponentSecurityQoS &&master);

		static ComponentSecurityQoS Cast(::Udm::Object &&a);
		ComponentSecurityQoS& operator=(ComponentSecurityQoS &&a);

#endif
		static ComponentSecurityQoS Cast(const ::Udm::Object &a);
		static ComponentSecurityQoS Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ComponentSecurityQoS CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ComponentSecurityQoS> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ComponentSecurityQoS, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ComponentSecurityQoS, Pred>(impl); };
		ComponentSecurityQoS CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ComponentSecurityQoS> Derived();
		template <class Pred> ::Udm::DerivedAttr< ComponentSecurityQoS, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ComponentSecurityQoS, Pred>(impl); };
		::Udm::ArchetypeAttr< ComponentSecurityQoS> Archetype() const;
		::Udm::ChildrenAttr< ::CQML::ComponentRuleRef> ComponentRuleRef_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentRuleRef, Pred> ComponentRuleRef_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentRuleRef, Pred>(impl, meta_ComponentRuleRef_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentRuleRef> ComponentRuleRef_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentRuleRef, Pred> ComponentRuleRef_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentRuleRef, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::ComponentAssembly> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionChildRole meta_ComponentRuleRef_children;

	};

	class CQML_Export PortSecurityQoS :  public PortQoSCharacteristic,  public SecurityQoS {
	public:
		PortSecurityQoS();
		PortSecurityQoS(::Udm::ObjectImpl *impl);
		PortSecurityQoS(const PortSecurityQoS &master);

#ifdef UDM_RVALUE
		PortSecurityQoS(PortSecurityQoS &&master);

		static PortSecurityQoS Cast(::Udm::Object &&a);
		PortSecurityQoS& operator=(PortSecurityQoS &&a);

#endif
		static PortSecurityQoS Cast(const ::Udm::Object &a);
		static PortSecurityQoS Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		PortSecurityQoS CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< PortSecurityQoS> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< PortSecurityQoS, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< PortSecurityQoS, Pred>(impl); };
		PortSecurityQoS CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< PortSecurityQoS> Derived();
		template <class Pred> ::Udm::DerivedAttr< PortSecurityQoS, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< PortSecurityQoS, Pred>(impl); };
		::Udm::ArchetypeAttr< PortSecurityQoS> Archetype() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;

	};

	class CQML_Export PortRuleRef :  public MgaObject {
	public:
		PortRuleRef();
		PortRuleRef(::Udm::ObjectImpl *impl);
		PortRuleRef(const PortRuleRef &master);

#ifdef UDM_RVALUE
		PortRuleRef(PortRuleRef &&master);

		static PortRuleRef Cast(::Udm::Object &&a);
		PortRuleRef& operator=(PortRuleRef &&a);

#endif
		static PortRuleRef Cast(const ::Udm::Object &a);
		static PortRuleRef Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		PortRuleRef CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< PortRuleRef> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< PortRuleRef, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< PortRuleRef, Pred>(impl); };
		PortRuleRef CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< PortRuleRef> Derived();
		template <class Pred> ::Udm::DerivedAttr< PortRuleRef, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< PortRuleRef, Pred>(impl); };
		::Udm::ArchetypeAttr< PortRuleRef> Archetype() const;
		::Udm::PointerAttr< PortRule> ref() const;
		::Udm::ParentAttr< ::CQML::SecurityQoS> SecurityQoS_parent() const;
		::Udm::ParentAttr< ::CQML::SecurityQoS> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::CompositionParentRole meta_SecurityQoS_parent;

	};

	class CQML_Export AssemblyRuleRef :  public MgaObject {
	public:
		AssemblyRuleRef();
		AssemblyRuleRef(::Udm::ObjectImpl *impl);
		AssemblyRuleRef(const AssemblyRuleRef &master);

#ifdef UDM_RVALUE
		AssemblyRuleRef(AssemblyRuleRef &&master);

		static AssemblyRuleRef Cast(::Udm::Object &&a);
		AssemblyRuleRef& operator=(AssemblyRuleRef &&a);

#endif
		static AssemblyRuleRef Cast(const ::Udm::Object &a);
		static AssemblyRuleRef Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		AssemblyRuleRef CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< AssemblyRuleRef> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< AssemblyRuleRef, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< AssemblyRuleRef, Pred>(impl); };
		AssemblyRuleRef CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< AssemblyRuleRef> Derived();
		template <class Pred> ::Udm::DerivedAttr< AssemblyRuleRef, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< AssemblyRuleRef, Pred>(impl); };
		::Udm::ArchetypeAttr< AssemblyRuleRef> Archetype() const;
		::Udm::PointerAttr< AssemblyRule> ref() const;
		::Udm::ParentAttr< ::CQML::ComponentAssemblySecurityQoS> ComponentAssemblySecurityQoS_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentAssemblySecurityQoS> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::CompositionParentRole meta_ComponentAssemblySecurityQoS_parent;

	};

	class CQML_Export ComponentRuleRef :  public MgaObject {
	public:
		ComponentRuleRef();
		ComponentRuleRef(::Udm::ObjectImpl *impl);
		ComponentRuleRef(const ComponentRuleRef &master);

#ifdef UDM_RVALUE
		ComponentRuleRef(ComponentRuleRef &&master);

		static ComponentRuleRef Cast(::Udm::Object &&a);
		ComponentRuleRef& operator=(ComponentRuleRef &&a);

#endif
		static ComponentRuleRef Cast(const ::Udm::Object &a);
		static ComponentRuleRef Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ComponentRuleRef CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ComponentRuleRef> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ComponentRuleRef, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ComponentRuleRef, Pred>(impl); };
		ComponentRuleRef CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ComponentRuleRef> Derived();
		template <class Pred> ::Udm::DerivedAttr< ComponentRuleRef, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ComponentRuleRef, Pred>(impl); };
		::Udm::ArchetypeAttr< ComponentRuleRef> Archetype() const;
		::Udm::PointerAttr< ComponentRule> ref() const;
		::Udm::ParentAttr< ::CQML::ComponentSecurityQoS> ComponentSecurityQoS_parent() const;
		::Udm::ParentAttr< ::CQML::ComponentSecurityQoS> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::CompositionParentRole meta_ComponentSecurityQoS_parent;

	};

	class CQML_Export Policy :  public MgaObject {
	public:
		Policy();
		Policy(::Udm::ObjectImpl *impl);
		Policy(const Policy &master);

#ifdef UDM_RVALUE
		Policy(Policy &&master);

		static Policy Cast(::Udm::Object &&a);
		Policy& operator=(Policy &&a);

#endif
		static Policy Cast(const ::Udm::Object &a);
		static Policy Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Policy CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Policy> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Policy, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Policy, Pred>(impl); };
		Policy CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Policy> Derived();
		template <class Pred> ::Udm::DerivedAttr< Policy, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Policy, Pred>(impl); };
		::Udm::ArchetypeAttr< Policy> Archetype() const;
		::Udm::ChildrenAttr< ::CQML::OnInterfaceConn> OnInterfaceConn_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::OnInterfaceConn, Pred> OnInterfaceConn_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::OnInterfaceConn, Pred>(impl, meta_OnInterfaceConn_children); };
		::Udm::ChildrenAttr< ::CQML::AssemblyAccessConn> AssemblyAccessConn_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::AssemblyAccessConn, Pred> AssemblyAccessConn_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::AssemblyAccessConn, Pred>(impl, meta_AssemblyAccessConn_children); };
		::Udm::ChildrenAttr< ::CQML::AttributeRef> AttributeRef_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::AttributeRef, Pred> AttributeRef_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::AttributeRef, Pred>(impl, meta_AttributeRef_children); };
		::Udm::ChildrenAttr< ::CQML::SecuredPathConn> SecuredPathConn_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::SecuredPathConn, Pred> SecuredPathConn_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::SecuredPathConn, Pred>(impl, meta_SecuredPathConn_children); };
		::Udm::ChildrenAttr< ::CQML::OperationInvokeConn> OperationInvokeConn_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::OperationInvokeConn, Pred> OperationInvokeConn_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::OperationInvokeConn, Pred>(impl, meta_OperationInvokeConn_children); };
		::Udm::ChildrenAttr< ::CQML::ComponentAssemblyReference> ComponentAssemblyReference_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentAssemblyReference, Pred> ComponentAssemblyReference_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentAssemblyReference, Pred>(impl, meta_ComponentAssemblyReference_children); };
		::Udm::ChildrenAttr< ::CQML::OnAssemblyConn> OnAssemblyConn_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::OnAssemblyConn, Pred> OnAssemblyConn_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::OnAssemblyConn, Pred>(impl, meta_OnAssemblyConn_children); };
		::Udm::ChildrenAttr< ::CQML::AttributeManipulateConn> AttributeManipulateConn_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::AttributeManipulateConn, Pred> AttributeManipulateConn_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::AttributeManipulateConn, Pred>(impl, meta_AttributeManipulateConn_children); };
		::Udm::ChildrenAttr< ::CQML::ResourceActionBase> ResourceActionBase_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ResourceActionBase, Pred> ResourceActionBase_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ResourceActionBase, Pred>(impl, meta_ResourceActionBase_children); };
		::Udm::ChildrenAttr< ::CQML::RuleBase> RuleBase_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::RuleBase, Pred> RuleBase_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::RuleBase, Pred>(impl, meta_RuleBase_children); };
		::Udm::ChildrenAttr< ::CQML::PathRef> PathRef_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PathRef, Pred> PathRef_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PathRef, Pred>(impl, meta_PathRef_children); };
		::Udm::ChildrenAttr< ::CQML::ObjectAccessConn> ObjectAccessConn_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ObjectAccessConn, Pred> ObjectAccessConn_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ObjectAccessConn, Pred>(impl, meta_ObjectAccessConn_children); };
		::Udm::ChildrenAttr< ::CQML::ComponentAccessConn> ComponentAccessConn_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentAccessConn, Pred> ComponentAccessConn_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentAccessConn, Pred>(impl, meta_ComponentAccessConn_children); };
		::Udm::ChildrenAttr< ::CQML::InitiatorRoleRef> InitiatorRoleRef_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::InitiatorRoleRef, Pred> InitiatorRoleRef_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::InitiatorRoleRef, Pred>(impl, meta_InitiatorRoleRef_children); };
		::Udm::ChildrenAttr< ::CQML::OnComponentConn> OnComponentConn_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::OnComponentConn, Pred> OnComponentConn_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::OnComponentConn, Pred>(impl, meta_OnComponentConn_children); };
		::Udm::ChildrenAttr< ::CQML::TargetObjectRef> TargetObjectRef_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::TargetObjectRef, Pred> TargetObjectRef_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::TargetObjectRef, Pred>(impl, meta_TargetObjectRef_children); };
		::Udm::ChildrenAttr< ::CQML::ComponentRef> ComponentRef_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentRef, Pred> ComponentRef_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentRef, Pred>(impl, meta_ComponentRef_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Manageable> Manageable_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Manageable, Pred> Manageable_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Manageable, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentBase> ComponentBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentBase, Pred> ComponentBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentRef> ComponentRef_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentRef, Pred> ComponentRef_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentRef, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::CollocationGroupMember> CollocationGroupMember_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::CollocationGroupMember, Pred> CollocationGroupMember_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::CollocationGroupMember, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::FTMonitorable> FTMonitorable_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::FTMonitorable, Pred> FTMonitorable_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::FTMonitorable, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentAssemblyReference> ComponentAssemblyReference_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentAssemblyReference, Pred> ComponentAssemblyReference_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentAssemblyReference, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::OperationRef> OperationRef_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::OperationRef, Pred> OperationRef_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::OperationRef, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ResourceActionBase> ResourceActionBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ResourceActionBase, Pred> ResourceActionBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ResourceActionBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentAssemblyBase> ComponentAssemblyBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentAssemblyBase, Pred> ComponentAssemblyBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentAssemblyBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::AssemblyAccessConn> AssemblyAccessConn_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::AssemblyAccessConn, Pred> AssemblyAccessConn_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::AssemblyAccessConn, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ObjectAccessConn> ObjectAccessConn_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ObjectAccessConn, Pred> ObjectAccessConn_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ObjectAccessConn, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::TargetObjectRef> TargetObjectRef_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::TargetObjectRef, Pred> TargetObjectRef_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::TargetObjectRef, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::AttributeRef> AttributeRef_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::AttributeRef, Pred> AttributeRef_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::AttributeRef, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::RuleBase> RuleBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::RuleBase, Pred> RuleBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::RuleBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::PortRule> PortRule_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PortRule, Pred> PortRule_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PortRule, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::AssemblyRule> AssemblyRule_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::AssemblyRule, Pred> AssemblyRule_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::AssemblyRule, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentRule> ComponentRule_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentRule, Pred> ComponentRule_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentRule, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::OnInterfaceConn> OnInterfaceConn_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::OnInterfaceConn, Pred> OnInterfaceConn_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::OnInterfaceConn, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::OperationSet> OperationSet_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::OperationSet, Pred> OperationSet_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::OperationSet, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentAccessConn> ComponentAccessConn_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentAccessConn, Pred> ComponentAccessConn_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentAccessConn, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::InitiatorRoleRef> InitiatorRoleRef_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::InitiatorRoleRef, Pred> InitiatorRoleRef_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::InitiatorRoleRef, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::AttributeManipulateConn> AttributeManipulateConn_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::AttributeManipulateConn, Pred> AttributeManipulateConn_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::AttributeManipulateConn, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::SecuredPathConn> SecuredPathConn_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::SecuredPathConn, Pred> SecuredPathConn_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::SecuredPathConn, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::OnAssemblyConn> OnAssemblyConn_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::OnAssemblyConn, Pred> OnAssemblyConn_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::OnAssemblyConn, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::PathRef> PathRef_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PathRef, Pred> PathRef_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PathRef, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::OperationInvokeConn> OperationInvokeConn_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::OperationInvokeConn, Pred> OperationInvokeConn_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::OperationInvokeConn, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::RequiredRights> RequiredRights_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::RequiredRights, Pred> RequiredRights_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::RequiredRights, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::OnComponentConn> OnComponentConn_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::OnComponentConn, Pred> OnComponentConn_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::OnComponentConn, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::PolicySet> PolicySet_parent() const;
		::Udm::ParentAttr< ::CQML::PolicySet> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionChildRole meta_OnInterfaceConn_children;
		static ::Uml::CompositionChildRole meta_AssemblyAccessConn_children;
		static ::Uml::CompositionChildRole meta_AttributeRef_children;
		static ::Uml::CompositionChildRole meta_SecuredPathConn_children;
		static ::Uml::CompositionChildRole meta_OperationInvokeConn_children;
		static ::Uml::CompositionChildRole meta_ComponentAssemblyReference_children;
		static ::Uml::CompositionChildRole meta_OnAssemblyConn_children;
		static ::Uml::CompositionChildRole meta_AttributeManipulateConn_children;
		static ::Uml::CompositionChildRole meta_ResourceActionBase_children;
		static ::Uml::CompositionChildRole meta_RuleBase_children;
		static ::Uml::CompositionChildRole meta_PathRef_children;
		static ::Uml::CompositionChildRole meta_ObjectAccessConn_children;
		static ::Uml::CompositionChildRole meta_ComponentAccessConn_children;
		static ::Uml::CompositionChildRole meta_InitiatorRoleRef_children;
		static ::Uml::CompositionChildRole meta_OnComponentConn_children;
		static ::Uml::CompositionChildRole meta_TargetObjectRef_children;
		static ::Uml::CompositionChildRole meta_ComponentRef_children;
		static ::Uml::CompositionParentRole meta_PolicySet_parent;

	};

	class CQML_Export PolicySet :  public MgaObject {
	public:
		PolicySet();
		PolicySet(::Udm::ObjectImpl *impl);
		PolicySet(const PolicySet &master);

#ifdef UDM_RVALUE
		PolicySet(PolicySet &&master);

		static PolicySet Cast(::Udm::Object &&a);
		PolicySet& operator=(PolicySet &&a);

#endif
		static PolicySet Cast(const ::Udm::Object &a);
		static PolicySet Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		PolicySet CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< PolicySet> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< PolicySet, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< PolicySet, Pred>(impl); };
		PolicySet CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< PolicySet> Derived();
		template <class Pred> ::Udm::DerivedAttr< PolicySet, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< PolicySet, Pred>(impl); };
		::Udm::ArchetypeAttr< PolicySet> Archetype() const;
		::Udm::ChildrenAttr< ::CQML::Policy> Policy_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Policy, Pred> Policy_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Policy, Pred>(impl, meta_Policy_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Policy> Policy_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Policy, Pred> Policy_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Policy, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::Security> Security_parent() const;
		::Udm::ParentAttr< ::CQML::Security> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionChildRole meta_Policy_children;
		static ::Uml::CompositionParentRole meta_Security_parent;

	};

	class CQML_Export AssemblyAccessConn :  public MgaObject {
	public:
		AssemblyAccessConn();
		AssemblyAccessConn(::Udm::ObjectImpl *impl);
		AssemblyAccessConn(const AssemblyAccessConn &master);

#ifdef UDM_RVALUE
		AssemblyAccessConn(AssemblyAccessConn &&master);

		static AssemblyAccessConn Cast(::Udm::Object &&a);
		AssemblyAccessConn& operator=(AssemblyAccessConn &&a);

#endif
		static AssemblyAccessConn Cast(const ::Udm::Object &a);
		static AssemblyAccessConn Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		AssemblyAccessConn CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< AssemblyAccessConn> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< AssemblyAccessConn, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< AssemblyAccessConn, Pred>(impl); };
		AssemblyAccessConn CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< AssemblyAccessConn> Derived();
		template <class Pred> ::Udm::DerivedAttr< AssemblyAccessConn, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< AssemblyAccessConn, Pred>(impl); };
		::Udm::ArchetypeAttr< AssemblyAccessConn> Archetype() const;
		::Udm::ParentAttr< ::CQML::Policy> Policy_parent() const;
		::Udm::ParentAttr< ::CQML::Policy> parent() const;
		::Udm::AssocEndAttr< ::CQML::InitiatorRoleRef> srcAssemblyAccessConn_end() const;
		::Udm::AssocEndAttr< ::CQML::AssemblyRule> dstAssemblyAccessConn_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_Policy_parent;
		static ::Uml::AssociationRole meta_srcAssemblyAccessConn_end_;
		static ::Uml::AssociationRole meta_dstAssemblyAccessConn_end_;

	};

	class CQML_Export ObjectAccessConn :  public MgaObject {
	public:
		ObjectAccessConn();
		ObjectAccessConn(::Udm::ObjectImpl *impl);
		ObjectAccessConn(const ObjectAccessConn &master);

#ifdef UDM_RVALUE
		ObjectAccessConn(ObjectAccessConn &&master);

		static ObjectAccessConn Cast(::Udm::Object &&a);
		ObjectAccessConn& operator=(ObjectAccessConn &&a);

#endif
		static ObjectAccessConn Cast(const ::Udm::Object &a);
		static ObjectAccessConn Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ObjectAccessConn CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ObjectAccessConn> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ObjectAccessConn, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ObjectAccessConn, Pred>(impl); };
		ObjectAccessConn CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ObjectAccessConn> Derived();
		template <class Pred> ::Udm::DerivedAttr< ObjectAccessConn, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ObjectAccessConn, Pred>(impl); };
		::Udm::ArchetypeAttr< ObjectAccessConn> Archetype() const;
		::Udm::ParentAttr< ::CQML::Policy> Policy_parent() const;
		::Udm::ParentAttr< ::CQML::Policy> parent() const;
		::Udm::AssocEndAttr< ::CQML::InitiatorRoleRef> srcObjectAccessConn_end() const;
		::Udm::AssocEndAttr< ::CQML::PortRule> dstObjectAccessConn_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_Policy_parent;
		static ::Uml::AssociationRole meta_srcObjectAccessConn_end_;
		static ::Uml::AssociationRole meta_dstObjectAccessConn_end_;

	};

	class CQML_Export TargetObjectRef :  public MgaObject {
	public:
		TargetObjectRef();
		TargetObjectRef(::Udm::ObjectImpl *impl);
		TargetObjectRef(const TargetObjectRef &master);

#ifdef UDM_RVALUE
		TargetObjectRef(TargetObjectRef &&master);

		static TargetObjectRef Cast(::Udm::Object &&a);
		TargetObjectRef& operator=(TargetObjectRef &&a);

#endif
		static TargetObjectRef Cast(const ::Udm::Object &a);
		static TargetObjectRef Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		TargetObjectRef CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< TargetObjectRef> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< TargetObjectRef, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< TargetObjectRef, Pred>(impl); };
		TargetObjectRef CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< TargetObjectRef> Derived();
		template <class Pred> ::Udm::DerivedAttr< TargetObjectRef, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< TargetObjectRef, Pred>(impl); };
		::Udm::ArchetypeAttr< TargetObjectRef> Archetype() const;
		::Udm::PointerAttr< ::CQML::Object> ref() const;
		::Udm::AClassAssocAttr< OnInterfaceConn, PortRule> srcOnInterfaceConn() const;
		template <class Pred> ::Udm::AClassAssocAttr< OnInterfaceConn, PortRule, Pred> srcOnInterfaceConn_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< OnInterfaceConn, PortRule, Pred>(impl, meta_srcOnInterfaceConn, meta_srcOnInterfaceConn_rev); };
		::Udm::ParentAttr< ::CQML::Policy> Policy_parent() const;
		::Udm::ParentAttr< ::CQML::Policy> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::AssociationRole meta_srcOnInterfaceConn;
		static ::Uml::AssociationRole meta_srcOnInterfaceConn_rev;
		static ::Uml::CompositionParentRole meta_Policy_parent;

	};

	class CQML_Export AttributeRef :  public MgaObject {
	public:
		AttributeRef();
		AttributeRef(::Udm::ObjectImpl *impl);
		AttributeRef(const AttributeRef &master);

#ifdef UDM_RVALUE
		AttributeRef(AttributeRef &&master);

		static AttributeRef Cast(::Udm::Object &&a);
		AttributeRef& operator=(AttributeRef &&a);

#endif
		static AttributeRef Cast(const ::Udm::Object &a);
		static AttributeRef Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		AttributeRef CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< AttributeRef> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< AttributeRef, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< AttributeRef, Pred>(impl); };
		AttributeRef CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< AttributeRef> Derived();
		template <class Pred> ::Udm::DerivedAttr< AttributeRef, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< AttributeRef, Pred>(impl); };
		::Udm::ArchetypeAttr< AttributeRef> Archetype() const;
		::Udm::PointerAttr< ReadonlyAttribute> ref() const;
		::Udm::AClassAssocAttr< AttributeManipulateConn, ComponentRule> srcAttributeManipulateConn() const;
		template <class Pred> ::Udm::AClassAssocAttr< AttributeManipulateConn, ComponentRule, Pred> srcAttributeManipulateConn_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< AttributeManipulateConn, ComponentRule, Pred>(impl, meta_srcAttributeManipulateConn, meta_srcAttributeManipulateConn_rev); };
		::Udm::ParentAttr< ::CQML::Policy> Policy_parent() const;
		::Udm::ParentAttr< ::CQML::Policy> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::AssociationRole meta_srcAttributeManipulateConn;
		static ::Uml::AssociationRole meta_srcAttributeManipulateConn_rev;
		static ::Uml::CompositionParentRole meta_Policy_parent;

	};

	class CQML_Export RuleBase :  public MgaObject {
	public:
		RuleBase();
		RuleBase(::Udm::ObjectImpl *impl);
		RuleBase(const RuleBase &master);

#ifdef UDM_RVALUE
		RuleBase(RuleBase &&master);

		static RuleBase Cast(::Udm::Object &&a);
		RuleBase& operator=(RuleBase &&a);

#endif
		static RuleBase Cast(const ::Udm::Object &a);
		static RuleBase Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		RuleBase CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< RuleBase> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< RuleBase, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< RuleBase, Pred>(impl); };
		RuleBase CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< RuleBase> Derived();
		template <class Pred> ::Udm::DerivedAttr< RuleBase, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< RuleBase, Pred>(impl); };
		::Udm::ArchetypeAttr< RuleBase> Archetype() const;
		::Udm::BooleanAttr allow() const;
		::Udm::ParentAttr< ::CQML::Policy> Policy_parent() const;
		::Udm::ParentAttr< ::CQML::Policy> parent() const;

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_allow;
		static ::Uml::CompositionParentRole meta_Policy_parent;

	};

	class CQML_Export PortRule :  public RuleBase {
	public:
		PortRule();
		PortRule(::Udm::ObjectImpl *impl);
		PortRule(const PortRule &master);

#ifdef UDM_RVALUE
		PortRule(PortRule &&master);

		static PortRule Cast(::Udm::Object &&a);
		PortRule& operator=(PortRule &&a);

#endif
		static PortRule Cast(const ::Udm::Object &a);
		static PortRule Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		PortRule CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< PortRule> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< PortRule, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< PortRule, Pred>(impl); };
		PortRule CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< PortRule> Derived();
		template <class Pred> ::Udm::DerivedAttr< PortRule, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< PortRule, Pred>(impl); };
		::Udm::ArchetypeAttr< PortRule> Archetype() const;
		::Udm::AssocAttr< PortRuleRef> referedbyPortRuleRef() const;
		template <class Pred> ::Udm::AssocAttr< PortRuleRef, Pred> referedbyPortRuleRef_sorted(const Pred &) const { return ::Udm::AssocAttr< PortRuleRef, Pred>(impl, meta_referedbyPortRuleRef); };
		::Udm::AClassPointerAttr< ObjectAccessConn, InitiatorRoleRef> srcObjectAccessConn() const;
		::Udm::AClassPointerAttr< OperationInvokeConn, ResourceActionBase> dstOperationInvokeConn() const;
		::Udm::AClassPointerAttr< OnInterfaceConn, TargetObjectRef> dstOnInterfaceConn() const;
		::Udm::ParentAttr< ::CQML::Policy> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_referedbyPortRuleRef;
		static ::Uml::AssociationRole meta_srcObjectAccessConn;
		static ::Uml::AssociationRole meta_srcObjectAccessConn_rev;
		static ::Uml::AssociationRole meta_dstOperationInvokeConn;
		static ::Uml::AssociationRole meta_dstOperationInvokeConn_rev;
		static ::Uml::AssociationRole meta_dstOnInterfaceConn;
		static ::Uml::AssociationRole meta_dstOnInterfaceConn_rev;

	};

	class CQML_Export AssemblyRule :  public RuleBase {
	public:
		AssemblyRule();
		AssemblyRule(::Udm::ObjectImpl *impl);
		AssemblyRule(const AssemblyRule &master);

#ifdef UDM_RVALUE
		AssemblyRule(AssemblyRule &&master);

		static AssemblyRule Cast(::Udm::Object &&a);
		AssemblyRule& operator=(AssemblyRule &&a);

#endif
		static AssemblyRule Cast(const ::Udm::Object &a);
		static AssemblyRule Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		AssemblyRule CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< AssemblyRule> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< AssemblyRule, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< AssemblyRule, Pred>(impl); };
		AssemblyRule CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< AssemblyRule> Derived();
		template <class Pred> ::Udm::DerivedAttr< AssemblyRule, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< AssemblyRule, Pred>(impl); };
		::Udm::ArchetypeAttr< AssemblyRule> Archetype() const;
		::Udm::AssocAttr< AssemblyRuleRef> referedbyAssemblyRuleRef() const;
		template <class Pred> ::Udm::AssocAttr< AssemblyRuleRef, Pred> referedbyAssemblyRuleRef_sorted(const Pred &) const { return ::Udm::AssocAttr< AssemblyRuleRef, Pred>(impl, meta_referedbyAssemblyRuleRef); };
		::Udm::AClassPointerAttr< AssemblyAccessConn, InitiatorRoleRef> srcAssemblyAccessConn() const;
		::Udm::AClassPointerAttr< OnAssemblyConn, ComponentAssemblyReference> dstOnAssemblyConn() const;
		::Udm::AClassPointerAttr< SecuredPathConn, PathRef> dstSecuredPathConn() const;
		::Udm::ParentAttr< ::CQML::Policy> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_referedbyAssemblyRuleRef;
		static ::Uml::AssociationRole meta_srcAssemblyAccessConn;
		static ::Uml::AssociationRole meta_srcAssemblyAccessConn_rev;
		static ::Uml::AssociationRole meta_dstOnAssemblyConn;
		static ::Uml::AssociationRole meta_dstOnAssemblyConn_rev;
		static ::Uml::AssociationRole meta_dstSecuredPathConn;
		static ::Uml::AssociationRole meta_dstSecuredPathConn_rev;

	};

	class CQML_Export ComponentRule :  public RuleBase {
	public:
		ComponentRule();
		ComponentRule(::Udm::ObjectImpl *impl);
		ComponentRule(const ComponentRule &master);

#ifdef UDM_RVALUE
		ComponentRule(ComponentRule &&master);

		static ComponentRule Cast(::Udm::Object &&a);
		ComponentRule& operator=(ComponentRule &&a);

#endif
		static ComponentRule Cast(const ::Udm::Object &a);
		static ComponentRule Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ComponentRule CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ComponentRule> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ComponentRule, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ComponentRule, Pred>(impl); };
		ComponentRule CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ComponentRule> Derived();
		template <class Pred> ::Udm::DerivedAttr< ComponentRule, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ComponentRule, Pred>(impl); };
		::Udm::ArchetypeAttr< ComponentRule> Archetype() const;
		::Udm::AssocAttr< ComponentRuleRef> referedbyComponentRuleRef() const;
		template <class Pred> ::Udm::AssocAttr< ComponentRuleRef, Pred> referedbyComponentRuleRef_sorted(const Pred &) const { return ::Udm::AssocAttr< ComponentRuleRef, Pred>(impl, meta_referedbyComponentRuleRef); };
		::Udm::AClassPointerAttr< ComponentAccessConn, InitiatorRoleRef> srcComponentAccessConn() const;
		::Udm::AClassPointerAttr< OnComponentConn, ComponentRef> dstOnComponentConn() const;
		::Udm::AClassPointerAttr< AttributeManipulateConn, AttributeRef> dstAttributeManipulateConn() const;
		::Udm::ParentAttr< ::CQML::Policy> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_referedbyComponentRuleRef;
		static ::Uml::AssociationRole meta_srcComponentAccessConn;
		static ::Uml::AssociationRole meta_srcComponentAccessConn_rev;
		static ::Uml::AssociationRole meta_dstOnComponentConn;
		static ::Uml::AssociationRole meta_dstOnComponentConn_rev;
		static ::Uml::AssociationRole meta_dstAttributeManipulateConn;
		static ::Uml::AssociationRole meta_dstAttributeManipulateConn_rev;

	};

	class CQML_Export OnInterfaceConn :  public MgaObject {
	public:
		OnInterfaceConn();
		OnInterfaceConn(::Udm::ObjectImpl *impl);
		OnInterfaceConn(const OnInterfaceConn &master);

#ifdef UDM_RVALUE
		OnInterfaceConn(OnInterfaceConn &&master);

		static OnInterfaceConn Cast(::Udm::Object &&a);
		OnInterfaceConn& operator=(OnInterfaceConn &&a);

#endif
		static OnInterfaceConn Cast(const ::Udm::Object &a);
		static OnInterfaceConn Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		OnInterfaceConn CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< OnInterfaceConn> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< OnInterfaceConn, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< OnInterfaceConn, Pred>(impl); };
		OnInterfaceConn CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< OnInterfaceConn> Derived();
		template <class Pred> ::Udm::DerivedAttr< OnInterfaceConn, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< OnInterfaceConn, Pred>(impl); };
		::Udm::ArchetypeAttr< OnInterfaceConn> Archetype() const;
		::Udm::ParentAttr< ::CQML::Policy> Policy_parent() const;
		::Udm::ParentAttr< ::CQML::Policy> parent() const;
		::Udm::AssocEndAttr< ::CQML::PortRule> srcOnInterfaceConn_end() const;
		::Udm::AssocEndAttr< ::CQML::TargetObjectRef> dstOnInterfaceConn_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_Policy_parent;
		static ::Uml::AssociationRole meta_srcOnInterfaceConn_end_;
		static ::Uml::AssociationRole meta_dstOnInterfaceConn_end_;

	};

	class CQML_Export OperationSet :  public ResourceActionBase {
	public:
		OperationSet();
		OperationSet(::Udm::ObjectImpl *impl);
		OperationSet(const OperationSet &master);

#ifdef UDM_RVALUE
		OperationSet(OperationSet &&master);

		static OperationSet Cast(::Udm::Object &&a);
		OperationSet& operator=(OperationSet &&a);

#endif
		static OperationSet Cast(const ::Udm::Object &a);
		static OperationSet Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		OperationSet CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< OperationSet> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< OperationSet, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< OperationSet, Pred>(impl); };
		OperationSet CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< OperationSet> Derived();
		template <class Pred> ::Udm::DerivedAttr< OperationSet, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< OperationSet, Pred>(impl); };
		::Udm::ArchetypeAttr< OperationSet> Archetype() const;
		::Udm::ChildrenAttr< ::CQML::OperationRef> OperationRef_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::OperationRef, Pred> OperationRef_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::OperationRef, Pred>(impl, meta_OperationRef_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::OperationRef> OperationRef_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::OperationRef, Pred> OperationRef_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::OperationRef, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ResourceActionBase> ResourceActionBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ResourceActionBase, Pred> ResourceActionBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ResourceActionBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::Policy> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionChildRole meta_OperationRef_children;

	};

	class CQML_Export ComponentAccessConn :  public MgaObject {
	public:
		ComponentAccessConn();
		ComponentAccessConn(::Udm::ObjectImpl *impl);
		ComponentAccessConn(const ComponentAccessConn &master);

#ifdef UDM_RVALUE
		ComponentAccessConn(ComponentAccessConn &&master);

		static ComponentAccessConn Cast(::Udm::Object &&a);
		ComponentAccessConn& operator=(ComponentAccessConn &&a);

#endif
		static ComponentAccessConn Cast(const ::Udm::Object &a);
		static ComponentAccessConn Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ComponentAccessConn CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ComponentAccessConn> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ComponentAccessConn, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ComponentAccessConn, Pred>(impl); };
		ComponentAccessConn CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ComponentAccessConn> Derived();
		template <class Pred> ::Udm::DerivedAttr< ComponentAccessConn, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ComponentAccessConn, Pred>(impl); };
		::Udm::ArchetypeAttr< ComponentAccessConn> Archetype() const;
		::Udm::ParentAttr< ::CQML::Policy> Policy_parent() const;
		::Udm::ParentAttr< ::CQML::Policy> parent() const;
		::Udm::AssocEndAttr< ::CQML::InitiatorRoleRef> srcComponentAccessConn_end() const;
		::Udm::AssocEndAttr< ::CQML::ComponentRule> dstComponentAccessConn_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_Policy_parent;
		static ::Uml::AssociationRole meta_srcComponentAccessConn_end_;
		static ::Uml::AssociationRole meta_dstComponentAccessConn_end_;

	};

	class CQML_Export InitiatorRoleRef :  public MgaObject {
	public:
		InitiatorRoleRef();
		InitiatorRoleRef(::Udm::ObjectImpl *impl);
		InitiatorRoleRef(const InitiatorRoleRef &master);

#ifdef UDM_RVALUE
		InitiatorRoleRef(InitiatorRoleRef &&master);

		static InitiatorRoleRef Cast(::Udm::Object &&a);
		InitiatorRoleRef& operator=(InitiatorRoleRef &&a);

#endif
		static InitiatorRoleRef Cast(const ::Udm::Object &a);
		static InitiatorRoleRef Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		InitiatorRoleRef CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< InitiatorRoleRef> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< InitiatorRoleRef, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< InitiatorRoleRef, Pred>(impl); };
		InitiatorRoleRef CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< InitiatorRoleRef> Derived();
		template <class Pred> ::Udm::DerivedAttr< InitiatorRoleRef, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< InitiatorRoleRef, Pred>(impl); };
		::Udm::ArchetypeAttr< InitiatorRoleRef> Archetype() const;
		::Udm::AClassAssocAttr< ObjectAccessConn, PortRule> dstObjectAccessConn() const;
		template <class Pred> ::Udm::AClassAssocAttr< ObjectAccessConn, PortRule, Pred> dstObjectAccessConn_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< ObjectAccessConn, PortRule, Pred>(impl, meta_dstObjectAccessConn, meta_dstObjectAccessConn_rev); };
		::Udm::AClassAssocAttr< AssemblyAccessConn, AssemblyRule> dstAssemblyAccessConn() const;
		template <class Pred> ::Udm::AClassAssocAttr< AssemblyAccessConn, AssemblyRule, Pred> dstAssemblyAccessConn_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< AssemblyAccessConn, AssemblyRule, Pred>(impl, meta_dstAssemblyAccessConn, meta_dstAssemblyAccessConn_rev); };
		::Udm::AClassAssocAttr< ComponentAccessConn, ComponentRule> dstComponentAccessConn() const;
		template <class Pred> ::Udm::AClassAssocAttr< ComponentAccessConn, ComponentRule, Pred> dstComponentAccessConn_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< ComponentAccessConn, ComponentRule, Pred>(impl, meta_dstComponentAccessConn, meta_dstComponentAccessConn_rev); };
		::Udm::PointerAttr< Role> ref() const;
		::Udm::ParentAttr< ::CQML::Policy> Policy_parent() const;
		::Udm::ParentAttr< ::CQML::Policy> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_dstObjectAccessConn;
		static ::Uml::AssociationRole meta_dstObjectAccessConn_rev;
		static ::Uml::AssociationRole meta_dstAssemblyAccessConn;
		static ::Uml::AssociationRole meta_dstAssemblyAccessConn_rev;
		static ::Uml::AssociationRole meta_dstComponentAccessConn;
		static ::Uml::AssociationRole meta_dstComponentAccessConn_rev;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::CompositionParentRole meta_Policy_parent;

	};

	class CQML_Export AttributeManipulateConn :  public MgaObject {
	public:
		AttributeManipulateConn();
		AttributeManipulateConn(::Udm::ObjectImpl *impl);
		AttributeManipulateConn(const AttributeManipulateConn &master);

#ifdef UDM_RVALUE
		AttributeManipulateConn(AttributeManipulateConn &&master);

		static AttributeManipulateConn Cast(::Udm::Object &&a);
		AttributeManipulateConn& operator=(AttributeManipulateConn &&a);

#endif
		static AttributeManipulateConn Cast(const ::Udm::Object &a);
		static AttributeManipulateConn Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		AttributeManipulateConn CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< AttributeManipulateConn> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< AttributeManipulateConn, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< AttributeManipulateConn, Pred>(impl); };
		AttributeManipulateConn CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< AttributeManipulateConn> Derived();
		template <class Pred> ::Udm::DerivedAttr< AttributeManipulateConn, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< AttributeManipulateConn, Pred>(impl); };
		::Udm::ArchetypeAttr< AttributeManipulateConn> Archetype() const;
		::Udm::ParentAttr< ::CQML::Policy> Policy_parent() const;
		::Udm::ParentAttr< ::CQML::Policy> parent() const;
		::Udm::AssocEndAttr< ::CQML::ComponentRule> srcAttributeManipulateConn_end() const;
		::Udm::AssocEndAttr< ::CQML::AttributeRef> dstAttributeManipulateConn_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_Policy_parent;
		static ::Uml::AssociationRole meta_srcAttributeManipulateConn_end_;
		static ::Uml::AssociationRole meta_dstAttributeManipulateConn_end_;

	};

	class CQML_Export SecuredPathConn :  public MgaObject {
	public:
		SecuredPathConn();
		SecuredPathConn(::Udm::ObjectImpl *impl);
		SecuredPathConn(const SecuredPathConn &master);

#ifdef UDM_RVALUE
		SecuredPathConn(SecuredPathConn &&master);

		static SecuredPathConn Cast(::Udm::Object &&a);
		SecuredPathConn& operator=(SecuredPathConn &&a);

#endif
		static SecuredPathConn Cast(const ::Udm::Object &a);
		static SecuredPathConn Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		SecuredPathConn CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< SecuredPathConn> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< SecuredPathConn, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< SecuredPathConn, Pred>(impl); };
		SecuredPathConn CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< SecuredPathConn> Derived();
		template <class Pred> ::Udm::DerivedAttr< SecuredPathConn, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< SecuredPathConn, Pred>(impl); };
		::Udm::ArchetypeAttr< SecuredPathConn> Archetype() const;
		::Udm::ParentAttr< ::CQML::Policy> Policy_parent() const;
		::Udm::ParentAttr< ::CQML::Policy> parent() const;
		::Udm::AssocEndAttr< ::CQML::AssemblyRule> srcSecuredPathConn_end() const;
		::Udm::AssocEndAttr< ::CQML::PathRef> dstSecuredPathConn_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_Policy_parent;
		static ::Uml::AssociationRole meta_srcSecuredPathConn_end_;
		static ::Uml::AssociationRole meta_dstSecuredPathConn_end_;

	};

	class CQML_Export OnAssemblyConn :  public MgaObject {
	public:
		OnAssemblyConn();
		OnAssemblyConn(::Udm::ObjectImpl *impl);
		OnAssemblyConn(const OnAssemblyConn &master);

#ifdef UDM_RVALUE
		OnAssemblyConn(OnAssemblyConn &&master);

		static OnAssemblyConn Cast(::Udm::Object &&a);
		OnAssemblyConn& operator=(OnAssemblyConn &&a);

#endif
		static OnAssemblyConn Cast(const ::Udm::Object &a);
		static OnAssemblyConn Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		OnAssemblyConn CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< OnAssemblyConn> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< OnAssemblyConn, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< OnAssemblyConn, Pred>(impl); };
		OnAssemblyConn CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< OnAssemblyConn> Derived();
		template <class Pred> ::Udm::DerivedAttr< OnAssemblyConn, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< OnAssemblyConn, Pred>(impl); };
		::Udm::ArchetypeAttr< OnAssemblyConn> Archetype() const;
		::Udm::ParentAttr< ::CQML::Policy> Policy_parent() const;
		::Udm::ParentAttr< ::CQML::Policy> parent() const;
		::Udm::AssocEndAttr< ::CQML::AssemblyRule> srcOnAssemblyConn_end() const;
		::Udm::AssocEndAttr< ::CQML::ComponentAssemblyReference> dstOnAssemblyConn_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_Policy_parent;
		static ::Uml::AssociationRole meta_srcOnAssemblyConn_end_;
		static ::Uml::AssociationRole meta_dstOnAssemblyConn_end_;

	};

	class CQML_Export PathRef :  public MgaObject {
	public:
		PathRef();
		PathRef(::Udm::ObjectImpl *impl);
		PathRef(const PathRef &master);

#ifdef UDM_RVALUE
		PathRef(PathRef &&master);

		static PathRef Cast(::Udm::Object &&a);
		PathRef& operator=(PathRef &&a);

#endif
		static PathRef Cast(const ::Udm::Object &a);
		static PathRef Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		PathRef CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< PathRef> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< PathRef, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< PathRef, Pred>(impl); };
		PathRef CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< PathRef> Derived();
		template <class Pred> ::Udm::DerivedAttr< PathRef, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< PathRef, Pred>(impl); };
		::Udm::ArchetypeAttr< PathRef> Archetype() const;
		::Udm::AClassAssocAttr< SecuredPathConn, AssemblyRule> srcSecuredPathConn() const;
		template <class Pred> ::Udm::AClassAssocAttr< SecuredPathConn, AssemblyRule, Pred> srcSecuredPathConn_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< SecuredPathConn, AssemblyRule, Pred>(impl, meta_srcSecuredPathConn, meta_srcSecuredPathConn_rev); };
		::Udm::PointerAttr< Path> ref() const;
		::Udm::ParentAttr< ::CQML::Policy> Policy_parent() const;
		::Udm::ParentAttr< ::CQML::Policy> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_srcSecuredPathConn;
		static ::Uml::AssociationRole meta_srcSecuredPathConn_rev;
		static ::Uml::AssociationRole meta_ref;
		static ::Uml::CompositionParentRole meta_Policy_parent;

	};

	class CQML_Export OperationInvokeConn :  public MgaObject {
	public:
		OperationInvokeConn();
		OperationInvokeConn(::Udm::ObjectImpl *impl);
		OperationInvokeConn(const OperationInvokeConn &master);

#ifdef UDM_RVALUE
		OperationInvokeConn(OperationInvokeConn &&master);

		static OperationInvokeConn Cast(::Udm::Object &&a);
		OperationInvokeConn& operator=(OperationInvokeConn &&a);

#endif
		static OperationInvokeConn Cast(const ::Udm::Object &a);
		static OperationInvokeConn Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		OperationInvokeConn CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< OperationInvokeConn> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< OperationInvokeConn, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< OperationInvokeConn, Pred>(impl); };
		OperationInvokeConn CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< OperationInvokeConn> Derived();
		template <class Pred> ::Udm::DerivedAttr< OperationInvokeConn, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< OperationInvokeConn, Pred>(impl); };
		::Udm::ArchetypeAttr< OperationInvokeConn> Archetype() const;
		::Udm::ParentAttr< ::CQML::Policy> Policy_parent() const;
		::Udm::ParentAttr< ::CQML::Policy> parent() const;
		::Udm::AssocEndAttr< ::CQML::PortRule> srcOperationInvokeConn_end() const;
		::Udm::AssocEndAttr< ::CQML::ResourceActionBase> dstOperationInvokeConn_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_Policy_parent;
		static ::Uml::AssociationRole meta_srcOperationInvokeConn_end_;
		static ::Uml::AssociationRole meta_dstOperationInvokeConn_end_;

	};

	class CQML_Export OnComponentConn :  public MgaObject {
	public:
		OnComponentConn();
		OnComponentConn(::Udm::ObjectImpl *impl);
		OnComponentConn(const OnComponentConn &master);

#ifdef UDM_RVALUE
		OnComponentConn(OnComponentConn &&master);

		static OnComponentConn Cast(::Udm::Object &&a);
		OnComponentConn& operator=(OnComponentConn &&a);

#endif
		static OnComponentConn Cast(const ::Udm::Object &a);
		static OnComponentConn Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		OnComponentConn CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< OnComponentConn> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< OnComponentConn, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< OnComponentConn, Pred>(impl); };
		OnComponentConn CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< OnComponentConn> Derived();
		template <class Pred> ::Udm::DerivedAttr< OnComponentConn, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< OnComponentConn, Pred>(impl); };
		::Udm::ArchetypeAttr< OnComponentConn> Archetype() const;
		::Udm::ParentAttr< ::CQML::Policy> Policy_parent() const;
		::Udm::ParentAttr< ::CQML::Policy> parent() const;
		::Udm::AssocEndAttr< ::CQML::ComponentRule> srcOnComponentConn_end() const;
		::Udm::AssocEndAttr< ::CQML::ComponentRef> dstOnComponentConn_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_Policy_parent;
		static ::Uml::AssociationRole meta_srcOnComponentConn_end_;
		static ::Uml::AssociationRole meta_dstOnComponentConn_end_;

	};

	class CQML_Export Rights :  virtual  public MgaObject {
	public:
		Rights();
		Rights(::Udm::ObjectImpl *impl);
		Rights(const Rights &master);

#ifdef UDM_RVALUE
		Rights(Rights &&master);

		static Rights Cast(::Udm::Object &&a);
		Rights& operator=(Rights &&a);

#endif
		static Rights Cast(const ::Udm::Object &a);
		static Rights Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Rights CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Rights> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Rights, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Rights, Pred>(impl); };
		Rights CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Rights> Derived();
		template <class Pred> ::Udm::DerivedAttr< Rights, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Rights, Pred>(impl); };
		::Udm::ArchetypeAttr< Rights> Archetype() const;
		::Udm::BooleanAttr get() const;
		::Udm::StringAttr family() const;
		::Udm::BooleanAttr set() const;
		::Udm::BooleanAttr use() const;
		::Udm::BooleanAttr manage() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_get;
		static ::Uml::Attribute meta_family;
		static ::Uml::Attribute meta_set;
		static ::Uml::Attribute meta_use;
		static ::Uml::Attribute meta_manage;

	};

	class CQML_Export RequiredRights :  public ResourceActionBase,  public Rights {
	public:
		RequiredRights();
		RequiredRights(::Udm::ObjectImpl *impl);
		RequiredRights(const RequiredRights &master);

#ifdef UDM_RVALUE
		RequiredRights(RequiredRights &&master);

		static RequiredRights Cast(::Udm::Object &&a);
		RequiredRights& operator=(RequiredRights &&a);

#endif
		static RequiredRights Cast(const ::Udm::Object &a);
		static RequiredRights Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		RequiredRights CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< RequiredRights> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< RequiredRights, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< RequiredRights, Pred>(impl); };
		RequiredRights CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< RequiredRights> Derived();
		template <class Pred> ::Udm::DerivedAttr< RequiredRights, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< RequiredRights, Pred>(impl); };
		::Udm::ArchetypeAttr< RequiredRights> Archetype() const;
		::Udm::StringAttr combinator() const;
		::Udm::AClassAssocAttr< InterfaceClassificationConn, ::CQML::Object> srcInterfaceClassificationConn() const;
		template <class Pred> ::Udm::AClassAssocAttr< InterfaceClassificationConn, ::CQML::Object, Pred> srcInterfaceClassificationConn_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< InterfaceClassificationConn, ::CQML::Object, Pred>(impl, meta_srcInterfaceClassificationConn, meta_srcInterfaceClassificationConn_rev); };
		::Udm::AClassAssocAttr< OperationClassificationConn, OperationBase> srcOperationClassificationConn() const;
		template <class Pred> ::Udm::AClassAssocAttr< OperationClassificationConn, OperationBase, Pred> srcOperationClassificationConn_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< OperationClassificationConn, OperationBase, Pred>(impl, meta_srcOperationClassificationConn, meta_srcOperationClassificationConn_rev); };
		::Udm::ParentAttr< ::CQML::Package> Package_parent() const;
		::Udm::ParentAttr< ::CQML::HasOperations> HasOperations_parent() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_combinator;
		static ::Uml::AssociationRole meta_srcInterfaceClassificationConn;
		static ::Uml::AssociationRole meta_srcInterfaceClassificationConn_rev;
		static ::Uml::AssociationRole meta_srcOperationClassificationConn;
		static ::Uml::AssociationRole meta_srcOperationClassificationConn_rev;
		static ::Uml::CompositionParentRole meta_Package_parent;
		static ::Uml::CompositionParentRole meta_HasOperations_parent;

	};

	class CQML_Export RoleAssignmentConn :  public MgaObject {
	public:
		RoleAssignmentConn();
		RoleAssignmentConn(::Udm::ObjectImpl *impl);
		RoleAssignmentConn(const RoleAssignmentConn &master);

#ifdef UDM_RVALUE
		RoleAssignmentConn(RoleAssignmentConn &&master);

		static RoleAssignmentConn Cast(::Udm::Object &&a);
		RoleAssignmentConn& operator=(RoleAssignmentConn &&a);

#endif
		static RoleAssignmentConn Cast(const ::Udm::Object &a);
		static RoleAssignmentConn Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		RoleAssignmentConn CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< RoleAssignmentConn> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< RoleAssignmentConn, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< RoleAssignmentConn, Pred>(impl); };
		RoleAssignmentConn CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< RoleAssignmentConn> Derived();
		template <class Pred> ::Udm::DerivedAttr< RoleAssignmentConn, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< RoleAssignmentConn, Pred>(impl); };
		::Udm::ArchetypeAttr< RoleAssignmentConn> Archetype() const;
		::Udm::ParentAttr< ::CQML::RBAC> RBAC_parent() const;
		::Udm::ParentAttr< ::CQML::RBAC> parent() const;
		::Udm::AssocEndAttr< ::CQML::Subject> srcRoleAssignmentConn_end() const;
		::Udm::AssocEndAttr< ::CQML::Role> dstRoleAssignmentConn_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_RBAC_parent;
		static ::Uml::AssociationRole meta_srcRoleAssignmentConn_end_;
		static ::Uml::AssociationRole meta_dstRoleAssignmentConn_end_;

	};

	class CQML_Export Subject :  public MgaObject {
	public:
		Subject();
		Subject(::Udm::ObjectImpl *impl);
		Subject(const Subject &master);

#ifdef UDM_RVALUE
		Subject(Subject &&master);

		static Subject Cast(::Udm::Object &&a);
		Subject& operator=(Subject &&a);

#endif
		static Subject Cast(const ::Udm::Object &a);
		static Subject Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Subject CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Subject> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Subject, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Subject, Pred>(impl); };
		Subject CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Subject> Derived();
		template <class Pred> ::Udm::DerivedAttr< Subject, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Subject, Pred>(impl); };
		::Udm::ArchetypeAttr< Subject> Archetype() const;
		::Udm::StringAttr principal() const;
		::Udm::AClassAssocAttr< RoleAssignmentConn, Role> dstRoleAssignmentConn() const;
		template <class Pred> ::Udm::AClassAssocAttr< RoleAssignmentConn, Role, Pred> dstRoleAssignmentConn_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< RoleAssignmentConn, Role, Pred>(impl, meta_dstRoleAssignmentConn, meta_dstRoleAssignmentConn_rev); };
		::Udm::ParentAttr< ::CQML::Group> Group_parent() const;
		::Udm::ParentAttr< ::CQML::RBAC> RBAC_parent() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_principal;
		static ::Uml::AssociationRole meta_dstRoleAssignmentConn;
		static ::Uml::AssociationRole meta_dstRoleAssignmentConn_rev;
		static ::Uml::CompositionParentRole meta_Group_parent;
		static ::Uml::CompositionParentRole meta_RBAC_parent;

	};

	class CQML_Export Group :  public Subject {
	public:
		Group();
		Group(::Udm::ObjectImpl *impl);
		Group(const Group &master);

#ifdef UDM_RVALUE
		Group(Group &&master);

		static Group Cast(::Udm::Object &&a);
		Group& operator=(Group &&a);

#endif
		static Group Cast(const ::Udm::Object &a);
		static Group Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Group CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Group> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Group, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Group, Pred>(impl); };
		Group CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Group> Derived();
		template <class Pred> ::Udm::DerivedAttr< Group, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Group, Pred>(impl); };
		::Udm::ArchetypeAttr< Group> Archetype() const;
		::Udm::ChildrenAttr< ::CQML::Subject> Subject_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Subject, Pred> Subject_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Subject, Pred>(impl, meta_Subject_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Group> Group_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Group, Pred> Group_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Group, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Subject> Subject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Subject, Pred> Subject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Subject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::User> User_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::User, Pred> User_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::User, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionChildRole meta_Subject_children;

	};

	class CQML_Export Realm :  public MgaObject {
	public:
		Realm();
		Realm(::Udm::ObjectImpl *impl);
		Realm(const Realm &master);

#ifdef UDM_RVALUE
		Realm(Realm &&master);

		static Realm Cast(::Udm::Object &&a);
		Realm& operator=(Realm &&a);

#endif
		static Realm Cast(const ::Udm::Object &a);
		static Realm Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Realm CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Realm> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Realm, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Realm, Pred>(impl); };
		Realm CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Realm> Derived();
		template <class Pred> ::Udm::DerivedAttr< Realm, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Realm, Pred>(impl); };
		::Udm::ArchetypeAttr< Realm> Archetype() const;
		::Udm::ChildrenAttr< ::CQML::Role> Role_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Role, Pred> Role_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Role, Pred>(impl, meta_Role_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Role> Role_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Role, Pred> Role_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Role, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::SecurityDomain> SecurityDomain_parent() const;
		::Udm::ParentAttr< ::CQML::SecurityDomain> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionChildRole meta_Role_children;
		static ::Uml::CompositionParentRole meta_SecurityDomain_parent;

	};

	class CQML_Export SecurityDomain :  public MgaObject {
	public:
		SecurityDomain();
		SecurityDomain(::Udm::ObjectImpl *impl);
		SecurityDomain(const SecurityDomain &master);

#ifdef UDM_RVALUE
		SecurityDomain(SecurityDomain &&master);

		static SecurityDomain Cast(::Udm::Object &&a);
		SecurityDomain& operator=(SecurityDomain &&a);

#endif
		static SecurityDomain Cast(const ::Udm::Object &a);
		static SecurityDomain Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		SecurityDomain CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< SecurityDomain> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< SecurityDomain, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< SecurityDomain, Pred>(impl); };
		SecurityDomain CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< SecurityDomain> Derived();
		template <class Pred> ::Udm::DerivedAttr< SecurityDomain, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< SecurityDomain, Pred>(impl); };
		::Udm::ArchetypeAttr< SecurityDomain> Archetype() const;
		::Udm::ChildrenAttr< ::CQML::Realm> Realm_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Realm, Pred> Realm_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Realm, Pred>(impl, meta_Realm_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Realm> Realm_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Realm, Pred> Realm_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Realm, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::RBAC> RBAC_parent() const;
		::Udm::ParentAttr< ::CQML::RBAC> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionChildRole meta_Realm_children;
		static ::Uml::CompositionParentRole meta_RBAC_parent;

	};

	class CQML_Export User :  public Subject {
	public:
		User();
		User(::Udm::ObjectImpl *impl);
		User(const User &master);

#ifdef UDM_RVALUE
		User(User &&master);

		static User Cast(::Udm::Object &&a);
		User& operator=(User &&a);

#endif
		static User Cast(const ::Udm::Object &a);
		static User Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		User CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< User> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< User, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< User, Pred>(impl); };
		User CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< User> Derived();
		template <class Pred> ::Udm::DerivedAttr< User, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< User, Pred>(impl); };
		::Udm::ArchetypeAttr< User> Archetype() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;

	};

	class CQML_Export InterfaceClassificationConn :  public MgaObject {
	public:
		InterfaceClassificationConn();
		InterfaceClassificationConn(::Udm::ObjectImpl *impl);
		InterfaceClassificationConn(const InterfaceClassificationConn &master);

#ifdef UDM_RVALUE
		InterfaceClassificationConn(InterfaceClassificationConn &&master);

		static InterfaceClassificationConn Cast(::Udm::Object &&a);
		InterfaceClassificationConn& operator=(InterfaceClassificationConn &&a);

#endif
		static InterfaceClassificationConn Cast(const ::Udm::Object &a);
		static InterfaceClassificationConn Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		InterfaceClassificationConn CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< InterfaceClassificationConn> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< InterfaceClassificationConn, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< InterfaceClassificationConn, Pred>(impl); };
		InterfaceClassificationConn CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< InterfaceClassificationConn> Derived();
		template <class Pred> ::Udm::DerivedAttr< InterfaceClassificationConn, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< InterfaceClassificationConn, Pred>(impl); };
		::Udm::ArchetypeAttr< InterfaceClassificationConn> Archetype() const;
		::Udm::ParentAttr< ::CQML::Package> Package_parent() const;
		::Udm::ParentAttr< ::CQML::Package> parent() const;
		::Udm::AssocEndAttr< ::CQML::Object> srcInterfaceClassificationConn_end() const;
		::Udm::AssocEndAttr< ::CQML::RequiredRights> dstInterfaceClassificationConn_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_Package_parent;
		static ::Uml::AssociationRole meta_srcInterfaceClassificationConn_end_;
		static ::Uml::AssociationRole meta_dstInterfaceClassificationConn_end_;

	};

	class CQML_Export OperationClassificationConn :  public MgaObject {
	public:
		OperationClassificationConn();
		OperationClassificationConn(::Udm::ObjectImpl *impl);
		OperationClassificationConn(const OperationClassificationConn &master);

#ifdef UDM_RVALUE
		OperationClassificationConn(OperationClassificationConn &&master);

		static OperationClassificationConn Cast(::Udm::Object &&a);
		OperationClassificationConn& operator=(OperationClassificationConn &&a);

#endif
		static OperationClassificationConn Cast(const ::Udm::Object &a);
		static OperationClassificationConn Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		OperationClassificationConn CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< OperationClassificationConn> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< OperationClassificationConn, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< OperationClassificationConn, Pred>(impl); };
		OperationClassificationConn CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< OperationClassificationConn> Derived();
		template <class Pred> ::Udm::DerivedAttr< OperationClassificationConn, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< OperationClassificationConn, Pred>(impl); };
		::Udm::ArchetypeAttr< OperationClassificationConn> Archetype() const;
		::Udm::ParentAttr< ::CQML::HasOperations> HasOperations_parent() const;
		::Udm::ParentAttr< ::CQML::HasOperations> parent() const;
		::Udm::AssocEndAttr< ::CQML::OperationBase> srcOperationClassificationConn_end() const;
		::Udm::AssocEndAttr< ::CQML::RequiredRights> dstOperationClassificationConn_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_HasOperations_parent;
		static ::Uml::AssociationRole meta_srcOperationClassificationConn_end_;
		static ::Uml::AssociationRole meta_dstOperationClassificationConn_end_;

	};

	class CQML_Export RightsAssignmentConn :  public MgaObject {
	public:
		RightsAssignmentConn();
		RightsAssignmentConn(::Udm::ObjectImpl *impl);
		RightsAssignmentConn(const RightsAssignmentConn &master);

#ifdef UDM_RVALUE
		RightsAssignmentConn(RightsAssignmentConn &&master);

		static RightsAssignmentConn Cast(::Udm::Object &&a);
		RightsAssignmentConn& operator=(RightsAssignmentConn &&a);

#endif
		static RightsAssignmentConn Cast(const ::Udm::Object &a);
		static RightsAssignmentConn Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		RightsAssignmentConn CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< RightsAssignmentConn> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< RightsAssignmentConn, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< RightsAssignmentConn, Pred>(impl); };
		RightsAssignmentConn CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< RightsAssignmentConn> Derived();
		template <class Pred> ::Udm::DerivedAttr< RightsAssignmentConn, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< RightsAssignmentConn, Pred>(impl); };
		::Udm::ArchetypeAttr< RightsAssignmentConn> Archetype() const;
		::Udm::ParentAttr< ::CQML::RBAC> RBAC_parent() const;
		::Udm::ParentAttr< ::CQML::RBAC> parent() const;
		::Udm::AssocEndAttr< ::CQML::Role> srcRightsAssignmentConn_end() const;
		::Udm::AssocEndAttr< ::CQML::GrantedRights> dstRightsAssignmentConn_end() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionParentRole meta_RBAC_parent;
		static ::Uml::AssociationRole meta_srcRightsAssignmentConn_end_;
		static ::Uml::AssociationRole meta_dstRightsAssignmentConn_end_;

	};

	class CQML_Export GrantedRights :  public Rights {
	public:
		GrantedRights();
		GrantedRights(::Udm::ObjectImpl *impl);
		GrantedRights(const GrantedRights &master);

#ifdef UDM_RVALUE
		GrantedRights(GrantedRights &&master);

		static GrantedRights Cast(::Udm::Object &&a);
		GrantedRights& operator=(GrantedRights &&a);

#endif
		static GrantedRights Cast(const ::Udm::Object &a);
		static GrantedRights Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		GrantedRights CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< GrantedRights> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< GrantedRights, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< GrantedRights, Pred>(impl); };
		GrantedRights CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< GrantedRights> Derived();
		template <class Pred> ::Udm::DerivedAttr< GrantedRights, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< GrantedRights, Pred>(impl); };
		::Udm::ArchetypeAttr< GrantedRights> Archetype() const;
		::Udm::AClassAssocAttr< RightsAssignmentConn, Role> srcRightsAssignmentConn() const;
		template <class Pred> ::Udm::AClassAssocAttr< RightsAssignmentConn, Role, Pred> srcRightsAssignmentConn_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< RightsAssignmentConn, Role, Pred>(impl, meta_srcRightsAssignmentConn, meta_srcRightsAssignmentConn_rev); };
		::Udm::ParentAttr< ::CQML::RBAC> RBAC_parent() const;
		::Udm::ParentAttr< ::CQML::RBAC> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_srcRightsAssignmentConn;
		static ::Uml::AssociationRole meta_srcRightsAssignmentConn_rev;
		static ::Uml::CompositionParentRole meta_RBAC_parent;

	};

	class CQML_Export RBAC :  public MgaObject {
	public:
		RBAC();
		RBAC(::Udm::ObjectImpl *impl);
		RBAC(const RBAC &master);

#ifdef UDM_RVALUE
		RBAC(RBAC &&master);

		static RBAC Cast(::Udm::Object &&a);
		RBAC& operator=(RBAC &&a);

#endif
		static RBAC Cast(const ::Udm::Object &a);
		static RBAC Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		RBAC CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< RBAC> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< RBAC, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< RBAC, Pred>(impl); };
		RBAC CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< RBAC> Derived();
		template <class Pred> ::Udm::DerivedAttr< RBAC, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< RBAC, Pred>(impl); };
		::Udm::ArchetypeAttr< RBAC> Archetype() const;
		::Udm::ChildrenAttr< ::CQML::Role> Role_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Role, Pred> Role_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Role, Pred>(impl, meta_Role_children); };
		::Udm::ChildrenAttr< ::CQML::RightsAssignmentConn> RightsAssignmentConn_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::RightsAssignmentConn, Pred> RightsAssignmentConn_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::RightsAssignmentConn, Pred>(impl, meta_RightsAssignmentConn_children); };
		::Udm::ChildrenAttr< ::CQML::RoleAssignmentConn> RoleAssignmentConn_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::RoleAssignmentConn, Pred> RoleAssignmentConn_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::RoleAssignmentConn, Pred>(impl, meta_RoleAssignmentConn_children); };
		::Udm::ChildrenAttr< ::CQML::Subject> Subject_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Subject, Pred> Subject_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Subject, Pred>(impl, meta_Subject_children); };
		::Udm::ChildrenAttr< ::CQML::GrantedRights> GrantedRights_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::GrantedRights, Pred> GrantedRights_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::GrantedRights, Pred>(impl, meta_GrantedRights_children); };
		::Udm::ChildrenAttr< ::CQML::SecurityDomain> SecurityDomain_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::SecurityDomain, Pred> SecurityDomain_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::SecurityDomain, Pred>(impl, meta_SecurityDomain_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Rights> Rights_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Rights, Pred> Rights_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Rights, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::RoleAssignmentConn> RoleAssignmentConn_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::RoleAssignmentConn, Pred> RoleAssignmentConn_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::RoleAssignmentConn, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Group> Group_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Group, Pred> Group_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Group, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Subject> Subject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Subject, Pred> Subject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Subject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::SecurityDomain> SecurityDomain_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::SecurityDomain, Pred> SecurityDomain_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::SecurityDomain, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::User> User_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::User, Pred> User_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::User, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::RightsAssignmentConn> RightsAssignmentConn_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::RightsAssignmentConn, Pred> RightsAssignmentConn_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::RightsAssignmentConn, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::GrantedRights> GrantedRights_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::GrantedRights, Pred> GrantedRights_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::GrantedRights, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Role> Role_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Role, Pred> Role_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Role, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::Security> Security_parent() const;
		::Udm::ParentAttr< ::CQML::Security> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionChildRole meta_Role_children;
		static ::Uml::CompositionChildRole meta_RightsAssignmentConn_children;
		static ::Uml::CompositionChildRole meta_RoleAssignmentConn_children;
		static ::Uml::CompositionChildRole meta_Subject_children;
		static ::Uml::CompositionChildRole meta_GrantedRights_children;
		static ::Uml::CompositionChildRole meta_SecurityDomain_children;
		static ::Uml::CompositionParentRole meta_Security_parent;

	};

	class CQML_Export Security :  public MgaObject {
	public:
		Security();
		Security(::Udm::ObjectImpl *impl);
		Security(const Security &master);

#ifdef UDM_RVALUE
		Security(Security &&master);

		static Security Cast(::Udm::Object &&a);
		Security& operator=(Security &&a);

#endif
		static Security Cast(const ::Udm::Object &a);
		static Security Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Security CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Security> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Security, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Security, Pred>(impl); };
		Security CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Security> Derived();
		template <class Pred> ::Udm::DerivedAttr< Security, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Security, Pred>(impl); };
		::Udm::ArchetypeAttr< Security> Archetype() const;
		::Udm::ChildrenAttr< ::CQML::RBAC> RBAC_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::RBAC, Pred> RBAC_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::RBAC, Pred>(impl, meta_RBAC_children); };
		::Udm::ChildrenAttr< ::CQML::PolicySet> PolicySet_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PolicySet, Pred> PolicySet_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PolicySet, Pred>(impl, meta_PolicySet_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::PolicySet> PolicySet_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PolicySet, Pred> PolicySet_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PolicySet, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::RBAC> RBAC_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::RBAC, Pred> RBAC_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::RBAC, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::RootFolder> RootFolder_parent() const;
		::Udm::ParentAttr< ::CQML::RootFolder> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::CompositionChildRole meta_RBAC_children;
		static ::Uml::CompositionChildRole meta_PolicySet_children;
		static ::Uml::CompositionParentRole meta_RootFolder_parent;

	};

	class CQML_Export Role :  public MgaObject {
	public:
		Role();
		Role(::Udm::ObjectImpl *impl);
		Role(const Role &master);

#ifdef UDM_RVALUE
		Role(Role &&master);

		static Role Cast(::Udm::Object &&a);
		Role& operator=(Role &&a);

#endif
		static Role Cast(const ::Udm::Object &a);
		static Role Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Role CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Role> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Role, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Role, Pred>(impl); };
		Role CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Role> Derived();
		template <class Pred> ::Udm::DerivedAttr< Role, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Role, Pred>(impl); };
		::Udm::ArchetypeAttr< Role> Archetype() const;
		::Udm::AssocAttr< InitiatorRoleRef> referedbyInitiatorRoleRef() const;
		template <class Pred> ::Udm::AssocAttr< InitiatorRoleRef, Pred> referedbyInitiatorRoleRef_sorted(const Pred &) const { return ::Udm::AssocAttr< InitiatorRoleRef, Pred>(impl, meta_referedbyInitiatorRoleRef); };
		::Udm::AClassAssocAttr< RoleAssignmentConn, Subject> srcRoleAssignmentConn() const;
		template <class Pred> ::Udm::AClassAssocAttr< RoleAssignmentConn, Subject, Pred> srcRoleAssignmentConn_sorted(const Pred &) const { return ::Udm::AClassAssocAttr< RoleAssignmentConn, Subject, Pred>(impl, meta_srcRoleAssignmentConn, meta_srcRoleAssignmentConn_rev); };
		::Udm::AClassPointerAttr< RightsAssignmentConn, GrantedRights> dstRightsAssignmentConn() const;
		::Udm::ParentAttr< ::CQML::Realm> Realm_parent() const;
		::Udm::ParentAttr< ::CQML::RBAC> RBAC_parent() const;
		::Udm::ParentAttr< ::CQML::MgaObject> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::AssociationRole meta_referedbyInitiatorRoleRef;
		static ::Uml::AssociationRole meta_srcRoleAssignmentConn;
		static ::Uml::AssociationRole meta_srcRoleAssignmentConn_rev;
		static ::Uml::AssociationRole meta_dstRightsAssignmentConn;
		static ::Uml::AssociationRole meta_dstRightsAssignmentConn_rev;
		static ::Uml::CompositionParentRole meta_Realm_parent;
		static ::Uml::CompositionParentRole meta_RBAC_parent;

	};

	class CQML_Export ComponentBuild : public ::Udm::Object {
	public:
		ComponentBuild();
		ComponentBuild(::Udm::ObjectImpl *impl);
		ComponentBuild(const ComponentBuild &master);

#ifdef UDM_RVALUE
		ComponentBuild(ComponentBuild &&master);

		static ComponentBuild Cast(::Udm::Object &&a);
		ComponentBuild& operator=(ComponentBuild &&a);

#endif
		static ComponentBuild Cast(const ::Udm::Object &a);
		static ComponentBuild Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ComponentBuild CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ComponentBuild> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ComponentBuild, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ComponentBuild, Pred>(impl); };
		ComponentBuild CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ComponentBuild> Derived();
		template <class Pred> ::Udm::DerivedAttr< ComponentBuild, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ComponentBuild, Pred>(impl); };
		::Udm::ArchetypeAttr< ComponentBuild> Archetype() const;
		::Udm::StringAttr name() const;
		::Udm::ChildrenAttr< ::CQML::MPC> MPC_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MPC, Pred> MPC_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MPC, Pred>(impl, meta_MPC_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::MPC> MPC_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MPC, Pred> MPC_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MPC, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::RootFolder> RootFolder_parent() const;
		::Udm::ParentAttr< ::CQML::RootFolder> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_name;
		static ::Uml::CompositionChildRole meta_MPC_children;
		static ::Uml::CompositionParentRole meta_RootFolder_parent;

	};

	class CQML_Export InterfaceDefinitions : public ::Udm::Object {
	public:
		InterfaceDefinitions();
		InterfaceDefinitions(::Udm::ObjectImpl *impl);
		InterfaceDefinitions(const InterfaceDefinitions &master);

#ifdef UDM_RVALUE
		InterfaceDefinitions(InterfaceDefinitions &&master);

		static InterfaceDefinitions Cast(::Udm::Object &&a);
		InterfaceDefinitions& operator=(InterfaceDefinitions &&a);

#endif
		static InterfaceDefinitions Cast(const ::Udm::Object &a);
		static InterfaceDefinitions Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		InterfaceDefinitions CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< InterfaceDefinitions> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< InterfaceDefinitions, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< InterfaceDefinitions, Pred>(impl); };
		InterfaceDefinitions CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< InterfaceDefinitions> Derived();
		template <class Pred> ::Udm::DerivedAttr< InterfaceDefinitions, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< InterfaceDefinitions, Pred>(impl); };
		::Udm::ArchetypeAttr< InterfaceDefinitions> Archetype() const;
		::Udm::StringAttr name() const;
		::Udm::ChildrenAttr< ::CQML::File> File_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::File, Pred> File_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::File, Pred>(impl, meta_File_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Prefixable> Prefixable_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Prefixable, Pred> Prefixable_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Prefixable, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::File> File_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::File, Pred> File_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::File, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::RootFolder> RootFolder_parent() const;
		::Udm::ParentAttr< ::CQML::RootFolder> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_name;
		static ::Uml::CompositionChildRole meta_File_children;
		static ::Uml::CompositionParentRole meta_RootFolder_parent;

	};

	class CQML_Export PredefinedTypes : public ::Udm::Object {
	public:
		PredefinedTypes();
		PredefinedTypes(::Udm::ObjectImpl *impl);
		PredefinedTypes(const PredefinedTypes &master);

#ifdef UDM_RVALUE
		PredefinedTypes(PredefinedTypes &&master);

		static PredefinedTypes Cast(::Udm::Object &&a);
		PredefinedTypes& operator=(PredefinedTypes &&a);

#endif
		static PredefinedTypes Cast(const ::Udm::Object &a);
		static PredefinedTypes Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		PredefinedTypes CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< PredefinedTypes> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< PredefinedTypes, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< PredefinedTypes, Pred>(impl); };
		PredefinedTypes CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< PredefinedTypes> Derived();
		template <class Pred> ::Udm::DerivedAttr< PredefinedTypes, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< PredefinedTypes, Pred>(impl); };
		::Udm::ArchetypeAttr< PredefinedTypes> Archetype() const;
		::Udm::StringAttr name() const;
		::Udm::ChildrenAttr< ::CQML::PredefinedType> PredefinedType_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PredefinedType, Pred> PredefinedType_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PredefinedType, Pred>(impl, meta_PredefinedType_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ConstantType> ConstantType_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ConstantType, Pred> ConstantType_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ConstantType, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::PredefinedType> PredefinedType_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PredefinedType, Pred> PredefinedType_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PredefinedType, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::MemberType> MemberType_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MemberType, Pred> MemberType_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MemberType, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Boolean> Boolean_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Boolean, Pred> Boolean_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Boolean, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Byte> Byte_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Byte, Pred> Byte_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Byte, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ShortInteger> ShortInteger_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ShortInteger, Pred> ShortInteger_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ShortInteger, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::LongInteger> LongInteger_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::LongInteger, Pred> LongInteger_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::LongInteger, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::RealNumber> RealNumber_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::RealNumber, Pred> RealNumber_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::RealNumber, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::String> String_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::String, Pred> String_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::String, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::GenericObject> GenericObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::GenericObject, Pred> GenericObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::GenericObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::GenericValueObject> GenericValueObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::GenericValueObject, Pred> GenericValueObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::GenericValueObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::GenericValue> GenericValue_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::GenericValue, Pred> GenericValue_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::GenericValue, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::TypeEncoding> TypeEncoding_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::TypeEncoding, Pred> TypeEncoding_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::TypeEncoding, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::TypeKind> TypeKind_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::TypeKind, Pred> TypeKind_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::TypeKind, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::RootFolder> RootFolder_parent() const;
		::Udm::ParentAttr< ::CQML::RootFolder> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_name;
		static ::Uml::CompositionChildRole meta_PredefinedType_children;
		static ::Uml::CompositionParentRole meta_RootFolder_parent;

	};

	class CQML_Export Targets : public ::Udm::Object {
	public:
		Targets();
		Targets(::Udm::ObjectImpl *impl);
		Targets(const Targets &master);

#ifdef UDM_RVALUE
		Targets(Targets &&master);

		static Targets Cast(::Udm::Object &&a);
		Targets& operator=(Targets &&a);

#endif
		static Targets Cast(const ::Udm::Object &a);
		static Targets Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		Targets CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< Targets> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< Targets, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< Targets, Pred>(impl); };
		Targets CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< Targets> Derived();
		template <class Pred> ::Udm::DerivedAttr< Targets, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< Targets, Pred>(impl); };
		::Udm::ArchetypeAttr< Targets> Archetype() const;
		::Udm::StringAttr name() const;
		::Udm::ChildrenAttr< ::CQML::Domain> Domain_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Domain, Pred> Domain_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Domain, Pred>(impl, meta_Domain_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Domain> Domain_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Domain, Pred> Domain_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Domain, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::RootFolder> RootFolder_parent() const;
		::Udm::ParentAttr< ::CQML::RootFolder> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_name;
		static ::Uml::CompositionChildRole meta_Domain_children;
		static ::Uml::CompositionParentRole meta_RootFolder_parent;

	};

	class CQML_Export ComponentPackages : public ::Udm::Object {
	public:
		ComponentPackages();
		ComponentPackages(::Udm::ObjectImpl *impl);
		ComponentPackages(const ComponentPackages &master);

#ifdef UDM_RVALUE
		ComponentPackages(ComponentPackages &&master);

		static ComponentPackages Cast(::Udm::Object &&a);
		ComponentPackages& operator=(ComponentPackages &&a);

#endif
		static ComponentPackages Cast(const ::Udm::Object &a);
		static ComponentPackages Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ComponentPackages CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ComponentPackages> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ComponentPackages, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ComponentPackages, Pred>(impl); };
		ComponentPackages CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ComponentPackages> Derived();
		template <class Pred> ::Udm::DerivedAttr< ComponentPackages, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ComponentPackages, Pred>(impl); };
		::Udm::ArchetypeAttr< ComponentPackages> Archetype() const;
		::Udm::StringAttr name() const;
		::Udm::ChildrenAttr< ::CQML::PackageContainer> PackageContainer_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PackageContainer, Pred> PackageContainer_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PackageContainer, Pred>(impl, meta_PackageContainer_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::PackageContainer> PackageContainer_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PackageContainer, Pred> PackageContainer_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PackageContainer, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::RootFolder> RootFolder_parent() const;
		::Udm::ParentAttr< ::CQML::RootFolder> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_name;
		static ::Uml::CompositionChildRole meta_PackageContainer_children;
		static ::Uml::CompositionParentRole meta_RootFolder_parent;

	};

	class CQML_Export TopLevelPackages : public ::Udm::Object {
	public:
		TopLevelPackages();
		TopLevelPackages(::Udm::ObjectImpl *impl);
		TopLevelPackages(const TopLevelPackages &master);

#ifdef UDM_RVALUE
		TopLevelPackages(TopLevelPackages &&master);

		static TopLevelPackages Cast(::Udm::Object &&a);
		TopLevelPackages& operator=(TopLevelPackages &&a);

#endif
		static TopLevelPackages Cast(const ::Udm::Object &a);
		static TopLevelPackages Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		TopLevelPackages CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< TopLevelPackages> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< TopLevelPackages, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< TopLevelPackages, Pred>(impl); };
		TopLevelPackages CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< TopLevelPackages> Derived();
		template <class Pred> ::Udm::DerivedAttr< TopLevelPackages, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< TopLevelPackages, Pred>(impl); };
		::Udm::ArchetypeAttr< TopLevelPackages> Archetype() const;
		::Udm::StringAttr name() const;
		::Udm::ChildrenAttr< ::CQML::TopLevelPackageContainer> TopLevelPackageContainer_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::TopLevelPackageContainer, Pred> TopLevelPackageContainer_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::TopLevelPackageContainer, Pred>(impl, meta_TopLevelPackageContainer_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::TopLevelPackageContainer> TopLevelPackageContainer_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::TopLevelPackageContainer, Pred> TopLevelPackageContainer_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::TopLevelPackageContainer, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::RootFolder> RootFolder_parent() const;
		::Udm::ParentAttr< ::CQML::RootFolder> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_name;
		static ::Uml::CompositionChildRole meta_TopLevelPackageContainer_children;
		static ::Uml::CompositionParentRole meta_RootFolder_parent;

	};

	class CQML_Export ComponentTypes : public ::Udm::Object {
	public:
		ComponentTypes();
		ComponentTypes(::Udm::ObjectImpl *impl);
		ComponentTypes(const ComponentTypes &master);

#ifdef UDM_RVALUE
		ComponentTypes(ComponentTypes &&master);

		static ComponentTypes Cast(::Udm::Object &&a);
		ComponentTypes& operator=(ComponentTypes &&a);

#endif
		static ComponentTypes Cast(const ::Udm::Object &a);
		static ComponentTypes Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ComponentTypes CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ComponentTypes> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ComponentTypes, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ComponentTypes, Pred>(impl); };
		ComponentTypes CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ComponentTypes> Derived();
		template <class Pred> ::Udm::DerivedAttr< ComponentTypes, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ComponentTypes, Pred>(impl); };
		::Udm::ArchetypeAttr< ComponentTypes> Archetype() const;
		::Udm::StringAttr name() const;
		::Udm::ChildrenAttr< ::CQML::ComponentContainer> ComponentContainer_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentContainer, Pred> ComponentContainer_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentContainer, Pred>(impl, meta_ComponentContainer_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentContainer> ComponentContainer_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentContainer, Pred> ComponentContainer_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentContainer, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::RootFolder> RootFolder_parent() const;
		::Udm::ParentAttr< ::CQML::RootFolder> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_name;
		static ::Uml::CompositionChildRole meta_ComponentContainer_children;
		static ::Uml::CompositionParentRole meta_RootFolder_parent;

	};

	class CQML_Export ImplementationArtifacts : public ::Udm::Object {
	public:
		ImplementationArtifacts();
		ImplementationArtifacts(::Udm::ObjectImpl *impl);
		ImplementationArtifacts(const ImplementationArtifacts &master);

#ifdef UDM_RVALUE
		ImplementationArtifacts(ImplementationArtifacts &&master);

		static ImplementationArtifacts Cast(::Udm::Object &&a);
		ImplementationArtifacts& operator=(ImplementationArtifacts &&a);

#endif
		static ImplementationArtifacts Cast(const ::Udm::Object &a);
		static ImplementationArtifacts Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ImplementationArtifacts CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ImplementationArtifacts> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ImplementationArtifacts, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ImplementationArtifacts, Pred>(impl); };
		ImplementationArtifacts CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ImplementationArtifacts> Derived();
		template <class Pred> ::Udm::DerivedAttr< ImplementationArtifacts, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ImplementationArtifacts, Pred>(impl); };
		::Udm::ArchetypeAttr< ImplementationArtifacts> Archetype() const;
		::Udm::StringAttr name() const;
		::Udm::ChildrenAttr< ::CQML::ArtifactContainer> ArtifactContainer_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ArtifactContainer, Pred> ArtifactContainer_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ArtifactContainer, Pred>(impl, meta_ArtifactContainer_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ArtifactContainer> ArtifactContainer_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ArtifactContainer, Pred> ArtifactContainer_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ArtifactContainer, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::RootFolder> RootFolder_parent() const;
		::Udm::ParentAttr< ::CQML::RootFolder> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_name;
		static ::Uml::CompositionChildRole meta_ArtifactContainer_children;
		static ::Uml::CompositionParentRole meta_RootFolder_parent;

	};

	class CQML_Export PackageConfigurations : public ::Udm::Object {
	public:
		PackageConfigurations();
		PackageConfigurations(::Udm::ObjectImpl *impl);
		PackageConfigurations(const PackageConfigurations &master);

#ifdef UDM_RVALUE
		PackageConfigurations(PackageConfigurations &&master);

		static PackageConfigurations Cast(::Udm::Object &&a);
		PackageConfigurations& operator=(PackageConfigurations &&a);

#endif
		static PackageConfigurations Cast(const ::Udm::Object &a);
		static PackageConfigurations Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		PackageConfigurations CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< PackageConfigurations> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< PackageConfigurations, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< PackageConfigurations, Pred>(impl); };
		PackageConfigurations CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< PackageConfigurations> Derived();
		template <class Pred> ::Udm::DerivedAttr< PackageConfigurations, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< PackageConfigurations, Pred>(impl); };
		::Udm::ArchetypeAttr< PackageConfigurations> Archetype() const;
		::Udm::StringAttr name() const;
		::Udm::ChildrenAttr< ::CQML::PackageConfigurationContainer> PackageConfigurationContainer_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PackageConfigurationContainer, Pred> PackageConfigurationContainer_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PackageConfigurationContainer, Pred>(impl, meta_PackageConfigurationContainer_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::PackageConfigurationContainer> PackageConfigurationContainer_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PackageConfigurationContainer, Pred> PackageConfigurationContainer_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PackageConfigurationContainer, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::RootFolder> RootFolder_parent() const;
		::Udm::ParentAttr< ::CQML::RootFolder> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_name;
		static ::Uml::CompositionChildRole meta_PackageConfigurationContainer_children;
		static ::Uml::CompositionParentRole meta_RootFolder_parent;

	};

	class CQML_Export ComponentImplementations : public ::Udm::Object {
	public:
		ComponentImplementations();
		ComponentImplementations(::Udm::ObjectImpl *impl);
		ComponentImplementations(const ComponentImplementations &master);

#ifdef UDM_RVALUE
		ComponentImplementations(ComponentImplementations &&master);

		static ComponentImplementations Cast(::Udm::Object &&a);
		ComponentImplementations& operator=(ComponentImplementations &&a);

#endif
		static ComponentImplementations Cast(const ::Udm::Object &a);
		static ComponentImplementations Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ComponentImplementations CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ComponentImplementations> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ComponentImplementations, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ComponentImplementations, Pred>(impl); };
		ComponentImplementations CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ComponentImplementations> Derived();
		template <class Pred> ::Udm::DerivedAttr< ComponentImplementations, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ComponentImplementations, Pred>(impl); };
		::Udm::ArchetypeAttr< ComponentImplementations> Archetype() const;
		::Udm::StringAttr name() const;
		::Udm::ChildrenAttr< ::CQML::ComponentImplementationContainer> ComponentImplementationContainer_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentImplementationContainer, Pred> ComponentImplementationContainer_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentImplementationContainer, Pred>(impl, meta_ComponentImplementationContainer_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentImplementationContainer> ComponentImplementationContainer_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentImplementationContainer, Pred> ComponentImplementationContainer_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentImplementationContainer, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ImplementationContainer> ImplementationContainer_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ImplementationContainer, Pred> ImplementationContainer_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ImplementationContainer, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::RootFolder> RootFolder_parent() const;
		::Udm::ParentAttr< ::CQML::RootFolder> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_name;
		static ::Uml::CompositionChildRole meta_ComponentImplementationContainer_children;
		static ::Uml::CompositionParentRole meta_RootFolder_parent;

	};

	class CQML_Export DeploymentPlans : public ::Udm::Object {
	public:
		DeploymentPlans();
		DeploymentPlans(::Udm::ObjectImpl *impl);
		DeploymentPlans(const DeploymentPlans &master);

#ifdef UDM_RVALUE
		DeploymentPlans(DeploymentPlans &&master);

		static DeploymentPlans Cast(::Udm::Object &&a);
		DeploymentPlans& operator=(DeploymentPlans &&a);

#endif
		static DeploymentPlans Cast(const ::Udm::Object &a);
		static DeploymentPlans Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		DeploymentPlans CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< DeploymentPlans> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< DeploymentPlans, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< DeploymentPlans, Pred>(impl); };
		DeploymentPlans CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< DeploymentPlans> Derived();
		template <class Pred> ::Udm::DerivedAttr< DeploymentPlans, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< DeploymentPlans, Pred>(impl); };
		::Udm::ArchetypeAttr< DeploymentPlans> Archetype() const;
		::Udm::StringAttr name() const;
		::Udm::ChildrenAttr< ::CQML::DeploymentPlan> DeploymentPlan_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::DeploymentPlan, Pred> DeploymentPlan_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::DeploymentPlan, Pred>(impl, meta_DeploymentPlan_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::DeploymentPlan> DeploymentPlan_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::DeploymentPlan, Pred> DeploymentPlan_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::DeploymentPlan, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::RootFolder> RootFolder_parent() const;
		::Udm::ParentAttr< ::CQML::RootFolder> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_name;
		static ::Uml::CompositionChildRole meta_DeploymentPlan_children;
		static ::Uml::CompositionParentRole meta_RootFolder_parent;

	};

	class CQML_Export ComponentAnalyses : public ::Udm::Object {
	public:
		ComponentAnalyses();
		ComponentAnalyses(::Udm::ObjectImpl *impl);
		ComponentAnalyses(const ComponentAnalyses &master);

#ifdef UDM_RVALUE
		ComponentAnalyses(ComponentAnalyses &&master);

		static ComponentAnalyses Cast(::Udm::Object &&a);
		ComponentAnalyses& operator=(ComponentAnalyses &&a);

#endif
		static ComponentAnalyses Cast(const ::Udm::Object &a);
		static ComponentAnalyses Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ComponentAnalyses CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ComponentAnalyses> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ComponentAnalyses, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ComponentAnalyses, Pred>(impl); };
		ComponentAnalyses CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ComponentAnalyses> Derived();
		template <class Pred> ::Udm::DerivedAttr< ComponentAnalyses, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ComponentAnalyses, Pred>(impl); };
		::Udm::ArchetypeAttr< ComponentAnalyses> Archetype() const;
		::Udm::StringAttr name() const;
		::Udm::ChildrenAttr< ::CQML::BenchmarkAnalysis> BenchmarkAnalysis_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::BenchmarkAnalysis, Pred> BenchmarkAnalysis_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::BenchmarkAnalysis, Pred>(impl, meta_BenchmarkAnalysis_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::BenchmarkAnalysis> BenchmarkAnalysis_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::BenchmarkAnalysis, Pred> BenchmarkAnalysis_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::BenchmarkAnalysis, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::RootFolder> RootFolder_parent() const;
		::Udm::ParentAttr< ::CQML::RootFolder> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_name;
		static ::Uml::CompositionChildRole meta_BenchmarkAnalysis_children;
		static ::Uml::CompositionParentRole meta_RootFolder_parent;

	};

	class CQML_Export PathDiagrams : public ::Udm::Object {
	public:
		PathDiagrams();
		PathDiagrams(::Udm::ObjectImpl *impl);
		PathDiagrams(const PathDiagrams &master);

#ifdef UDM_RVALUE
		PathDiagrams(PathDiagrams &&master);

		static PathDiagrams Cast(::Udm::Object &&a);
		PathDiagrams& operator=(PathDiagrams &&a);

#endif
		static PathDiagrams Cast(const ::Udm::Object &a);
		static PathDiagrams Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		PathDiagrams CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< PathDiagrams> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< PathDiagrams, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< PathDiagrams, Pred>(impl); };
		PathDiagrams CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< PathDiagrams> Derived();
		template <class Pred> ::Udm::DerivedAttr< PathDiagrams, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< PathDiagrams, Pred>(impl); };
		::Udm::ArchetypeAttr< PathDiagrams> Archetype() const;
		::Udm::StringAttr name() const;
		::Udm::ChildrenAttr< ::CQML::Paths> Paths_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Paths, Pred> Paths_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Paths, Pred>(impl, meta_Paths_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Paths> Paths_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Paths, Pred> Paths_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Paths, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::RootFolder> RootFolder_parent() const;
		::Udm::ParentAttr< ::CQML::RootFolder> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_name;
		static ::Uml::CompositionChildRole meta_Paths_children;
		static ::Uml::CompositionParentRole meta_RootFolder_parent;

	};

	class CQML_Export ComponentFactoryImplementations : public ::Udm::Object {
	public:
		ComponentFactoryImplementations();
		ComponentFactoryImplementations(::Udm::ObjectImpl *impl);
		ComponentFactoryImplementations(const ComponentFactoryImplementations &master);

#ifdef UDM_RVALUE
		ComponentFactoryImplementations(ComponentFactoryImplementations &&master);

		static ComponentFactoryImplementations Cast(::Udm::Object &&a);
		ComponentFactoryImplementations& operator=(ComponentFactoryImplementations &&a);

#endif
		static ComponentFactoryImplementations Cast(const ::Udm::Object &a);
		static ComponentFactoryImplementations Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		ComponentFactoryImplementations CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< ComponentFactoryImplementations> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< ComponentFactoryImplementations, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< ComponentFactoryImplementations, Pred>(impl); };
		ComponentFactoryImplementations CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< ComponentFactoryImplementations> Derived();
		template <class Pred> ::Udm::DerivedAttr< ComponentFactoryImplementations, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< ComponentFactoryImplementations, Pred>(impl); };
		::Udm::ArchetypeAttr< ComponentFactoryImplementations> Archetype() const;
		::Udm::StringAttr name() const;
		::Udm::ChildrenAttr< ::CQML::ComponentFactoryImplementationContainer> ComponentFactoryImplementationContainer_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentFactoryImplementationContainer, Pred> ComponentFactoryImplementationContainer_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentFactoryImplementationContainer, Pred>(impl, meta_ComponentFactoryImplementationContainer_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ImplementationContainer> ImplementationContainer_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ImplementationContainer, Pred> ImplementationContainer_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ImplementationContainer, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentFactoryImplementationContainer> ComponentFactoryImplementationContainer_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentFactoryImplementationContainer, Pred> ComponentFactoryImplementationContainer_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentFactoryImplementationContainer, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::RootFolder> RootFolder_parent() const;
		::Udm::ParentAttr< ::CQML::RootFolder> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_name;
		static ::Uml::CompositionChildRole meta_ComponentFactoryImplementationContainer_children;
		static ::Uml::CompositionParentRole meta_RootFolder_parent;

	};

	class CQML_Export WorkerLibraries : public ::Udm::Object {
	public:
		WorkerLibraries();
		WorkerLibraries(::Udm::ObjectImpl *impl);
		WorkerLibraries(const WorkerLibraries &master);

#ifdef UDM_RVALUE
		WorkerLibraries(WorkerLibraries &&master);

		static WorkerLibraries Cast(::Udm::Object &&a);
		WorkerLibraries& operator=(WorkerLibraries &&a);

#endif
		static WorkerLibraries Cast(const ::Udm::Object &a);
		static WorkerLibraries Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		WorkerLibraries CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< WorkerLibraries> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< WorkerLibraries, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< WorkerLibraries, Pred>(impl); };
		WorkerLibraries CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< WorkerLibraries> Derived();
		template <class Pred> ::Udm::DerivedAttr< WorkerLibraries, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< WorkerLibraries, Pred>(impl); };
		::Udm::ArchetypeAttr< WorkerLibraries> Archetype() const;
		::Udm::StringAttr name() const;
		::Udm::ChildrenAttr< ::CQML::WorkerLibrary> WorkerLibrary_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::WorkerLibrary, Pred> WorkerLibrary_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::WorkerLibrary, Pred>(impl, meta_WorkerLibrary_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::WorkerLibrary> WorkerLibrary_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::WorkerLibrary, Pred> WorkerLibrary_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::WorkerLibrary, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::RootFolder> RootFolder_parent() const;
		::Udm::ParentAttr< ::CQML::RootFolder> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_name;
		static ::Uml::CompositionChildRole meta_WorkerLibrary_children;
		static ::Uml::CompositionParentRole meta_RootFolder_parent;

	};

	class CQML_Export RootFolder : public ::Udm::Object {
	public:
		RootFolder();
		RootFolder(::Udm::ObjectImpl *impl);
		RootFolder(const RootFolder &master);

#ifdef UDM_RVALUE
		RootFolder(RootFolder &&master);

		static RootFolder Cast(::Udm::Object &&a);
		RootFolder& operator=(RootFolder &&a);

#endif
		static RootFolder Cast(const ::Udm::Object &a);
		static RootFolder Create(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		RootFolder CreateInstance(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::InstantiatedAttr< RootFolder> Instances();
		template <class Pred> ::Udm::InstantiatedAttr< RootFolder, Pred> Instances_sorted(const Pred &) { return ::Udm::InstantiatedAttr< RootFolder, Pred>(impl); };
		RootFolder CreateDerived(const ::Udm::Object &parent, const ::Uml::CompositionChildRole &role = ::Udm::NULLCHILDROLE);
		::Udm::DerivedAttr< RootFolder> Derived();
		template <class Pred> ::Udm::DerivedAttr< RootFolder, Pred> Derived_sorted(const Pred &) { return ::Udm::DerivedAttr< RootFolder, Pred>(impl); };
		::Udm::ArchetypeAttr< RootFolder> Archetype() const;
		::Udm::StringAttr name() const;
		::Udm::ChildrenAttr< ::CQML::FTDeployment> FTDeployment_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::FTDeployment, Pred> FTDeployment_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::FTDeployment, Pred>(impl, meta_FTDeployment_children); };
		::Udm::ChildrenAttr< ::CQML::CIAOEvents> CIAOEvents_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::CIAOEvents, Pred> CIAOEvents_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::CIAOEvents, Pred>(impl, meta_CIAOEvents_children); };
		::Udm::ChildrenAttr< ::CQML::Security> Security_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Security, Pred> Security_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Security, Pred>(impl, meta_Security_children); };
		::Udm::ChildrenAttr< ::CQML::ComponentBuild> ComponentBuild_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentBuild, Pred> ComponentBuild_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentBuild, Pred>(impl, meta_ComponentBuild_children); };
		::Udm::ChildrenAttr< ::CQML::InterfaceDefinitions> InterfaceDefinitions_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::InterfaceDefinitions, Pred> InterfaceDefinitions_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::InterfaceDefinitions, Pred>(impl, meta_InterfaceDefinitions_children); };
		::Udm::ChildrenAttr< ::CQML::PredefinedTypes> PredefinedTypes_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PredefinedTypes, Pred> PredefinedTypes_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PredefinedTypes, Pred>(impl, meta_PredefinedTypes_children); };
		::Udm::ChildrenAttr< ::CQML::Targets> Targets_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Targets, Pred> Targets_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Targets, Pred>(impl, meta_Targets_children); };
		::Udm::ChildrenAttr< ::CQML::ComponentPackages> ComponentPackages_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentPackages, Pred> ComponentPackages_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentPackages, Pred>(impl, meta_ComponentPackages_children); };
		::Udm::ChildrenAttr< ::CQML::TopLevelPackages> TopLevelPackages_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::TopLevelPackages, Pred> TopLevelPackages_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::TopLevelPackages, Pred>(impl, meta_TopLevelPackages_children); };
		::Udm::ChildrenAttr< ::CQML::ComponentTypes> ComponentTypes_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentTypes, Pred> ComponentTypes_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentTypes, Pred>(impl, meta_ComponentTypes_children); };
		::Udm::ChildrenAttr< ::CQML::ImplementationArtifacts> ImplementationArtifacts_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ImplementationArtifacts, Pred> ImplementationArtifacts_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ImplementationArtifacts, Pred>(impl, meta_ImplementationArtifacts_children); };
		::Udm::ChildrenAttr< ::CQML::PackageConfigurations> PackageConfigurations_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PackageConfigurations, Pred> PackageConfigurations_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PackageConfigurations, Pred>(impl, meta_PackageConfigurations_children); };
		::Udm::ChildrenAttr< ::CQML::ComponentImplementations> ComponentImplementations_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentImplementations, Pred> ComponentImplementations_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentImplementations, Pred>(impl, meta_ComponentImplementations_children); };
		::Udm::ChildrenAttr< ::CQML::DeploymentPlans> DeploymentPlans_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::DeploymentPlans, Pred> DeploymentPlans_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::DeploymentPlans, Pred>(impl, meta_DeploymentPlans_children); };
		::Udm::ChildrenAttr< ::CQML::ComponentAnalyses> ComponentAnalyses_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentAnalyses, Pred> ComponentAnalyses_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentAnalyses, Pred>(impl, meta_ComponentAnalyses_children); };
		::Udm::ChildrenAttr< ::CQML::PathDiagrams> PathDiagrams_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PathDiagrams, Pred> PathDiagrams_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PathDiagrams, Pred>(impl, meta_PathDiagrams_children); };
		::Udm::ChildrenAttr< ::CQML::ComponentFactoryImplementations> ComponentFactoryImplementations_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentFactoryImplementations, Pred> ComponentFactoryImplementations_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentFactoryImplementations, Pred>(impl, meta_ComponentFactoryImplementations_children); };
		::Udm::ChildrenAttr< ::CQML::WorkerLibraries> WorkerLibraries_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::WorkerLibraries, Pred> WorkerLibraries_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::WorkerLibraries, Pred>(impl, meta_WorkerLibraries_children); };
		::Udm::ChildrenAttr< ::CQML::RootFolder> RootFolder_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::RootFolder, Pred> RootFolder_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::RootFolder, Pred>(impl, meta_RootFolder_children); };
		::Udm::ChildrenAttr< ::CQML::MgaObject> MgaObject_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred> MgaObject_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::MgaObject, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::QoSCharacteristicBase> QoSCharacteristicBase_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::QoSCharacteristicBase, Pred> QoSCharacteristicBase_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::QoSCharacteristicBase, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ConnectionQoSCharacteristic> ConnectionQoSCharacteristic_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ConnectionQoSCharacteristic, Pred> ConnectionQoSCharacteristic_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ConnectionQoSCharacteristic, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::CIAOEvents> CIAOEvents_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::CIAOEvents, Pred> CIAOEvents_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::CIAOEvents, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::FTDeployment> FTDeployment_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::FTDeployment, Pred> FTDeployment_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::FTDeployment, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Security> Security_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Security, Pred> Security_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Security, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentBuild> ComponentBuild_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentBuild, Pred> ComponentBuild_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentBuild, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::InterfaceDefinitions> InterfaceDefinitions_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::InterfaceDefinitions, Pred> InterfaceDefinitions_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::InterfaceDefinitions, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::PredefinedTypes> PredefinedTypes_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PredefinedTypes, Pred> PredefinedTypes_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PredefinedTypes, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::Targets> Targets_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::Targets, Pred> Targets_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::Targets, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentPackages> ComponentPackages_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentPackages, Pred> ComponentPackages_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentPackages, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::TopLevelPackages> TopLevelPackages_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::TopLevelPackages, Pred> TopLevelPackages_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::TopLevelPackages, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentTypes> ComponentTypes_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentTypes, Pred> ComponentTypes_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentTypes, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ImplementationArtifacts> ImplementationArtifacts_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ImplementationArtifacts, Pred> ImplementationArtifacts_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ImplementationArtifacts, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::PackageConfigurations> PackageConfigurations_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PackageConfigurations, Pred> PackageConfigurations_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PackageConfigurations, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentImplementations> ComponentImplementations_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentImplementations, Pred> ComponentImplementations_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentImplementations, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::DeploymentPlans> DeploymentPlans_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::DeploymentPlans, Pred> DeploymentPlans_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::DeploymentPlans, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentAnalyses> ComponentAnalyses_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentAnalyses, Pred> ComponentAnalyses_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentAnalyses, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::PathDiagrams> PathDiagrams_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::PathDiagrams, Pred> PathDiagrams_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::PathDiagrams, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::ComponentFactoryImplementations> ComponentFactoryImplementations_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::ComponentFactoryImplementations, Pred> ComponentFactoryImplementations_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::ComponentFactoryImplementations, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::WorkerLibraries> WorkerLibraries_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::WorkerLibraries, Pred> WorkerLibraries_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::WorkerLibraries, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ChildrenAttr< ::CQML::RootFolder> RootFolder_kind_children() const;
		template <class Pred> ::Udm::ChildrenAttr< ::CQML::RootFolder, Pred> RootFolder_kind_children_sorted(const Pred &) const { return ::Udm::ChildrenAttr< ::CQML::RootFolder, Pred>(impl, ::Udm::NULLCHILDROLE); };
		::Udm::ParentAttr< ::CQML::RootFolder> RootFolder_parent() const;
		::Udm::ParentAttr< ::CQML::RootFolder> parent() const;
		void Accept(Visitor &v);

		static ::Uml::Class meta;
		static ::Uml::Attribute meta_name;
		static ::Uml::CompositionChildRole meta_FTDeployment_children;
		static ::Uml::CompositionChildRole meta_CIAOEvents_children;
		static ::Uml::CompositionChildRole meta_Security_children;
		static ::Uml::CompositionChildRole meta_ComponentBuild_children;
		static ::Uml::CompositionChildRole meta_InterfaceDefinitions_children;
		static ::Uml::CompositionChildRole meta_PredefinedTypes_children;
		static ::Uml::CompositionChildRole meta_Targets_children;
		static ::Uml::CompositionChildRole meta_ComponentPackages_children;
		static ::Uml::CompositionChildRole meta_TopLevelPackages_children;
		static ::Uml::CompositionChildRole meta_ComponentTypes_children;
		static ::Uml::CompositionChildRole meta_ImplementationArtifacts_children;
		static ::Uml::CompositionChildRole meta_PackageConfigurations_children;
		static ::Uml::CompositionChildRole meta_ComponentImplementations_children;
		static ::Uml::CompositionChildRole meta_DeploymentPlans_children;
		static ::Uml::CompositionChildRole meta_ComponentAnalyses_children;
		static ::Uml::CompositionChildRole meta_PathDiagrams_children;
		static ::Uml::CompositionChildRole meta_ComponentFactoryImplementations_children;
		static ::Uml::CompositionChildRole meta_WorkerLibraries_children;
		static ::Uml::CompositionChildRole meta_RootFolder_children;
		static ::Uml::CompositionParentRole meta_RootFolder_parent;

	};

}

#endif // MOBIES_CQML_H
