<?xml version="1.0"?>
<!DOCTYPE paradigm SYSTEM "edf.dtd">

<paradigm name="DQML" guid="{EBB11741-389E-479F-A3E8-FC4D196D0C71}" cdate="Wed Jun 04 23:37:35 2014" mdate="Wed Jun 04 23:37:35 2014" >

	<comment></comment>

	<author></author>

	<folder name = "RootFolder" metaref = "1000"  subfolders = "iCCM" rootobjects = "DDSQoS" >
		<constraint type="function" name="Are_Deadlines_Compatible">
			<![CDATA[method;gme::Model;reader: DataReader, writers: ocl::Set;ocl::Boolean;
			let dr_deadline_set = reader.connectedFCOs(dr_deadline_Connection) in

-- If a DR has a DeadlineQosPolicy association then use that.
-- Otherwise, the requested default value (i.e., infinity) is compatible with any offered value so return true
-- We just need one DataWriter deadline policy to be compatible so use the exists function.
if (dr_deadline_set->size() > 0) then
   writers->exists(c: DataWriter |  Is_Deadline_Compatible(dr_deadline_set,
                          c.connectedFCOs(dw_deadline_Connection)))
else
   true
endif]]>
		</constraint>
		<constraint type="function" name="Are_DestOrders_Compatible">
			<![CDATA[method;gme::Model;reader: DataReader, writers: ocl::Set;ocl::Boolean;
			let dr_dstOrder_set = reader.connectedFCOs(dr_dstOrder_Connection) in

-- If a DR has a DestinationOrderQosPolicy association then use that.
-- Otherwise, the requested default values (i.e., BY_RECEPTION_TIMESTAMP) is compatible with any offered value so return true
-- We just need one DataWriter reliability policy to be compatible so use the exists function.
if (dr_dstOrder_set->size() > 0) then
   writers->exists(c: DataWriter |  Is_DestOrder_Compatible(dr_dstOrder_set,
                          c.connectedFCOs(dw_dstOrder_Connection)))
else
   true
endif]]>
		</constraint>
		<constraint type="function" name="Are_Durabilities_Compatible">
			<![CDATA[method;gme::Model;reader: DataReader, writers: ocl::Set;ocl::Boolean;
			let dr_durqos_set = reader.connectedFCOs(dr_durqos_Connection) in

-- If a DR has a DurabilityQosPolicy association then use that.
-- Otherwise, the requested default value (i.e., VOLATILE) is compatible with any offered value so return true
-- We just need one DataWriter durability policy to be compatible so use the exists function.
if (dr_durqos_set->size() = 1) then
   writers->exists(c: DataWriter |  Is_Durability_Compatible(dr_durqos_set,
                          c.connectedFCOs(dw_durqos_Connection)))
else
   true
endif


-- PREVIOUS DEFINITION ABOVE WITH ARGS reader: DataReader, writers: ocl::Set
---- DONT DO IT THIS WAY!!! let dr_durqos_set = reader.connectedFCOs(DurabilityQosPolicy) in
--let dr_durqos_set = reader.connectedFCOs(dr_durqos_Connection) in
--
---- If a DR has a DurabilityQosPolicy association then use that.
---- Otherwise, the requested default value (i.e., VOLATILE) is compatible with any offered value so return true
---- We just need one DataWriter durability policy to be compatible so use the exists function.
--if (dr_durqos_set->size() = 1) then
--   writers->exists( c: DataWriter |  Compare_Durability_QoS_DR_DW(dr_durqos_set->theOnly().oclAsType(DurabilityQosPolicy), c))
--else
--   true
--endif]]>
		</constraint>
		<constraint type="function" name="Are_LatencyBudgets_Compatible">
			<![CDATA[method;gme::Model;reader: DataReader, writers: ocl::Set;ocl::Boolean;
			let dr_latency_set = reader.connectedFCOs(dr_latency_Connection) in

-- If a DR has a LatencyBudgetQosPolicy association then use that.
-- Otherwise, the requested default value (i.e., 0) is compatible with any offered value so return true
-- We just need one DataWriter latency budget policy to be compatible so use the exists function.
if (dr_latency_set->size() > 0) then
   writers->exists(c: DataWriter |  Is_LatencyBudget_Compatible(dr_latency_set,
                          c.connectedFCOs(dw_latency_Connection)))
else
   -- Here if the DataReader uses the default value because it has no LatencyBudgetQosPolicy then there needs to
   -- be a DataWriter (or Topic which is checked elsewhere) that also has the default value of 0 either implicitly or explicitly.
   writers->exists(c: DataWriter | c.connectedFCOs(dw_latency_Connection).size() = 0 or
                                                  c.connectedFCOs(dw_latency_Connection).theOnly().oclAsType(LatencyBudgetQosPolicy).duration = 0)
endif]]>
		</constraint>
		<constraint type="function" name="Are_Livelinesses_Compatible">
			<![CDATA[method;gme::Model;reader: DataReader, writers: ocl::Set;ocl::Boolean;
			let dr_liveliness_set = reader.connectedFCOs(dr_liveliness_Connection) in

-- If a DR has a LivelinessQosPolicy association then use that.
-- Otherwise, the requested default values (i.e., AUTOMATIC and infinite duration) are compatible with any offered value so return true
-- We just need one DataWriter durability policy to be compatible so use the exists function.
if (dr_liveliness_set->size() > 0) then
   writers->exists(c: DataWriter |  Is_Liveliness_Compatible(dr_liveliness_set,
                          c.connectedFCOs(dw_liveliness_Connection)))
else
   true
endif]]>
		</constraint>
		<constraint type="function" name="Are_Ownerships_Compatible">
			<![CDATA[method;gme::Model;reader: DataReader, writers: ocl::Set;ocl::Boolean;
			let dr_ownership_set = reader.connectedFCOs(dr_ownership_Connection) in

-- If a DR has an OwnershipQosPolicy association then use that.
-- Otherwise, the requested default value (i.e., SHARED) must be compatible with at least one offered value
-- so check those
-- We just need one DataWriter ownership policy to be compatible so use the exists function.
if (dr_ownership_set->size() > 0) then
   writers->exists(c: DataWriter |  Is_Ownership_Compatible(dr_ownership_set,
                          c.connectedFCOs(dw_ownership_Connection)))
else
   -- Here if the DataReader uses the default value because it has no OwnershipQosPolicy then there needs to
   -- be a DataWriter (or Topic which is checked elsewhere) that also has the default value of SHARED either implicitly or explicitly.
   writers->exists(c: DataWriter | c.connectedFCOs(dw_ownership_Connection).size() = 0 or
                                                  c.connectedFCOs(dw_ownership_Connection).theOnly().oclAsType(OwnershipQosPolicy).ownership_kind = #SHARED)
endif]]>
		</constraint>
		<constraint type="function" name="Are_Presentations_Compatible">
			<![CDATA[method;gme::Model;subscribers: ocl::Set, writers: ocl::Set;ocl::Boolean;
			-- If the set of Subscribers is not empty (which is the valid case - there should be only one) then
-- get its Presentation QoS (if it has one) and compare it with the Presentation QoSs that the
-- Publishers (associated with the writers) have (if any)
-- We just need one Publisher presentation policy to be compatible so use the exists function.
if (subscribers->size() > 0) then
   let subscriber = subscribers.theOnly().oclAsType(Subscriber) in
   let presentations = subscriber.connectedFCOs(sub_presqos_Connection) in
   if (presentations->size() > 0) then
      writers->exists(c: DataWriter |  Are_Pub_Presentations_Compatible(presentations.theOnly().oclAsType(PresentationQosPolicy),
                                                                                                               c.connectedFCOs(dw_pub_Connection)))
   else
      -- Here we have a subscriber with no presentation QoS policy.
      -- The requested default values (i.e., INSTANCE, coherent_access=FALSE, ordered_access=FALSE)
      -- are compatible with any offered value so return true
      true
   endif
else
   -- Otherwise, there is no subscriber for the DataReader (which is invalid but should be handled here).
   -- The requested default values (i.e., INSTANCE, coherent_access=FALSE, ordered_access=FALSE)
   -- are compatible with any offered value so return true
   true
endif]]>
		</constraint>
		<constraint type="function" name="Are_Pub_Presentations_Compatible">
			<![CDATA[method;gme::Model;sub_pres: PresentationQosPolicy, publishers: ocl::Set;ocl::Boolean;
			-- If the set of Publishers is not empty (which is the valid case - there should be only one) then
-- get its Presentation QoS (if it has one) and compare it with the Subscriber's Presentation QoS
-- that was passed in.
if (publishers->size() > 0) then
   let publisher = publishers.theOnly().oclAsType(Publisher) in
   let presentations = publisher.connectedFCOs(pub_presqos_Connection) in
   if (presentations->size() > 0) then
      Is_Presentation_Compatible(sub_pres,
                                                   presentations.theOnly().oclAsType(PresentationQosPolicy))
   else
      -- Here we have a subscriber with no presentation QoS policy.
      -- The requested values need to match the default values (i.e., INSTANCE, coherent_access=FALSE,
      -- ordered_access) to be compatible.
      sub_pres.access_scope = #INSTANCE and 
        sub_pres.coherent_access = false and
        sub_pres.ordered_access = false
   endif
else
   -- Otherwise, there is no publisher for the DataWriter (which is invalid but should be handled here).
   -- The requested values need to match the default values (i.e., INSTANCE, coherent_access=FALSE,
   -- ordered_access) to be compatible.
   sub_pres.access_scope = #INSTANCE and 
     sub_pres.coherent_access = false and
     sub_pres.ordered_access = false
endif]]>
		</constraint>
		<constraint type="function" name="Are_Reliabilities_Compatible">
			<![CDATA[method;gme::Model;reader: DataReader, writers: ocl::Set;ocl::Boolean;
			let dr_reliability_set = reader.connectedFCOs(dr_reliability_Connection) in

-- If a DR has a ReliabilityQosPolicy association then use that.
-- Otherwise, the requested default values (i.e., BEST_EFFORT and also default for Topics) is compatible with any offered value so return true
-- We just need one DataWriter reliability policy to be compatible so use the exists function.
if (dr_reliability_set->size() > 0) then
   writers->exists(c: DataWriter |  Is_Reliability_Compatible(dr_reliability_set,
                          c.connectedFCOs(dw_reliability_Connection)))
else
   true
endif]]>
		</constraint>
		<constraint type="function" name="Is_Deadline_Compatible">
			<![CDATA[method;gme::Model;dr_deadline_policies: ocl::Set, dw_deadline_policies: ocl::Set;ocl::Boolean;
			if (dr_deadline_policies->size() = 1) then
   let dr_deadline = dr_deadline_policies->theOnly().oclAsType(DeadlineQosPolicy).period in

   if (dw_deadline_policies->size() = 1) then
      let dw_deadline = dw_deadline_policies->theOnly().oclAsType(DeadlineQosPolicy).period in

   -- The DDS specification defines compatibility such that the offered deadline must be <=
   -- requested deadline. We have chosen -1 to represent infinity.
   -- NOTE: A Topic can use this function as will since there is an implied DataWriter if a Topic
   -- is associated with a DurabilityQosPolicy
      dw_deadline <= dr_deadline or
      dr_deadline = -1
   else
      -- Here compare dr_deadline <= infinity
      dr_deadline = -1
   endif
else
   -- Here compare infinity <= infinity
   true
endif]]>
		</constraint>
		<constraint type="function" name="Is_DestOrder_Compatible">
			<![CDATA[method;gme::Model;dr_dstOrder_policies: ocl::Set, dw_dstOrder_policies: ocl::Set;ocl::Boolean;
			if (dr_dstOrder_policies->size() > 0) then
   let dr_dstOrder_kind = dr_dstOrder_policies->theOnly().oclAsType(DestinationOrderQosPolicy).dest_order_kind in

   if (dw_dstOrder_policies->size() > 0) then
      let dw_dstOrder_kind = dw_dstOrder_policies->theOnly().oclAsType(DestinationOrderQosPolicy).dest_order_kind in

   -- The DDS specification defines compatibility such that the requested values must be <=
   -- offered value. Kind order is defined as
   -- BY_RECEPTION_TIMESTAMP < BY_SOURCE_TIMESTAMP.
   -- NOTE: A Topic can use this function as well since there is an implied DataWriter if a Topic
   -- is associated with a DestinationOrderQosPolicy
      (((dw_dstOrder_kind = #BY_RECEPTION_TIMESTAMP or dw_dstOrder_kind = #BY_SOURCE_TIMESTAMP)
                  and dr_dstOrder_kind = #BY_RECEPTION_TIMESTAMP) or
                ((dw_dstOrder_kind = #BY_SOURCE_TIMESTAMP)
                  and dr_dstOrder_kind = #BY_SOURCE_TIMESTAMP))
   else
      -- Here use the DataWriter default of BY_RECEPTION_TIMESTAMP which will only
      -- match if the DataReader's policy is also BY_RECEPTION_TIMESTAMP.
      dr_dstOrder_kind = #BY_RECEPTION_TIMESTAMP
   endif
else
   -- Here use default value of BY_RECEPTION_TIMESTAMP for both DataReader
   -- and DataWriter which will always be compatible.
   true
endif]]>
		</constraint>
		<constraint type="function" name="Is_Durability_Compatible">
			<![CDATA[method;gme::Model;dr_qos_policies: ocl::Set, dw_qos_policies: ocl::Set;ocl::Boolean;
			--let dw_qos_kind = writer.connectedFCOs(dw_durqos_Connection).theOnly().oclAsType(DurabilityQosPolicy).kind in
-- PREVIOUS ABOVE

if (dr_qos_policies->size() = 1) then
   let dr_qos_kind = dr_qos_policies->theOnly().oclAsType(DurabilityQosPolicy).kind in

   if (dw_qos_policies->size() = 1) then
      let dw_qos_kind = dw_qos_policies->theOnly().oclAsType(DurabilityQosPolicy).kind in

   -- The DDS specification defines compatibility such that the requested value must be <=
   -- offered value. Order is defined as
   -- VOLATILE < TRANSIENT_LOCAL < TRANSIENT < PERSISTENT.
   -- NOTE: A Topic can use this function as will since there is an implied DataWriter if a Topic
   -- is associated with a DurabilityQosPolicy
      (((dw_qos_kind = #VOLATILE or dw_qos_kind = #TRANSIENT_LOCAL
                  or dw_qos_kind = #TRANSIENT or dw_qos_kind = #PERSISTENT)
                  and dr_qos_kind = #VOLATILE) or
                ((dw_qos_kind = #TRANSIENT_LOCAL
                  or dw_qos_kind = #TRANSIENT or dw_qos_kind = #PERSISTENT)
                  and dr_qos_kind = #TRANSIENT_LOCAL) or
                ((dw_qos_kind = #TRANSIENT or dw_qos_kind = #PERSISTENT)
                  and dr_qos_kind = #TRANSIENT) or
                ((dw_qos_kind = #PERSISTENT)
                  and dr_qos_kind = #PERSISTENT))
   else
      dr_qos_kind = #VOLATILE
   endif
else
   true
endif


-- PREVIOUS CODE BELOW WITH ARGS dr_qos_policy: DurabilityQosPolicy, writer: DataWriter
--let dw_qos_kind = writer.connectedFCOs(dw_durqos_Connection).theOnly().oclAsType(DurabilityQosPolicy).DurabilityQosKind in
--let dr_qos_kind = dr_qos_policy.DurabilityQosKind in
--
---- If there is a DurabilityQosPolicy associated with the DataWriter then compare it
---- with the DurabilityQosPolicy of the DataReader passed in.
---- The DDS specification defines compatibility such that the requested value must be <=
---- offered value. Order is defined as
---- VOLATILE < TRANSIENT_LOCAL < TRANSIENT < PERSISTENT.
--if (writer.connectedFCOs(dw_durqos_Connection).size() = 1) then
--   (((dw_qos_kind = #VOLATILE or dw_qos_kind = #TRANSIENT_LOCAL
--               or dw_qos_kind = #TRANSIENT or dw_qos_kind = #PERSISTENT)
--               and dr_qos_kind = #VOLATILE) or
--             ((dw_qos_kind = #TRANSIENT_LOCAL
--               or dw_qos_kind = #TRANSIENT or dw_qos_kind = #PERSISTENT)
--               and dr_qos_kind = #TRANSIENT_LOCAL) or
--             ((dw_qos_kind = #TRANSIENT or dw_qos_kind = #PERSISTENT)
--               and dr_qos_kind = #TRANSIENT) or
--             ((dw_qos_kind = #PERSISTENT)
--               and dr_qos_kind = #PERSISTENT))
--else
--   -- No explicit durability QoS specified for the DW. Use the default value which is VOLATILE.
--   -- The requested value (i.e., from the DataReader) must be VOLATILE for compatibility
--   dr_qos_kind = #VOLATILE
--endif]]>
		</constraint>
		<constraint type="function" name="Is_LatencyBudget_Compatible">
			<![CDATA[method;gme::Model;dr_latency_policies: ocl::Set, dw_latency_policies: ocl::Set;ocl::Boolean;
			if (dw_latency_policies->size() = 1) then
   let dw_latency = dw_latency_policies->theOnly().oclAsType(LatencyBudgetQosPolicy).duration in

   if (dr_latency_policies->size() = 1) then
      let dr_latency = dr_latency_policies->theOnly().oclAsType(LatencyBudgetQosPolicy).duration in

   -- The DDS specification defines compatibility such that the offered latency budget must be <=
   -- requested latency budget.
   -- NOTE: A Topic can use this function as will since there is an implied DataWriter if a Topic
   -- is associated with a LatencyBudgetQosPolicy
      dw_latency <= dr_latency
   else
      -- Here compare dw_latency <= 0 (default)
      dw_latency = 0
   endif
else
   -- Here compare 0 (DataWriter default) <= 0 (DataReader default)
   true
endif]]>
		</constraint>
		<constraint type="function" name="Is_Liveliness_Compatible">
			<![CDATA[method;gme::Model;dr_liveliness_policies: ocl::Set, dw_liveliness_policies: ocl::Set;ocl::Boolean;
			if (dr_liveliness_policies->size() > 0) then
   let dr_liveliness_kind = dr_liveliness_policies->theOnly().oclAsType(LivelinessQosPolicy).liveliness_kind in
   let dr_liveliness_dur = dr_liveliness_policies->theOnly().oclAsType(LivelinessQosPolicy).lease_duration in

   if (dw_liveliness_policies->size() > 0) then
      let dw_liveliness_kind = dw_liveliness_policies->theOnly().oclAsType(LivelinessQosPolicy).liveliness_kind in
      let dw_liveliness_dur = dw_liveliness_policies->theOnly().oclAsType(LivelinessQosPolicy).lease_duration in

   -- The DDS specification defines compatibility such that the requested values must be <=
   -- offered value. Kind order is defined as
   -- AUTOMATIC < MANUAL_BY_PARTICIPANT < MANUAL_BY_TOPIC.
   -- NOTE: A Topic can use this function as well since there is an implied DataWriter if a Topic
   -- is associated with a LivelinessQosPolicy
      (((dw_liveliness_kind = #AUTOMATIC or dw_liveliness_kind = #MANUAL_BY_PARTICIPANT
                  or dw_liveliness_kind = #MANUAL_BY_TOPIC)
                  and dr_liveliness_kind = #AUTOMATIC) or
                ((dw_liveliness_kind = #MANUAL_BY_PARTICIPANT
                  or dw_liveliness_kind = #MANUAL_BY_TOPIC)
                  and dr_liveliness_kind = #MANUAL_BY_PARTICIPANT) or
                ((dw_liveliness_kind = #MANUAL_BY_TOPIC)
                  and dr_liveliness_kind = #MANUAL_BY_TOPIC))
      and
      (dw_liveliness_dur <= dr_liveliness_dur or
       dr_liveliness_dur = -1)
   else
      -- dr_liveliness_dur will always be <= the default duration of infinite so no need to check it here.
      dr_liveliness_kind = #AUTOMATIC
   endif
else
   true
endif]]>
		</constraint>
		<constraint type="function" name="Is_Ownership_Compatible">
			<![CDATA[method;gme::Model;dr_ownership_policies: ocl::Set, dw_ownership_policies: ocl::Set;ocl::Boolean;
			if (dr_ownership_policies->size() > 0) then
   let dr_ownership = dr_ownership_policies->theOnly().oclAsType(OwnershipQosPolicy).ownership_kind in

   if (dw_ownership_policies->size() > 0) then
      let dw_ownership = dw_ownership_policies->theOnly().oclAsType(OwnershipQosPolicy).ownership_kind in

   -- The DDS specification defines compatibility such that the offered ownership must equal the
   -- requested ownership.
   -- NOTE: A Topic can use this function as will since there is an implied DataWriter if a Topic
   -- is associated with an OwnershipQosPolicy
      dw_ownership = dr_ownership
   else
      -- Here compare dw_ownership = SHARED (default)
      dr_ownership = #SHARED
   endif
else
   -- Here the DR has the default (SHARED). Make sure the DW has this as well implicitly or explicitly.
   if (dw_ownership_policies->size() > 0) then
      let dw_ownership = dw_ownership_policies->theOnly().oclAsType(OwnershipQosPolicy).ownership_kind in

      dw_ownership = #SHARED
   else
      -- Here compare SHARED (DataWriter default) = SHARED (DataReader default)
      true
   endif
endif]]>
		</constraint>
		<constraint type="function" name="Is_Presentation_Compatible">
			<![CDATA[method;gme::Model;sub_pres: PresentationQosPolicy, pub_pres: PresentationQosPolicy;ocl::Boolean;
			let sub_pres_kind = sub_pres.access_scope in
let pub_pres_kind = pub_pres.access_scope in

-- The DDS specification defines compatibility such that the requested value must be <=
-- offered value. Order is defined as INSTANCE < TOPIC < GROUP.
   (((pub_pres_kind = #INSTANCE or pub_pres_kind = #TOPIC
               or pub_pres_kind = #GROUP)
               and sub_pres_kind = #INSTANCE) or
             ((pub_pres_kind = #TOPIC or pub_pres_kind = #GROUP)
               and sub_pres_kind = #TOPIC) or
             ((pub_pres_kind = #GROUP)
               and sub_pres_kind = #GROUP)) and
   (pub_pres.coherent_access = sub_pres.coherent_access or
    pub_pres.coherent_access) and
   (pub_pres.ordered_access = sub_pres.ordered_access or
    pub_pres.ordered_access)]]>
		</constraint>
		<constraint type="function" name="Is_Reliability_Compatible">
			<![CDATA[method;gme::Model;dr_reliability_policies: ocl::Set, dw_reliability_policies: ocl::Set;ocl::Boolean;
			if (dr_reliability_policies->size() > 0) then
   let dr_reliability_kind = dr_reliability_policies->theOnly().oclAsType(ReliabilityQosPolicy).reliability_kind in
-- I guess we don't need to compare the max blocking times. This seems out of place with the other policies though.
--   let dr_reliablility_block = dr_reliabliity_policies->theOnly().oclAsType(ReliablityQosPolicy).max_blocking_time in

   if (dw_reliability_policies->size() > 0) then
      let dw_reliability_kind = dw_reliability_policies->theOnly().oclAsType(ReliabilityQosPolicy).reliability_kind in
-- I guess we don't need to compare the max blocking times. This seems out of place with the other policies though.
--      let dw_reliability_block = dw_reliability_policies->theOnly().oclAsType(ReliabilityQosPolicy).max_blocking_time in

   -- The DDS specification defines compatibility such that the requested values must be <=
   -- offered value. Kind order is defined as
   -- BEST_EFFORT < RELIABILITY.
   -- NOTE: A Topic can use this function as will since there is an implied DataWriter if a Topic
   -- is associated with a ReliabilityQosPolicy
      (((dw_reliability_kind = #BEST_EFFORT or dw_reliability_kind = #RELIABLE)
                  and dr_reliability_kind = #BEST_EFFORT) or
                ((dw_reliability_kind = #RELIABLE)
                  and dr_reliability_kind = #RELIABLE))
   else
      -- Here use the DataWriter default of RELIABLE which will match any requested reliability
      true
   endif
else
   true
endif]]>
		</constraint>
		<constraint type="function" name="Is_Topic_Reliability_Compatible">
			<![CDATA[method;gme::Model;dr_reliability_policies: ocl::Set, topic_reliability_policies: ocl::Set;ocl::Boolean;
			if (dr_reliability_policies->size() > 0) then
   let dr_reliability_kind = dr_reliability_policies->theOnly().oclAsType(ReliabilityQosPolicy).reliability_kind in
-- I guess we don't need to compare the max blocking times. This seems out of place with the other policies though.
--   let dr_reliablility_block = dr_reliabliity_policies->theOnly().oclAsType(ReliablityQosPolicy).max_blocking_time in

   if (topic_reliability_policies->size() > 0) then
      let topic_reliability_kind = topic_reliability_policies->theOnly().oclAsType(ReliabilityQosPolicy).reliability_kind in
-- I guess we don't need to compare the max blocking times. This seems out of place with the other policies though.
--      let topic_reliability_block = topic_reliability_policies->theOnly().oclAsType(ReliabilityQosPolicy).max_blocking_time in

   -- The DDS specification defines compatibility such that the requested values must be <=
   -- offered value. Kind order is defined as
   -- BEST_EFFORT < RELIABILITY.
   -- NOTE: A Topic can use this function as will since there is an implied DataWriter if a Topic
   -- is associated with a ReliabilityQosPolicy
      (((topic_reliability_kind = #BEST_EFFORT or topic_reliability_kind = #RELIABLE)
                  and dr_reliability_kind = #BEST_EFFORT) or
                ((topic_reliability_kind = #RELIABLE)
                  and dr_reliability_kind = #RELIABLE))
   else
      -- Here use the Topic default of BEST_EFFORT
      dr_reliability_kind = #BEST_EFFORT
   endif
else
   true
endif]]>
		</constraint>
		<attrdef name="IsInstance" metaref = "1486" valuetype = "boolean" defvalue = "false">
			<dispname>Is Instance:</dispname>
		</attrdef>
		<attrdef name="access_scope" metaref = "1046" valuetype = "enum" defvalue = "INSTANCE">
			<enumitem dispname = "INSTANCE" value = "INSTANCE"></enumitem>
			<enumitem dispname = "TOPIC" value = "TOPIC"></enumitem>
			<enumitem dispname = "GROUP" value = "GROUP"></enumitem>
		</attrdef>
		<attrdef name="autodispose_unregistered_instances" metaref = "1047" valuetype = "boolean" defvalue = "true">
		</attrdef>
		<attrdef name="autoenable_created_entities" metaref = "1048" valuetype = "boolean" defvalue = "true">
		</attrdef>
		<attrdef name="autopurge_disposed_samples_delay" metaref = "1049" valuetype = "double" defvalue = "">
		</attrdef>
		<attrdef name="autopurge_nowriter_samples_delay" metaref = "1050" valuetype = "double" defvalue = "">
		</attrdef>
		<attrdef name="coherent_access" metaref = "1051" valuetype = "boolean" defvalue = "false">
		</attrdef>
		<attrdef name="datavalue" metaref = "1052" valuetype = "string" defvalue = "">
		</attrdef>
		<attrdef name="dest_order_kind" metaref = "1053" valuetype = "enum" defvalue = "BY_RECEPTION_TIMESTAMP">
			<enumitem dispname = "BY_RECEPTION_TIMESTAMP" value = "BY_RECEPTION_TIMESTAMP"></enumitem>
			<enumitem dispname = "BY_SOURCE_TIMESTAMP" value = "BY_SOURCE_TIMESTAMP"></enumitem>
		</attrdef>
		<attrdef name="duration" metaref = "1054" valuetype = "double" defvalue = "">
		</attrdef>
		<attrdef name="history_depth" metaref = "1055" valuetype = "integer" defvalue = "1">
		</attrdef>
		<attrdef name="history_kind" metaref = "1056" valuetype = "enum" defvalue = "KEEP_LAST">
			<enumitem dispname = "KEEP_LAST" value = "KEEP_LAST"></enumitem>
			<enumitem dispname = "KEEP_ALL" value = "KEEP_ALL"></enumitem>
		</attrdef>
		<attrdef name="kind" metaref = "1057" valuetype = "enum" defvalue = "VOLATILE">
			<enumitem dispname = "VOLATILE" value = "VOLATILE"></enumitem>
			<enumitem dispname = "TRANSIENT_LOCAL" value = "TRANSIENT_LOCAL"></enumitem>
			<enumitem dispname = "TRANSIENT" value = "TRANSIENT"></enumitem>
			<enumitem dispname = "PERSISTENT" value = "PERSISTENT"></enumitem>
		</attrdef>
		<attrdef name="lease_duration" metaref = "1058" valuetype = "double" defvalue = "">
		</attrdef>
		<attrdef name="lifespan_duration" metaref = "1059" valuetype = "double" defvalue = "">
		</attrdef>
		<attrdef name="liveliness_kind" metaref = "1060" valuetype = "enum" defvalue = "AUTOMATIC">
			<enumitem dispname = "AUTOMATIC" value = "AUTOMATIC"></enumitem>
			<enumitem dispname = "MANUAL_BY_PARTICIPANT" value = "MANUAL_BY_PARTICIPANT"></enumitem>
			<enumitem dispname = "MANUAL_BY_TOPIC" value = "MANUAL_BY_TOPIC"></enumitem>
		</attrdef>
		<attrdef name="max_blocking_time" metaref = "1061" valuetype = "double" defvalue = "">
		</attrdef>
		<attrdef name="max_instances" metaref = "1062" valuetype = "integer" defvalue = "-1">
		</attrdef>
		<attrdef name="max_samples" metaref = "1063" valuetype = "integer" defvalue = "-1">
		</attrdef>
		<attrdef name="max_samples_per_instance" metaref = "1064" valuetype = "integer" defvalue = "-1">
		</attrdef>
		<attrdef name="minimum_separation" metaref = "1065" valuetype = "double" defvalue = "">
		</attrdef>
		<attrdef name="name" metaref = "1066" valuetype = "string" defvalue = "">
		</attrdef>
		<attrdef name="ordered_access" metaref = "1067" valuetype = "boolean" defvalue = "false">
		</attrdef>
		<attrdef name="ownership_kind" metaref = "1068" valuetype = "enum" defvalue = "SHARED">
			<enumitem dispname = "SHARED" value = "SHARED"></enumitem>
			<enumitem dispname = "EXCLUSIVE" value = "EXCLUSIVE"></enumitem>
		</attrdef>
		<attrdef name="ownership_value" metaref = "1069" valuetype = "integer" defvalue = "0">
		</attrdef>
		<attrdef name="partition_name" metaref = "1070" valuetype = "string" defvalue = "">
		</attrdef>
		<attrdef name="period" metaref = "1071" valuetype = "double" defvalue = "">
		</attrdef>
		<attrdef name="reliability_kind" metaref = "1072" valuetype = "enum" defvalue = "RELIABLE">
			<enumitem dispname = "RELIABLE" value = "RELIABLE"></enumitem>
			<enumitem dispname = "BEST_EFFORT" value = "BEST_EFFORT"></enumitem>
		</attrdef>
		<attrdef name="service_cleanup_delay" metaref = "1073" valuetype = "double" defvalue = "">
		</attrdef>
		<attrdef name="topic_value" metaref = "1074" valuetype = "string" defvalue = "">
		</attrdef>
		<attrdef name="transport_value" metaref = "1075" valuetype = "integer" defvalue = "0">
		</attrdef>
		<attrdef name="user_value" metaref = "1076" valuetype = "string" defvalue = "">
		</attrdef>
		<atom name = "DeadlineQosPolicy" metaref = "1077"  attributes = "name period">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="deadline-50x50"></regnode>
		</atom>
		<atom name = "DestinationOrderQosPolicy" metaref = "1078"  attributes = "name dest_order_kind">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="dest-order-50x50"></regnode>
		</atom>
		<atom name = "DurabilityQosPolicy" metaref = "1079"  attributes = "name kind">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="durability-50x50"></regnode>
		</atom>
		<atom name = "DurabilityServiceQosPolicy" metaref = "1080"  attributes = "name max_samples service_cleanup_delay max_samples_per_instance max_instances history_depth history_kind">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="durability-svc-50x50"></regnode>
		</atom>
		<atom name = "EntityFactoryQosPolicy" metaref = "1081"  attributes = "name autoenable_created_entities">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="entity-factory-50x50"></regnode>
		</atom>
		<atom name = "GroupDataQosPolicy" metaref = "1082"  attributes = "name datavalue">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="group-data-50x50"></regnode>
		</atom>
		<atom name = "HistoryQosPolicy" metaref = "1083"  attributes = "name history_depth history_kind">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="history-50x50"></regnode>
		</atom>
		<atom name = "LatencyBudgetQosPolicy" metaref = "1084"  attributes = "name duration">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="latency-50x50"></regnode>
		</atom>
		<atom name = "LifespanQosPolicy" metaref = "1085"  attributes = "name lifespan_duration">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="lifespan-50x50"></regnode>
		</atom>
		<atom name = "LivelinessQosPolicy" metaref = "1086"  attributes = "name lease_duration liveliness_kind">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="liveliness-50x50"></regnode>
		</atom>
		<atom name = "OwnershipQosPolicy" metaref = "1087"  attributes = "name ownership_kind">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="ownership-50x50"></regnode>
		</atom>
		<atom name = "OwnershipStrengthQosPolicy" metaref = "1088"  attributes = "name ownership_value">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="owner-strength-50x50"></regnode>
		</atom>
		<atom name = "PartitionQosPolicy" metaref = "1089"  attributes = "name partition_name">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="partition-50x50"></regnode>
		</atom>
		<atom name = "PresentationQosPolicy" metaref = "1090"  attributes = "name ordered_access access_scope coherent_access">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="presentation-50x50"></regnode>
		</atom>
		<atom name = "ReaderDataLifecycleQosPolicy" metaref = "1091"  attributes = "name autopurge_nowriter_samples_delay autopurge_disposed_samples_delay">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="reader-data-50x50"></regnode>
		</atom>
		<atom name = "ReliabilityQosPolicy" metaref = "1092"  attributes = "name reliability_kind max_blocking_time">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="reliability-50x50"></regnode>
		</atom>
		<atom name = "ResourceLimitsQosPolicy" metaref = "1093"  attributes = "name max_samples max_samples_per_instance max_instances">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="resource-limits-50x50"></regnode>
		</atom>
		<atom name = "TimeBasedFilterQosPolicy" metaref = "1094"  attributes = "name minimum_separation">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="timebased-50x50"></regnode>
		</atom>
		<atom name = "TopicDataQosPolicy" metaref = "1095"  attributes = "name topic_value">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="topic-data-50x50"></regnode>
		</atom>
		<atom name = "TransportPriorityQosPolicy" metaref = "1096"  attributes = "name transport_value">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="transport-pri-50x50"></regnode>
		</atom>
		<atom name = "UserDataQosPolicy" metaref = "1097"  attributes = "name user_value">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="user-data-50x50"></regnode>
		</atom>
		<atom name = "WriterDataLifecycleQosPolicy" metaref = "1098"  attributes = "name autodispose_unregistered_instances">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="writer-data-50x50"></regnode>
		</atom>
		<connection name = "PublisherConnection" metaref = "1487" >
				<regnode name = "sName" value ="srcPublisherConnection"></regnode>
				<regnode name = "dName" value ="dstPublisherConnection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="diamond"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "DataWriterQos"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PublisherQos"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PublishesConnection" metaref = "1488" >
				<regnode name = "sName" value ="srcPublishesConnection"></regnode>
				<regnode name = "dName" value ="dstPublishesConnection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="arrow"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "Participant DataWriterQos"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "Participant DataReaderQos"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "SubscriberConnection" metaref = "1489" >
				<regnode name = "sName" value ="srcSubscriberConnection"></regnode>
				<regnode name = "dName" value ="dstSubscriberConnection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="diamond"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "DataReaderQos"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "SubscriberQos"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "dp_entityfactory_Connection" metaref = "1099" >
				<regnode name = "sName" value ="srcdp_entityfactory_Connection"></regnode>
				<regnode name = "dName" value ="dstdp_entityfactory_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "DomainParticipant"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "EntityFactoryQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "dp_pub_Connection" metaref = "1100" >
				<regnode name = "sName" value ="srcdp_pub_Connection"></regnode>
				<regnode name = "dName" value ="dstdp_pub_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "DomainParticipant"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "Publisher"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "dp_sub_Connection" metaref = "1101" >
				<regnode name = "sName" value ="srcdp_sub_Connection"></regnode>
				<regnode name = "dName" value ="dstdp_sub_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "DomainParticipant"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "Subscriber"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "dp_topic_Connection" metaref = "1102" >
				<regnode name = "sName" value ="srcdp_topic_Connection"></regnode>
				<regnode name = "dName" value ="dstdp_topic_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "DomainParticipant"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "Topic"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "dp_userdata_Connection" metaref = "1103" >
				<regnode name = "sName" value ="srcdp_userdata_Connection"></regnode>
				<regnode name = "dName" value ="dstdp_userdata_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "DomainParticipant"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "UserDataQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "dpf_dp_Connection" metaref = "1104" >
				<regnode name = "sName" value ="srcdpf_dp_Connection"></regnode>
				<regnode name = "dName" value ="dstdpf_dp_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "DomainParticipantFactory"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "DomainParticipant"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "dpfactory_entityfactory_Connection" metaref = "1105" >
				<regnode name = "sName" value ="srcdpfactory_entityfactory_Connection"></regnode>
				<regnode name = "dName" value ="dstdpfactory_entityfactory_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "DomainParticipantFactory"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "EntityFactoryQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "dr_deadline_Connection" metaref = "1106" >
				<regnode name = "sName" value ="srcdr_deadline_Connection"></regnode>
				<regnode name = "dName" value ="dstdr_deadline_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "DataReader"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "DeadlineQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "dr_dstOrder_Connection" metaref = "1107" >
				<regnode name = "sName" value ="srcdr_dstOrder_Connection"></regnode>
				<regnode name = "dName" value ="dstdr_dstOrder_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "DataReader"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "DestinationOrderQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "dr_durqos_Connection" metaref = "1108" >
				<regnode name = "sName" value ="srcdr_durqos_Connection"></regnode>
				<regnode name = "dName" value ="dstdr_durqos_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "DataReader"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "DurabilityQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "dr_history_Connection" metaref = "1109" >
				<regnode name = "sName" value ="srcdr_history_Connection"></regnode>
				<regnode name = "dName" value ="dstdr_history_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "DataReader"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "HistoryQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "dr_latency_Connection" metaref = "1110" >
				<regnode name = "sName" value ="srcdr_latency_Connection"></regnode>
				<regnode name = "dName" value ="dstdr_latency_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "DataReader"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "LatencyBudgetQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "dr_liveliness_Connection" metaref = "1111" >
				<regnode name = "sName" value ="srcdr_liveliness_Connection"></regnode>
				<regnode name = "dName" value ="dstdr_liveliness_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "DataReader"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "LivelinessQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "dr_ownership_Connection" metaref = "1112" >
				<regnode name = "sName" value ="srcdr_ownership_Connection"></regnode>
				<regnode name = "dName" value ="dstdr_ownership_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "DataReader"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "OwnershipQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "dr_readerdatalifecycle_Connection" metaref = "1113" >
				<regnode name = "sName" value ="srcdr_readerdatalifecycle_Connection"></regnode>
				<regnode name = "dName" value ="dstdr_readerdatalifecycle_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "DataReader"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "ReaderDataLifecycleQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "dr_reliability_Connection" metaref = "1114" >
				<regnode name = "sName" value ="srcdr_reliability_Connection"></regnode>
				<regnode name = "dName" value ="dstdr_reliability_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "DataReader"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "ReliabilityQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "dr_res_Connection" metaref = "1115" >
				<regnode name = "sName" value ="srcdr_res_Connection"></regnode>
				<regnode name = "dName" value ="dstdr_res_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "DataReader"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "ResourceLimitsQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "dr_sub_Connection" metaref = "1116" >
				<regnode name = "sName" value ="srcdr_sub_Connection"></regnode>
				<regnode name = "dName" value ="dstdr_sub_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "Subscriber"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "DataReader"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "dr_timebased_Connection" metaref = "1117" >
				<regnode name = "sName" value ="srcdr_timebased_Connection"></regnode>
				<regnode name = "dName" value ="dstdr_timebased_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "DataReader"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "TimeBasedFilterQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "dr_topic_Connection" metaref = "1118" >
				<regnode name = "sName" value ="srcdr_topic_Connection"></regnode>
				<regnode name = "dName" value ="dstdr_topic_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "DataReader"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "Topic"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "dr_userdata_Connection" metaref = "1119" >
				<regnode name = "sName" value ="srcdr_userdata_Connection"></regnode>
				<regnode name = "dName" value ="dstdr_userdata_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "DataReader"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "UserDataQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "dw_deadline_Connection" metaref = "1120" >
				<regnode name = "sName" value ="srcdw_deadline_Connection"></regnode>
				<regnode name = "dName" value ="dstdw_deadline_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "DataWriter"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "DeadlineQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "dw_dstOrder_Connection" metaref = "1121" >
				<regnode name = "sName" value ="srcdw_dstOrder_Connection"></regnode>
				<regnode name = "dName" value ="dstdw_dstOrder_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "DataWriter"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "DestinationOrderQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "dw_durqos_Connection" metaref = "1122" >
				<regnode name = "sName" value ="srcdw_durqos_Connection"></regnode>
				<regnode name = "dName" value ="dstdw_durqos_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "DataWriter"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "DurabilityQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "dw_dursvc_Connection" metaref = "1123" >
				<regnode name = "sName" value ="srcdw_dursvc_Connection"></regnode>
				<regnode name = "dName" value ="dstdw_dursvc_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "DataWriter"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "DurabilityServiceQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "dw_history_Connection" metaref = "1124" >
				<regnode name = "sName" value ="srcdw_history_Connection"></regnode>
				<regnode name = "dName" value ="dstdw_history_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "DataWriter"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "HistoryQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "dw_latency_Connection" metaref = "1125" >
				<regnode name = "sName" value ="srcdw_latency_Connection"></regnode>
				<regnode name = "dName" value ="dstdw_latency_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "DataWriter"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "LatencyBudgetQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "dw_lifespan_Connection" metaref = "1126" >
				<regnode name = "sName" value ="srcdw_lifespan_Connection"></regnode>
				<regnode name = "dName" value ="dstdw_lifespan_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "DataWriter"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "LifespanQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "dw_liveliness_Connection" metaref = "1127" >
				<regnode name = "sName" value ="srcdw_liveliness_Connection"></regnode>
				<regnode name = "dName" value ="dstdw_liveliness_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "DataWriter"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "LivelinessQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "dw_ownership_Connection" metaref = "1128" >
				<regnode name = "sName" value ="srcdw_ownership_Connection"></regnode>
				<regnode name = "dName" value ="dstdw_ownership_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "DataWriter"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "OwnershipQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "dw_ownerstrength_Connection" metaref = "1129" >
				<regnode name = "sName" value ="srcdw_ownerstrength_Connection"></regnode>
				<regnode name = "dName" value ="dstdw_ownerstrength_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "DataWriter"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "OwnershipStrengthQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "dw_pub_Connection" metaref = "1130" >
				<regnode name = "sName" value ="srcdw_pub_Connection"></regnode>
				<regnode name = "dName" value ="dstdw_pub_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "Publisher"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "DataWriter"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "dw_reliability_Connection" metaref = "1131" >
				<regnode name = "sName" value ="srcdw_reliability_Connection"></regnode>
				<regnode name = "dName" value ="dstdw_reliability_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "DataWriter"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "ReliabilityQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "dw_res_Connection" metaref = "1132" >
				<regnode name = "sName" value ="srcdw_res_Connection"></regnode>
				<regnode name = "dName" value ="dstdw_res_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "DataWriter"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "ResourceLimitsQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "dw_topic_Connection" metaref = "1133" >
				<regnode name = "sName" value ="srcdw_topic_Connection"></regnode>
				<regnode name = "dName" value ="dstdw_topic_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "DataWriter"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "Topic"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "dw_transpri_Connection" metaref = "1134" >
				<regnode name = "sName" value ="srcdw_transpri_Connection"></regnode>
				<regnode name = "dName" value ="dstdw_transpri_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "DataWriter"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "TransportPriorityQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "dw_userdata_Connection" metaref = "1135" >
				<regnode name = "sName" value ="srcdw_userdata_Connection"></regnode>
				<regnode name = "dName" value ="dstdw_userdata_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "DataWriter"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "UserDataQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "dw_writerdatalifecycle_Connection" metaref = "1136" >
				<regnode name = "sName" value ="srcdw_writerdatalifecycle_Connection"></regnode>
				<regnode name = "dName" value ="dstdw_writerdatalifecycle_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "DataWriter"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "WriterDataLifecycleQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "pub_entityfactory_Connection" metaref = "1137" >
				<regnode name = "sName" value ="srcpub_entityfactory_Connection"></regnode>
				<regnode name = "dName" value ="dstpub_entityfactory_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "Publisher"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "EntityFactoryQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "pub_groupdata_Connection" metaref = "1138" >
				<regnode name = "sName" value ="srcpub_groupdata_Connection"></regnode>
				<regnode name = "dName" value ="dstpub_groupdata_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "Publisher"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "GroupDataQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "pub_part_Connection" metaref = "1139" >
				<regnode name = "sName" value ="srcpub_part_Connection"></regnode>
				<regnode name = "dName" value ="dstpub_part_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "Publisher"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PartitionQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "pub_presqos_Connection" metaref = "1140" >
				<regnode name = "sName" value ="srcpub_presqos_Connection"></regnode>
				<regnode name = "dName" value ="dstpub_presqos_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "Publisher"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PresentationQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "sub_entityfactory_Connection" metaref = "1141" >
				<regnode name = "sName" value ="srcsub_entityfactory_Connection"></regnode>
				<regnode name = "dName" value ="dstsub_entityfactory_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "Subscriber"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "EntityFactoryQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "sub_groupdata_Connection" metaref = "1142" >
				<regnode name = "sName" value ="srcsub_groupdata_Connection"></regnode>
				<regnode name = "dName" value ="dstsub_groupdata_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "Subscriber"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "GroupDataQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "sub_part_Connection" metaref = "1143" >
				<regnode name = "sName" value ="srcsub_part_Connection"></regnode>
				<regnode name = "dName" value ="dstsub_part_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "Subscriber"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PartitionQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "sub_presqos_Connection" metaref = "1144" >
				<regnode name = "sName" value ="srcsub_presqos_Connection"></regnode>
				<regnode name = "dName" value ="dstsub_presqos_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "Subscriber"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PresentationQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "top_deadline_Connection" metaref = "1145" >
				<regnode name = "sName" value ="srctop_deadline_Connection"></regnode>
				<regnode name = "dName" value ="dsttop_deadline_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "Topic"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "DeadlineQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "top_latency_Connection" metaref = "1146" >
				<regnode name = "sName" value ="srctop_latency_Connection"></regnode>
				<regnode name = "dName" value ="dsttop_latency_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "Topic"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "LatencyBudgetQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "topic_dstOrder_Connection" metaref = "1147" >
				<regnode name = "sName" value ="srctopic_dstOrder_Connection"></regnode>
				<regnode name = "dName" value ="dsttopic_dstOrder_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "Topic"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "DestinationOrderQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "topic_durqos_Connection" metaref = "1148" >
				<regnode name = "sName" value ="srctopic_durqos_Connection"></regnode>
				<regnode name = "dName" value ="dsttopic_durqos_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "Topic"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "DurabilityQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "topic_dursvc_Connection" metaref = "1149" >
				<regnode name = "sName" value ="srctopic_dursvc_Connection"></regnode>
				<regnode name = "dName" value ="dsttopic_dursvc_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "Topic"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "DurabilityServiceQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "topic_history_Connection" metaref = "1150" >
				<regnode name = "sName" value ="srctopic_history_Connection"></regnode>
				<regnode name = "dName" value ="dsttopic_history_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "Topic"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "HistoryQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "topic_lifespan_Connection" metaref = "1151" >
				<regnode name = "sName" value ="srctopic_lifespan_Connection"></regnode>
				<regnode name = "dName" value ="dsttopic_lifespan_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "Topic"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "LifespanQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "topic_liveliness_Connection" metaref = "1152" >
				<regnode name = "sName" value ="srctopic_liveliness_Connection"></regnode>
				<regnode name = "dName" value ="dsttopic_liveliness_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "Topic"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "LivelinessQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "topic_ownership_Connection" metaref = "1153" >
				<regnode name = "sName" value ="srctopic_ownership_Connection"></regnode>
				<regnode name = "dName" value ="dsttopic_ownership_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "Topic"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "OwnershipQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "topic_reliability_Connection" metaref = "1154" >
				<regnode name = "sName" value ="srctopic_reliability_Connection"></regnode>
				<regnode name = "dName" value ="dsttopic_reliability_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "Topic"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "ReliabilityQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "topic_res_Connection" metaref = "1155" >
				<regnode name = "sName" value ="srctopic_res_Connection"></regnode>
				<regnode name = "dName" value ="dsttopic_res_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "Topic"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "ResourceLimitsQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "topic_topicdata_Connection" metaref = "1156" >
				<regnode name = "sName" value ="srctopic_topicdata_Connection"></regnode>
				<regnode name = "dName" value ="dsttopic_topicdata_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "Topic"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "TopicDataQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "topic_transpri_Connection" metaref = "1157" >
				<regnode name = "sName" value ="srctopic_transpri_Connection"></regnode>
				<regnode name = "dName" value ="dsttopic_transpri_Connection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "Topic"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "TransportPriorityQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<reference name = "TopicQosReference" metaref = "1490">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyTopicQosReference"></regnode>
			<pointerspec name = "ref">
				<pointeritem desc = "TopicQos"></pointeritem>
			</pointerspec>
		</reference>
		<model name = "DDSQoS" metaref = "1158" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "isTypeInfoShown" value ="true"></regnode>
			<role name = "DataReader" metaref = "1159" kind = "DataReader"></role>
			<role name = "DataWriter" metaref = "1160" kind = "DataWriter"></role>
			<role name = "DeadlineQosPolicy" metaref = "1161" kind = "DeadlineQosPolicy"></role>
			<role name = "DestinationOrderQosPolicy" metaref = "1162" kind = "DestinationOrderQosPolicy"></role>
			<role name = "DomainParticipant" metaref = "1163" kind = "DomainParticipant"></role>
			<role name = "DomainParticipantFactory" metaref = "1164" kind = "DomainParticipantFactory"></role>
			<role name = "DurabilityQosPolicy" metaref = "1165" kind = "DurabilityQosPolicy"></role>
			<role name = "DurabilityServiceQosPolicy" metaref = "1166" kind = "DurabilityServiceQosPolicy"></role>
			<role name = "EntityFactoryQosPolicy" metaref = "1167" kind = "EntityFactoryQosPolicy"></role>
			<role name = "GroupDataQosPolicy" metaref = "1168" kind = "GroupDataQosPolicy"></role>
			<role name = "HistoryQosPolicy" metaref = "1169" kind = "HistoryQosPolicy"></role>
			<role name = "LatencyBudgetQosPolicy" metaref = "1170" kind = "LatencyBudgetQosPolicy"></role>
			<role name = "LifespanQosPolicy" metaref = "1171" kind = "LifespanQosPolicy"></role>
			<role name = "LivelinessQosPolicy" metaref = "1172" kind = "LivelinessQosPolicy"></role>
			<role name = "OwnershipQosPolicy" metaref = "1173" kind = "OwnershipQosPolicy"></role>
			<role name = "OwnershipStrengthQosPolicy" metaref = "1174" kind = "OwnershipStrengthQosPolicy"></role>
			<role name = "PartitionQosPolicy" metaref = "1175" kind = "PartitionQosPolicy"></role>
			<role name = "PresentationQosPolicy" metaref = "1176" kind = "PresentationQosPolicy"></role>
			<role name = "Publisher" metaref = "1177" kind = "Publisher"></role>
			<role name = "ReaderDataLifecycleQosPolicy" metaref = "1178" kind = "ReaderDataLifecycleQosPolicy"></role>
			<role name = "ReliabilityQosPolicy" metaref = "1179" kind = "ReliabilityQosPolicy"></role>
			<role name = "ResourceLimitsQosPolicy" metaref = "1180" kind = "ResourceLimitsQosPolicy"></role>
			<role name = "Subscriber" metaref = "1181" kind = "Subscriber"></role>
			<role name = "TimeBasedFilterQosPolicy" metaref = "1182" kind = "TimeBasedFilterQosPolicy"></role>
			<role name = "Topic" metaref = "1183" kind = "Topic"></role>
			<role name = "TopicDataQosPolicy" metaref = "1184" kind = "TopicDataQosPolicy"></role>
			<role name = "TransportPriorityQosPolicy" metaref = "1185" kind = "TransportPriorityQosPolicy"></role>
			<role name = "UserDataQosPolicy" metaref = "1186" kind = "UserDataQosPolicy"></role>
			<role name = "WriterDataLifecycleQosPolicy" metaref = "1187" kind = "WriterDataLifecycleQosPolicy"></role>
			<role name = "dp_entityfactory_Connection" metaref = "1188" kind = "dp_entityfactory_Connection"></role>
			<role name = "dp_pub_Connection" metaref = "1189" kind = "dp_pub_Connection"></role>
			<role name = "dp_sub_Connection" metaref = "1190" kind = "dp_sub_Connection"></role>
			<role name = "dp_topic_Connection" metaref = "1191" kind = "dp_topic_Connection"></role>
			<role name = "dp_userdata_Connection" metaref = "1192" kind = "dp_userdata_Connection"></role>
			<role name = "dpf_dp_Connection" metaref = "1193" kind = "dpf_dp_Connection"></role>
			<role name = "dpfactory_entityfactory_Connection" metaref = "1194" kind = "dpfactory_entityfactory_Connection"></role>
			<role name = "dr_deadline_Connection" metaref = "1195" kind = "dr_deadline_Connection"></role>
			<role name = "dr_dstOrder_Connection" metaref = "1196" kind = "dr_dstOrder_Connection"></role>
			<role name = "dr_durqos_Connection" metaref = "1197" kind = "dr_durqos_Connection"></role>
			<role name = "dr_history_Connection" metaref = "1198" kind = "dr_history_Connection"></role>
			<role name = "dr_latency_Connection" metaref = "1199" kind = "dr_latency_Connection"></role>
			<role name = "dr_liveliness_Connection" metaref = "1200" kind = "dr_liveliness_Connection"></role>
			<role name = "dr_ownership_Connection" metaref = "1201" kind = "dr_ownership_Connection"></role>
			<role name = "dr_readerdatalifecycle_Connection" metaref = "1202" kind = "dr_readerdatalifecycle_Connection"></role>
			<role name = "dr_reliability_Connection" metaref = "1203" kind = "dr_reliability_Connection"></role>
			<role name = "dr_res_Connection" metaref = "1204" kind = "dr_res_Connection"></role>
			<role name = "dr_sub_Connection" metaref = "1205" kind = "dr_sub_Connection"></role>
			<role name = "dr_timebased_Connection" metaref = "1206" kind = "dr_timebased_Connection"></role>
			<role name = "dr_topic_Connection" metaref = "1207" kind = "dr_topic_Connection"></role>
			<role name = "dr_userdata_Connection" metaref = "1208" kind = "dr_userdata_Connection"></role>
			<role name = "dw_deadline_Connection" metaref = "1209" kind = "dw_deadline_Connection"></role>
			<role name = "dw_dstOrder_Connection" metaref = "1210" kind = "dw_dstOrder_Connection"></role>
			<role name = "dw_durqos_Connection" metaref = "1211" kind = "dw_durqos_Connection"></role>
			<role name = "dw_dursvc_Connection" metaref = "1212" kind = "dw_dursvc_Connection"></role>
			<role name = "dw_history_Connection" metaref = "1213" kind = "dw_history_Connection"></role>
			<role name = "dw_latency_Connection" metaref = "1214" kind = "dw_latency_Connection"></role>
			<role name = "dw_lifespan_Connection" metaref = "1215" kind = "dw_lifespan_Connection"></role>
			<role name = "dw_liveliness_Connection" metaref = "1216" kind = "dw_liveliness_Connection"></role>
			<role name = "dw_ownership_Connection" metaref = "1217" kind = "dw_ownership_Connection"></role>
			<role name = "dw_ownerstrength_Connection" metaref = "1218" kind = "dw_ownerstrength_Connection"></role>
			<role name = "dw_pub_Connection" metaref = "1219" kind = "dw_pub_Connection"></role>
			<role name = "dw_reliability_Connection" metaref = "1220" kind = "dw_reliability_Connection"></role>
			<role name = "dw_res_Connection" metaref = "1221" kind = "dw_res_Connection"></role>
			<role name = "dw_topic_Connection" metaref = "1222" kind = "dw_topic_Connection"></role>
			<role name = "dw_transpri_Connection" metaref = "1223" kind = "dw_transpri_Connection"></role>
			<role name = "dw_userdata_Connection" metaref = "1224" kind = "dw_userdata_Connection"></role>
			<role name = "dw_writerdatalifecycle_Connection" metaref = "1225" kind = "dw_writerdatalifecycle_Connection"></role>
			<role name = "pub_entityfactory_Connection" metaref = "1226" kind = "pub_entityfactory_Connection"></role>
			<role name = "pub_groupdata_Connection" metaref = "1227" kind = "pub_groupdata_Connection"></role>
			<role name = "pub_part_Connection" metaref = "1228" kind = "pub_part_Connection"></role>
			<role name = "pub_presqos_Connection" metaref = "1229" kind = "pub_presqos_Connection"></role>
			<role name = "sub_entityfactory_Connection" metaref = "1230" kind = "sub_entityfactory_Connection"></role>
			<role name = "sub_groupdata_Connection" metaref = "1231" kind = "sub_groupdata_Connection"></role>
			<role name = "sub_part_Connection" metaref = "1232" kind = "sub_part_Connection"></role>
			<role name = "sub_presqos_Connection" metaref = "1233" kind = "sub_presqos_Connection"></role>
			<role name = "top_deadline_Connection" metaref = "1234" kind = "top_deadline_Connection"></role>
			<role name = "top_latency_Connection" metaref = "1235" kind = "top_latency_Connection"></role>
			<role name = "topic_dstOrder_Connection" metaref = "1236" kind = "topic_dstOrder_Connection"></role>
			<role name = "topic_durqos_Connection" metaref = "1237" kind = "topic_durqos_Connection"></role>
			<role name = "topic_dursvc_Connection" metaref = "1238" kind = "topic_dursvc_Connection"></role>
			<role name = "topic_history_Connection" metaref = "1239" kind = "topic_history_Connection"></role>
			<role name = "topic_lifespan_Connection" metaref = "1240" kind = "topic_lifespan_Connection"></role>
			<role name = "topic_liveliness_Connection" metaref = "1241" kind = "topic_liveliness_Connection"></role>
			<role name = "topic_ownership_Connection" metaref = "1242" kind = "topic_ownership_Connection"></role>
			<role name = "topic_reliability_Connection" metaref = "1243" kind = "topic_reliability_Connection"></role>
			<role name = "topic_res_Connection" metaref = "1244" kind = "topic_res_Connection"></role>
			<role name = "topic_topicdata_Connection" metaref = "1245" kind = "topic_topicdata_Connection"></role>
			<role name = "topic_transpri_Connection" metaref = "1246" kind = "topic_transpri_Connection"></role>
			<aspect name = "Configuration" metaref = "1014" >
				<part metaref = "1247" role = "DataReader" primary = "yes" linked = "no"></part>
				<part metaref = "1248" role = "DataWriter" primary = "yes" linked = "no"></part>
				<part metaref = "1249" role = "DeadlineQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1250" role = "DestinationOrderQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1251" role = "DomainParticipant" primary = "yes" linked = "no"></part>
				<part metaref = "1252" role = "DomainParticipantFactory" primary = "yes" linked = "no"></part>
				<part metaref = "1253" role = "DurabilityQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1254" role = "DurabilityServiceQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1255" role = "EntityFactoryQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1256" role = "GroupDataQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1257" role = "HistoryQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1258" role = "LatencyBudgetQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1259" role = "LifespanQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1260" role = "LivelinessQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1261" role = "OwnershipQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1262" role = "OwnershipStrengthQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1263" role = "PartitionQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1264" role = "PresentationQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1265" role = "Publisher" primary = "yes" linked = "no"></part>
				<part metaref = "1266" role = "ReaderDataLifecycleQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1267" role = "ReliabilityQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1268" role = "ResourceLimitsQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1269" role = "Subscriber" primary = "yes" linked = "no"></part>
				<part metaref = "1270" role = "TimeBasedFilterQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1271" role = "Topic" primary = "yes" linked = "no"></part>
				<part metaref = "1272" role = "TopicDataQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1273" role = "TransportPriorityQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1274" role = "UserDataQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1275" role = "WriterDataLifecycleQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1276" role = "dp_entityfactory_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1277" role = "dp_pub_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1278" role = "dp_sub_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1279" role = "dp_topic_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1280" role = "dp_userdata_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1281" role = "dpf_dp_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1282" role = "dpfactory_entityfactory_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1283" role = "dr_deadline_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1284" role = "dr_dstOrder_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1285" role = "dr_durqos_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1286" role = "dr_history_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1287" role = "dr_latency_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1288" role = "dr_liveliness_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1289" role = "dr_ownership_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1290" role = "dr_readerdatalifecycle_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1291" role = "dr_reliability_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1292" role = "dr_res_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1293" role = "dr_sub_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1294" role = "dr_timebased_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1295" role = "dr_topic_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1296" role = "dr_userdata_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1297" role = "dw_deadline_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1298" role = "dw_dstOrder_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1299" role = "dw_durqos_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1300" role = "dw_dursvc_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1301" role = "dw_history_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1302" role = "dw_latency_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1303" role = "dw_lifespan_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1304" role = "dw_liveliness_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1305" role = "dw_ownership_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1306" role = "dw_ownerstrength_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1307" role = "dw_pub_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1308" role = "dw_reliability_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1309" role = "dw_res_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1310" role = "dw_topic_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1311" role = "dw_transpri_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1312" role = "dw_userdata_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1313" role = "dw_writerdatalifecycle_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1314" role = "pub_entityfactory_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1315" role = "pub_groupdata_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1316" role = "pub_part_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1317" role = "pub_presqos_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1318" role = "sub_entityfactory_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1319" role = "sub_groupdata_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1320" role = "sub_part_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1321" role = "sub_presqos_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1322" role = "top_deadline_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1323" role = "top_latency_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1324" role = "topic_dstOrder_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1325" role = "topic_durqos_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1326" role = "topic_dursvc_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1327" role = "topic_history_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1328" role = "topic_lifespan_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1329" role = "topic_liveliness_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1330" role = "topic_ownership_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1331" role = "topic_reliability_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1332" role = "topic_res_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1333" role = "topic_topicdata_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1334" role = "topic_transpri_Connection" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "DataReader" metaref = "1368" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="sink-70x70"></regnode>
				<regnode name = "isTypeInfoShown" value ="true"></regnode>
			<constraint name="Consistent_DR_ResourceLimits" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[let dr_reslimits_policies = self.connectedFCOs(dr_res_Connection) in

if (dr_reslimits_policies->size() > 0) then
   let max_samples = dr_reslimits_policies->theOnly().oclAsType(ResourceLimitsQosPolicy).max_samples in
   let max_samples_per_instance = dr_reslimits_policies->theOnly().oclAsType(ResourceLimitsQosPolicy).max_samples_per_instance in

   -- -1 designates LENGTH_UNLIMITED
   (max_samples >= max_samples_per_instance)
   or
   (max_samples_per_instance = -1)
else
   -- Here defaults are equal so return true
   true
endif]]>
				<dispname>It is inconsistent for max_samples to be less than max_samples_per_instance.</dispname>
			</constraint>
			<constraint name="Consistent_Deadline_Timebased" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[let dr_deadline_policies = self.connectedFCOs(dr_deadline_Connection) in
let dr_timebased_policies = self.connectedFCOs(dr_timebased_Connection) in

if (dr_deadline_policies->size() > 0) then
   let dr_deadline = dr_deadline_policies->theOnly().oclAsType(DeadlineQosPolicy).period in

   if (dr_timebased_policies->size() > 0) then
      let dr_min_sep = dr_timebased_policies->theOnly().oclAsType(TimeBasedFilterQosPolicy).minimum_separation in

   -- The DDS specification defines compatibility such that the deadline must be >=
   -- the minimum separation.
   -- NOTE: We use -1 to denote infinity.
      dr_deadline >= dr_min_sep or
      dr_deadline = -1
   else
      -- Here compare dr_deadline >= 0 (default for minimum separation)
      true
   endif
else
   -- Here compare infinity (default value for deadline) >= 0
   true
endif]]>
				<dispname>For consistency, the DeadlineQosPolicy&apos;s deadline must be greater than or equal to the TimeBasedFilterQosPolicy&apos;s minimum separation</dispname>
			</constraint>
			<constraint name="Validdr_deadline_ConnectiondstCardinality22" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::dr_deadline_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to DataReader as &quot;dst&quot; over dr_deadline_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validdr_dstOrder_ConnectiondstCardinality24" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::dr_dstOrder_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to DataReader as &quot;dst&quot; over dr_dstOrder_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validdr_durqos_ConnectiondstCardinality26" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::dr_durqos_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to DataReader as &quot;dst&quot; over dr_durqos_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validdr_history_ConnectiondstCardinality28" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::dr_history_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to DataReader as &quot;dst&quot; over dr_history_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validdr_latency_ConnectiondstCardinality30" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::dr_latency_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to DataReader as &quot;dst&quot; over dr_latency_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validdr_liveliness_ConnectiondstCardinality32" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::dr_liveliness_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to DataReader as &quot;dst&quot; over dr_liveliness_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validdr_ownership_ConnectiondstCardinality34" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::dr_ownership_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to DataReader as &quot;dst&quot; over dr_ownership_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validdr_readerdatalifecycle_ConnectiondstCardinality36" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::dr_readerdatalifecycle_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to DataReader as &quot;dst&quot; over dr_readerdatalifecycle_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validdr_reliability_ConnectiondstCardinality38" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::dr_reliability_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to DataReader as &quot;dst&quot; over dr_reliability_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validdr_res_ConnectiondstCardinality40" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::dr_res_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to DataReader as &quot;dst&quot; over dr_res_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validdr_sub_ConnectionsrcCardinality41" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", meta::dr_sub_Connection ) -> size in
                     (srcCount >= 1)]]>
				<dispname>Multiplicity of objects, which are associated to DataReader as &quot;src&quot; over dr_sub_Connection, has to match 1..*.</dispname>
			</constraint>
			<constraint name="Validdr_topic_ConnectiondstCardinality46" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::dr_topic_Connection ) -> size in
                     (dstCount = 1)]]>
				<dispname>Multiplicity of objects, which are associated to DataReader as &quot;dst&quot; over dr_topic_Connection, has to match 1.</dispname>
			</constraint>
			<constraint name="Validdr_userdata_ConnectiondstCardinality48" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::dr_userdata_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to DataReader as &quot;dst&quot; over dr_userdata_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="dr_Consistent_History_ResourceLimits" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[let dr_history_policies = self.connectedFCOs(dr_history_Connection) in
let dr_res_policies = self.connectedFCOs(dr_res_Connection) in

if (dr_history_policies->size() > 0) then
   let dr_depth = dr_history_policies->theOnly().oclAsType(HistoryQosPolicy).history_depth in

   if (dr_res_policies->size() > 0) then
      let max_samples_per_instance = dr_res_policies->theOnly().oclAsType(ResourceLimitsQosPolicy).max_samples_per_instance in

   -- The DDS specification defines compatibility such that the depth must be <=
   -- max_samples_per_instance.
   -- NOTE: We use -1 to denote infinity.
      dr_depth <= max_samples_per_instance or
      max_samples_per_instance = -1
   else
      -- Here compare dr_deadline >= 0 (default for minimum separation)
      true
   endif
else
   -- Here compare infinity (default value for deadline) >= 0
   true
endif]]>
				<dispname>For consistency, the History depth must be less than or equal to  Resource_Limits max_samples_per_instance.</dispname>
			</constraint>
			<aspect name = "Aspect" metaref = "1656" >
			</aspect>
		</model>
		<model name = "DataReaderQos" metaref = "1492" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "isTypeInfoShown" value ="true"></regnode>
			<constraint name="ValidDataReaderQosPartCardinality125" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "LivelinessQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by DataReaderQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidDataReaderQosPartCardinality126" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "OwnershipQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by DataReaderQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidDataReaderQosPartCardinality127" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "DurabilityQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by DataReaderQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidDataReaderQosPartCardinality128" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "HistoryQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by DataReaderQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidDataReaderQosPartCardinality129" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "LatencyBudgetQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by DataReaderQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidDataReaderQosPartCardinality130" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "DeadlineQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by DataReaderQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidDataReaderQosPartCardinality131" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "DestinationOrderQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by DataReaderQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidDataReaderQosPartCardinality132" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "ReaderDataLifecycleQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by DataReaderQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidDataReaderQosPartCardinality133" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "ReliabilityQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by DataReaderQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidDataReaderQosPartCardinality134" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "TopicQosReference" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by DataReaderQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidDataReaderQosPartCardinality135" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "UserDataQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by DataReaderQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidDataReaderQosPartCardinality136" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "ResourceLimitsQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by DataReaderQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidDataReaderQosPartCardinality137" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "TimeBasedFilterQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by DataReaderQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidSubscriberConnectiondstCardinality6" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::SubscriberConnection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to DataReaderQos as &quot;dst&quot; over SubscriberConnection, has to match 0..1.</dispname>
			</constraint>
			<role name = "DeadlineQosPolicy" metaref = "1493" kind = "DeadlineQosPolicy"></role>
			<role name = "DestinationOrderQosPolicy" metaref = "1494" kind = "DestinationOrderQosPolicy"></role>
			<role name = "DurabilityQosPolicy" metaref = "1495" kind = "DurabilityQosPolicy"></role>
			<role name = "HistoryQosPolicy" metaref = "1496" kind = "HistoryQosPolicy"></role>
			<role name = "LatencyBudgetQosPolicy" metaref = "1497" kind = "LatencyBudgetQosPolicy"></role>
			<role name = "LivelinessQosPolicy" metaref = "1498" kind = "LivelinessQosPolicy"></role>
			<role name = "OwnershipQosPolicy" metaref = "1499" kind = "OwnershipQosPolicy"></role>
			<role name = "ReaderDataLifecycleQosPolicy" metaref = "1500" kind = "ReaderDataLifecycleQosPolicy"></role>
			<role name = "ReliabilityQosPolicy" metaref = "1501" kind = "ReliabilityQosPolicy"></role>
			<role name = "ResourceLimitsQosPolicy" metaref = "1502" kind = "ResourceLimitsQosPolicy"></role>
			<role name = "TimeBasedFilterQosPolicy" metaref = "1503" kind = "TimeBasedFilterQosPolicy"></role>
			<role name = "TopicQosReference" metaref = "1504" kind = "TopicQosReference"></role>
			<role name = "UserDataQosPolicy" metaref = "1505" kind = "UserDataQosPolicy"></role>
			<aspect name = "DataReaderQosAspect" metaref = "1506" >
				<dispname>Qos Policy</dispname>
				<part metaref = "1507" role = "DeadlineQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1508" role = "DestinationOrderQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1509" role = "DurabilityQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1510" role = "HistoryQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1511" role = "LatencyBudgetQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1512" role = "LivelinessQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1513" role = "OwnershipQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1514" role = "ReaderDataLifecycleQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1515" role = "ReliabilityQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1516" role = "ResourceLimitsQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1517" role = "TimeBasedFilterQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1518" role = "TopicQosReference" primary = "yes" linked = "no"></part>
				<part metaref = "1519" role = "UserDataQosPolicy" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "DataWriter" metaref = "1407" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="faucet-70x70"></regnode>
				<regnode name = "isTypeInfoShown" value ="true"></regnode>
			<constraint name="Applicable_OwnershipStrength" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[let ownership_policies = self.connectedFCOs(dw_ownership_Connection) in
let ownstr_policies = self.connectedFCOs(dw_ownerstrength_Connection) in

if (ownership_policies->size() > 0) then
   if (ownstr_policies->size() > 0) then
      -- Check that the ownership policy is EXCLUSIVE.
      ownership_policies->theOnly().oclAsType(OwnershipQosPolicy).ownership_kind = #EXCLUSIVE
   else
      true
   endif
else
   if (ownstr_policies->size() > 0) then
      -- Here there are no ownership policies but there is an ownership strength policy.
      false
   else
      true
   endif
endif]]>
				<dispname>The OwnershipStrengthQosPolicy only applies if the associated OwnershipQosPolicy is of kind EXCLUSIVE.</dispname>
			</constraint>
			<constraint name="Consistent_DW_ResourceLimits" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[let dw_reslimits_policies = self.connectedFCOs(dw_res_Connection) in

if (dw_reslimits_policies->size() > 0) then
   let max_samples = dw_reslimits_policies->theOnly().oclAsType(ResourceLimitsQosPolicy).max_samples in
   let max_samples_per_instance = dw_reslimits_policies->theOnly().oclAsType(ResourceLimitsQosPolicy).max_samples_per_instance in

   -- -1 designates LENGTH_UNLIMITED
   (max_samples >= max_samples_per_instance)
   or
   (max_samples_per_instance = -1)
else
   -- Here defaults are equal so return true
   true
endif]]>
				<dispname>It is inconsistent for max_samples to be less than max_samples_per_instance.</dispname>
			</constraint>
			<constraint name="Validdw_deadline_ConnectiondstCardinality50" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::dw_deadline_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to DataWriter as &quot;dst&quot; over dw_deadline_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validdw_dstOrder_ConnectiondstCardinality52" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::dw_dstOrder_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to DataWriter as &quot;dst&quot; over dw_dstOrder_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validdw_durqos_ConnectiondstCardinality54" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::dw_durqos_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to DataWriter as &quot;dst&quot; over dw_durqos_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validdw_dursvc_ConnectiondstCardinality56" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::dw_dursvc_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to DataWriter as &quot;dst&quot; over dw_dursvc_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validdw_history_ConnectiondstCardinality58" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::dw_history_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to DataWriter as &quot;dst&quot; over dw_history_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validdw_latency_ConnectiondstCardinality60" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::dw_latency_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to DataWriter as &quot;dst&quot; over dw_latency_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validdw_lifespan_ConnectiondstCardinality62" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::dw_lifespan_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to DataWriter as &quot;dst&quot; over dw_lifespan_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validdw_liveliness_ConnectiondstCardinality64" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::dw_liveliness_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to DataWriter as &quot;dst&quot; over dw_liveliness_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validdw_ownership_ConnectiondstCardinality66" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::dw_ownership_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to DataWriter as &quot;dst&quot; over dw_ownership_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validdw_ownerstrength_ConnectiondstCardinality68" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::dw_ownerstrength_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to DataWriter as &quot;dst&quot; over dw_ownerstrength_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validdw_pub_ConnectionsrcCardinality69" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", meta::dw_pub_Connection ) -> size in
                     (srcCount = 1)]]>
				<dispname>Multiplicity of objects, which are associated to DataWriter as &quot;src&quot; over dw_pub_Connection, has to match 1.</dispname>
			</constraint>
			<constraint name="Validdw_reliability_ConnectiondstCardinality72" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::dw_reliability_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to DataWriter as &quot;dst&quot; over dw_reliability_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validdw_res_ConnectiondstCardinality74" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::dw_res_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to DataWriter as &quot;dst&quot; over dw_res_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validdw_topic_ConnectiondstCardinality76" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::dw_topic_Connection ) -> size in
                     (dstCount = 1)]]>
				<dispname>Multiplicity of objects, which are associated to DataWriter as &quot;dst&quot; over dw_topic_Connection, has to match 1.</dispname>
			</constraint>
			<constraint name="Validdw_transpri_ConnectiondstCardinality78" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::dw_transpri_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to DataWriter as &quot;dst&quot; over dw_transpri_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validdw_userdata_ConnectiondstCardinality80" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::dw_userdata_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to DataWriter as &quot;dst&quot; over dw_userdata_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validdw_writerdatalifecycle_ConnectiondstCardinality82" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::dw_writerdatalifecycle_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to DataWriter as &quot;dst&quot; over dw_writerdatalifecycle_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="dw_Consistent_History_ResourceLimits" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[let dw_history_policies = self.connectedFCOs(dw_history_Connection) in
let dw_res_policies = self.connectedFCOs(dw_res_Connection) in

if (dw_history_policies->size() > 0) then
   let dw_depth = dw_history_policies->theOnly().oclAsType(HistoryQosPolicy).history_depth in

   if (dw_res_policies->size() > 0) then
      let max_samples_per_instance = dw_res_policies->theOnly().oclAsType(ResourceLimitsQosPolicy).max_samples_per_instance in

   -- The DDS specification defines compatibility such that the depth must be <=
   -- max_samples_per_instance.
   -- NOTE: We use -1 to denote infinity.
      dw_depth <= max_samples_per_instance or
      max_samples_per_instance = -1
   else
      -- Here compare dr_deadline >= 0 (default for minimum separation)
      true
   endif
else
   -- Here compare infinity (default value for deadline) >= 0
   true
endif]]>
				<dispname>For consistency, the History depth must be less than or equal to  Resource_Limits max_samples_per_instance.</dispname>
			</constraint>
			<aspect name = "Aspect" metaref = "1657" >
			</aspect>
		</model>
		<model name = "DataWriterQos" metaref = "1521" attributes = "IsInstance" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "isTypeInfoShown" value ="true"></regnode>
			<constraint name="ValidDataWriterQosPartCardinality138" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "LivelinessQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by DataWriterQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidDataWriterQosPartCardinality139" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "OwnershipQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by DataWriterQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidDataWriterQosPartCardinality140" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "OwnershipStrengthQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by DataWriterQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidDataWriterQosPartCardinality141" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "DurabilityQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by DataWriterQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidDataWriterQosPartCardinality142" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "HistoryQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by DataWriterQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidDataWriterQosPartCardinality143" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "LatencyBudgetQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by DataWriterQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidDataWriterQosPartCardinality144" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "LifespanQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by DataWriterQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidDataWriterQosPartCardinality145" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "DeadlineQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by DataWriterQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidDataWriterQosPartCardinality146" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "DestinationOrderQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by DataWriterQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidDataWriterQosPartCardinality147" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "ReliabilityQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by DataWriterQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidDataWriterQosPartCardinality148" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "TopicQosReference" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by DataWriterQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidDataWriterQosPartCardinality149" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "UserDataQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by DataWriterQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidDataWriterQosPartCardinality150" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "TransportPriorityQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by DataWriterQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidDataWriterQosPartCardinality151" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "ResourceLimitsQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by DataWriterQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidDataWriterQosPartCardinality152" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "WriterDataLifecycleQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by DataWriterQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPublisherConnectiondstCardinality2" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::PublisherConnection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to DataWriterQos as &quot;dst&quot; over PublisherConnection, has to match 0..1.</dispname>
			</constraint>
			<role name = "DeadlineQosPolicy" metaref = "1522" kind = "DeadlineQosPolicy"></role>
			<role name = "DestinationOrderQosPolicy" metaref = "1523" kind = "DestinationOrderQosPolicy"></role>
			<role name = "DurabilityQosPolicy" metaref = "1524" kind = "DurabilityQosPolicy"></role>
			<role name = "HistoryQosPolicy" metaref = "1525" kind = "HistoryQosPolicy"></role>
			<role name = "LatencyBudgetQosPolicy" metaref = "1526" kind = "LatencyBudgetQosPolicy"></role>
			<role name = "LifespanQosPolicy" metaref = "1527" kind = "LifespanQosPolicy"></role>
			<role name = "LivelinessQosPolicy" metaref = "1528" kind = "LivelinessQosPolicy"></role>
			<role name = "OwnershipQosPolicy" metaref = "1529" kind = "OwnershipQosPolicy"></role>
			<role name = "OwnershipStrengthQosPolicy" metaref = "1530" kind = "OwnershipStrengthQosPolicy"></role>
			<role name = "ReliabilityQosPolicy" metaref = "1531" kind = "ReliabilityQosPolicy"></role>
			<role name = "ResourceLimitsQosPolicy" metaref = "1532" kind = "ResourceLimitsQosPolicy"></role>
			<role name = "TopicQosReference" metaref = "1533" kind = "TopicQosReference"></role>
			<role name = "TransportPriorityQosPolicy" metaref = "1534" kind = "TransportPriorityQosPolicy"></role>
			<role name = "UserDataQosPolicy" metaref = "1535" kind = "UserDataQosPolicy"></role>
			<role name = "WriterDataLifecycleQosPolicy" metaref = "1536" kind = "WriterDataLifecycleQosPolicy"></role>
			<aspect name = "DataWriterQoSAspect" metaref = "1537" attributes = "IsInstance" >
				<dispname>Qos Policy</dispname>
				<part metaref = "1538" role = "DeadlineQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1539" role = "DestinationOrderQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1540" role = "DurabilityQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1541" role = "HistoryQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1542" role = "LatencyBudgetQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1543" role = "LifespanQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1544" role = "LivelinessQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1545" role = "OwnershipQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1546" role = "OwnershipStrengthQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1547" role = "ReliabilityQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1548" role = "ResourceLimitsQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1549" role = "TopicQosReference" primary = "yes" linked = "no"></part>
				<part metaref = "1550" role = "TransportPriorityQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1551" role = "UserDataQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1552" role = "WriterDataLifecycleQosPolicy" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "Domain" metaref = "1553" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "isTypeInfoShown" value ="true"></regnode>
			<role name = "Participant" metaref = "1633" kind = "Participant"></role>
			<role name = "PublishesConnection" metaref = "1555" kind = "PublishesConnection"></role>
			<aspect name = "SystemCompostion" metaref = "1556" >
				<dispname>System Composition</dispname>
				<part metaref = "1634" role = "Participant" primary = "yes" linked = "no"></part>
				<part metaref = "1558" role = "PublishesConnection" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "DomainParticipant" metaref = "1425" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="participant-70x70"></regnode>
				<regnode name = "isTypeInfoShown" value ="true"></regnode>
			<constraint name="Validdp_entityfactory_ConnectiondstCardinality8" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::dp_entityfactory_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to DomainParticipant as &quot;dst&quot; over dp_entityfactory_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validdp_pub_ConnectiondstCardinality10" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::dp_pub_Connection ) -> size in
                     (dstCount >= 1)]]>
				<dispname>Multiplicity of objects, which are associated to DomainParticipant as &quot;dst&quot; over dp_pub_Connection, has to match 1..*.</dispname>
			</constraint>
			<constraint name="Validdp_sub_ConnectiondstCardinality12" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::dp_sub_Connection ) -> size in
                     (dstCount >= 1)]]>
				<dispname>Multiplicity of objects, which are associated to DomainParticipant as &quot;dst&quot; over dp_sub_Connection, has to match 1..*.</dispname>
			</constraint>
			<constraint name="Validdp_topic_ConnectiondstCardinality14" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::dp_topic_Connection ) -> size in
                     (dstCount >= 1)]]>
				<dispname>Multiplicity of objects, which are associated to DomainParticipant as &quot;dst&quot; over dp_topic_Connection, has to match 1..*.</dispname>
			</constraint>
			<constraint name="Validdp_userdata_ConnectiondstCardinality16" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::dp_userdata_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to DomainParticipant as &quot;dst&quot; over dp_userdata_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validdpf_dp_ConnectionsrcCardinality17" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", meta::dpf_dp_Connection ) -> size in
                     (srcCount = 1)]]>
				<dispname>Multiplicity of objects, which are associated to DomainParticipant as &quot;src&quot; over dpf_dp_Connection, has to match 1.</dispname>
			</constraint>
			<aspect name = "Aspect" metaref = "1658" >
			</aspect>
		</model>
		<model name = "DomainParticipantFactory" metaref = "1427" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="participant-factory-70x70"></regnode>
				<regnode name = "isTypeInfoShown" value ="true"></regnode>
			<constraint name="Validdpf_dp_ConnectiondstCardinality18" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::dpf_dp_Connection ) -> size in
                     (dstCount >= 1)]]>
				<dispname>Multiplicity of objects, which are associated to DomainParticipantFactory as &quot;dst&quot; over dpf_dp_Connection, has to match 1..*.</dispname>
			</constraint>
			<constraint name="Validdpfactory_entityfactory_ConnectiondstCardinality20" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::dpfactory_entityfactory_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to DomainParticipantFactory as &quot;dst&quot; over dpfactory_entityfactory_Connection, has to match 0..1.</dispname>
			</constraint>
			<aspect name = "Aspect" metaref = "1659" >
			</aspect>
		</model>
		<model name = "Participant" metaref = "1637" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "isTypeInfoShown" value ="true"></regnode>
			<constraint name="ValidParticipantPartCardinality153" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "EntityFactoryQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by Participant, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidParticipantPartCardinality154" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "UserDataQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by Participant, has to match 0..1.</dispname>
			</constraint>
			<role name = "DataReaderQos" metaref = "1638" kind = "DataReaderQos"></role>
			<role name = "DataWriterQos" metaref = "1639" kind = "DataWriterQos"></role>
			<role name = "EntityFactoryQosPolicy" metaref = "1640" kind = "EntityFactoryQosPolicy"></role>
			<role name = "PublisherConnection" metaref = "1641" kind = "PublisherConnection"></role>
			<role name = "PublisherQos" metaref = "1642" kind = "PublisherQos"></role>
			<role name = "SubscriberConnection" metaref = "1643" kind = "SubscriberConnection"></role>
			<role name = "SubscriberQos" metaref = "1644" kind = "SubscriberQos"></role>
			<role name = "UserDataQosPolicy" metaref = "1645" kind = "UserDataQosPolicy"></role>
			<aspect name = "SystemCompostion" metaref = "1646" >
				<dispname>System Composition</dispname>
				<part metaref = "1647" role = "DataReaderQos" primary = "yes" linked = "yes"></part>
				<part metaref = "1648" role = "DataWriterQos" primary = "yes" linked = "yes"></part>
				<part metaref = "1649" role = "PublisherConnection" primary = "yes" linked = "no"></part>
				<part metaref = "1650" role = "PublisherQos" primary = "yes" linked = "no"></part>
				<part metaref = "1651" role = "SubscriberConnection" primary = "yes" linked = "no"></part>
				<part metaref = "1652" role = "SubscriberQos" primary = "yes" linked = "no"></part>
			</aspect>
			<aspect name = "DomainParticipantQosAspect" metaref = "1653" >
				<dispname>Qos Policy</dispname>
				<part metaref = "1654" role = "EntityFactoryQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1655" role = "UserDataQosPolicy" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "Publisher" metaref = "1429" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="printing-press-70x70"></regnode>
				<regnode name = "isTypeInfoShown" value ="true"></regnode>
			<constraint name="Validdp_pub_ConnectionsrcCardinality9" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", meta::dp_pub_Connection ) -> size in
                     (srcCount = 1)]]>
				<dispname>Multiplicity of objects, which are associated to Publisher as &quot;src&quot; over dp_pub_Connection, has to match 1.</dispname>
			</constraint>
			<constraint name="Validdw_pub_ConnectiondstCardinality70" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::dw_pub_Connection ) -> size in
                     (dstCount >= 1)]]>
				<dispname>Multiplicity of objects, which are associated to Publisher as &quot;dst&quot; over dw_pub_Connection, has to match 1..*.</dispname>
			</constraint>
			<constraint name="Validpub_entityfactory_ConnectiondstCardinality84" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::pub_entityfactory_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to Publisher as &quot;dst&quot; over pub_entityfactory_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validpub_groupdata_ConnectiondstCardinality86" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::pub_groupdata_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to Publisher as &quot;dst&quot; over pub_groupdata_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validpub_part_ConnectiondstCardinality88" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::pub_part_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to Publisher as &quot;dst&quot; over pub_part_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validpub_presqos_ConnectiondstCardinality90" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::pub_presqos_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to Publisher as &quot;dst&quot; over pub_presqos_Connection, has to match 0..1.</dispname>
			</constraint>
			<aspect name = "Aspect" metaref = "1660" >
			</aspect>
		</model>
		<model name = "PublisherQos" metaref = "1579" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "isTypeInfoShown" value ="true"></regnode>
			<constraint name="ValidPublisherQosPartCardinality155" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "PartitionQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by PublisherQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPublisherQosPartCardinality156" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "EntityFactoryQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by PublisherQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPublisherQosPartCardinality157" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "GroupDataQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by PublisherQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPublisherQosPartCardinality158" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "PresentationQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by PublisherQos, has to match 0..1.</dispname>
			</constraint>
			<role name = "EntityFactoryQosPolicy" metaref = "1580" kind = "EntityFactoryQosPolicy"></role>
			<role name = "GroupDataQosPolicy" metaref = "1581" kind = "GroupDataQosPolicy"></role>
			<role name = "PartitionQosPolicy" metaref = "1582" kind = "PartitionQosPolicy"></role>
			<role name = "PresentationQosPolicy" metaref = "1583" kind = "PresentationQosPolicy"></role>
			<aspect name = "PublisherSubscriberQosAspect" metaref = "1584" >
				<dispname>Qos Policy</dispname>
				<part metaref = "1585" role = "EntityFactoryQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1586" role = "GroupDataQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1587" role = "PartitionQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1588" role = "PresentationQosPolicy" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "Subscriber" metaref = "1441" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="paper-stack-70x70"></regnode>
				<regnode name = "isTypeInfoShown" value ="true"></regnode>
			<constraint name="Validdp_sub_ConnectionsrcCardinality11" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", meta::dp_sub_Connection ) -> size in
                     (srcCount = 1)]]>
				<dispname>Multiplicity of objects, which are associated to Subscriber as &quot;src&quot; over dp_sub_Connection, has to match 1.</dispname>
			</constraint>
			<constraint name="Validdr_sub_ConnectiondstCardinality42" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::dr_sub_Connection ) -> size in
                     (dstCount >= 1)]]>
				<dispname>Multiplicity of objects, which are associated to Subscriber as &quot;dst&quot; over dr_sub_Connection, has to match 1..*.</dispname>
			</constraint>
			<constraint name="Validsub_entityfactory_ConnectiondstCardinality92" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::sub_entityfactory_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to Subscriber as &quot;dst&quot; over sub_entityfactory_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validsub_groupdata_ConnectiondstCardinality94" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::sub_groupdata_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to Subscriber as &quot;dst&quot; over sub_groupdata_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validsub_part_ConnectiondstCardinality96" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::sub_part_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to Subscriber as &quot;dst&quot; over sub_part_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validsub_presqos_ConnectiondstCardinality98" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::sub_presqos_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to Subscriber as &quot;dst&quot; over sub_presqos_Connection, has to match 0..1.</dispname>
			</constraint>
			<aspect name = "Aspect" metaref = "1661" >
			</aspect>
		</model>
		<model name = "SubscriberQos" metaref = "1590" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "isTypeInfoShown" value ="true"></regnode>
			<constraint name="ValidSubscriberQosPartCardinality159" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "PartitionQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by SubscriberQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidSubscriberQosPartCardinality160" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "EntityFactoryQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by SubscriberQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidSubscriberQosPartCardinality161" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "GroupDataQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by SubscriberQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidSubscriberQosPartCardinality162" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "PresentationQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by SubscriberQos, has to match 0..1.</dispname>
			</constraint>
			<role name = "EntityFactoryQosPolicy" metaref = "1591" kind = "EntityFactoryQosPolicy"></role>
			<role name = "GroupDataQosPolicy" metaref = "1592" kind = "GroupDataQosPolicy"></role>
			<role name = "PartitionQosPolicy" metaref = "1593" kind = "PartitionQosPolicy"></role>
			<role name = "PresentationQosPolicy" metaref = "1594" kind = "PresentationQosPolicy"></role>
			<aspect name = "PublisherSubscriberQosAspect" metaref = "1595" >
				<dispname>Qos Policy</dispname>
				<part metaref = "1596" role = "EntityFactoryQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1597" role = "GroupDataQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1598" role = "PartitionQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1599" role = "PresentationQosPolicy" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "Topic" metaref = "1482" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="bookshelves-70x70"></regnode>
				<regnode name = "isTypeInfoShown" value ="true"></regnode>
			<constraint name="Compatible_Deadline" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[-- Get all the DataReaders associated with this topic
let readers = self.connectedFCOs(dr_topic_Connection) in
let topic_deadqos_policies = self.connectedFCOs(top_deadline_Connection) in

-- If the Topic has a DeadlineQosPolicy it needs to be checked for
-- compatibility along with all the DataWriters
readers->forAll( c: DataReader |  Is_Deadline_Compatible(c.connectedFCOs(dr_deadline_Connection),
                                                                                           topic_deadqos_policies)
                                                      or
                                                      Are_Deadlines_Compatible(c,
                                                                                                 self.connectedFCOs(dw_topic_Connection)))]]>
				<dispname>For data to flow, the offered deadline must be less than or equal to the requested deadline</dispname>
			</constraint>
			<constraint name="Compatible_DestOrder" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[-- Get all the DataReaders associated with this topic
let readers = self.connectedFCOs(dr_topic_Connection) in
let topic_dstOrder_policies = self.connectedFCOs(topic_dstOrder_Connection) in

-- If the Topic has a DestinationOrderQosPolicy it needs to be checked for
-- compatibility along with all the DataWriters
readers->forAll( c: DataReader |  Is_DestOrder_Compatible(c.connectedFCOs(dr_dstOrder_Connection),
                                                                                             topic_dstOrder_policies)
                                                   or
                                                   Are_DestOrders_Compatible(c,
                                                                                                self.connectedFCOs(dw_topic_Connection)))]]>
				<dispname>For data to flow, the requested Destination Order QoS must be compatible with the offered Destination Order QoS</dispname>
			</constraint>
			<constraint name="Compatible_Durability" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[-- Get all the DataReaders associated with this topic
let readers = self.connectedFCOs(dr_topic_Connection) in
let topic_durqos_policies = self.connectedFCOs(topic_durqos_Connection) in

-- If the Topic has a DurabilityQosPolicy it needs to be checked for
-- compatibility along with all the DataWriters
readers->forAll( c: DataReader |  Is_Durability_Compatible(c.connectedFCOs(dr_durqos_Connection),
                                                                                              topic_durqos_policies)
                                                      or
                                                      Are_Durabilities_Compatible(c,
                                                                                                   self.connectedFCOs(dw_topic_Connection)))


-- PREVIOUS BELOW
--self.connectedFCOs(dr_topic_Connection)->forAll( c: DataReader |  
--Compare_Durability_QoS(c, self.connectedFCOs(dw_topic_Connection)))]]>
				<dispname>For data to flow, the requested Durability QoS must be compatible with the offered Durability QoS</dispname>
			</constraint>
			<constraint name="Compatible_LatencyBudget" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[-- Get all the DataReaders associated with this topic
let readers = self.connectedFCOs(dr_topic_Connection) in
let topic_latency_policies = self.connectedFCOs(top_latency_Connection) in

-- If the Topic has a latencyBudgetQosPolicy it needs to be checked for
-- compatibility along with all the DataWriters
readers->forAll( c: DataReader |  Is_LatencyBudget_Compatible(c.connectedFCOs(dr_latency_Connection),
                                                                                                     topic_latency_policies)
                                                      or
                                                      Are_LatencyBudgets_Compatible(c,
                                                                                                            self.connectedFCOs(dw_topic_Connection)))]]>
				<dispname>For data to flow, the offered latency budget must be less than or equal to the requested latency budget</dispname>
			</constraint>
			<constraint name="Compatible_Liveliness" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[-- Get all the DataReaders associated with this topic
let readers = self.connectedFCOs(dr_topic_Connection) in
let topic_liveliness_policies = self.connectedFCOs(topic_liveliness_Connection) in

-- If the Topic has a LivelinessQosPolicy it needs to be checked for
-- compatibility along with all the DataWriters
readers->forAll( c: DataReader |  Is_Liveliness_Compatible(c.connectedFCOs(dr_liveliness_Connection),
                                                                                            topic_liveliness_policies)
                                                   or
                                                   Are_Livelinesses_Compatible(c,
                                                                                                     self.connectedFCOs(dw_topic_Connection)))
]]>
				<dispname>For data to flow, the requested Liveliness QoS must be compatible with the offered Liveliness QoS</dispname>
			</constraint>
			<constraint name="Compatible_Ownership" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[-- Get all the DataReaders associated with this topic
let readers = self.connectedFCOs(dr_topic_Connection) in
let topic_ownership_policies = self.connectedFCOs(topic_ownership_Connection) in

-- If the Topic has an OwnershipQosPolicy it needs to be checked for
-- compatibility along with all the DataWriters
readers->forAll( c: DataReader |  Is_Ownership_Compatible(c.connectedFCOs(dr_ownership_Connection),
                                                                                             topic_ownership_policies)
                                                      or
                                                      Are_Ownerships_Compatible(c,
                                                                                                    self.connectedFCOs(dw_topic_Connection)))]]>
				<dispname>For data to flow, the offered ownership must equal the requested ownership</dispname>
			</constraint>
			<constraint name="Compatible_Presentation" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[-- Get all the DataReaders associated with this topic
let readers = self.connectedFCOs(dr_topic_Connection) in

readers->forAll(c: DataReader |  Are_Presentations_Compatible(c.connectedFCOs(dr_sub_Connection),
                                                                                                   self.connectedFCOs(dw_topic_Connection)))]]>
				<dispname>For data to flow, the requested Presentation QoS must be compatible with the offered Presentation QoS</dispname>
			</constraint>
			<constraint name="Compatible_Reliability" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[-- Get all the DataReaders associated with this topic
let readers = self.connectedFCOs(dr_topic_Connection) in
let topic_reliability_policies = self.connectedFCOs(topic_reliability_Connection) in

-- If the Topic has a ReliabilityQosPolicy it needs to be checked for
-- compatibility along with all the DataWriters
readers->forAll( c: DataReader |  Is_Topic_Reliability_Compatible(c.connectedFCOs(dr_reliability_Connection),
                                                                                                      topic_reliability_policies)
                                                   or
                                                   Are_Reliabilities_Compatible(c,
                                                                                                self.connectedFCOs(dw_topic_Connection)))]]>
				<dispname>For data to flow, the requested Reliability QoS must be compatible with the offered Reliability QoS</dispname>
			</constraint>
			<constraint name="Consistent_Topic_ResourceLimits" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[let topic_reslimits_policies = self.connectedFCOs(topic_res_Connection) in

if (topic_reslimits_policies->size() > 0) then
   let max_samples = topic_reslimits_policies->theOnly().oclAsType(ResourceLimitsQosPolicy).max_samples in
   let max_samples_per_instance = topic_reslimits_policies->theOnly().oclAsType(ResourceLimitsQosPolicy).max_samples_per_instance in

   -- -1 designates LENGTH_UNLIMITED
   (max_samples >= max_samples_per_instance)
   or
   (max_samples_per_instance = -1)
else
   -- Here defaults are equal so return true
   true
endif]]>
				<dispname>It is inconsistent for max_samples to be less than max_samples_per_instance.</dispname>
			</constraint>
			<constraint name="Validdp_topic_ConnectionsrcCardinality13" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", meta::dp_topic_Connection ) -> size in
                     (srcCount = 1)]]>
				<dispname>Multiplicity of objects, which are associated to Topic as &quot;src&quot; over dp_topic_Connection, has to match 1.</dispname>
			</constraint>
			<constraint name="Validdr_topic_ConnectionsrcCardinality45" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", meta::dr_topic_Connection ) -> size in
                     (srcCount >= 1)]]>
				<dispname>Multiplicity of objects, which are associated to Topic as &quot;src&quot; over dr_topic_Connection, has to match 1..*.</dispname>
			</constraint>
			<constraint name="Validdw_topic_ConnectionsrcCardinality75" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", meta::dw_topic_Connection ) -> size in
                     (srcCount >= 1)]]>
				<dispname>Multiplicity of objects, which are associated to Topic as &quot;src&quot; over dw_topic_Connection, has to match 1..*.</dispname>
			</constraint>
			<constraint name="Validtop_deadline_ConnectiondstCardinality100" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::top_deadline_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to Topic as &quot;dst&quot; over top_deadline_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validtop_latency_ConnectiondstCardinality102" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::top_latency_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to Topic as &quot;dst&quot; over top_latency_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validtopic_dstOrder_ConnectiondstCardinality104" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::topic_dstOrder_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to Topic as &quot;dst&quot; over topic_dstOrder_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validtopic_durqos_ConnectiondstCardinality106" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::topic_durqos_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to Topic as &quot;dst&quot; over topic_durqos_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validtopic_dursvc_ConnectiondstCardinality108" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::topic_dursvc_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to Topic as &quot;dst&quot; over topic_dursvc_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validtopic_history_ConnectiondstCardinality110" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::topic_history_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to Topic as &quot;dst&quot; over topic_history_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validtopic_lifespan_ConnectiondstCardinality112" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::topic_lifespan_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to Topic as &quot;dst&quot; over topic_lifespan_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validtopic_liveliness_ConnectiondstCardinality114" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::topic_liveliness_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to Topic as &quot;dst&quot; over topic_liveliness_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validtopic_ownership_ConnectiondstCardinality116" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::topic_ownership_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to Topic as &quot;dst&quot; over topic_ownership_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validtopic_reliability_ConnectiondstCardinality118" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::topic_reliability_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to Topic as &quot;dst&quot; over topic_reliability_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validtopic_res_ConnectiondstCardinality120" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::topic_res_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to Topic as &quot;dst&quot; over topic_res_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validtopic_topicdata_ConnectiondstCardinality122" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::topic_topicdata_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to Topic as &quot;dst&quot; over topic_topicdata_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validtopic_transpri_ConnectiondstCardinality124" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", meta::topic_transpri_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to Topic as &quot;dst&quot; over topic_transpri_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="topic_Consistent_History_ResourceLimits" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[let topic_history_policies = self.connectedFCOs(topic_history_Connection) in
let topic_res_policies = self.connectedFCOs(topic_res_Connection) in

if (topic_history_policies->size() > 0) then
   let topic_depth = topic_history_policies->theOnly().oclAsType(HistoryQosPolicy).history_depth in

   if (topic_res_policies->size() > 0) then
      let max_samples_per_instance = topic_res_policies->theOnly().oclAsType(ResourceLimitsQosPolicy).max_samples_per_instance in

   -- The DDS specification defines compatibility such that the depth must be <=
   -- max_samples_per_instance.
   -- NOTE: We use -1 to denote infinity.
      topic_depth <= max_samples_per_instance or
      max_samples_per_instance = -1
   else
      -- Here compare dr_deadline >= 0 (default for minimum separation)
      true
   endif
else
   -- Here compare infinity (default value for deadline) >= 0
   true
endif]]>
				<dispname>For consistency, the History depth must be less than or equal to  Resource_Limits max_samples_per_instance.</dispname>
			</constraint>
			<aspect name = "Aspect" metaref = "1662" >
			</aspect>
		</model>
		<model name = "TopicQos" metaref = "1601" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "isTypeInfoShown" value ="true"></regnode>
			<constraint name="ValidTopicQosPartCardinality163" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "LivelinessQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by TopicQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidTopicQosPartCardinality164" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "OwnershipQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by TopicQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidTopicQosPartCardinality165" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "DurabilityQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by TopicQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidTopicQosPartCardinality166" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "DurabilityServiceQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by TopicQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidTopicQosPartCardinality167" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "HistoryQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by TopicQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidTopicQosPartCardinality168" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "LatencyBudgetQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by TopicQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidTopicQosPartCardinality169" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "LifespanQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by TopicQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidTopicQosPartCardinality170" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "DeadlineQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by TopicQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidTopicQosPartCardinality171" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "DestinationOrderQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by TopicQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidTopicQosPartCardinality172" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "ReliabilityQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by TopicQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidTopicQosPartCardinality173" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "TransportPriorityQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by TopicQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidTopicQosPartCardinality174" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "ResourceLimitsQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by TopicQos, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidTopicQosPartCardinality175" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "TopicDataQosPolicy" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by TopicQos, has to match 0..1.</dispname>
			</constraint>
			<role name = "DeadlineQosPolicy" metaref = "1602" kind = "DeadlineQosPolicy"></role>
			<role name = "DestinationOrderQosPolicy" metaref = "1603" kind = "DestinationOrderQosPolicy"></role>
			<role name = "DurabilityQosPolicy" metaref = "1604" kind = "DurabilityQosPolicy"></role>
			<role name = "DurabilityServiceQosPolicy" metaref = "1605" kind = "DurabilityServiceQosPolicy"></role>
			<role name = "HistoryQosPolicy" metaref = "1606" kind = "HistoryQosPolicy"></role>
			<role name = "LatencyBudgetQosPolicy" metaref = "1607" kind = "LatencyBudgetQosPolicy"></role>
			<role name = "LifespanQosPolicy" metaref = "1608" kind = "LifespanQosPolicy"></role>
			<role name = "LivelinessQosPolicy" metaref = "1609" kind = "LivelinessQosPolicy"></role>
			<role name = "OwnershipQosPolicy" metaref = "1610" kind = "OwnershipQosPolicy"></role>
			<role name = "ReliabilityQosPolicy" metaref = "1611" kind = "ReliabilityQosPolicy"></role>
			<role name = "ResourceLimitsQosPolicy" metaref = "1612" kind = "ResourceLimitsQosPolicy"></role>
			<role name = "TopicDataQosPolicy" metaref = "1613" kind = "TopicDataQosPolicy"></role>
			<role name = "TransportPriorityQosPolicy" metaref = "1614" kind = "TransportPriorityQosPolicy"></role>
			<aspect name = "TopicQosAspect" metaref = "1615" >
				<dispname>Qos Policy</dispname>
				<part metaref = "1616" role = "DeadlineQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1617" role = "DestinationOrderQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1618" role = "DurabilityQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1619" role = "DurabilityServiceQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1620" role = "HistoryQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1621" role = "LatencyBudgetQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1622" role = "LifespanQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1623" role = "LivelinessQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1624" role = "OwnershipQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1625" role = "ReliabilityQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1626" role = "ResourceLimitsQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1627" role = "TopicDataQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1628" role = "TransportPriorityQosPolicy" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<folder name = "DomainQosFolder" metaref = "1629"  rootobjects = "Domain" >
		</folder>
		<folder name = "TopicQosFolder" metaref = "1630"  rootobjects = "TopicQos" >
		</folder>
		<folder name = "iCCM" metaref = "1484"  subfolders = "DomainQosFolder TopicQosFolder" >
		</folder>
	</folder>
</paradigm>
