// $Id$

project (GAME_Mga) : acelib, game_lib, boost_base {
  sharedname = GAME_Mga

  dynamicflags += GAME_MGA_BUILD_DLL

  pch_header = stdafx.h
  pch_source = stdafx.cpp

  macros   += _WIN32_DCOM

  specific {
    compile_flags += /wd4290 /wd4251 /wd4273 /wd4275

    midl_includes += . $(GME_ROOT)/Interfaces $(GME_ROOT)
    midl_flags    += /server none /client none
    midl_notlb     = 1
  }

  Source_Files {
    $(GME_ROOT)/Interfaces/Gme.idl
    $(GME_ROOT)/Interfaces/Core.idl
    $(GME_ROOT)/Interfaces/Meta.idl
    $(GME_ROOT)/Interfaces/Mga.idl
    $(GME_ROOT)/Interfaces/MgaUtil.idl
    $(GME_ROOT)/Interfaces/Parser.idl

    Attribute.cpp
    Atom.cpp
    Connection.cpp
    Component.cpp
    ComponentEx.cpp
    Errors.cpp
    Exception.cpp
    FCO.cpp
    Filter.cpp
    Folder.cpp
    Impl_Factory.cpp
    Mga_Init.cpp
    Model.cpp
    Object.cpp
    Part.cpp
    Project.cpp
    Refcountable.cpp
    Reference.cpp
    RegistryNode.cpp
    RootFolder.cpp
    Set.cpp
    Territory.cpp
    Transaction.cpp
    XML.cpp

    MetaAtom.cpp
    MetaAspect.cpp
    MetaAttribute.cpp
    MetaBase.cpp
    MetaConnection.cpp
    MetaConstraint.cpp
    MetaEnumItem.cpp
    MetaFolder.cpp
    MetaFCO.cpp
    MetaModel.cpp
    MetaPart.cpp
    MetaProject.cpp
    MetaRole.cpp
    MetaReference.cpp
    MetaSet.cpp

    stlace.cpp
    Visitor.cpp

    Utils.cpp
  }

  Template_Files {
    Collection_T.cpp
    Factory_T.cpp
    FCO_T.cpp
    Filter_T.cpp
    Functional_T.cpp
    Init_T.cpp
    Model_T.cpp
    modelgen.cpp
    Smart_Ptr.cpp
    Iterator_T.cpp
  }

  Header_Files {
    GME_fwd.h
    Static_Assert.h
    types.h
    Tags.h
  }
}
