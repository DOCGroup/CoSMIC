Mon Feb 20 16:16:13 UTC 2012  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/interpreters/ExtensionClasses/Reference_Class_Definition.cpp:

          Bug fix where the refers_to () type cast was incorrect.

Mon Feb 20 15:22:28 UTC 2012  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Visitor.cpp:

          Removed missing include statements.

        * game/mga/interpreters/ExtensionClasses/FCO_Class_Definition.cpp:
        * game/mga/interpreters/ExtensionClasses/Model_Class_Definition.cpp:
        * game/mga/interpreters/ExtensionClasses/Reference_Class_Definition.cpp:
        * game/mga/interpreters/ExtensionClasses/Set_Class_Definition.cpp:

          Bug fix where the subclasses failed to call generate_definition on
          its base class. This prevent base content from appearing in the
          class definition.

Mon Feb 20 15:17:10 UTC 2012  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Visitor.cpp:


        * game/mga/interpreters/ExtensionClasses/FCO_Class_Definition.cpp:
        * game/mga/interpreters/ExtensionClasses/Model_Class_Definition.cpp:

Mon Feb 20 06:51:06 UTC 2012  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/Attribute.h:
        * game/mga/Attribute.cpp:

          Removed the FCO include file.

        * game/mga/FCO.h:
        * game/mga/FCO.cpp:

          Added the Attribute.h header file to FCO.h.

        * game/mga/Model.inl:

          Removed dead code.

        * game/mga/interpreters/ExtensionClasses/Atom_Class_Definition.h:
        * game/mga/interpreters/ExtensionClasses/Atom_Class_Definition.inl:
        * game/mga/interpreters/ExtensionClasses/Atom_Class_Definition.cpp:
        * game/mga/interpreters/ExtensionClasses/Class_Definition.h:
        * game/mga/interpreters/ExtensionClasses/Class_Definition.cpp:
        * game/mga/interpreters/ExtensionClasses/Connection_Class_Definition.h:
        * game/mga/interpreters/ExtensionClasses/Connection_Class_Definition.inl:
        * game/mga/interpreters/ExtensionClasses/Connection_Class_Definition.cpp:
        * game/mga/interpreters/ExtensionClasses/Connection_Endpoint_Visitor.h:
        * game/mga/interpreters/ExtensionClasses/Connection_Endpoint_Visitor.inl:
        * game/mga/interpreters/ExtensionClasses/Connection_Endpoint_Visitor.cpp:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes.mpc:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Component_Impl.cpp:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Visitor.cpp:
        * game/mga/interpreters/ExtensionClasses/FCO_Class_Definition.h:
        * game/mga/interpreters/ExtensionClasses/FCO_Class_Definition.inl:
        * game/mga/interpreters/ExtensionClasses/FCO_Class_Definition.cpp:
        * game/mga/interpreters/ExtensionClasses/Folder_Class_Definition.h:
        * game/mga/interpreters/ExtensionClasses/Folder_Class_Definition.inl:
        * game/mga/interpreters/ExtensionClasses/Folder_Class_Definition.cpp:
        * game/mga/interpreters/ExtensionClasses/Fwd_Decl_Generator.cpp:
        * game/mga/interpreters/ExtensionClasses/Model_Class_Definition.h:
        * game/mga/interpreters/ExtensionClasses/Model_Class_Definition.inl:
        * game/mga/interpreters/ExtensionClasses/Model_Class_Definition.cpp:
        * game/mga/interpreters/ExtensionClasses/Object_Class_Definition.h:
        * game/mga/interpreters/ExtensionClasses/Object_Class_Definition.inl:
        * game/mga/interpreters/ExtensionClasses/Object_Class_Definition.cpp:
        * game/mga/interpreters/ExtensionClasses/Proxy_Visitor.h:
        * game/mga/interpreters/ExtensionClasses/Proxy_Visitor.inl:
        * game/mga/interpreters/ExtensionClasses/Proxy_Visitor.cpp:
        * game/mga/interpreters/ExtensionClasses/Reference_Class_Definition.h:
        * game/mga/interpreters/ExtensionClasses/Reference_Class_Definition.inl:
        * game/mga/interpreters/ExtensionClasses/Reference_Class_Definition.cpp:
        * game/mga/interpreters/ExtensionClasses/Set_Class_Definition.h:
        * game/mga/interpreters/ExtensionClasses/Set_Class_Definition.inl:
        * game/mga/interpreters/ExtensionClasses/Set_Class_Definition.cpp:

          Re-write of the code generation to use the class definition abstraction
          built atop the template pattern.

        * game/mga/interpreters/ExtensionClasses/Attribute_Generator.h:
        * game/mga/interpreters/ExtensionClasses/Attribute_Generator.cpp:
        * game/mga/interpreters/ExtensionClasses/Base_Class_Locator.h:
        * game/mga/interpreters/ExtensionClasses/Base_Class_Locator.cpp:
        * game/mga/interpreters/ExtensionClasses/Connection_Point_Generator.h:
        * game/mga/interpreters/ExtensionClasses/Connection_Point_Generator.cpp:
        * game/mga/interpreters/ExtensionClasses/Containment_Generator.h:
        * game/mga/interpreters/ExtensionClasses/Containment_Generator.cpp:
        * game/mga/interpreters/ExtensionClasses/ExtensionClasses_Export.h:
        * game/mga/interpreters/ExtensionClasses/Factory_Method_Generator.h:
        * game/mga/interpreters/ExtensionClasses/Factory_Method_Generator.cpp:
        * game/mga/interpreters/ExtensionClasses/InConnection_Generator.h:
        * game/mga/interpreters/ExtensionClasses/InConnection_Generator.cpp:
        * game/mga/interpreters/ExtensionClasses/Parent_Generator.h:
        * game/mga/interpreters/ExtensionClasses/Parent_Generator.cpp:
        * game/mga/interpreters/ExtensionClasses/RefersTo_Method_Generator.h:
        * game/mga/interpreters/ExtensionClasses/RefersTo_Method_Generator.cpp:

          Removed these files.

Thu Feb 16 06:57:23 UTC 2012  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/interpreters/ExtensionClasses/Class_Definition.h:
        * game/mga/interpreters/ExtensionClasses/Class_Definition.cpp:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Visitor.cpp:

          Bug fix where extension classes for model elements had a containment
          method for itself if the model did not contain itself.

Thu Feb 16 06:42:03 UTC 2012  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/Connection.cpp:

          Bug fix where the owner () method was running a Connection_Impl
          instead of using the Impl_Factory to create the implementation.

        * game/mga/Iterator_T.inl:

          Fixed a function header.

        * game/mga/interpreters/ExtensionClasses/Class_Definition.h:
        * game/mga/interpreters/ExtensionClasses/Containment_Generator.h:
        * game/mga/interpreters/ExtensionClasses/Containment_Generator.cpp:

        * game/xml/Fragment.h:
        * game/xml/GAME_XML.mpc:
        * game/xml/Swap_Fragment.h:
        * game/xml/Swap_Fragment.cpp:

          Added a class named Swap_Fragment that swaps an existing fragment
          with the current one. This is useful when generating an Xml file
          from within a Visitor object.

Wed Feb 15 06:06:27 UTC 2012  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/Folder.cpp:
        * game/mga/Folder_T.cpp:
        * game/mga/Mga.mpc:
        * game/mga/Model_T.cpp:
        * game/mga/Static_Assert.h:

          Improved the static assertions for the template methods.

        * game/mga/interpreters/ExtensionClasses/Export_File_Generator.h:
        * game/mga/interpreters/ExtensionClasses/Export_File_Generator.cpp:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes.mpc:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Component_Impl.cpp:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Visitor.cpp:
        * game/mga/interpreters/ExtensionClasses/Mpc_File_Generator.cpp:
        * game/mga/interpreters/ExtensionClasses/Top_Level_File_Generator.h:
        * game/mga/interpreters/ExtensionClasses/Top_Level_File_Generator.cpp:

          Added support for generating the export file and a top-level include
          file for all the model elements in a paradigm.

Tue Feb 14 22:54:27 UTC 2012  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/Iterator_T.h:
        * game/mga/Iterator_T.inl:
        * game/mga/Iterator_T.cpp:

          Bug fix where methods that return access or move to a new item were
          throwing an exception because the underlying implementation was being
          deleted unexpectedly.

          Implemented Impl_Iterator () and its factory method make_impl_iter (),
          which is an adapter class that return a smart pointers implementation
          when it is dereferenced. This is useful for those functions that require
          an implementation pointer when it is dereferenced (e.g., when using a
          collection of smart pointers with a visitor object).

        * game/mga/Folder.h:
        * game/mga/Folder.cpp:
        * game/mga/Folder_T.cpp:

          Change the name of the children method that returns Folder model
          elements to folders ().

        * game/mga/Model_T.cpp:

          Bug fix where the iterator version of children () was returning
          more elements than expected.

Tue Feb 14 16:27:19 UTC 2012  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/xml/Document.h:
        * game/xml/Document.inl:
        * game/xml/Document.cpp:

          Bug fix where impl () was not returning a pointer to the
          implementation.

          Added doc () method that return a pointer to the underlying
          document.

        * game/xml/Fragment.h:
        * game/xml/Fragment.inl:
        * game/xml/Fragment.cpp:

          Added helper method for setting attribute values using C++
          data types instead of having to convert the values to a string.

Mon Feb 13 20:44:24 UTC 2012  Tanumoy Pati  <tpati at cs dot iupui dot edu>

        * game/mga/addons/Model_Intelligence/Add_Command.h:
        * game/mga/addons/Model_Intelligence/Add_Command.cpp:

          Extended Containment facility to now include References and Sets

Mon Feb 13 16:25:52 UTC 2012  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/FCO.h:
        * game/mga/FCO.cpp:

          Changed the refereced_by parameter from a collection of FCO
          elements instead of a collection of Reference elements.

        * game/mga/interpreters/ExtensionClasses/Attribute_Generator.cpp:
        * game/mga/interpreters/ExtensionClasses/Class_Definition.h:
        * game/mga/interpreters/ExtensionClasses/Class_Definition.cpp:
        * game/mga/interpreters/ExtensionClasses/Containment_Generator.h:
        * game/mga/interpreters/ExtensionClasses/Containment_Generator.cpp:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes.mpc:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Visitor.cpp:

          Added support for handling Proxy elements.

Mon Feb 13 02:39:01 UTC 2012  James H. Hill  <hillj at cs dot iupui dot edu>

        * bin/generate_gme_interpreter.py:

          Added error handling if command-line arguments are missing.

Sat Feb 11 20:40:14 UTC 2012  Tanumoy Pati  <tpati at cs dot iupui dot edu>

        * game/mga/addons/Model_Intelligence/And_Expr.cpp:
        * game/mga/addons/Model_Intelligence/Boolean_Expr.cpp:
        * game/mga/addons/Model_Intelligence/Comparison_Expr.cpp:
        * game/mga/addons/Model_Intelligence/Conjunction_Expr.cpp:
        * game/mga/addons/Model_Intelligence/Containment_Check_Handler.h:
        * game/mga/addons/Model_Intelligence/Containment_Check_Handler.cpp:
        * game/mga/addons/Model_Intelligence/Equal_Expr.cpp:
        * game/mga/addons/Model_Intelligence/Equality_Expr.cpp:
        * game/mga/addons/Model_Intelligence/Expr_Command.cpp:
        * game/mga/addons/Model_Intelligence/Greater_Equal_Expr.cpp:
        * game/mga/addons/Model_Intelligence/Lesser_Equal_Expr.cpp:
        * game/mga/addons/Model_Intelligence/Local_Value_Assignment_Expr.cpp:
        * game/mga/addons/Model_Intelligence/Model_Intelligence.mpc:
        * game/mga/addons/Model_Intelligence/Model_Intelligence_Context.h:
        * game/mga/addons/Model_Intelligence/Model_Intelligence_Impl.cpp:
        * game/mga/addons/Model_Intelligence/Parts_Method_Expr.cpp:
        * game/mga/addons/Model_Intelligence/Reference_Handler.cpp:

          Fixed the commenting styles, tabs and changed the name of
          Containment_Handler_Extended to Containment_Check_Handler

        * game/mga/addons/Model_Intelligence/Containment_Handler_Extended.h:
        * game/mga/addons/Model_Intelligence/Containment_Handler_Extended.cpp:

          Removed these files.

Sat Feb 11 18:58:14 UTC 2012  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/addons/Model_Intelligence/Add_Command.h:
        * game/mga/addons/Model_Intelligence/Add_Command.cpp:
        * game/mga/addons/Model_Intelligence/And_Expr.h:
        * game/mga/addons/Model_Intelligence/And_Expr.cpp:
        * game/mga/addons/Model_Intelligence/Association_Handler.h:
        * game/mga/addons/Model_Intelligence/Association_Handler.cpp:
        * game/mga/addons/Model_Intelligence/Boolean_Expr.h:
        * game/mga/addons/Model_Intelligence/Boolean_Expr.cpp:
        * game/mga/addons/Model_Intelligence/Collection_Expr.h:
        * game/mga/addons/Model_Intelligence/Collection_Expr.cpp:
        * game/mga/addons/Model_Intelligence/Comparison_Expr.h:
        * game/mga/addons/Model_Intelligence/Comparison_Expr.cpp:
        * game/mga/addons/Model_Intelligence/Component.rc:
        * game/mga/addons/Model_Intelligence/Conjunction_Expr.h:
        * game/mga/addons/Model_Intelligence/Conjunction_Expr.cpp:
        * game/mga/addons/Model_Intelligence/Constant_Value_Expr.h:
        * game/mga/addons/Model_Intelligence/Constant_Value_Expr.cpp:
        * game/mga/addons/Model_Intelligence/Containment_Handler.h:
        * game/mga/addons/Model_Intelligence/Containment_Handler.cpp:
        * game/mga/addons/Model_Intelligence/Containment_Handler_Extended.h:
        * game/mga/addons/Model_Intelligence/Containment_Handler_Extended.cpp:
        * game/mga/addons/Model_Intelligence/Equal_Expr.h:
        * game/mga/addons/Model_Intelligence/Equal_Expr.cpp:
        * game/mga/addons/Model_Intelligence/Equality_Expr.h:
        * game/mga/addons/Model_Intelligence/Equality_Expr.cpp:
        * game/mga/addons/Model_Intelligence/Expr_Command.h:
        * game/mga/addons/Model_Intelligence/Expr_Command.cpp:
        * game/mga/addons/Model_Intelligence/GAME_Model_Intelligence.reg:
        * game/mga/addons/Model_Intelligence/GAME_Model_Intelligenced.reg:
        * game/mga/addons/Model_Intelligence/Greater_Equal_Expr.h:
        * game/mga/addons/Model_Intelligence/Greater_Equal_Expr.cpp:
        * game/mga/addons/Model_Intelligence/Lesser_Equal_Expr.h:
        * game/mga/addons/Model_Intelligence/Lesser_Equal_Expr.cpp:
        * game/mga/addons/Model_Intelligence/Local_Value_Assignment_Expr.h:
        * game/mga/addons/Model_Intelligence/Local_Value_Assignment_Expr.cpp:
        * game/mga/addons/Model_Intelligence/Local_Value_Expr.h:
        * game/mga/addons/Model_Intelligence/Local_Value_Expr.cpp:
        * game/mga/addons/Model_Intelligence/Model_Intelligence.idl:
        * game/mga/addons/Model_Intelligence/Model_Intelligence.mpc:
        * game/mga/addons/Model_Intelligence/Model_Intelligence_Context.h:
        * game/mga/addons/Model_Intelligence/Model_Intelligence_Impl.h:
        * game/mga/addons/Model_Intelligence/Model_Intelligence_Impl.cpp:
        * game/mga/addons/Model_Intelligence/Model_Intelligence_Module.cpp:
        * game/mga/addons/Model_Intelligence/OCL_Expr_Parser.h:
        * game/mga/addons/Model_Intelligence/OCL_Expr_Parser.cpp:
        * game/mga/addons/Model_Intelligence/Parts_Method_Expr.h:
        * game/mga/addons/Model_Intelligence/Parts_Method_Expr.cpp:
        * game/mga/addons/Model_Intelligence/Reference_Handler.h:
        * game/mga/addons/Model_Intelligence/Reference_Handler.cpp:
        * game/mga/addons/Model_Intelligence/Resource.h:
        * game/mga/addons/Model_Intelligence/Size_Method_Expr.h:
        * game/mga/addons/Model_Intelligence/Size_Method_Expr.cpp:
        * game/mga/addons/Model_Intelligence/StdAfx.h:
        * game/mga/addons/Model_Intelligence/StdAfx.cpp:
        * game/mga/addons/Model_Intelligence/Value_Expr.h:
        * game/mga/addons/Model_Intelligence/Value_Expr.cpp:

          Added missing svn:keywords and svn:eol-style keywords.

Sat Feb 11 18:53:44 UTC 2012  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/addons/Model_Intelligence/Association_Handler.h:
        * game/mga/addons/Model_Intelligence/Association_Handler.cpp:
        * game/mga/addons/Model_Intelligence/Containment_Handler.h:
        * game/mga/addons/Model_Intelligence/Containment_Handler.cpp:
        * game/mga/addons/Model_Intelligence/Containment_Handler_Extended.h:
        * game/mga/addons/Model_Intelligence/Containment_Handler_Extended.cpp:
        * game/mga/addons/Model_Intelligence/Reference_Handler.h:
        * game/mga/addons/Model_Intelligence/Reference_Handler.cpp:

          Subclassed from GAME::Mga::Dynamic_Event_Handler_Impl.

        * game/mga/addons/Model_Intelligence/Model_Intelligence_Impl.h:
        * game/mga/addons/Model_Intelligence/Model_Intelligence_Impl.cpp:

          Subclassed from GAME::Mga::Static_Event_Handler_Impl.

Sat Feb 11 18:46:32 UTC 2012  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/addons/Model_Intelligence/Reference_Handler.cpp:

          Updated the handler to not act if the reference already refers
          to a FCO. This can happen under a number of situations, such as
          using the GME shortcut to create a reference or another add-on
          creating a reference.

          Added more context to the dialog shown for selecting the references
          target object.

Sat Feb 11 18:00:52 UTC 2012  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/component/Event_Handler_Impl.h:

          Added missing export macro to both Dynamic and Static event
          handler implementations.

          Added missing public keyword to Static event handler implementation.

Sat Feb 11 17:50:18 UTC 2012  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/component/Event_Handler_Impl.h:
        * game/mga/component/Event_Handler_Impl.inl:

          Implemented two new event handler implementation types named
          Static_Event_Handler_Impl and Dynamic_Event_Handler_Impl.

Sat Feb 11 17:33:30 UTC 2012  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/Application.h:
        * game/mga/Application.cpp:

          Removed these files.

Sat Feb 11 17:30:44 UTC 2012  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/addons/Model_Intelligence/Association_Handler.cpp:
        * game/mga/addons/Model_Intelligence/Containment_Handler.cpp:
        * game/mga/addons/Model_Intelligence/Containment_Handler_Extended.cpp:
        * game/mga/addons/Model_Intelligence/Model_Intelligence_Impl.cpp:
        * game/mga/addons/Model_Intelligence/Reference_Handler.cpp:

          Simplified the code by setting the event handlers to destroy on
          closing. This means that when the event sink is closed, it will
          destroy all registered event handlers when they are closed. This
          behavior does not occur if the event handlers are set to not be
          destroyed when closed.

Sat Feb 11 17:09:54 UTC 2012  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/addons/Model_Intelligence/Model_Intelligence_Impl.cpp:
        * game/mga/component/Component.mpc:
        * game/mga/component/Event_Handler.h:
        * game/mga/component/Event_Handler.inl:
        * game/mga/component/Event_Handler.cpp:
        * game/mga/component/Event_Handler_Impl.h:
        * game/mga/component/Event_Handler_Impl.inl:
        * game/mga/component/Event_Sink.h:
        * game/mga/component/Event_Sink.inl:
        * game/mga/component/Event_Sink.cpp:

          Changed the class Event_Handler_Interface to Event_Handler.

          Changed the member variable from event_handler_ to sink_ to
          reflect the class name change from Event_Handler to Event_Sink.

        * game/mga/component/Event_Handler_Interface.h:

          Removed this file.

Sat Feb 11 16:39:24 UTC 2012  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/component/Event_Sink_T.h:
        * game/mga/component/Event_Sink_T.inl:
        * game/mga/component/Event_Sink_T.cpp:

          Removed these files.

Sat Feb 11 16:35:27 UTC 2012  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/addons/Model_Intelligence/Model_Intelligence.mpc:
        * game/mga/component/Addon_Impl_T.h:
        * game/mga/component/Addon_Impl_T.cpp:
        * game/mga/component/Component.mpc:
        * game/mga/component/Event_Handler_Impl.h:
        * game/mga/component/Event_Handler_Impl.inl:
        * game/mga/component/Event_Handler_Interface.h:
        * game/mga/component/Event_Sink.h:
        * game/mga/component/Event_Sink.inl:
        * game/mga/component/Event_Sink.cpp:

          Changed the file and class name to Event_Sink since it is a
          more accurate representation of its wrapper class.

        * game/mga/component/Event_Handler.h:
        * game/mga/component/Event_Handler.inl:
        * game/mga/component/Event_Handler.cpp:

          Removed these files.

Sat Feb 11 00:19:30 UTC 2012  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/component/Addon_Impl_T.cpp:
        * game/mga/component/Event_Handler.h:
        * game/mga/component/Event_Handler.inl:
        * game/mga/component/Event_Handler.cpp:

          The event handler now closes all implementations when it
          is closed.

Thu Feb  9 02:07:49 UTC 2012  Tanumoy Pati  <tpati at cs dot iupui dot edu>

        * game/mga/Collection_T.cpp:
        * game/mga/GME_fwd.h:
        * game/mga/Impl_Factory.h:
        * game/mga/Impl_Factory.cpp:
        * game/mga/MetaAspect.h:
        * game/mga/MetaAspect.cpp:
        * game/mga/MetaBase.h:
        * game/mga/MetaBase.cpp:
        * game/mga/MetaConnection.h:
        * game/mga/MetaConnection.inl:
        * game/mga/MetaConnection.cpp:
        * game/mga/MetaConstraint.h:
        * game/mga/MetaConstraint.inl:
        * game/mga/MetaConstraint.cpp:
        * game/mga/MetaFCO.h:
        * game/mga/MetaFCO.cpp:
        * game/mga/MetaModel.h:
        * game/mga/MetaModel.cpp:
        * game/mga/MetaPart.h:
        * game/mga/MetaPart.cpp:
        * game/mga/MetaRole.h:
        * game/mga/MetaRole.cpp:
        * game/mga/Mga.mpc:

          Added the MetaConstraint header, source and inlines files and
          extended other files by adding more functionality.

        * game/mga/addons/Model_Intelligence/Add_Command.h:
        * game/mga/addons/Model_Intelligence/Add_Command.cpp:
        * game/mga/addons/Model_Intelligence/And_Expr.h:
        * game/mga/addons/Model_Intelligence/And_Expr.cpp:
        * game/mga/addons/Model_Intelligence/Association_Handler.h:
        * game/mga/addons/Model_Intelligence/Association_Handler.cpp:
        * game/mga/addons/Model_Intelligence/Boolean_Expr.h:
        * game/mga/addons/Model_Intelligence/Boolean_Expr.cpp:
        * game/mga/addons/Model_Intelligence/Collection_Expr.h:
        * game/mga/addons/Model_Intelligence/Collection_Expr.cpp:
        * game/mga/addons/Model_Intelligence/Comparison_Expr.h:
        * game/mga/addons/Model_Intelligence/Comparison_Expr.cpp:
        * game/mga/addons/Model_Intelligence/Conjunction_Expr.h:
        * game/mga/addons/Model_Intelligence/Conjunction_Expr.cpp:
        * game/mga/addons/Model_Intelligence/Constant_Value_Expr.h:
        * game/mga/addons/Model_Intelligence/Constant_Value_Expr.cpp:
        * game/mga/addons/Model_Intelligence/Containment_Handler.h:
        * game/mga/addons/Model_Intelligence/Containment_Handler.cpp:
        * game/mga/addons/Model_Intelligence/Containment_Handler_Extended.h:
        * game/mga/addons/Model_Intelligence/Containment_Handler_Extended.cpp:
        * game/mga/addons/Model_Intelligence/Equal_Expr.h:
        * game/mga/addons/Model_Intelligence/Equal_Expr.cpp:
        * game/mga/addons/Model_Intelligence/Equality_Expr.h:
        * game/mga/addons/Model_Intelligence/Equality_Expr.cpp:
        * game/mga/addons/Model_Intelligence/Expr_Command.h:
        * game/mga/addons/Model_Intelligence/Expr_Command.cpp:
        * game/mga/addons/Model_Intelligence/Greater_Equal_Expr.h:
        * game/mga/addons/Model_Intelligence/Greater_Equal_Expr.cpp:
        * game/mga/addons/Model_Intelligence/Lesser_Equal_Expr.h:
        * game/mga/addons/Model_Intelligence/Lesser_Equal_Expr.cpp:
        * game/mga/addons/Model_Intelligence/Local_Value_Assignment_Expr.h:
        * game/mga/addons/Model_Intelligence/Local_Value_Assignment_Expr.cpp:
        * game/mga/addons/Model_Intelligence/Local_Value_Expr.h:
        * game/mga/addons/Model_Intelligence/Local_Value_Expr.cpp:
        * game/mga/addons/Model_Intelligence/Model_Intelligence.mpc:
        * game/mga/addons/Model_Intelligence/Model_Intelligence_Context.h:
        * game/mga/addons/Model_Intelligence/Model_Intelligence_Impl.cpp:
        * game/mga/addons/Model_Intelligence/OCL_Expr_Parser.h:
        * game/mga/addons/Model_Intelligence/OCL_Expr_Parser.cpp:
        * game/mga/addons/Model_Intelligence/Parts_Method_Expr.h:
        * game/mga/addons/Model_Intelligence/Parts_Method_Expr.cpp:
        * game/mga/addons/Model_Intelligence/Size_Method_Expr.h:
        * game/mga/addons/Model_Intelligence/Size_Method_Expr.cpp:
        * game/mga/addons/Model_Intelligence/Value_Expr.h:
        * game/mga/addons/Model_Intelligence/Value_Expr.cpp:

          Modified the exisiting model intelligence files and added
          OCL expression parsing and expression evaluation files, so
          as to provide support for automated containment in models.

Mon Feb  6 18:45:07 UTC 2012  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/FCO.h:
        * game/mga/FCO.cpp:

          Implemented iterator version of in_sets ().

        * game/mga/Iterator_T.cpp:

          Bug fix where item () method did not properly narrow the object
          to the iterator's type.

        * game/mga/decorator/Decorator.mpc:
        * game/mga/decorator/Decorator_Impl.h:
        * game/mga/decorator/Decorator_Impl.inl:
        * game/mga/decorator/Decorator_T.h:
        * game/mga/decorator/Decorator_T.inl:
        * game/mga/decorator/Decorator_T.cpp:
        * game/mga/decorator/FCO_Decorator.h:
        * game/mga/decorator/FCO_Decorator.inl:
        * game/mga/decorator/FCO_Decorator.cpp:
        * game/mga/decorator/Reference_Decorator.h:
        * game/mga/decorator/Reference_Decorator.inl:
        * game/mga/decorator/Reference_Decorator.cpp:
        * game/mga/decorator/stdafx.h:

          Flushed out more of the decorator architecture for different
          element types.

Fri Feb  3 04:13:16 UTC 2012  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/Collection_T.cpp:
        * game/mga/Folder.h:
        * game/mga/Folder.cpp:
        * game/mga/Folder_T.cpp:
        * game/mga/Iterator_T.h:
        * game/mga/Iterator_T.inl:
        * game/mga/Iterator_T.cpp:
        * game/mga/Mga.mpc:
        * game/mga/Model.h:
        * game/mga/Model_T.cpp:
        * game/mga/Smart_Ptr.h:

          Implemented input iterator.

        * tests/mga/Iterator_Test.cpp:
        * tests/mga/Iterator_Test.mpc:
        * tests/mga/stdafx.h:
        * tests/mga/stdafx.cpp:

          Simple compilation test for Iterator object.

Thu Feb  2 01:06:00 UTC 2012  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/Errors.h:
        * game/mga/Errors.inl:
        * game/mga/Errors.cpp:
        * game/mga/Exception.h:
        * game/mga/Exception.inl:
        * game/mga/Exception.cpp:
        * game/mga/Mga.mpc:

          Added error message to the exception. The Failed_Result exception
          now translates GME error codes to exception messages.

        * game/mga/upgrade/Model_Upgrade.cpp:

          The catch statement prints the exception message.

Sun Jan 29 19:10:47 UTC 2012  James H. Hill  <hillj at cs dot iupui dot edu>

        * MPC/config/gme_upgrade.mpb:

          Fixed the 'after' attribute.

Sat Jan 28 22:48:49 UTC 2012  James H. Hill  <hillj at cs dot iupui dot edu>

        * MPC/config/gme_upgrade.mpb:

          Added 'after' attribute.

Wed Jan 25 22:57:01 UTC 2012  James H. Hill  <hillj at cs dot iupui dot edu>

        * MPC/config/gme_upgrade.mpb:

          Updated custom definition with the output_option attribute.

Wed Jan 25 22:55:31 UTC 2012  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/upgrade/Model_Upgrade.h:
        * game/mga/upgrade/Model_Upgrade.cpp:

          Added -o option for specifying the output filename.

Wed Jan 25 17:19:45 UTC 2012  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/upgrade/Model_Upgrade.cpp:

          Added debug messages.

Wed Jan  4 21:31:09 UTC 2012  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/component/Event_Handler.h:
        * game/mga/component/Event_Handler.inl:
        * game/mga/component/Event_Handler.cpp:

          Fixed compile warnings.

Sun Jan  1 03:47:09 UTC 2012  James H. Hill  <hillj at cs dot iupui dot edu>

        * GAME.mwc:

          Bug fix where CCF was not excluded from the wix builds.

        * game/mga/Refcountable.inl:

          Added missing GAME_INLINE

        * game/mga/addons/Model_Intelligence/Model_Intelligence.mpc:

          Removed the gme_paradigms specification.

Tue Dec  6 14:58:11 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/upgrade/Model_Upgrade.cpp:

          Fixed return code from main function so that it if the
          execution failed, it would register as a failed execution.

Mon Dec  5 23:28:37 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * GAME.mwc:

          Removed the test directory from the workspace since it was
          breaking the CoSMIC build.

Mon Dec  5 20:14:32 UTC 2011  Tanumoy Pati  <tpati at cs dot iupui dot edu>

        * bin/generate_gme_addon.py:

          Added the Addon skeleton generator script and updated changelog.

Thu Dec  1 22:26:59 UTC 2011  Tanumoy Pati  <tpati at cs dot iupui dot edu>

        * game/mga/addons/Model_Intelligence/GAME_Model_Intelligence.reg:
        * game/mga/addons/Model_Intelligence/GAME_Model_Intelligenced.reg:
        * game/mga/addons/Model_Intelligence/Model_Intelligence.idl:
        * game/mga/addons/Model_Intelligence/Model_Intelligence.mpc:
        * game/mga/addons/Model_Intelligence/Model_Intelligence_Impl.h:
        * game/mga/addons/Model_Intelligence/Model_Intelligence_Impl.cpp:
        * game/mga/addons/Model_Intelligence/Model_Intelligence_Module.cpp:
        * game/mga/addons/Model_Intelligence/Reference_Handler.h:
        * game/mga/addons/Model_Intelligence/Reference_Handler.cpp:
        * game/mga/addons/Model_Intelligence/Resource.h:

          Updated Model Intelligence addon.

Thu Dec  1 18:50:59 UTC 2011  Tanumoy Pati  <tpati at cs dot iupui dot edu>

        * game/mga/addons/Model_Intelligence/Model_Intelligence.mpc:

          Updated Model_Intelligence.mpc file.

Wed Nov 30 23:48:51 UTC 2011  Tanumoy Pati  <tpati at cs dot iupui dot edu>

          Removed comments from the Model_Intelligence project.

Wed Nov 30 23:41:51 UTC 2011  Tanumoy Pati  <tpati at cs dot iupui dot edu>

        * game/mga/component/Event_Handler.h:
        * game/mga/component/Event_Handler.cpp:

          Updated Event_Handler to handle meta-metatypes.

Tue Nov 29 19:42:43 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * MPC/config/game_extension_classes_autogen.mpb:

          Changed the command value.

        * game/mga/interpret/Interpret_App.cpp:

          Updated the --help documentation.

Tue Nov 29 19:20:29 UTC 2011  Tanumoy Pati  <tpati at cs dot iupui dot edu>

        * ChangeLog

          Fixed indentation in changelog file.

Tue Nov 29 17:37:14 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * tests/mga/Visitor/Visitor_Test_Impl.h:
        * tests/mga/Visitor/Visitor_Test_Impl.cpp:
        * tests/mga/Visitor/Visitor_Test_Module.cpp:

          Fixed compilation errors.

Sun Nov 27 05:32:26 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/plugins/Template_Engine/parser/Property_Configuration.hpp:
        * tests/mga/plugins/Template_Engine/Configuration_File_Test/Base_Configuration_Test.config:
        * tests/mga/plugins/Template_Engine/Configuration_File_Test/Configuration_File.cpp:

          Added support for configuration inheritence.

Fri Nov 25 17:46:48 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * tests/Test_Configuration.hpp:

          Remove setting the log_format since it does not impact the
          reporting format.

        * tests/mga/plugins/Template_Engine/Configuration_File_Test/run_test.pl:

          Simplified the test execution.

Fri Nov 25 02:30:44 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * tests/Test_Configuration.hpp:
        * tests/logs:
        * tests/mga/plugins/Template_Engine/Configuration_File_Test/Configuration_File.cpp:

          Update the test configuration so that the unit test automatically
          generates a log file based on BOOST_TEST_MODULE.

Thu Nov 24 21:35:05 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * tests/mga/plugins/Template_Engine/Configuration_File_Test:

          Rename of the directory below.

        * tests/mga/plugins/Template_Engine/Configuration_File:
        * tests/mga/plugins/Template_Engine/Configuration_File/Configuration_File.mpc:
        * tests/mga/plugins/Template_Engine/Configuration_File/Configuration_File.cpp:
        * tests/mga/plugins/Template_Engine/Configuration_File/Multiple_Configuration.config:
        * tests/mga/plugins/Template_Engine/Configuration_File/Single_Configuration.config:
        * tests/mga/plugins/Template_Engine/Configuration_File/run_test.pl:

          Removed these files.

Thu Nov 24 21:32:21 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * MPC/config/game_test.mpb:
        * tests/Test_Configuration.hpp:
        * tests/mga/plugins/Template_Engine/Configuration_File/Configuration_File.cpp:
        * tests/mga/plugins/Template_Engine/Configuration_File/Configuration_File.mpc:
        * tests/mga/plugins/Template_Engine/Configuration_File/run_test.pl:

          Updated test to use Boost.Test framework.

Wed Nov 23 19:56:20 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/plugins/Template_Engine/parser/Property_Configuration.hpp:
        * game/mga/plugins/Template_Engine/parser/Property_Name.hpp:
        * tests/mga/plugins/Template_Engine/Configuration_File/Configuration_File.cpp:
        * tests/mga/plugins/Template_Engine/Configuration_File/Multiple_Configuration.config:

          Bug fix where the template engine failed to parse configuration
          files that defined more than one configuraiton.

Wed Nov 23 18:54:59 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/plugins/Template_Engine/Template_Engine.h:

          Added file to the ignore list.

        * game/mga/plugins/Template_Engine/Template_Engine_Impl.cpp:
        * game/mga/plugins/Template_Engine/Windows_Registry.h:
        * game/mga/plugins/Template_Engine/Windows_Registry.cpp:

          The interpreter now shows only interpreters and plugins that
          have been registerd with the target paradigm.

Wed Nov 23 16:09:35 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * GAME.mwc:
        * MPC/config/requires_test.mpb:

          Based project for adding the feature named "test".

        * game/mga/plugins:
        * game/mga/plugins/Template_Engine:
        * game/mga/plugins/Template_Engine/Configuration_File.h:
        * game/mga/plugins/Template_Engine/Configuration_File.cpp:
        * game/mga/plugins/Template_Engine/GAME_Template_Engine.reg:
        * game/mga/plugins/Template_Engine/GAME_Template_Engined.reg:
        * game/mga/plugins/Template_Engine/Interpreter_List.h:
        * game/mga/plugins/Template_Engine/Model_Interpreter.h:
        * game/mga/plugins/Template_Engine/Model_Interpreter.inl:
        * game/mga/plugins/Template_Engine/Model_Interpreter.cpp:
        * game/mga/plugins/Template_Engine/Property_Locator.h:
        * game/mga/plugins/Template_Engine/Property_Locator.inl:
        * game/mga/plugins/Template_Engine/Property_Locator.cpp:
        * game/mga/plugins/Template_Engine/Property_Replacer_Guard.h:
        * game/mga/plugins/Template_Engine/Property_Replacer_Guard.cpp:
        * game/mga/plugins/Template_Engine/Template_Engine.h:
        * game/mga/plugins/Template_Engine/Template_Engine.aps:
        * game/mga/plugins/Template_Engine/Template_Engine.ico:
        * game/mga/plugins/Template_Engine/Template_Engine.idl:
        * game/mga/plugins/Template_Engine/Template_Engine.mpc:
        * game/mga/plugins/Template_Engine/Template_Engine.rc:
        * game/mga/plugins/Template_Engine/Template_Engine_Dialog.h:
        * game/mga/plugins/Template_Engine/Template_Engine_Dialog.inl:
        * game/mga/plugins/Template_Engine/Template_Engine_Dialog.cpp:
        * game/mga/plugins/Template_Engine/Template_Engine_Impl.h:
        * game/mga/plugins/Template_Engine/Template_Engine_Impl.cpp:
        * game/mga/plugins/Template_Engine/Template_Engine_Module.cpp:
        * game/mga/plugins/Template_Engine/Template_Engine_export.h:
        * game/mga/plugins/Template_Engine/Windows_Registry.h:
        * game/mga/plugins/Template_Engine/Windows_Registry.inl:
        * game/mga/plugins/Template_Engine/Windows_Registry.cpp:
        * game/mga/plugins/Template_Engine/parser:
        * game/mga/plugins/Template_Engine/parser/Property_Configuration.hpp:
        * game/mga/plugins/Template_Engine/parser/Property_Expander.hpp:
        * game/mga/plugins/Template_Engine/parser/Property_Listing.hpp:
        * game/mga/plugins/Template_Engine/parser/Property_Map.h:
        * game/mga/plugins/Template_Engine/parser/Property_Map.inl:
        * game/mga/plugins/Template_Engine/parser/Property_Map.cpp:
        * game/mga/plugins/Template_Engine/parser/Property_Name.hpp:
        * game/mga/plugins/Template_Engine/parser/Property_Tag.hpp:
        * game/mga/plugins/Template_Engine/parser/Property_Value_Setter.hpp:
        * game/mga/plugins/Template_Engine/resource.h:
        * game/mga/plugins/Template_Engine/stdafx.h:
        * game/mga/plugins/Template_Engine/stdafx.cpp:

          Initial port of the Template Engine plugin from CUTS to
          the GAME repo.

        * tests/ExtensionClasses/RootFolder:

          Updated its ignore list.

        * tests/mga/Visitor/Visitor_Test.mpc:

          Fixed errors in base project specification.

        * tests/mga/plugins:
        * tests/mga/plugins/Template_Engine:
        * tests/mga/plugins/Template_Engine/Configuration_File:
        * tests/mga/plugins/Template_Engine/Configuration_File/Configuration_File.mpc:
        * tests/mga/plugins/Template_Engine/Configuration_File/Configuration_File.cpp:
        * tests/mga/plugins/Template_Engine/Configuration_File/Multiple_Configuration.config:
        * tests/mga/plugins/Template_Engine/Configuration_File/Single_Configuration.config:
        * tests/mga/plugins/Template_Engine/Parser_Test:
        * tests/mga/plugins/Template_Engine/Parser_Test/Parser_Test.mpc:
        * tests/mga/plugins/Template_Engine/Parser_Test/Parser_Test.cpp:
        * tests/mga/plugins/Template_Engine/Picml_Test:
        * tests/mga/plugins/Template_Engine/Picml_Test/Picml_Test.tpf:

          Different test for the Template Engine plugin.

Wed Nov  2 21:09:11 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * MPC/config/gme_upgrade.mpb:

          Changed the name of the custom definition.

Wed Nov  2 19:53:49 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * MPC/config/gme_upgrade.mpb:

          Base project for making the upgrade process part of the
          build process.

Wed Nov  2 19:51:22 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/upgrade:
        * game/mga/upgrade/Model_Upgrade.h:
        * game/mga/upgrade/Model_Upgrade.cpp:
        * game/mga/upgrade/stdafx.h:
        * game/mga/upgrade/stdafx.cpp:
        * game/mga/upgrade/upgrade.cpp:
        * game/mga/upgrade/upgrade.mpc:

          Utility for upgrading a model to its latest version of
          a paradigm.

Wed Nov  2 19:44:38 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * tests/ExtensionClasses/RootFolder/run_test.pl:

          Script for running the test.

Wed Nov  2 19:11:18 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/component/ComponentEx_Impl_T.cpp:

          Disabled auto attachment to the console.

        * game/mga/interpret/Interpret_App.cpp:

          Fixed the help generation.

        * tests/run_test_all.py:

          Update the print statements to Python3.

Wed Nov  2 04:30:40 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * tests/run_test_all.py:

          Python script that traverses all subdirectories in this folder
          and executes the run_test.pl scripts.

Wed Nov  2 04:26:24 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/interpret:
        * game/mga/interpret/Interpret_App.h:
        * game/mga/interpret/Interpret_App.inl:
        * game/mga/interpret/Interpret_App.cpp:
        * game/mga/interpret/Interpret_App_Options.h:
        * game/mga/interpret/Interpret_App_Options.inl:
        * game/mga/interpret/Interpret_App_Options.cpp:
        * game/mga/interpret/interpret.cpp:
        * game/mga/interpret/interpret.mpc:

          Relocation of the application that run a GME interpreter
          on a model without actually opening GME.

        * game/automation:
        * game/automation/Automation_App.h:
        * game/automation/Automation_App.inl:
        * game/automation/Automation_App.cpp:
        * game/automation/Automation_App_Options.h:
        * game/automation/Automation_App_Options.inl:
        * game/automation/Automation_App_Options.cpp:
        * game/automation/Parameter_Parser.h:
        * game/automation/Parameter_Parser.cpp:
        * game/automation/automation.cpp:
        * game/automation/automation.mpc:
        * game/automation/stdafx.h:
        * game/automation/stdafx.cpp:
        * game/mga/interpret/Automation_App.h:
        * game/mga/interpret/Automation_App.inl:
        * game/mga/interpret/Automation_App.cpp:
        * game/mga/interpret/Automation_App_Options.h:
        * game/mga/interpret/Automation_App_Options.inl:
        * game/mga/interpret/Automation_App_Options.cpp:
        * game/mga/interpret/automation.mpc:
        * game/mga/interpret/automation.cpp:

          Removed these files.

Sat Oct 15 16:18:57 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * MPC/config/codegenerationkit.mpb:

          Added ccf_root as a base class.

Fri Oct 14 19:34:44 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * MPC/config/codegenerationkit.mpb:

          Update the base project to define the include path for
          the Utility project.

        * contrib:

          Added Utility to the contributions.

Fri Oct 14 18:53:33 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * GAME.mwc:

          Update the workspace to exclude the CodeGenerationKit when using
          the Wix project type.

Fri Oct 14 18:28:12 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * GAME.mwc:

          Updated to work with relocation of the codegeneratorkit base
          project.

        * MPC/config/codegenerationkit.mpb:

          Removed this file.

Fri Oct 14 18:00:15 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * MPC/config/game.mpb:
        * MPC/config/game_common.mpb:

          Enabled versioned_namespace support.

        * MPC/config/ccf_root.mpb:
        * contrib:

          Include CCF as a contribution project.

Fri Jul 29 14:08:35 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/xme/Library.h:
        * game/xme/Library.cpp:

          Implemented the attached_libraries () method, which returns the
          set of libraries attached to the current library.

Sat Jul 16 09:56:07 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/component/ComponentEx_Impl_T.cpp:

          Fixed warning for unused variables.

Wed Jul  6 15:03:56 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/component/Console_Service.cpp:

          Bug fix where initializing the console service more than once
          resulted in a runtime failure.

        * game/xme/Object.h:
        * game/xme/Object.cpp:

          Implemented the path () method, which returns the object's
          path in the project.

Sun Jun 26 04:30:58 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/manip/copy.cpp:

          Bug fix where copying references were NIL under certain
          circumstances.

        * game/mga/component/Component.mpc:
        * game/mga/component/ComponentEx_Impl_T.cpp:
        * game/mga/component/Console_Service.h:
        * game/mga/component/Console_Service.inl:
        * game/mga/component/Console_Service.cpp:
        * game/mga/component/Event_Handler.cpp:
        * game/mga/component/stdafx.h:

          Implemented a console service, which allows components to write
          messages to the GME console.

        * game/mga/component/BE_export.h:

          Removed this file.

Tue Jun 14 21:20:31 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * Utils/GAME/game/mga/Object.h:
        * Utils/GAME/game/mga/Object.inl:

          Implemented the is_mutable () method for determine if an
          object can be changed.

Tue Jun  7 15:55:04 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/component/Event_Handler.cpp:

          Temp removal of the debug messages.

Tue Jun  7 15:46:48 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/component/Event_Handler.cpp:

          Added a new catch () statement.

Tue Jun  7 00:41:10 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/decorator/MgaDecorator.h:

          Removed this file.

Fri May 20 05:49:23 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/Smart_Ptr.inl:

          Bug fix where if either implementation was nil, then the application
          would crash.

        * game/mga/decorator/MgaDecorator.h:

          Updated to GME 10.8.18

Fri May 13 00:39:03 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/decorator/Decorator_T.inl:

          Reset the state variables in the initialize method.

        * game/mga/decorator/MgaDecorator.h:

          Updated to GME 10.8.18

Sat Apr  9 14:19:08 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * performance-tests/addon/README:

          Updated the documentation.

Sat Apr  9 14:13:07 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * performance-tests/addon/Client_App.cpp:

          Added more comments.

Sat Apr  9 14:12:01 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * performance-tests/addon/Client_App.cpp:

          Misspelled the OBJEVENT_CREATED test.

Sat Apr  9 14:11:06 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * performance-tests/addon/README:

          Updated the documentation.

Sat Apr  9 13:51:44 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/component/Event_Handler.cpp:

          Short circuited the for-loop that dispatches the global event
          to all event handlers.

        * performance-tests/addon/Client_App.cpp:

          Updated the documentation.

          Added an error message if the specified test is not found.

Sat Apr  9 03:28:42 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * performance-tests/addon/Client_App.h:
        * performance-tests/addon/Client_App.cpp:
        * performance-tests/addon/README:
        * performance-tests/addon/StdAfx.h:
        * performance-tests/addon/StdAfx.cpp:
        * performance-tests/addon/client.mpc:
        * performance-tests/addon/client.cpp:

          Implemented the performance test client for benchmarking an
          add-on. The current version only handles OBJEVENT_CREATED.

Sat Apr  9 03:12:05 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/component/Addon.h:
        * game/mga/component/Component.mpc:

          Implemented macro for declaring a GAME addon.

        * game/mga/component/Event_Handler.h:
        * game/mga/component/Event_Handler.cpp:

          Short-circuited many of the comparisons optimize the handler.

          Removed all std::bitmask code to reduce overhead.

        * performance-tests/addon/game/GAME_Null_Addon.reg:
        * performance-tests/addon/game/GAME_Null_Addond.reg:
        * performance-tests/addon/game/Null_Addon.mpc:
        * performance-tests/addon/game/Null_Addon_Impl.h:
        * performance-tests/addon/game/Null_Addon_Impl.cpp:
        * performance-tests/addon/game/StdAfx.h:

          Bug fix where the add-on failed to load.

Fri Apr  8 19:55:45 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * performance-tests:
        * performance-tests/Performance_Tests.mwc:

          Directory for performance tests.

        * performance-tests/addon:
        * performance-tests/addon/game:
        * performance-tests/addon/game/GAME_Null_Addon.reg:
        * performance-tests/addon/game/GAME_Null_Addond.reg:
        * performance-tests/addon/game/Null_Addon.idl:
        * performance-tests/addon/game/Null_Addon.mpc:
        * performance-tests/addon/game/Null_Addon.cpp:
        * performance-tests/addon/game/Null_Addon_Impl.h:
        * performance-tests/addon/game/Null_Addon_Impl.cpp:
        * performance-tests/addon/game/Null_Addon_Module.cpp:
        * performance-tests/addon/game/StdAfx.h:
        * performance-tests/addon/game/StdAfx.cpp:

          Implementation of a null (or no-op) addon for benchmarking
          the overhead of GAME.

Thu Apr  7 23:39:44 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/manip/copy.h:
        * game/manip/copy.cpp:

          Update the copy configuration so the client has more control
          over how elements are copied between models.

        * game/mga/decorator/MgaDecorator.h:

          Re-generated the decorator header.

Thu Apr  7 15:31:05 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/manip/copy.h:
        * game/manip/copy.cpp:

          Bug fix where resolving references failed if the target object was
          not involved in the original copy. This was resolved by failing back
          to the object referring to the original referenced object.

        * game/mga/Reference.h:

          Bug fix where object_type_t was incorrectly specialized.

        * game/mga/Smart_Ptr.inl:

          Bug fix where operator < and operator > where implemented incorrectly.
          Instead, we they are now implemented in terms of the id () method.

Mon Apr  4 21:35:40 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/MetaBase.inl:

          Re-implemented the is_equal_to () method.

        * game/mga/MetaFolder.h:
        * game/mga/MetaFolder.cpp:

          Implemented the find_folders () method.

        * game/mga/Project.h:
        * game/mga/Project.cpp:

          Changed the return type for root_folder () to RootFolder.

        * game/mga/Smart_Ptr.h:
        * game/mga/Smart_Ptr.inl:
        * game/mga/Smart_Ptr.cpp:

          Moved the _narrow () methods to Smart_Ptr_Base class. This
          will allow those methods to be used in all derived classes.

        * game/mga/component/Event_Handler.h:
        * game/mga/component/Event_Handler.cpp:

          Implemented a method for registering/unregistering global
          event handlers.

Tue Mar 22 20:09:59 UTC 2011  Tanumoy Pati  <tpati at cs dot iupui dot edu>

        * bin/generate_gme_interpreter.py:

          Updated the interpreter skeleton generator script

Mon Mar 21 15:37:49 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * examples/Library/interpreters:
        * examples/Library/interpreters/VisitPatron:
        * examples/Library/interpreters/VisitPatron/Component.rc:
        * examples/Library/interpreters/VisitPatron/GAME_VisitPatronComponent.reg:
        * examples/Library/interpreters/VisitPatron/GAME_VisitPatronComponentd.reg:
        * examples/Library/interpreters/VisitPatron/Patron_Only_Visitor.h:
        * examples/Library/interpreters/VisitPatron/Patron_Only_Visitor.cpp:
        * examples/Library/interpreters/VisitPatron/Resource.h:
        * examples/Library/interpreters/VisitPatron/StdAfx.h:
        * examples/Library/interpreters/VisitPatron/StdAfx.cpp:
        * examples/Library/interpreters/VisitPatron/VisitPatron.mpc:
        * examples/Library/interpreters/VisitPatron/VisitPatron.mwc:
        * examples/Library/interpreters/VisitPatron/VisitPatron_Component.h:
        * examples/Library/interpreters/VisitPatron/VisitPatron_Component.idl:
        * examples/Library/interpreters/VisitPatron/VisitPatron_Component_Impl.h:
        * examples/Library/interpreters/VisitPatron/VisitPatron_Component_Impl.cpp:
        * examples/Library/interpreters/VisitPatron/VisitPatron_Component_Module.cpp:

          An example interpreter for this paradigm.

        * examples/Library/models:
        * examples/Library/models/SimpleModel.xme:

          An example model for this paradigm.

Mon Mar 21 15:36:05 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * examples/Library/Library.xmp:
        * examples/Library/ext/Library/Library/Book.h:
        * examples/Library/ext/Library/Library/Book.cpp:
        * examples/Library/ext/Library/Library/Borrow.h:
        * examples/Library/ext/Library/Library/Borrow.cpp:
        * examples/Library/ext/Library/Library/Library.h:
        * examples/Library/ext/Library/Library/Library.cpp:
        * examples/Library/ext/Library/Library/Patron.h:
        * examples/Library/ext/Library/Library/Patron.cpp:

          Re-generated the paradigms and extension classes.

Mon Mar 21 15:32:01 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * MPC/config/game_extension_classes.mpb:

          The default location for the binaries is now GAME's library
          directory.

        * game/mga/Atom.h:
        * game/mga/Connection.h:
        * game/mga/Folder.h:
        * game/mga/Model.h:
        * game/mga/Model_T.cpp:
        * game/mga/Object.h:
        * game/mga/Reference.h:
        * game/mga/Set.h:

          Implemented the object_type_t trait class that is used to get
          the an object's GME OBJTYPE_* at compile time.

        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Visitor.cpp:

          Bug fix where certain include statements were missing the root
          folder directory. This prevent extension classes from building
          correctly because the files in question could not be located.

Thu Mar 10 20:48:03 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/Atom.h:
        * game/mga/Atom.inl:
        * game/mga/Connection.h:
        * game/mga/Connection.inl:
        * game/mga/FCO.h:
        * game/mga/FCO.inl:
        * game/mga/Folder.h:
        * game/mga/Folder.inl:
        * game/mga/Model.h:
        * game/mga/Model.inl:
        * game/mga/Object.h:
        * game/mga/Object.inl:
        * game/mga/Object.cpp:
        * game/mga/Reference.h:
        * game/mga/Reference.inl:
        * game/mga/RootFolder.h:
        * game/mga/Set.h:
        * game/mga/Set.inl:

          All implementations are subclassed using virtual inheritance. This
          required updating the constructors for all the classes.

        * game/mga/interpreters/ExtensionClasses/Attribute_Generator.h:
        * game/mga/interpreters/ExtensionClasses/Attribute_Generator.cpp:
        * game/mga/interpreters/ExtensionClasses/Base_Class_Locator.h:
        * game/mga/interpreters/ExtensionClasses/Base_Class_Locator.cpp:
        * game/mga/interpreters/ExtensionClasses/Connection_Point_Generator.h:
        * game/mga/interpreters/ExtensionClasses/Connection_Point_Generator.cpp:
        * game/mga/interpreters/ExtensionClasses/Containment_Generator.h:
        * game/mga/interpreters/ExtensionClasses/Containment_Generator.cpp:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Component_Impl.cpp:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Visitor.cpp:
        * game/mga/interpreters/ExtensionClasses/InConnection_Generator.h:
        * game/mga/interpreters/ExtensionClasses/InConnection_Generator.cpp:

          Fixed several bugs in the auto-generated extension classes.

Thu Mar 10 20:25:06 UTC 2011  Tanumoy Pati  <tpati at cs dot iupui dot edu>

        * bin/generate_gme_interpreter.py:

          Placed the interpreter skeleton generator script in GAME

Wed Mar  9 21:56:52 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/utils/Point.cpp:

          Bug fix where the point was not being returned from get_position ().

Wed Mar  9 18:07:35 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/dialogs/Selection_List_Dialog.cpp:

          Bug fix where storing the selected element resulted in a
          runtime error when the destination smart pointer did not
          contain an implementation.

Tue Mar  8 15:58:55 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * examples/Library/ext:
        * examples/Library/ext/Library:

          Updated the svn:ignore property.

Tue Mar  8 15:56:31 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * examples:
        * examples/Library:
        * examples/Library/Library.xme:

          Library example.

        * examples/Library/ext:
        * examples/Library/ext/Library:
        * examples/Library/ext/Library/Impl_Factory.h:
        * examples/Library/ext/Library/Impl_Factory.cpp:
        * examples/Library/ext/Library/Init.cpp:
        * examples/Library/ext/Library/Library:
        * examples/Library/ext/Library/Library/Book.h:
        * examples/Library/ext/Library/Library/Book.cpp:
        * examples/Library/ext/Library/Library/Borrow.h:
        * examples/Library/ext/Library/Library/Borrow.cpp:
        * examples/Library/ext/Library/Library/Library.h:
        * examples/Library/ext/Library/Library/Library.cpp:
        * examples/Library/ext/Library/Library/Patron.h:
        * examples/Library/ext/Library/Library/Patron.cpp:
        * examples/Library/ext/Library/Library_fwd.h:
        * examples/Library/ext/Library/Visitor.h:
        * examples/Library/ext/Library/Visitor.cpp:
        * examples/Library/ext/Library/stdafx.h:
        * examples/Library/ext/Library/stdafx.cpp:
        * examples/Library/ext/Library_GAME_Mga.mpc:
        * examples/Library/ext/Library_GAME_Mga.mwc:

          Extension classes for the library example.

Tue Mar  8 15:55:28 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/interpreters/ExtensionClasses/Connection_Point_Generator.h:
        * game/mga/interpreters/ExtensionClasses/Connection_Point_Generator.cpp:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes.mpc:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Visitor.cpp:

          Fixed remaining compilation errors in auto-generated code.

Tue Mar  8 05:42:32 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/FCO.h:
        * game/mga/FCO_T.cpp:

          Implemented a generic version of in_connections ().

        * game/mga/Mga.mpc:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Visitor.cpp:
        * game/mga/interpreters/ExtensionClasses/InConnection_Generator.cpp:
        * game/mga/interpreters/ExtensionClasses/Mwc_File_Generator.cpp:
        * game/mga/interpreters/ExtensionClasses/Parent_Generator.h:
        * game/mga/interpreters/ExtensionClasses/Parent_Generator.cpp:

          Fixed compilation errors in generated extension classes.

Sun Mar  6 18:56:02 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/component:
        * game/mga/component/Addon_Impl_Base.h:
        * game/mga/component/Component.mpc:
        * game/mga/component/ComponentEx_Impl_Base.h:
        * game/mga/component/Component_export.h:
        * game/mga/component/Event_Handler.h:
        * game/mga/component/Event_Handler_Impl.h:
        * game/mga/component/Event_Handler_Interface.h:
        * game/mga/component/Interpreter_Impl_Base.h:
        * game/mga/component/Plugin_Impl.h:
        * game/mga/component/Readonly_Event_Handler.h:
        * MPC/config/game_mga_component.mpb:

          Relocated the MGA component library.

        * game/mga/decorator:
        * game/mga/decorator/Decorator.mpc:
        * game/mga/decorator/Decorator_Impl.h:
        * game/mga/decorator/Decorator_Impl.inl:
        * game/mga/decorator/Decorator_Impl.cpp:
        * game/mga/decorator/Decorator_Module.h:
        * game/mga/decorator/Decorator_T.h:
        * game/mga/decorator/Decorator_T.inl:
        * game/mga/decorator/Decorator_T.cpp:
        * game/mga/decorator/Decorator_export.h:
        * game/mga/decorator/MgaDecorator.h:
        * game/mga/decorator/Reference_Decorator.h:
        * game/mga/decorator/Reference_Decorator.inl:
        * game/mga/decorator/Reference_Decorator.cpp:
        * game/mga/decorator/stdafx.h:
        * game/mga/decorator/stdafx.cpp:
        * MPC/config/game_mga_decorator.mpb:

          Moved the decorator architecture to its own project/library.

        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Component_Impl.h:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Component_Impl.cpp:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Component_Module.cpp:

          Fixed build errors related to relocation of component
          library.

        * game/mga/be:
        * game/mga/be/Addon_Impl_Base.h:
        * game/mga/be/Addon_Impl_Base.inl:
        * game/mga/be/Addon_Impl_Base.cpp:
        * game/mga/be/Addon_Impl_T.h:
        * game/mga/be/Addon_Impl_T.inl:
        * game/mga/be/Addon_Impl_T.cpp:
        * game/mga/be/BE_export.h:
        * game/mga/be/ComponentDLL.h:
        * game/mga/be/ComponentDLL.cpp:
        * game/mga/be/ComponentEx_Impl_Base.h:
        * game/mga/be/ComponentEx_Impl_Base.inl:
        * game/mga/be/ComponentEx_Impl_Base.cpp:
        * game/mga/be/ComponentEx_Impl_T.h:
        * game/mga/be/ComponentEx_Impl_T.inl:
        * game/mga/be/ComponentEx_Impl_T.cpp:
        * game/mga/be/ComponentEx_T.h:
        * game/mga/be/ComponentEx_T.inl:
        * game/mga/be/ComponentEx_T.cpp:
        * game/mga/be/Component_Module.h:
        * game/mga/be/Decorator_Impl.h:
        * game/mga/be/Decorator_Impl.inl:
        * game/mga/be/Decorator_Impl.cpp:
        * game/mga/be/Decorator_Module.h:
        * game/mga/be/Decorator_T.h:
        * game/mga/be/Decorator_T.inl:
        * game/mga/be/Decorator_T.cpp:
        * game/mga/be/Event_Handler.h:
        * game/mga/be/Event_Handler.inl:
        * game/mga/be/Event_Handler.cpp:
        * game/mga/be/Event_Handler_Impl.h:
        * game/mga/be/Event_Handler_Impl.inl:
        * game/mga/be/Event_Handler_Impl.cpp:
        * game/mga/be/Event_Handler_Interface.h:
        * game/mga/be/Event_Sink_T.h:
        * game/mga/be/Event_Sink_T.inl:
        * game/mga/be/Event_Sink_T.cpp:
        * game/mga/be/GAME_BE.mpc:
        * game/mga/be/Interpreter_Impl_Base.h:
        * game/mga/be/Interpreter_Impl_Base.inl:
        * game/mga/be/Interpreter_Impl_Base.cpp:
        * game/mga/be/Interpreter_T.h:
        * game/mga/be/Interpreter_T.inl:
        * game/mga/be/Interpreter_T.cpp:
        * game/mga/be/Plugin_Impl.h:
        * game/mga/be/Plugin_Impl.inl:
        * game/mga/be/Plugin_Impl.cpp:
        * game/mga/be/Plugin_T.h:
        * game/mga/be/Plugin_T.inl:
        * game/mga/be/Plugin_T.cpp:
        * game/mga/be/Readonly_Event_Handler.h:
        * game/mga/be/Readonly_Event_Handler.inl:
        * game/mga/be/Readonly_Event_Handler.cpp:
        * game/mga/be/stdafx.h:
        * game/mga/be/stdafx.cpp:
        * game/mga/component/Decorator_Impl.h:
        * game/mga/component/Decorator_Impl.inl:
        * game/mga/component/Decorator_Impl.cpp:
        * game/mga/component/Decorator_Module.h:
        * game/mga/component/Decorator_T.h:
        * game/mga/component/Decorator_T.inl:
        * game/mga/component/Decorator_T.cpp:
        * game/mga/component/GAME_BE.mpc:
        * MPC/config/game_mga_be.mpb:

          Removed these files.

Sat Mar  5 21:31:55 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/config.h:

          Added the GDI+ version number to the configuration.

        * game/mga/Object.cpp:

          Bug fix where requesting the path of the root folder
          caused run-time failure.

Sat Mar  5 21:20:09 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/utils/Mga_Utils.mpc:
        * game/mga/utils/Preferences.h:
        * game/mga/utils/Preferences.inl:
        * game/mga/utils/Preferences.cpp:

          Utility class that provides access to an FCO's preferences, such
          as icon, decorator, and label enabled.

Sat Mar  5 21:15:15 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/graphics/Graphics.mpc:
        * game/mga/graphics/Image_Manager_T.h:
        * game/mga/graphics/Image_Manager_T.inl:
        * game/mga/graphics/Image_Manager_T.cpp:

          Changed the contained type from Gdiplus::Bitmap to Gdiplus::Bitmap
          to Gdiplus::Image.

        * game/mga/graphics/Image_Resolver.h:
        * game/mga/graphics/Image_Resource.h:
        * game/mga/graphics/Image_Resource.cpp:

          Utility class for loading images from a resource embedded in an
          executable or library.

        * game/mga/graphics/Stock_Objects.h:
        * game/mga/graphics/Stock_Objects.inl:
        * game/mga/graphics/Stock_Objects.cpp:

          Collection of graphic objects to that can be used to provide a
          consistent look and feel for decorators.

        * game/mga/graphics/stdafx.h:
        * game/mga/graphics/stdafx.cpp:

          Added the missing CComModule _Module definition.

          Added missing include files.

Sat Mar  5 20:44:31 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/interpreters/ExtensionClasses/Base_Class_Locator.cpp

          Bug where base classes were not resolved properly for
          proxy elements.

        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Component_Impl.cpp:

          Added support for generating extension class for selected
          elements.

        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Visitor.h:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Visitor.cpp:

          Bug fix where the extension class interpreter crashed if a connection
          did not have any outgoing connection points.

        * game/mga/interpreters/ExtensionClasses/Impl_Factory_Generator.cpp:
        * game/mga/interpreters/ExtensionClasses/Visitor_Generator.cpp:

          Bug fix where the generation failed of the object was a Folder.

Fri Feb 18 22:22:12 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/stlace.h:
        * game/mga/stlace.cpp:

          Moved the functor specializations to ACE.

Fri Feb 18 03:37:48 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/automation/Automation_App.cpp:

          Bug fix where run_main () did not return the correct value if
          an error occured.

Fri Feb 18 01:35:25 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/interpreters/ExtensionClasses/Impl_Factory_Generator.cpp:

          Bug fix where the implementation factory for the extension
          classes was not exported from the module.

Fri Feb 18 01:09:02 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/automation/Automation_App.cpp:
        * game/automation/Automation_App_Options.h:
        * game/automation/Automation_App_Options.inl:

          Added a --save argument. This is used to save any updates to
          the model after interpretation.

        * game/automation/Parameter_Parser.cpp:

          The value of the parameter is now optional.

        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Component_Impl.cpp:

          Used macros to define the interpreter's configuration.

        * tests/ExtensionClasses/Reference/ReferenceTest.mpc:

          Added custom_only property to the project.

Thu Feb 17 23:05:30 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/Impl_Factory.h:
        * game/mga/Mga_Init.cpp:

          Bug fix where applications experienced a runtime error at
          exit. The source of the error was that the implementation
          factory singleton did not export all of its symbols. The error
          was resolved by declaring the singleton using the
          GAME_MGA_SINGLETON_DECLARE export macro.

Thu Feb 17 17:38:02 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * MPC/config/game_extension_classes_autogen.mpb:

          Base project to auto-generating the extension classes.

        * game/automation/Automation_App.h:
        * game/automation/Automation_App.cpp:
        * game/automation/Automation_App_Options.h:

          Removed the -p option so that any argument not associated with
          a parameter is considered a project file.

        * game/mga/ComponentEx.cpp:

          Bug fix where invoke () would crash if the current object
          was NIL.

        * game/mga/Impl_Factory.h:
        * game/mga/Impl_Factory.inl:
        * game/mga/Impl_Factory.cpp:

          Bug fix where the default implementation factory was not allocating
          the correct implementation for an extended component.

        * game/mga/interpreters/ExtensionClasses/Mwc_File_Generator.cpp:

          Added the _GAME.mwc extension to the generated workspace
          file.

        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Component_Impl.cpp:
        * tests/ExtensionClasses/Reference/ReferenceTest.mpc:
        * tests/ExtensionClasses/Reference/ReferenceTest.mwc:
        * tests/ExtensionClasses/Reference/ReferenceTest.xme:

          Update test to support automated testing.

Thu Feb 17 15:50:07 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/Impl_Factory.h:
        * game/mga/Impl_Factory.inl:

          Implemented the default constructor and destructor.

          The class definition was missing the export macro.

        * game/mga/Visitor.h:

          Added the copy constructor and assignment operator to the private
          section of this class.

        * MPC/config/game_extension_classes.mpb:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Component_Impl.cpp:
        * game/mga/interpreters/ExtensionClasses/Fwd_Decl_Generator.cpp:
        * game/mga/interpreters/ExtensionClasses/Mpc_File_Generator.cpp:
        * game/mga/interpreters/ExtensionClasses/Mwc_File_Generator.cpp:
        * game/mga/interpreters/ExtensionClasses/Pch_File_Generator.cpp:
        * game/mga/interpreters/ExtensionClasses/Visitor_Generator.cpp:

          Base class for all extension class projects.

Thu Feb 17 14:55:29 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/Functional_T.h:
        * game/mga/Functional_T.cpp:
        * game/mga/Impl_Factory.h:
        * game/mga/Impl_Factory.inl:
        * game/mga/Impl_Factory.cpp:

          Updated certain template functions to use the GLOBAL_IMPL_FACTORY
          instead of directly creating the implementations. This will ensure
          that the correct implementation is created when request elements
          that derived from other implementations.

        * game/mga/interpreters/ExtensionClasses/Extension_Classes.mpc:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Component_Impl.cpp:
        * game/mga/interpreters/ExtensionClasses/Impl_Factory_Generator.h:
        * game/mga/interpreters/ExtensionClasses/Impl_Factory_Generator.cpp:
        * game/mga/interpreters/ExtensionClasses/Init_Generator.h:
        * game/mga/interpreters/ExtensionClasses/Init_Generator.cpp:
        * game/mga/interpreters/ExtensionClasses/Mpc_File_Generator.cpp:

          Added support for generating the implementation factory for the
          extension classes.

          Added support for generating the initializer class.

Thu Feb 17 03:02:34 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/interpreters/ExtensionClasses/Extension_Classes.mpc:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Component_Impl.cpp:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Visitor.cpp:
        * game/mga/interpreters/ExtensionClasses/Mpc_File_Generator.cpp:
        * game/mga/interpreters/ExtensionClasses/Visitor_Generator.h:
        * game/mga/interpreters/ExtensionClasses/Visitor_Generator.cpp:

          Added Visitor support to the extension classes.

Wed Feb 16 23:56:06 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/Functional_T.h:
        * game/mga/Functional_T.cpp:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes.mpc:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Component_Impl.cpp:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Visitor.cpp:
        * game/mga/interpreters/ExtensionClasses/RefersTo_Method_Generator.h:
        * game/mga/interpreters/ExtensionClasses/RefersTo_Method_Generator.cpp:
        * tests/ExtensionClasses/Reference/ReferenceTest.xme:

          Reference extension classes now have concrete methods for
          getting the object being referenced.

        * tests/ExtensionClasses/Reference/Reference-UnitTest.xme:

          Removed this file.

Wed Feb 16 19:10:48 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/Atom.cpp:
        * game/mga/Folder.cpp:
        * game/mga/Mga.mpc:
        * game/mga/Model.cpp:
        * game/mga/Object.cpp:
        * game/mga/Reference.cpp:
        * game/mga/Set.cpp:
        * game/mga/Functional_T.h:
        * game/mga/Functional_T.cpp:

          Renamed the Factory_T{.h., cpp} files to Functional_T{.h, .cpp}.

          Implemented the template version of get_parent (), which creates
          a concrete implementation while selecting the parent element.

        * game/mga/interpreters/ExtensionClasses/Containment_Generator.h:
        * game/mga/interpreters/ExtensionClasses/Containment_Generator.cpp:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes.mpc:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Component_Impl.h:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Component_Impl.cpp:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Visitor.cpp:
        * game/mga/interpreters/ExtensionClasses/Factory_Method_Generator.h:
        * game/mga/interpreters/ExtensionClasses/Factory_Method_Generator.cpp:
        * game/mga/interpreters/ExtensionClasses/Parent_Generator.h:
        * game/mga/interpreters/ExtensionClasses/Parent_Generator.cpp:

          Added more Doxygen documentation to the generated extension
          classes.

          Implemented the _create () method for each extension class such
          that its bound to a concrete parent object.

        * tests/ExtensionClasses/Containment/ContainmentTest.xme:

          Updated test to validate self/recursive containment.

        * game/mga/Factory_T.h:
        * game/mga/Factory_T.cpp:

          Removed these files.

Wed Feb 16 02:36:35 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/interpreters/ExtensionClasses:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes.mpc:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Component_Impl.cpp:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Visitor.cpp:
        * game/mga/interpreters/ExtensionClasses/Fwd_Decl_Generator.h:
        * game/mga/interpreters/ExtensionClasses/Fwd_Decl_Generator.cpp:
        * tests/ExtensionClasses/Containment/ContainmentTest.xme:

          Added support for generating a forward declaration file for
          the project. This removes the requirement of generating many
          include statements in the header file.

        * game/mga/interpreters/ExtensionClasses/ExtensionClasses.mpc:

          Removed this file.

Wed Feb 16 00:49:38 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/stdafx.h:
        * game/mga/stdafx.cpp:
        * game/mga/Atom.h:
        * game/mga/Atom.cpp:
        * game/mga/Factory_T.h:
        * game/mga/Factory_T.cpp:
        * game/mga/Folder.cpp:
        * game/mga/GME_fwd.h:
        * game/mga/Mga.mpc:
        * game/mga/Model.inl:
        * game/mga/Model.cpp:
        * game/mga/Project.cpp:
        * game/mga/Reference.cpp:
        * game/mga/Set.cpp:
        * game/mga/Smart_Ptr.h:
        * game/mga/Smart_Ptr.inl:

          Implemented a generic factory method for creating Mga objects
          and binding them to an implementation.

          Reimplemented the _create () methods using the generic factory
          method.

        * game/mga/RootFolder.h:
        * game/mga/RootFolder.inl:
        * game/mga/RootFolder.cpp:
        * game/mga/Visitor.h:
        * game/mga/Visitor.inl:

          Implemented a concrete root folder element.

        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Component.h:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Visitor.h:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Visitor.cpp:

          Implemented the _create () method for objects that appear in
          the RootFolder.

        * tests/ExtensionClasses/RootFolder:
        * tests/ExtensionClasses/RootFolder/RootFolderTest.xme:

          Validation test for objects in the RootFolder.

Tue Feb 15 19:36:52 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Visitor.cpp:

          Updated generator to include tag information in extension classes.

Tue Feb 15 19:21:08 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * MPC/config/codegenerationkit.mpb:

          New base class for the code generation kit.

        * game/config.h:
        * game/manip/copy.cpp:
        * game/manip/stdafx.h:
        * game/mga/Atom.h:
        * game/mga/Attribute.h:
        * game/mga/Attribute.cpp:
        * game/mga/Collection_T.h:
        * game/mga/Connection.h:
        * game/mga/FCO.h:
        * game/mga/Folder.h:
        * game/mga/Folder.cpp:
        * game/mga/Folder_T.cpp:
        * game/mga/Mga.mpc:
        * game/mga/Model.h:
        * game/mga/Model.cpp:
        * game/mga/Model_T.cpp:
        * game/mga/Object.h:
        * game/mga/Reference.h:
        * game/mga/Set.h:
        * game/mga/Smart_Ptr.h:
        * game/mga/Tags.h:
        * game/mga/Utils.h:
        * game/mga/Utils.cpp:
        * game/mga/be/stdafx.h:

          Added element tags to each of the classes.

        * game/mga/dialogs/stdafx.h:
        * game/mga/graphics/stdafx.h:
        * game/mga/stdafx.h:
        * game/mga/utils/stdafx.h:
        * game/automation/stdafx.h:

          The precompiled headers now include the GAME configuration file.

        * game/mga/interpreters/ExtensionClasses/Attribute_Generator.h:
        * game/mga/interpreters/ExtensionClasses/Attribute_Generator.cpp:
        * game/mga/interpreters/ExtensionClasses/Base_Class_Locator.h:
        * game/mga/interpreters/ExtensionClasses/Base_Class_Locator.cpp:
        * game/mga/interpreters/ExtensionClasses/Containment_Generator.h:
        * game/mga/interpreters/ExtensionClasses/Containment_Generator.cpp:
        * game/mga/interpreters/ExtensionClasses/ExtensionClasses.mpc:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Component.h:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Component_Impl.cpp:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Component_i.c:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Component_p.c:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Visitor.h:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Visitor.inl:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Visitor.cpp:
        * game/mga/interpreters/ExtensionClasses/Functors.h:
        * game/mga/interpreters/ExtensionClasses/Functors.cpp:
        * game/mga/interpreters/ExtensionClasses/InConnection_Generator.h:
        * game/mga/interpreters/ExtensionClasses/InConnection_Generator.cpp:
        * game/mga/interpreters/ExtensionClasses/Mpc_File_Generator.h:
        * game/mga/interpreters/ExtensionClasses/Mpc_File_Generator.cpp:
        * game/mga/interpreters/ExtensionClasses/Mwc_File_Generator.h:
        * game/mga/interpreters/ExtensionClasses/Mwc_File_Generator.cpp:
        * game/mga/interpreters/ExtensionClasses/Parent_Generator.h:
        * game/mga/interpreters/ExtensionClasses/Parent_Generator.cpp:
        * game/mga/interpreters/ExtensionClasses/Pch_File_Generator.h:
        * game/mga/interpreters/ExtensionClasses/Pch_File_Generator.cpp:
        * game/mga/interpreters/ExtensionClasses/StdAfx.h:

          Checkpoint the extension class generator. It is able to generate
          the extension class for all elements in a model, compile the source,
          and create an import library.

        * tests/ExtensionClasses/Atom/AtomTest.xme:
        * tests/ExtensionClasses/Containment:
        * tests/ExtensionClasses/Containment/ContainmentTest.xme:
        * tests/ExtensionClasses/Inheritance/InheritanceTest.xme:

          Test for the extension class generator.

        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Build_Files_Generator.h:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Build_Files_Generator.cpp:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Code_Generator.h:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Code_Generator.cpp:
        * tests/ExtensionClasses/Atom/Atom-UnitTest.xme:
        * tests/ExtensionClasses/Inheritance/InheritanceTest1.xme:

          Removed these files.

Thu Feb 10 21:13:39 UTC 2011  Harold Owens II  <owensh at cs dot iupui dot edu>

        * game/acircle/ACircle_Traits.h:
        * game/acircle/Udm_Traits.h:

          Separated Udm Traits into its own header file.

Wed Feb  9 00:08:42 UTC 2011  Harold Owens II  <owensh at cs dot iupui dot edu>

        * game/acircle:
        * game/acircle/ACircle.h:
        * game/acircle/ACircle.inl:
        * game/acircle/ACircle_Tag_Dispatch.h:
        * game/acircle/ACircle_Tag_Dispatch.inl:
        * game/acircle/ACircle_Traits.h:

          Added these files to GAME project.

        * acircle:
        * acircle/ACircle.h:
        * acircle/ACircle.inl:
        * acircle/ACircle_Tag_Dispatch.h:
        * acircle/ACircle_Tag_Dispatch.inl:
        * acircle/ACircle_Traits.h:

          Removed these files from GAME project.

Tue Feb  8 21:24:00 UTC 2011  Harold Owens II  <owensh at cs dot iupui dot edu>

        * acircle:
        * acircle/ACircle.h:
        * acircle/ACircle.inl:
        * acircle/ACircle_Tag_Dispatch.h:
        * acircle/ACircle_Tag_Dispatch.inl:
        * acircle/ACircle_Traits.h:

          Added A-Circle to GAME project.

Fri Feb  4 22:56:26 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * MPC/config/game_graphics.mpb:
        * MPC/config/game_mga_interpreter.mpb:
        * game/mga/be/Addon_Impl_T.h:
        * game/mga/be/Addon_Impl_T.cpp:
        * game/mga/be/ComponentEx_T.h:
        * game/mga/be/Decorator_T.h:
        * game/mga/be/Decorator_T.inl:
        * game/mga/be/Decorator_T.cpp:
        * game/mga/dialogs/Selection_List_Dialog_T.cpp:
        * game/mga/graphics/Image_Manager_T.h:
        * game/mga/graphics/Image_Manager_T.inl:
        * game/mga/graphics/Image_Manager_T.cpp:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Code_Generator.cpp:
        * game/mga/modelgen.h:
        * game/xme/modelgen.h:

          Fixed build errors that were not able to be located by just
          building the GAME project. This means we need more test cases
          to cover such cases.

Thu Feb  3 21:21:23 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * THANKS:

          Updated the THANKS file.

        * MPC/config/game.mpb:
        * MPC/config/game_mga.mpb:
        * MPC/config/game_mga_be.mpb:
        * MPC/config/game_mga_component.mpb:
        * MPC/config/game_mga_decorator.mpb:
        * MPC/config/game_mga_interpreter.mpb:
        * MPC/config/game_mga_utils.mpb:
        * game/automation/Automation_App.h:
        * game/automation/Automation_App.cpp:
        * game/automation/Automation_App_Options.cpp:
        * game/automation/Parameter_Parser.cpp:
        * game/automation/automation.mpc:
        * game/automation/automation.cpp:
        * game/automation/stdafx.h:
        * game/automation/stdafx.cpp:
        * game/config.h:
        * game/manip/Manipulation.mpc:
        * game/manip/copy.h:
        * game/manip/copy.cpp:
        * game/manip/stdafx.h:
        * game/mga:
        * game/mga/Application.h:
        * game/mga/Application.cpp:
        * game/mga/Atom.h:
        * game/mga/Atom.inl:
        * game/mga/Atom.cpp:
        * game/mga/Attribute.h:
        * game/mga/Attribute.inl:
        * game/mga/Attribute.cpp:
        * game/mga/Collection_T.h:
        * game/mga/Collection_T.cpp:
        * game/mga/Component.h:
        * game/mga/Component.inl:
        * game/mga/Component.cpp:
        * game/mga/ComponentEx.h:
        * game/mga/ComponentEx.inl:
        * game/mga/ComponentEx.cpp:
        * game/mga/Connection.h:
        * game/mga/Connection.inl:
        * game/mga/Connection.cpp:
        * game/mga/Exception.h:
        * game/mga/Exception.inl:
        * game/mga/Exception.cpp:
        * game/mga/FCO.h:
        * game/mga/FCO.inl:
        * game/mga/FCO.cpp:
        * game/mga/Filter.h:
        * game/mga/Filter.cpp:
        * game/mga/Folder.h:
        * game/mga/Folder.inl:
        * game/mga/Folder.cpp:
        * game/mga/GME_fwd.h:
        * game/mga/Impl_Factory.h:
        * game/mga/Impl_Factory.inl:
        * game/mga/Impl_Factory.cpp:
        * game/mga/MetaAspect.h:
        * game/mga/MetaAspect.inl:
        * game/mga/MetaAspect.cpp:
        * game/mga/MetaAtom.h:
        * game/mga/MetaAtom.inl:
        * game/mga/MetaAtom.cpp:
        * game/mga/MetaAttribute.h:
        * game/mga/MetaAttribute.inl:
        * game/mga/MetaAttribute.cpp:
        * game/mga/MetaBase.h:
        * game/mga/MetaBase.inl:
        * game/mga/MetaBase.cpp:
        * game/mga/MetaConnection.h:
        * game/mga/MetaConnection.inl:
        * game/mga/MetaConnection.cpp:
        * game/mga/MetaEnumItem.h:
        * game/mga/MetaEnumItem.inl:
        * game/mga/MetaEnumItem.cpp:
        * game/mga/MetaFCO.h:
        * game/mga/MetaFCO.inl:
        * game/mga/MetaFCO.cpp:
        * game/mga/MetaFolder.h:
        * game/mga/MetaFolder.inl:
        * game/mga/MetaFolder.cpp:
        * game/mga/MetaModel.h:
        * game/mga/MetaModel.inl:
        * game/mga/MetaModel.cpp:
        * game/mga/MetaPart.h:
        * game/mga/MetaPart.inl:
        * game/mga/MetaPart.cpp:
        * game/mga/MetaProject.h:
        * game/mga/MetaProject.inl:
        * game/mga/MetaProject.cpp:
        * game/mga/MetaReference.h:
        * game/mga/MetaReference.inl:
        * game/mga/MetaReference.cpp:
        * game/mga/MetaRole.h:
        * game/mga/MetaRole.inl:
        * game/mga/MetaRole.cpp:
        * game/mga/MetaSet.h:
        * game/mga/MetaSet.inl:
        * game/mga/MetaSet.cpp:
        * game/mga/Mga.mpc:
        * game/mga/Mga_Init.cpp:
        * game/mga/Mga_export.h:
        * game/mga/Model.h:
        * game/mga/Model.inl:
        * game/mga/Model.cpp:
        * game/mga/Object.h:
        * game/mga/Object.inl:
        * game/mga/Object.cpp:
        * game/mga/Part.h:
        * game/mga/Part.inl:
        * game/mga/Part.cpp:
        * game/mga/Project.h:
        * game/mga/Project.cpp:
        * game/mga/Refcountable.h:
        * game/mga/Refcountable.inl:
        * game/mga/Refcountable.cpp:
        * game/mga/Reference.h:
        * game/mga/Reference.inl:
        * game/mga/Reference.cpp:
        * game/mga/RegistryNode.h:
        * game/mga/RegistryNode.inl:
        * game/mga/RegistryNode.cpp:
        * game/mga/Set.h:
        * game/mga/Set.inl:
        * game/mga/Set.cpp:
        * game/mga/Smart_Ptr.h:
        * game/mga/Smart_Ptr.inl:
        * game/mga/Smart_Ptr.cpp:
        * game/mga/Territory.h:
        * game/mga/Territory.cpp:
        * game/mga/Transaction.h:
        * game/mga/Transaction.inl:
        * game/mga/Transaction.cpp:
        * game/mga/Utils.h:
        * game/mga/Utils.cpp:
        * game/mga/Visitor.h:
        * game/mga/Visitor.inl:
        * game/mga/Visitor.cpp:
        * game/mga/XML.h:
        * game/mga/XML.inl:
        * game/mga/XML.cpp:
        * game/mga/be:
        * game/mga/be/Addon_Impl_Base.h:
        * game/mga/be/Addon_Impl_Base.inl:
        * game/mga/be/Addon_Impl_T.h:
        * game/mga/be/Addon_Impl_T.inl:
        * game/mga/be/ComponentEx_Impl_Base.h:
        * game/mga/be/ComponentEx_Impl_Base.inl:
        * game/mga/be/ComponentEx_Impl_T.h:
        * game/mga/be/ComponentEx_Impl_T.inl:
        * game/mga/be/ComponentEx_Impl_T.cpp:
        * game/mga/be/ComponentEx_T.h:
        * game/mga/be/ComponentEx_T.inl:
        * game/mga/be/Component_Module.h:
        * game/mga/be/Decorator_Impl.h:
        * game/mga/be/Decorator_Impl.inl:
        * game/mga/be/Decorator_T.h:
        * game/mga/be/Decorator_T.inl:
        * game/mga/be/Decorator_T.cpp:
        * game/mga/be/Event_Handler.h:
        * game/mga/be/Event_Handler.inl:
        * game/mga/be/Event_Handler.cpp:
        * game/mga/be/Event_Handler_Impl.h:
        * game/mga/be/Event_Handler_Impl.inl:
        * game/mga/be/Event_Handler_Impl.cpp:
        * game/mga/be/Event_Handler_Interface.h:
        * game/mga/be/GAME_BE.mpc:
        * game/mga/be/Interpreter_Impl_Base.h:
        * game/mga/be/Interpreter_Impl_Base.inl:
        * game/mga/be/Interpreter_T.h:
        * game/mga/be/Plugin_Impl.h:
        * game/mga/be/Plugin_Impl.inl:
        * game/mga/be/Plugin_T.h:
        * game/mga/be/Readonly_Event_Handler.h:
        * game/mga/be/Readonly_Event_Handler.inl:
        * game/mga/be/Readonly_Event_Handler.cpp:
        * game/mga/be/stdafx.h:
        * game/mga/dialogs:
        * game/mga/dialogs/Dialog_Display_Strategy.h:
        * game/mga/dialogs/GAME_Dialogs.mpc:
        * game/mga/dialogs/Name_Dialog.h:
        * game/mga/dialogs/Name_Dialog.cpp:
        * game/mga/dialogs/Object_Path_Dialog_Display_Strategy.h:
        * game/mga/dialogs/Object_Path_Dialog_Display_Strategy.cpp:
        * game/mga/dialogs/Selection_List_Dialog.h:
        * game/mga/dialogs/Selection_List_Dialog.cpp:
        * game/mga/dialogs/stdafx.h:
        * game/mga/graphics:
        * game/mga/graphics/Graphics.mpc:
        * game/mga/graphics/Image_Resolver.h:
        * game/mga/graphics/Image_Resolver.inl:
        * game/mga/graphics/Image_Resolver.cpp:
        * game/mga/graphics/Port_Decorator.h:
        * game/mga/graphics/Port_Decorator.inl:
        * game/mga/graphics/Port_Decorator.cpp:
        * game/mga/graphics/stdafx.h:
        * game/mga/interpreters:
        * game/mga/interpreters/ExtensionClasses/ExtensionClasses.mpc:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Build_Files_Generator.h:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Build_Files_Generator.cpp:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Code_Generator.h:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Code_Generator.cpp:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Component.h:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Component_Impl.h:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Component_Impl.cpp:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Component_Module.cpp:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Component_i.c:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Component_p.c:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Visitor.h:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Visitor.inl:
        * game/mga/interpreters/ExtensionClasses/Extension_Classes_Visitor.cpp:
        * game/mga/modelgen.h:
        * game/mga/modelgen.cpp:
        * game/mga/stdafx.h:
        * game/mga/stdafx.cpp:
        * game/mga/stlace.h:
        * game/mga/stlace.cpp:
        * game/mga/types.h:
        * game/mga/utils:
        * game/mga/utils/Mga_Utils.mpc:
        * game/mga/utils/Parser.cpp:
        * game/mga/utils/Parser.hpp:
        * game/mga/utils/Point.h:
        * game/mga/utils/Point.inl:
        * game/mga/utils/Point.cpp:
        * game/mga/utils/Project_Settings.h:
        * game/mga/utils/Project_Settings.inl:
        * game/mga/utils/Project_Settings.cpp:
        * game/mga/utils/Registrar.h:
        * game/mga/utils/Registrar.inl:
        * game/mga/utils/Registrar.cpp:
        * game/mga/utils/stdafx.h:

          Moved all the MGA specific source files to the game/mga
          subdirectory.

        * MPC/config/game_be.mpb:
        * MPC/config/game_component.mpb:
        * MPC/config/game_decorator.mpb:
        * MPC/config/game_interpreter.mpb:
        * MPC/config/game_utils.mpb:

          Update the projects to reflect MGA specific libraries.

        * game/Application.h:
        * game/Application.cpp:
        * game/Atom.h:
        * game/Atom.inl:
        * game/Atom.cpp:
        * game/Attribute.h:
        * game/Attribute.inl:
        * game/Attribute.cpp:
        * game/Collection_T.h:
        * game/Collection_T.cpp:
        * game/Component.h:
        * game/Component.inl:
        * game/Component.cpp:
        * game/ComponentEx.h:
        * game/ComponentEx.inl:
        * game/ComponentEx.cpp:
        * game/Connection.h:
        * game/Connection.inl:
        * game/Connection.cpp:
        * game/Exception.h:
        * game/Exception.inl:
        * game/Exception.cpp:
        * game/FCO.h:
        * game/FCO.inl:
        * game/FCO.cpp:
        * game/Filter.h:
        * game/Filter.cpp:
        * game/Folder.h:
        * game/Folder.inl:
        * game/Folder.cpp:
        * game/GAME.h:
        * game/GAME.mpc:
        * game/GAME.cpp:
        * game/GAME_export.h:
        * game/GME_fwd.h:
        * game/Impl_Factory.h:
        * game/Impl_Factory.inl:
        * game/Impl_Factory.cpp:
        * game/MetaAspect.h:
        * game/MetaAspect.inl:
        * game/MetaAspect.cpp:
        * game/MetaAtom.h:
        * game/MetaAtom.inl:
        * game/MetaAtom.cpp:
        * game/MetaAttribute.h:
        * game/MetaAttribute.inl:
        * game/MetaAttribute.cpp:
        * game/MetaBase.h:
        * game/MetaBase.inl:
        * game/MetaBase.cpp:
        * game/MetaConnection.h:
        * game/MetaConnection.inl:
        * game/MetaConnection.cpp:
        * game/MetaEnumItem.h:
        * game/MetaEnumItem.inl:
        * game/MetaEnumItem.cpp:
        * game/MetaFCO.h:
        * game/MetaFCO.inl:
        * game/MetaFCO.cpp:
        * game/MetaFolder.h:
        * game/MetaFolder.inl:
        * game/MetaFolder.cpp:
        * game/MetaModel.h:
        * game/MetaModel.inl:
        * game/MetaModel.cpp:
        * game/MetaPart.h:
        * game/MetaPart.inl:
        * game/MetaPart.cpp:
        * game/MetaProject.h:
        * game/MetaProject.inl:
        * game/MetaProject.cpp:
        * game/MetaReference.h:
        * game/MetaReference.inl:
        * game/MetaReference.cpp:
        * game/MetaRole.h:
        * game/MetaRole.inl:
        * game/MetaRole.cpp:
        * game/MetaSet.h:
        * game/MetaSet.inl:
        * game/MetaSet.cpp:
        * game/Model.h:
        * game/Model.inl:
        * game/Model.cpp:
        * game/Object.h:
        * game/Object.inl:
        * game/Object.cpp:
        * game/Part.h:
        * game/Part.inl:
        * game/Part.cpp:
        * game/Project.h:
        * game/Project.cpp:
        * game/Refcountable.h:
        * game/Refcountable.inl:
        * game/Refcountable.cpp:
        * game/Reference.h:
        * game/Reference.inl:
        * game/Reference.cpp:
        * game/RegistryNode.h:
        * game/RegistryNode.inl:
        * game/RegistryNode.cpp:
        * game/Set.h:
        * game/Set.inl:
        * game/Set.cpp:
        * game/Smart_Ptr.h:
        * game/Smart_Ptr.inl:
        * game/Smart_Ptr.cpp:
        * game/Territory.h:
        * game/Territory.cpp:
        * game/Transaction.h:
        * game/Transaction.inl:
        * game/Transaction.cpp:
        * game/Utils.h:
        * game/Utils.cpp:
        * game/Visitor.h:
        * game/Visitor.inl:
        * game/Visitor.cpp:
        * game/XML.h:
        * game/XML.inl:
        * game/XML.cpp:
        * game/be:
        * game/be/Addon_Impl_Base.h:
        * game/be/Addon_Impl_Base.inl:
        * game/be/Addon_Impl_Base.cpp:
        * game/be/Addon_Impl_T.h:
        * game/be/Addon_Impl_T.inl:
        * game/be/Addon_Impl_T.cpp:
        * game/be/BE_export.h:
        * game/be/ComponentDLL.h:
        * game/be/ComponentDLL.cpp:
        * game/be/ComponentEx_Impl_Base.h:
        * game/be/ComponentEx_Impl_Base.inl:
        * game/be/ComponentEx_Impl_Base.cpp:
        * game/be/ComponentEx_Impl_T.h:
        * game/be/ComponentEx_Impl_T.inl:
        * game/be/ComponentEx_Impl_T.cpp:
        * game/be/ComponentEx_T.h:
        * game/be/ComponentEx_T.inl:
        * game/be/ComponentEx_T.cpp:
        * game/be/Component_Module.h:
        * game/be/Decorator_Impl.h:
        * game/be/Decorator_Impl.inl:
        * game/be/Decorator_Impl.cpp:
        * game/be/Decorator_Module.h:
        * game/be/Decorator_T.h:
        * game/be/Decorator_T.inl:
        * game/be/Decorator_T.cpp:
        * game/be/Event_Handler.h:
        * game/be/Event_Handler.inl:
        * game/be/Event_Handler.cpp:
        * game/be/Event_Handler_Impl.h:
        * game/be/Event_Handler_Impl.inl:
        * game/be/Event_Handler_Impl.cpp:
        * game/be/Event_Handler_Interface.h:
        * game/be/Event_Sink_T.h:
        * game/be/Event_Sink_T.inl:
        * game/be/Event_Sink_T.cpp:
        * game/be/GAME_BE.mpc:
        * game/be/Interpreter_Impl_Base.h:
        * game/be/Interpreter_Impl_Base.inl:
        * game/be/Interpreter_Impl_Base.cpp:
        * game/be/Interpreter_T.h:
        * game/be/Interpreter_T.inl:
        * game/be/Interpreter_T.cpp:
        * game/be/Plugin_Impl.h:
        * game/be/Plugin_Impl.inl:
        * game/be/Plugin_Impl.cpp:
        * game/be/Plugin_T.h:
        * game/be/Plugin_T.inl:
        * game/be/Plugin_T.cpp:
        * game/be/Readonly_Event_Handler.h:
        * game/be/Readonly_Event_Handler.inl:
        * game/be/Readonly_Event_Handler.cpp:
        * game/be/stdafx.h:
        * game/be/stdafx.cpp:
        * game/dialogs:
        * game/dialogs/Dialog_Display_Strategy.h:
        * game/dialogs/Dialog_Display_Strategy.inl:
        * game/dialogs/Dialog_Display_Strategy.cpp:
        * game/dialogs/Dialogs.rc:
        * game/dialogs/Dialogs_export.h:
        * game/dialogs/GAME_Dialogs.mpc:
        * game/dialogs/Module.h:
        * game/dialogs/Module.cpp:
        * game/dialogs/Name_Dialog.h:
        * game/dialogs/Name_Dialog.inl:
        * game/dialogs/Name_Dialog.cpp:
        * game/dialogs/Object_Path_Dialog_Display_Strategy.h:
        * game/dialogs/Object_Path_Dialog_Display_Strategy.inl:
        * game/dialogs/Object_Path_Dialog_Display_Strategy.cpp:
        * game/dialogs/Selection_List_Dialog.h:
        * game/dialogs/Selection_List_Dialog.cpp:
        * game/dialogs/Selection_List_Dialog_T.h:
        * game/dialogs/Selection_List_Dialog_T.cpp:
        * game/dialogs/resource.h:
        * game/dialogs/stdafx.h:
        * game/dialogs/stdafx.cpp:
        * game/graphics:
        * game/graphics/Graphics.mpc:
        * game/graphics/Graphics_export.h:
        * game/graphics/Image_Manager_T.h:
        * game/graphics/Image_Manager_T.inl:
        * game/graphics/Image_Manager_T.cpp:
        * game/graphics/Image_Resolver.h:
        * game/graphics/Image_Resolver.inl:
        * game/graphics/Image_Resolver.cpp:
        * game/graphics/Port_Decorator.h:
        * game/graphics/Port_Decorator.inl:
        * game/graphics/Port_Decorator.cpp:
        * game/graphics/stdafx.h:
        * game/graphics/stdafx.cpp:
        * game/interpreters:
        * game/interpreters/ExtensionClasses:
        * game/interpreters/ExtensionClasses/CompIcon.ico:
        * game/interpreters/ExtensionClasses/Component.aps:
        * game/interpreters/ExtensionClasses/Component.rc:
        * game/interpreters/ExtensionClasses/ExtensionClasses.mpc:
        * game/interpreters/ExtensionClasses/ExtensionClasses_Export.h:
        * game/interpreters/ExtensionClasses/Extension_Classes_Build_Files_Generator.h:
        * game/interpreters/ExtensionClasses/Extension_Classes_Build_Files_Generator.cpp:
        * game/interpreters/ExtensionClasses/Extension_Classes_Code_Generator.h:
        * game/interpreters/ExtensionClasses/Extension_Classes_Code_Generator.cpp:
        * game/interpreters/ExtensionClasses/Extension_Classes_Component.h:
        * game/interpreters/ExtensionClasses/Extension_Classes_Component.idl:
        * game/interpreters/ExtensionClasses/Extension_Classes_Component_Impl.h:
        * game/interpreters/ExtensionClasses/Extension_Classes_Component_Impl.cpp:
        * game/interpreters/ExtensionClasses/Extension_Classes_Component_Module.cpp:
        * game/interpreters/ExtensionClasses/Extension_Classes_Component_i.c:
        * game/interpreters/ExtensionClasses/Extension_Classes_Component_p.c:
        * game/interpreters/ExtensionClasses/Extension_Classes_Visitor.h:
        * game/interpreters/ExtensionClasses/Extension_Classes_Visitor.inl:
        * game/interpreters/ExtensionClasses/Extension_Classes_Visitor.cpp:
        * game/interpreters/ExtensionClasses/GAME_ExtensionClassesComponent.reg:
        * game/interpreters/ExtensionClasses/GAME_ExtensionClassesComponentd.reg:
        * game/interpreters/ExtensionClasses/Resource.h:
        * game/interpreters/ExtensionClasses/StdAfx.h:
        * game/interpreters/ExtensionClasses/StdAfx.cpp:
        * game/interpreters/ExtensionClasses/dlldata.c:
        * game/mga/utils/GAME_Utils.mpc:
        * game/modelgen.h:
        * game/modelgen.cpp:
        * game/stdafx.h:
        * game/stdafx.cpp:
        * game/stlace.h:
        * game/stlace.cpp:
        * game/types.h:
        * game/utils:
        * game/utils/GAME_Utils.mpc:
        * game/utils/GAME_Utils_export.h:
        * game/utils/Parser.hpp:
        * game/utils/Parser.cpp:
        * game/utils/Point.h:
        * game/utils/Point.inl:
        * game/utils/Point.cpp:
        * game/utils/Project_Settings.h:
        * game/utils/Project_Settings.inl:
        * game/utils/Project_Settings.cpp:
        * game/utils/Registrar.h:
        * game/utils/Registrar.inl:
        * game/utils/Registrar.cpp:
        * game/utils/modelgen.h:
        * game/utils/modelgen.inl:
        * game/utils/modelgen.cpp:
        * game/utils/stdafx.h:
        * game/utils/stdafx.cpp:

          Removed these files.

Mon Jan 24 01:24:45 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/dialogs/Selection_List_Dialog.cpp:

          Fixed runtime errors.

Mon Jan 17 04:21:36 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/utils/modelgen.cpp:

          Fixed compile error.

Fri Jan 14 23:43:15 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/Collection_T.h:
        * game/Collection_T.cpp:

          Renamed the get_children () method to iter_to_collection () since
          its name clashed with the get_children () method defined in the
          modelgen framework.

        * game/utils/modelgen.h:
        * game/utils/modelgen.inl:
        * game/utils/modelgen.cpp:

          Abstracted implementation that is architecture dependent. Now
          each architecture must specialize the following functors:

            . create_element ()
            . get_children ()

        * game/xme/Auto_Model_T.cpp:
        * game/xme/XME.mpc:
        * game/xme/modelgen.h:
        * game/xme/modelgen.cpp:
        * game/FCO.cpp:
        * game/Filter.cpp:
        * game/Folder.cpp:
        * game/GAME.mpc:
        * game/MetaFolder.cpp:
        * game/MetaModel.cpp:
        * game/Model.cpp:
        * game/Object.cpp:
        * game/Project.cpp:
        * game/RegistryNode.cpp:
        * game/Set.cpp:
        * game/be/ComponentEx_Impl_T.cpp:
        * game/modelgen.h:
        * game/modelgen.cpp:

          Updated code to support the new modelgen framework.

Fri Jan 14 14:13:30 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/Smart_Ptr.inl:

          Removed dead code.

Fri Jan 14 06:20:20 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/Smart_Ptr.h:
        * game/Smart_Ptr.cpp:

          Removed dead code.

Fri Jan 14 06:08:39 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/Collection_T.cpp:

          Bug fix where the CComPtr was not reset between interaction. This
          resulted in failed assertions.

        * game/GME_fwd.h:

          Added a missing typedef.

        * game/Smart_Ptr.inl:

          Fixed compile errors for the constructor related to const objects.

        * game/be/Decorator_T.h:
        * game/be/Decorator_T.cpp:

          Bug fix where GetPortLocation () in called only once in transaction.
          It is the responsbility of the decorator to no invoke any methods
          on the FCO after the initial call. This problem was solved by caching
          each port's location.

        * game/graphics/Port_Decorator.h:
        * game/graphics/Port_Decorator.inl:

          Removed the 'const' keyword from the return value for the
          fco () method.

Wed Jan 12 22:51:56 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/utils/Point.h:
        * game/utils/Point.cpp:

          Implemented set_position () and get_position (). These will take
          the place of the overloadded position () methods.

Wed Jan 12 01:03:58 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/be/Decorator_Impl.h:

          Removed the GAME:: scope since it is not necessary.

        * game/be/Decorator_T.cpp:

          Aded exception handler to inserting elements into the collection.

Tue Jan 11 21:56:25 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * game/FCO.cpp:

          Bug fix where the in_connections () was throwing a runtime
          execution because of a null pointer.

        * game/Collection_T.cpp:

          Removed unnecessary comments.

        * game/graphics/Port_Decorator.cpp:

          Removed the 'static' keyword from the Gdiplus objects.

        * tests/mga/Visitor:

          Updated the svn:ignore property.

        * tests/tests.mwc:

          Missing workspace file.

Tue Jan 11 17:22:03 UTC 2011  James H. Hill  <hillj at cs dot iupui dot edu>

        * GAME.mwc:

          Removed the COSMIC_ROOT definition.

        * game/Atom.h:
        * game/Atom.inl:
        * game/Atom.cpp:
        * game/Attribute.h:
        * game/Attribute.inl:
        * game/Attribute.cpp:
        * game/Collection_T.h:
        * game/Collection_T.cpp:
        * game/Component.h:
        * game/Component.inl:
        * game/Component.cpp:
        * game/ComponentEx.h:
        * game/ComponentEx.inl:
        * game/ComponentEx.cpp:
        * game/Connection.h:
        * game/Connection.inl:
        * game/Connection.cpp:
        * game/Exception.h:
        * game/FCO.h:
        * game/FCO.inl:
        * game/FCO.cpp:
        * game/Filter.h:
        * game/Filter.cpp:
        * game/Folder.h:
        * game/Folder.inl:
        * game/Folder.cpp:
        * game/GAME.mpc:
        * game/GME_fwd.h:
        * game/Impl_Factory.h:
        * game/Impl_Factory.inl:
        * game/Impl_Factory.cpp:
        * game/MetaAspect.h:
        * game/MetaAspect.inl:
        * game/MetaAspect.cpp:
        * game/MetaAtom.h:
        * game/MetaAtom.inl:
        * game/MetaAtom.cpp:
        * game/MetaAttribute.h:
        * game/MetaAttribute.inl:
        * game/MetaAttribute.cpp:
        * game/MetaBase.h:
        * game/MetaBase.inl:
        * game/MetaBase.cpp:
        * game/MetaConnection.h:
        * game/MetaConnection.inl:
        * game/MetaConnection.cpp:
        * game/MetaEnumItem.h:
        * game/MetaEnumItem.inl:
        * game/MetaEnumItem.cpp:
        * game/MetaFCO.h:
        * game/MetaFCO.inl:
        * game/MetaFCO.cpp:
        * game/MetaFolder.h:
        * game/MetaFolder.inl:
        * game/MetaFolder.cpp:
        * game/MetaModel.h:
        * game/MetaModel.inl:
        * game/MetaModel.cpp:
        * game/MetaPart.h:
        * game/MetaPart.inl:
        * game/MetaPart.cpp:
        * game/MetaReference.h:
        * game/MetaReference.inl:
        * game/MetaReference.cpp:
        * game/MetaRole.h:
        * game/MetaRole.inl:
        * game/MetaRole.cpp:
        * game/MetaSet.h:
        * game/MetaSet.inl:
        * game/MetaSet.cpp:
        * game/Model.h:
        * game/Model.inl:
        * game/Model.cpp:
        * game/Object.h:
        * game/Object.inl:
        * game/Object.cpp:
        * game/Project.cpp:
        * game/Refcountable.h:
        * game/Refcountable.inl:
        * game/Refcountable.cpp:
        * game/Reference.h:
        * game/Reference.inl:
        * game/Reference.cpp:
        * game/RegistryNode.h:
        * game/RegistryNode.inl:
        * game/RegistryNode.cpp:
        * game/Set.h:
        * game/Set.inl:
        * game/Set.cpp:
        * game/Smart_Ptr.h:
        * game/Smart_Ptr.inl:
        * game/Smart_Ptr.cpp:
        * game/Visitor.h:
        * game/Visitor.inl:
        * game/Visitor.cpp:

          Re-design the GAME architecture so that it is possible to dispatch
          to concrete elements. This means that clients no longer need to write
          custom dispatchers because the visitor does not behave as expected.

        * game/automation/Automation_App.cpp:
        * game/be/ComponentEx_Impl_Base.h:
        * game/be/ComponentEx_Impl_Base.inl:
        * game/be/ComponentEx_Impl_T.cpp:
        * game/be/Decorator_Impl.h:
        * game/be/Decorator_Impl.inl:
        * game/be/Decorator_T.inl:
        * game/be/Decorator_T.cpp:
        * game/be/Event_Handler.h:
        * game/be/Event_Handler.cpp:
        * game/be/Event_Handler_Impl.h:
        * game/be/Event_Handler_Impl.inl:
        * game/be/Event_Handler_Interface.h:
        * game/be/Readonly_Event_Handler.h:
        * game/be/Readonly_Event_Handler.cpp:
        * game/dialogs/Dialog_Display_Strategy.h:
        * game/dialogs/Name_Dialog.h:
        * game/dialogs/Name_Dialog.cpp:
        * game/dialogs/Object_Path_Dialog_Display_Strategy.h:
        * game/dialogs/Object_Path_Dialog_Display_Strategy.cpp:
        * game/dialogs/Selection_List_Dialog.h:
        * game/dialogs/Selection_List_Dialog.cpp:
        * game/dialogs/Selection_List_Dialog_T.h:
        * game/dialogs/Selection_List_Dialog_T.cpp:
        * game/graphics/Port_Decorator.h:
        * game/graphics/Port_Decorator.inl:
        * game/graphics/Port_Decorator.cpp:
        * game/interpreters/ExtensionClasses/Extension_Classes_Build_Files_Generator.h:
        * game/interpreters/ExtensionClasses/Extension_Classes_Build_Files_Generator.cpp:
        * game/interpreters/ExtensionClasses/Extension_Classes_Code_Generator.h:
        * game/interpreters/ExtensionClasses/Extension_Classes_Code_Generator.cpp:
        * game/interpreters/ExtensionClasses/Extension_Classes_Component.h:
        * game/interpreters/ExtensionClasses/Extension_Classes_Component_Impl.h:
        * game/interpreters/ExtensionClasses/Extension_Classes_Component_Impl.cpp:
        * game/interpreters/ExtensionClasses/Extension_Classes_Component_i.c:
        * game/interpreters/ExtensionClasses/Extension_Classes_Component_p.c:
        * game/interpreters/ExtensionClasses/Extension_Classes_Visitor.h:
        * game/interpreters/ExtensionClasses/Extension_Classes_Visitor.inl:
        * game/interpreters/ExtensionClasses/Extension_Classes_Visitor.cpp:
        * game/manip/copy.h:
        * game/manip/copy.cpp:
        * game/utils/Point.h:
        * game/utils/Point.cpp:
        * game/utils/Project_Settings.h:
        * game/utils/Project_Settings.cpp:
        * game/utils/modelgen.h:
        * game/utils/modelgen.inl:
        * game/utils/modelgen.cpp:

          Updated the implementation in each of these files to support to
          new GAME architecture.

        * tests/mga:
        * tests/mga/Visitor:
        * tests/mga/Visitor/GAME_Visitor_Testd.reg:
        * tests/mga/Visitor/Visitor_Test.idl:
        * tests/mga/Visitor/Visitor_Test.mpc:
        * tests/mga/Visitor/Visitor_Test.xme:
        * tests/mga/Visitor/Visitor_Test_Impl.h:
        * tests/mga/Visitor/Visitor_Test_Impl.cpp:
        * tests/mga/Visitor/Visitor_Test_Module.cpp:
        * tests/mga/Visitor/stdafx.h:
        * tests/mga/Visitor/stdafx.cpp:

          Test to verify the visitor is working correctly, i.e., dispatching
          to the concrete implementations.

        * game/Interpreter.h:
        * game/Interpreter.cpp:

          Removed these files.

Fri Dec  3 14:45:10 UTC 2010  James H. Hill  <hillj at cs dot iupui dot edu>

        * AUTHORS:
        * COPYING:
        * VERSION:

          Added project information to the repo.

Tue Nov 30 20:54:52 UTC 2010  Alhad Mokashi  <amokashi at iupui dot edu>

        * game/GAME.mpc:
        * game/Utils.h:
        * game/Utils.cpp:

          Created utility functions file in the GAME directory.

        * game/interpreters/ExtensionClasses/ExtensionClasses.mpc:
        * game/interpreters/ExtensionClasses/Extension_Classes_Build_Files_Generator.h:
        * game/interpreters/ExtensionClasses/Extension_Classes_Build_Files_Generator.cpp:
        * game/interpreters/ExtensionClasses/Extension_Classes_Code_Generator.h:
        * game/interpreters/ExtensionClasses/Extension_Classes_Code_Generator.cpp:
        * game/interpreters/ExtensionClasses/Extension_Classes_Component.h:
        * game/interpreters/ExtensionClasses/Extension_Classes_Component_Impl.cpp:
        * game/interpreters/ExtensionClasses/Extension_Classes_Component_i.c:
        * game/interpreters/ExtensionClasses/Extension_Classes_Component_p.c:
        * game/interpreters/ExtensionClasses/Extension_Classes_Visitor.inl:

          Added all the utility functions to the above directory and used them
          in extension classes.

Fri Nov 26 00:51:31 UTC 2010  Alhad Mokashi  <amokashi at iupui dot edu>

        * game/interpreters/ExtensionClasses/Extension_Classes_Component_Impl.cpp:
        * game/interpreters/ExtensionClasses/Extension_Classes_Visitor.inl:

          Changed the mkdir function to ::Utils::CreatePath.

Thu Nov 25 23:27:52 UTC 2010  Alhad Mokashi  <amokashi at iupui dot edu>

        * game/interpreters/ExtensionClasses/Extension_Classes_Build_Files_Generator.cpp:
        * game/interpreters/ExtensionClasses/Extension_Classes_Code_Generator.cpp:

          Added iomanip functions to generate repeated patterns in header.

Thu Nov 25 21:48:49 UTC 2010  Alhad Mokashi  <amokashi at iupui dot edu>

        * game/interpreters/ExtensionClasses/Extension_Classes_Build_Files_Generator.h:
        * game/interpreters/ExtensionClasses/Extension_Classes_Build_Files_Generator.cpp:
        * game/interpreters/ExtensionClasses/Extension_Classes_Code_Generator.h:
        * game/interpreters/ExtensionClasses/Extension_Classes_Code_Generator.cpp:

          Added normalize functions to normalize names of generated mpc/mwc files
          and the name used in ifndef.

Thu Nov 25 07:30:10 UTC 2010  Alhad Mokashi  <amokashi at iupui dot edu>

        * game/interpreters/ExtensionClasses/Extension_Classes_Build_Files_Generator.cpp:
        * game/interpreters/ExtensionClasses/Extension_Classes_Code_Generator.h:
        * game/interpreters/ExtensionClasses/Extension_Classes_Code_Generator.cpp:
        * game/interpreters/ExtensionClasses/Extension_Classes_Component.h:
        * game/interpreters/ExtensionClasses/Extension_Classes_Component_Impl.cpp:
        * game/interpreters/ExtensionClasses/Extension_Classes_Component_i.c:
        * game/interpreters/ExtensionClasses/Extension_Classes_Component_p.c:
        * game/interpreters/ExtensionClasses/Extension_Classes_Visitor.h:
        * game/interpreters/ExtensionClasses/Extension_Classes_Visitor.inl:
        * game/interpreters/ExtensionClasses/Extension_Classes_Visitor.cpp:

          Refactored code and corrected allignment bugs in generated files.
          Bugfix in the generated mpc file where the include tag was generated
          incorrectly.

Wed Nov 24 04:47:53 UTC 2010  Alhad Mokashi  <amokashi at iupui dot edu>

        * GAME.mwc:

          Added game folder to the list of folders for project generation
          as the game projects were not being generated.

        * game/interpreters/ExtensionClasses/Extension_Classes_Component.h:
        * game/interpreters/ExtensionClasses/Extension_Classes_Component_i.c:
        * game/interpreters/ExtensionClasses/Extension_Classes_Component_p.c:

        * game/GAME.mpc:
        * game/dialogs/GAME_Dialogs.mpc:
        * game/manip/Manipulation.mpc:
        * game/utils/GAME_Utils.mpc:
        * game/xme/XME.mpc:

          Added boost_base as the root project as the files in the projects
          could not bind the included boost files.

Tue Nov 23 10:16:17 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * game/xme/Configuration.h:
          Fixed compile problem with GCC 4.5

Tue Nov 23 10:12:36 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * GAME.mwc:
          Try to compile everything on non windows

Mon Nov 22 14:32:59 UTC 2010  Alhad Mokashi  <amokashi at iupui dot edu>

        * game/interpreters/ExtensionClasses/Extension_Classes_Build_Files_Generator.cpp:

          Removed the -features line from the generated mwc. Now to generate the wrokspace
          one has to use -features mfc=1.

Mon Nov 22 14:23:06 UTC 2010  Alhad Mokashi  <amokashi at iupui dot edu>

        * game/interpreters/ExtensionClasses/Extension_Classes_Build_Files_Generator.cpp:

          Tab spacing corrected in the generated mpc file.

Mon Nov 22 14:14:41 UTC 2010  Alhad Mokashi  <amokashi at iupui dot edu>

        * game/interpreters/ExtensionClasses/Extension_Classes_Build_Files_Generator.h:
        * game/interpreters/ExtensionClasses/Extension_Classes_Build_Files_Generator.cpp:
        * game/interpreters/ExtensionClasses/Extension_Classes_Code_Generator.cpp:

          Corrected coding style.

Mon Nov 22 01:53:32 UTC 2010  Alhad Mokashi  <amokashi at iupui dot edu>

        * game/interpreters/ExtensionClasses/Extension_Classes_Code_Generator.cpp:
        * game/interpreters/ExtensionClasses/Extension_Classes_Visitor.cpp:

          Bugfix where the generated create methods were not static. The create methods
          are generated only when the object has a parent or is in the root folder.

Mon Nov 22 00:34:08 UTC 2010  Alhad Mokashi  <amokashi at iupui dot edu>

        * game/interpreters/ExtensionClasses/ExtensionClasses.mpc:
        * game/interpreters/ExtensionClasses/Extension_Classes_Component.h:
        * game/interpreters/ExtensionClasses/Extension_Classes_Component_i.c:
        * game/interpreters/ExtensionClasses/Extension_Classes_Component_p.c:

          Removed gme_common from the list of base projects for the
          generated mpc.

Sun Nov 21 22:58:37 UTC 2010  Alhad Mokashi  <amokashi at iupui dot edu>

        * game/interpreters/ExtensionClasses/Extension_Classes_Build_Files_Generator.cpp:

          Changed the includes and the cmdline in the generated mpc amd mwc
          files respectively.

Sun Nov 21 22:01:06 UTC 2010  Alhad Mokashi  <amokashi at iupui dot edu>

        * game/interpreters/ExtensionClasses/Extension_Classes_Code_Generator.cpp:

          Added metaname as the first attribute in .h and .cpp files.
          Added const static member name decleration in each generated
          attribute function.

Sun Nov 21 19:39:40 UTC 2010 Alhad Mokashi  <amokashi at iupui dot edu>

        * game/interpreters/ExtensionClasses/ExtensionClasses.mpc:
        * game/interpreters/ExtensionClasses/Extension_Classes_Component.h:
        * game/interpreters/ExtensionClasses/Extension_Classes_Component_i.c:
        * game/interpreters/ExtensionClasses/Extension_Classes_Component_p.c:

          Removed configuration.cpp from mpc file.

        * game/interpreters/ExtensionClasses/Configuration.h:
        * game/interpreters/ExtensionClasses/Configuration.cpp:

          Removed these files.

Sun Nov 21 19:00:03 UTC 2010  Alhad Mokashi  <amokashi at iupui dot edu>

        * game/interpreters/ExtensionClasses/Extension_Classes_Code_Generator.h:
        * game/interpreters/ExtensionClasses/Extension_Classes_Code_Generator.cpp:

          Removed unnecessary includes from the header files. Added the necessary
          ones to the cpp file.

Sun Nov 21 06:24:22 UTC 2010  Alhad Mokashi  <amokashi at iupui dot edu>

        * game/interpreters/ExtensionClasses/Extension_Classes_Visitor.cpp:

          Removed extra spaces at the start of base member initialization.

Sun Nov 21 05:53:45 UTC 2010  Alhad Mokashi  <amokashi at iupui dot edu>

        * game/interpreters/ExtensionClasses/Extension_Classes_Build_Files_Generator.cpp:

          Removed ./ from front of the filenames that appear in the .mpc file

Sun Nov 21 05:37:37 UTC 2010  Alhad Mokashi  <amokashi at iupui dot edu>

        * game/interpreters/ExtensionClasses/Extension_Classes_Build_Files_Generator.cpp:
        * game/interpreters/ExtensionClasses/Extension_Classes_Code_Generator.cpp:

          Added  // \-*- C++ -*- at the top of all the generated .h files.

Sun Nov 21 05:18:51 UTC 2010  Alhad Mokashi  <amokashi at iupui dot edu>

        * game/interpreters/ExtensionClasses/Extension_Classes_Build_Files_Generator.h:
        * game/interpreters/ExtensionClasses/Extension_Classes_Build_Files_Generator.cpp:

          Added newline at the end of generated stdafx files. Added the header preamble
          to the generated stdafx.h file.

Sat Nov 20 14:42:26 UTC 2010  Alhad Mokashi  <amokashi at iupui dot edu>

        * game/interpreters/ExtensionClasses/Extension_Classes_Visitor.cpp:

          Bugfix where copy constructor was not generated.

Sat Nov 20 04:19:24 UTC 2010  Alhad Mokashi  <amokashi at iupui dot edu>

        * game/interpreters/ExtensionClasses/Extension_Classes_Code_Generator.cpp:

          Bugfix for the generated _create method for the meta type Connection,Set,
          Reference and FCO.

Sat Nov 20 03:05:19 UTC 2010  Alhad Mokashi  <amokashi at iupui dot edu>

        * game/interpreters/ExtensionClasses/Extension_Classes_Build_Files_Generator.cpp:
        * game/interpreters/ExtensionClasses/Extension_Classes_Code_Generator.h:
        * game/interpreters/ExtensionClasses/Extension_Classes_Code_Generator.cpp:
        * game/interpreters/ExtensionClasses/Extension_Classes_Component_Impl.cpp:
        * game/interpreters/ExtensionClasses/Extension_Classes_Component_Module.cpp:
        * game/interpreters/ExtensionClasses/Extension_Classes_Visitor.cpp:

          Bugfixes: incorrect #ifndef tag, added Id tag to .cpp files, correted
          implementation of _create method, fixed formatting for _narrow method,
          added keyword void to empty functions, corrected format of generated
          constructor and added Id tag to mwc file.
          Features: added header preamble and added metaname attribute to
          generated classes.

Fri Nov 19 19:45:43 UTC 2010  Alhad Mokashi  <amokashi at iupui dot edu>

        * game/interpreters/ExtensionClasses/Extension_Classes_Build_Files_Generator.h:
        * game/interpreters/ExtensionClasses/Extension_Classes_Build_Files_Generator.cpp:
        * game/interpreters/ExtensionClasses/Extension_Classes_Code_Generator.h:
        * game/interpreters/ExtensionClasses/Extension_Classes_Code_Generator.cpp:
        * game/interpreters/ExtensionClasses/Extension_Classes_Component_Impl.cpp:
        * game/interpreters/ExtensionClasses/Extension_Classes_Visitor.h:
        * game/interpreters/ExtensionClasses/Extension_Classes_Visitor.cpp:

          Bugfix where the #ifndef name was generated inncorrectly.

Fri Nov 19 18:30:50 UTC 2010  Alhad Mokashi  <amokashi at iupui dot edu>

        * game/interpreters/ExtensionClasses/Extension_Classes_Build_Files_Generator.cpp:
        * game/interpreters/ExtensionClasses/Extension_Classes_Code_Generator.cpp:

          Bugfix where Mga.h was included in all the generages.h files. Now
          it is included only in the stdafx.h file.

Fri Nov 19 07:16:11 UTC 2010  Alhad Mokashi  <amokashi at iupui dot edu>

        * game/interpreters/ExtensionClasses/ExtensionClasses.mpc:
        * game/interpreters/ExtensionClasses/Extension_Classes_Build_Files_Generator.h:
        * game/interpreters/ExtensionClasses/Extension_Classes_Build_Files_Generator.cpp:

          Added the above mentioned files to seperate the generation of mpc, mwc and
          stdafx files from the class files.

        * game/interpreters/ExtensionClasses/Extension_Classes_Code_Generator.h:
        * game/interpreters/ExtensionClasses/Extension_Classes_Code_Generator.cpp:

          Bugfix where the proper base class was not called in the constructor
          in case the inheritance was done using the proxy of the given object.

        * game/interpreters/ExtensionClasses/Extension_Classes_Component.h:
        * game/interpreters/ExtensionClasses/Extension_Classes_Component_Impl.cpp:

          Removed the code generation of the mwc, mpc and stdafx files and
          added it to a separate file.

        * game/interpreters/ExtensionClasses/Extension_Classes_Component_i.c:
        * game/interpreters/ExtensionClasses/Extension_Classes_Component_p.c:

        * game/interpreters/ExtensionClasses/Extension_Classes_Visitor.h:
        * game/interpreters/ExtensionClasses/Extension_Classes_Visitor.inl:
        * game/interpreters/ExtensionClasses/Extension_Classes_Visitor.cpp:

          Bugfix where the proper base class was not called in the constructor
          in case the inheritance was done using the proxy of the given object.
          Removed the code that seperated the generatio of mpc and mwc files,
          instead created a set to store all the elements and process later
          while generating the mwc and mpc files.

          Added the code that creates the _export file to enable the generated
          code to be exported as a library.

Wed Nov 17 05:27:10 UTC 2010  James H. Hill  <hillj at cs dot iupui dot edu>

        * MPC/config/game_be.mpb:
        * MPC/config/game_bin.mpb:
        * MPC/config/game_component.mpb:
        * MPC/config/game_decorator.mpb:
        * MPC/config/game_lib.mpb:

          Refactored the base projects.

        * game/GAME.mpc:
        * game/automation/automation.mpc:
        * game/be/GAME_BE.mpc:
        * game/dialogs/GAME_Dialogs.mpc:
        * game/graphics/Graphics.mpc:
        * game/manip/Manipulation.mpc:
        * game/utils/GAME_Utils.mpc:
        * game/xme/XME.mpc:
        * game/xml/GAME_XML.mpc:

          Updated the projects above to install binaries in locations
          under $(GAME_ROOT).

Wed Nov 17 03:58:49 UTC 2010  James H. Hill  <hillj at cs dot iupui dot edu>

        * MPC/config/game_be.mpb:
        * MPC/config/game_common.mpb:
        * MPC/config/game_decorator.mpb:
        * MPC/config/game_register.mpb:

          Updated variables to use $(GAME_ROOT) locations.

        * includes:
        * includes/GME:
        * includes/GME/Component.def:
        * includes/GME/DecoratorApp.def:

          Definition files used when building GAME components for GME.

Wed Nov 17 03:52:14 UTC 2010  James H. Hill  <hillj at cs dot iupui dot edu>

        * MPC:
        * MPC/config:
        * MPC/config/game.mpb:
        * MPC/config/game_be.mpb:
        * MPC/config/game_common.mpb:
        * MPC/config/game_component.mpb:
        * MPC/config/game_decorator.mpb:
        * MPC/config/game_dialogs.mpb:
        * MPC/config/game_graphics.mpb:
        * MPC/config/game_interpreter.mpb:
        * MPC/config/game_manip.mpb:
        * MPC/config/game_utils.mpb:
        * MPC/config/game_xme.mpb:
        * MPC/config/game_xml.mpb:

          MPC base projects for GAME.

        * bin:
        * lib:

          Location of compiled artifacts.

Tue Nov 16 15:01:08 UTC 2010  James H. Hill  <hillj at cs dot iupui dot edu>

        * ChangeLog:

          The location for writing changes to GAME.

