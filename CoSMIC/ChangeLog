Sun Jul 11 01:53:55 UTC 2010  James H. Hill  <hillj at cs dot iupui dot edu>

        * PIM/PICML/interpreters/IDLGenerator/IDL_File_Generator.cpp:
        
          Bug fix where string constants were not enclosed in
          quotation marks.
          
        * PIM/PICML/interpreters/IDLImporter/Project_Generator.cpp:
        
          Bug fix where unsigned short constants were not handled
          correctly.
          
          Bug fix where the values of a long long and unsigned long
          long where not handled correctly.

        * PIM/PICML/tests:
        * PIM/PICML/tests/IDL_to_PICML:
        
          Location for idl_to_picml unit tests.
          
        * PIM/PICML/tests/IDL_to_PICML/Constant:
        * PIM/PICML/tests/IDL_to_PICML/Constant/Constant.idl:
        * PIM/PICML/tests/IDL_to_PICML/Constant/generated:
        * PIM/PICML/tests/IDL_to_PICML/Constant/generated/Constant.mpc:
        * PIM/PICML/tests/IDL_to_PICML/Constant/generated/constant.cpp:
        
          Test for validating import/generation of constant elements.

Sun Jul 11 00:36:27 UTC 2010  Alhad Mokashi  <amokashi at iupui dot edu>

        * PIM/PICML/interpreters/DeploymentPlanComponent/Complex_Type_Visitor.h:
        * PIM/PICML/interpreters/DeploymentPlanComponent/Complex_Type_Visitor.inl:
        * PIM/PICML/interpreters/DeploymentPlanComponent/Complex_Type_Visitor.cpp:
        * PIM/PICML/interpreters/DeploymentPlanComponent/DeploymentPlanVisitor.h:
        * PIM/PICML/interpreters/DeploymentPlanComponent/DeploymentPlanVisitor.cpp:
        * PIM/PICML/interpreters/DeploymentPlanComponent/Value_Visitor.h:
        * PIM/PICML/interpreters/DeploymentPlanComponent/Value_Visitor.inl:
        * PIM/PICML/interpreters/DeploymentPlanComponent/Value_Visitor.cpp:

          Added two visitors Complex_Type_Visitor - to traverse through the type
          of the added property and Value_Visior - to traverse through the values
          of the complex type.

        * PIM/PICML/paradigms/PICML-uml.xme:
        * PIM/PICML/paradigms/PICML.mta:
        * PIM/PICML/paradigms/PICML.xme:
        * PIM/PICML/paradigms/PICML.xml:
        * PIM/PICML/paradigms/PICML.xmp:
        * PIM/PICML/paradigms/PICML_DSML.mpc:

          Changes the metamodel "Common" sheet to enable complex properties by
          adding a DataValueContainer, ComplexTypeReference and DataValue
          to a property.

Fri Jul  9 22:02:40 UTC 2010  James H. Hill  <hillj at cs dot iupui dot edu>

        * Utils/GAME/game/Filter.h:
        * Utils/GAME/game/Filter.cpp:

          Overloaded the kind () and name () method.

Fri Jul  9 21:28:36 UTC 2010  James H. Hill  <hillj at cs dot iupui dot edu>

        * PIM/PICML/addons/CBMLManager/StdAfx.h:
        * PIM/PICML/addons/CBMLManager/StdAfx.cpp:
        * PIM/PICML/addons/CBMLManager/String_Selection_Dialog.cpp:
        * PIM/PICML/addons/PICMLManager/StdAfx.h:
        * PIM/PICML/addons/PICMLManager/StdAfx.cpp:
        * PIM/PICML/decorators/ComponentDecorator/Component_Decorator_Impl.cpp:
        * PIM/PICML/decorators/ComponentDecorator/StdAfx.h:
        * PIM/PICML/decorators/ComponentInstanceDecorator/ComponentInstance_Decorator_Impl.cpp:
        * PIM/PICML/decorators/ComponentRefDecorator/StdAfx.h:
        * PIM/PICML/decorators/NoShowRefersTo/NoShowRefersTo_Decorator_Impl.cpp:
        * PIM/PICML/decorators/NoShowRefersTo/StdAfx.h:
        * PIM/PICML/interpreters/IDLTextEditor/IDLTextEditor.mpc:
        * PIM/PICML/interpreters/IDLTextEditor/IDL_File_Parser.cpp:
        * PIM/PICML/interpreters/IDLTextEditor/StdAfx.h:
        * PIM/PICML/interpreters/IDLTextEditor/Symbols.cpp:
        * PIM/PICML/interpreters/IDLTextEditor/rules/attribute_decl.cpp:
        * PIM/PICML/interpreters/IDLTextEditor/rules/base_type_spec.cpp:
        * PIM/PICML/interpreters/IDLTextEditor/rules/boolean_type.cpp:
        * PIM/PICML/interpreters/IDLTextEditor/rules/char_type.cpp:
        * PIM/PICML/interpreters/IDLTextEditor/rules/component.cpp:
        * PIM/PICML/interpreters/IDLTextEditor/rules/const_decl.cpp:
        * PIM/PICML/interpreters/IDLTextEditor/rules/event.cpp:
        * PIM/PICML/interpreters/IDLTextEditor/rules/except_decl.cpp:
        * PIM/PICML/interpreters/IDLTextEditor/rules/export.cpp:
        * PIM/PICML/interpreters/IDLTextEditor/rules/floating_pt_type.cpp:
        * PIM/PICML/interpreters/IDLTextEditor/rules/grammar.cpp:
        * PIM/PICML/interpreters/IDLTextEditor/rules/home_decl.cpp:
        * PIM/PICML/interpreters/IDLTextEditor/rules/ident.cpp:
        * PIM/PICML/interpreters/IDLTextEditor/rules/init_params_decl.cpp:
        * PIM/PICML/interpreters/IDLTextEditor/rules/integer_type.cpp:
        * PIM/PICML/interpreters/IDLTextEditor/rules/interface.cpp:
        * PIM/PICML/interpreters/IDLTextEditor/rules/octet.cpp:
        * PIM/PICML/interpreters/IDLTextEditor/rules/op_decl.cpp:
        * PIM/PICML/interpreters/IDLTextEditor/rules/param_type_spec.cpp:
        * PIM/PICML/interpreters/IDLTextEditor/rules/preprocessor.cpp:
        * PIM/PICML/interpreters/IDLTextEditor/rules/raises_expr.cpp:
        * PIM/PICML/interpreters/IDLTextEditor/rules/scoped_name.cpp:
        * PIM/PICML/interpreters/IDLTextEditor/rules/simple_type_spec.cpp:
        * PIM/PICML/interpreters/IDLTextEditor/rules/string_type.cpp:
        * PIM/PICML/interpreters/IDLTextEditor/rules/template_type_spec.cpp:
        * PIM/PICML/interpreters/IDLTextEditor/rules/type_decl.cpp:
        * PIM/PICML/interpreters/IDLTextEditor/rules/type_spec.cpp:
        * PIM/PICML/interpreters/IDLTextEditor/rules/value.cpp:
        * PIM/PICML/interpreters/IDLTextEditor/rules/value_element.cpp:
        * PIM/PICML/interpreters/IDLTextEditor/rules/wide_string_type.cpp:
        * PIM/PICML/interpreters/PICML/Data_Value_Builder.cpp:
        * PIM/PICML/interpreters/PICML/PICML.mpc:
        * PIM/PICML/utils/game/PICML_GAME_Utils.mpc:
        * PIM/PICML/utils/game/Utility.cpp:
        * PIM/PICML/utils/game/stdafx.h:
        * PIM/PICML/utils/game/stdafx.cpp:
        * Utils/GAME/game/automation/Automation_App.cpp:
        * Utils/GAME/game/be/Addon_Impl_Base.cpp:
        * Utils/GAME/game/be/ComponentEx_Impl_Base.cpp:
        * Utils/GAME/game/be/Decorator_Impl.cpp:
        * Utils/GAME/game/be/Event_Handler.cpp:
        * Utils/GAME/game/be/Event_Handler_Impl.cpp:
        * Utils/GAME/game/be/GAME_BE.mpc:
        * Utils/GAME/game/be/Interpreter_Impl_Base.cpp:
        * Utils/GAME/game/be/Plugin_Impl.cpp:
        * Utils/GAME/game/be/stdafx.h:
        * Utils/GAME/game/be/stdafx.cpp:
        * Utils/GAME/game/graphics/stdafx.h:
        * Utils/GAME/game/manip/Manipulation.mpc:
        * Utils/GAME/game/manip/copy.cpp:
        * Utils/GAME/game/manip/stdafx.h:
        * Utils/GAME/game/manip/stdafx.cpp:
        * Utils/GAME/game/utils/GAME_Utils.mpc:
        * Utils/GAME/game/utils/Parser.cpp:
        * Utils/GAME/game/utils/Point.cpp:
        * Utils/GAME/game/utils/Project_Settings.cpp:
        * Utils/GAME/game/utils/Registrar.cpp:
        * Utils/GAME/game/utils/stdafx.h:
        * Utils/GAME/game/utils/stdafx.cpp:
        * Utils/T3/t3/runtime/Auto_Model.cpp:
        * Utils/T3/t3/runtime/Auto_Model_Impl.cpp:
        * Utils/T3/t3/runtime/Event_Listener.cpp:
        * Utils/T3/t3/runtime/Runtime_Engine.h:
        * Utils/T3/t3/runtime/Runtime_Engine.cpp:
        * Utils/T3/t3/runtime/Symbol.cpp:
        * Utils/T3/t3/runtime/reference.cpp:
        * Utils/T3/t3/runtime/stdafx.h:
        * Utils/T3/t3/runtime/stdafx.cpp:
        * Utils/T3/t3/runtime/t3_runtime.mpc:

          Fixed compilation errors related to updates to GAME below.

        * Utils/GAME/game/Atom.cpp:
        * Utils/GAME/game/Attribute.cpp:
        * Utils/GAME/game/Component.h:
        * Utils/GAME/game/Component.cpp:
        * Utils/GAME/game/Connection.cpp:
        * Utils/GAME/game/FCO.cpp:
        * Utils/GAME/game/Filter.h:
        * Utils/GAME/game/Filter.cpp:
        * Utils/GAME/game/Folder.h:
        * Utils/GAME/game/Folder.cpp:
        * Utils/GAME/game/GAME.cpp:
        * Utils/GAME/game/GAME.mpc:
        * Utils/GAME/game/MetaAspect.inl:
        * Utils/GAME/game/MetaAspect.cpp:
        * Utils/GAME/game/MetaAttribute.cpp:
        * Utils/GAME/game/MetaBase.h:
        * Utils/GAME/game/MetaBase.inl:
        * Utils/GAME/game/MetaBase.cpp:
        * Utils/GAME/game/MetaEnumItem.cpp:
        * Utils/GAME/game/MetaFCO.h:
        * Utils/GAME/game/MetaFCO.inl:
        * Utils/GAME/game/MetaFCO.cpp:
        * Utils/GAME/game/MetaFolder.h:
        * Utils/GAME/game/MetaFolder.inl:
        * Utils/GAME/game/MetaFolder.cpp:
        * Utils/GAME/game/MetaModel.cpp:
        * Utils/GAME/game/MetaPart.inl:
        * Utils/GAME/game/MetaPart.cpp:
        * Utils/GAME/game/MetaProject.h:
        * Utils/GAME/game/MetaProject.inl:
        * Utils/GAME/game/MetaProject.cpp:
        * Utils/GAME/game/MetaReference.h:
        * Utils/GAME/game/MetaReference.inl:
        * Utils/GAME/game/MetaReference.cpp:
        * Utils/GAME/game/MetaRole.cpp:
        * Utils/GAME/game/Model.cpp:
        * Utils/GAME/game/Object.h:
        * Utils/GAME/game/Object.cpp:
        * Utils/GAME/game/Part.cpp:
        * Utils/GAME/game/Project.h:
        * Utils/GAME/game/Project.cpp:
        * Utils/GAME/game/Reference.h:
        * Utils/GAME/game/Reference.inl:
        * Utils/GAME/game/Reference.cpp:
        * Utils/GAME/game/Set.cpp:
        * Utils/GAME/game/Transaction.cpp:
        * Utils/GAME/game/Visitor.cpp:

          Improved compilation dependencies.

          Added support resolving the types that a reference can
          refer to.

Thu Jul  8 22:17:11 UTC 2010  James H. Hill  <hillj at cs dot iupui dot edu>

        * Utils/GAME/game/GAME.mpc:
        * Utils/GAME/game/Transaction.h:
        * Utils/GAME/game/Transaction.inl:
        * Utils/GAME/game/Transaction.cpp:

          Simple object for managing transactions within a specified scope.

        * Utils/GAME/game/be/Event_Handler.cpp:

          Added more exception handling to prevent exceptions from
          making their way to the server.

Thu Jul  8 14:26:27 UTC 2010  James H. Hill  <hillj at cs dot iupui dot edu>

        * PIM/PICML/interpreters/IDLGenerator/IDL_Generator_Component_Impl.h:
        * PIM/PICML/interpreters/IDLGenerator/IDL_Generator_Component_Impl.cpp:

          Added automation support.

        * Utils/GAME/game/automation/Automation_App.cpp:
        * Utils/GAME/game/automation/Automation_App_Options.inl:

          Changed the --non-interactive command-line parameter to --interactive. The
          application is now non-interactive by default.

        * Utils/GAME/game/be/ComponentEx_Impl_Base.h:
        * Utils/GAME/game/be/ComponentEx_Impl_Base.inl:
        * Utils/GAME/game/be/ComponentEx_Impl_T.cpp:

          Added support for handling parameters.

          Added more exception handling.

Thu Jul  8 03:28:42 UTC 2010  James H. Hill  <hillj at cs dot iupui dot edu>

        * PIM/PICML/interpreters/IDLTextEditor/ComponentLib_h.h:

          This file is needed for BON.

Thu Jul  8 00:08:48 UTC 2010  James H. Hill  <hillj at cs dot iupui dot edu>

        * PIM/PICML/interpreters/IDLGenerator/IDLGenerator.mpc:
        * PIM/PICML/interpreters/IDLGenerator/IDL_File_Generator.cpp:
        * PIM/PICML/interpreters/IDLGenerator/IDL_Generator_Component.idl:
        * PIM/PICML/interpreters/IDLGenerator/IDL_Generator_Component_Impl.h:
        * PIM/PICML/interpreters/IDLGenerator/IDL_Generator_Component_Impl.cpp:
        * PIM/PICML/interpreters/IDLGenerator/IDL_Generator_Component_Module.cpp:
        * PIM/PICML/interpreters/IDLGenerator/StdAfx.h:

          Re-implemented interface with GME using GAME.

        * PIM/PICML/interpreters/IDLGenerator/BON2Component.h:
        * PIM/PICML/interpreters/IDLGenerator/BON2Component.cpp:
        * PIM/PICML/interpreters/IDLGenerator/ComponentConfig.h:
        * PIM/PICML/interpreters/IDLGenerator/ComponentLib_h.h:
        * PIM/PICML/interpreters/IDLGenerator/RawComponent.h:
        * PIM/PICML/interpreters/IDLGenerator/RawComponent.cpp:
        * PIM/PICML/interpreters/IDLGenerator/UdmApp.h:
        * PIM/PICML/interpreters/IDLGenerator/UdmApp.cpp:

          Removed these files.

Wed Jul  7 22:15:44 UTC 2010  James H. Hill  <hillj at cs dot iupui dot edu>

        * Utils/GAME/game/automation/Automation_App.cpp:
        * Utils/GAME/game/automation/Parameter_Parser.h:
        * Utils/GAME/game/automation/Parameter_Parser.cpp:
        * Utils/GAME/game/automation/automation.mpc:

          Implemented support for passing parameters to the interpreter.

Wed Jul  7 20:45:48 UTC 2010  James H. Hill  <hillj at cs dot iupui dot edu>

        * MPC/config/game_manip.mpb:
        * Utils/GAME/game/manip:
        * Utils/GAME/game/manip/Manipulation.mpc:
        * Utils/GAME/game/manip/Manipulation_export.h:
        * Utils/GAME/game/manip/copy.h:
        * Utils/GAME/game/manip/copy.cpp:

          First version of a model manipulation library.

Wed Jul  7 17:54:10 UTC 2010  James H. Hill  <hillj at cs dot iupui dot edu>

        * Utils/GAME/game/Project.h:
        * Utils/GAME/game/Project.cpp:

          The destructor no longer closes the territory. Instead, this now
          handled in the close () method.

Wed Jul  7 14:03:43 UTC 2010  James H. Hill  <hillj at cs dot iupui dot edu>

        * Utils/GAME/game/Project.cpp:

          Closing the project now releases the CComPtr.

        * Utils/GAME/game/Territory.cpp:

          Improved the code layout.

        * Utils/GAME/game/automation:
        * Utils/GAME/game/automation/Automation_App.h:
        * Utils/GAME/game/automation/Automation_App.inl:
        * Utils/GAME/game/automation/Automation_App.cpp:
        * Utils/GAME/game/automation/Automation_App_Options.h:
        * Utils/GAME/game/automation/Automation_App_Options.inl:
        * Utils/GAME/game/automation/Automation_App_Options.cpp:
        * Utils/GAME/game/automation/automation.mpc:
        * Utils/GAME/game/automation/automation.cpp:

          First implementation of the application for automating an
          interpreter.

        * Utils/GAME/game/GAME.mpc:
        * Utils/GAME/game/types.h:

          Standard GAME types. This will help normalize the types
          across the different projects.

Wed Jul  7 02:23:10 UTC 2010  James H. Hill  <hillj at cs dot iupui dot edu>

        * Utils/ModelUpgrade/Model_Upgrade.cpp:

          Fixed compiler errors.

Tue Jul  6 20:05:17 UTC 2010  James H. Hill  <hillj at cs dot iupui dot edu>

        * Utils/GAME/game/Project.h:
        * Utils/GAME/game/Project.cpp:

          The open () and create () methods are now named _open () and
          _create (), and are declared as static methods.

        * Utils/GAME/game/be/ComponentEx_Impl_T.cpp:

          Added missing header files.

Tue Jul  6 14:11:22 UTC 2010  James H. Hill  <hillj at cs dot iupui dot edu>

        * Utils/GAME/game/Component.h:
        * Utils/GAME/game/Component.inl:
        * Utils/GAME/game/Component.cpp:
        * Utils/GAME/game/ComponentEx.h:
        * Utils/GAME/game/ComponentEx.inl:
        * Utils/GAME/game/ComponentEx.cpp:

          Added support for loading a extended component via the _load () method.

          Implemented missing constructors.

          Moved some code to the inline file.

        * Utils/GAME/game/be/Interpreter_T.h:
        * Utils/GAME/game/be/Plugin_T.h:
        * Utils/GAME/game/be/Plugin_T.inl:

          Removed obsolete code.

Thu Jul  1 21:26:20 UTC 2010  James H. Hill  <hillj at cs dot iupui dot edu>

        * PIM/PICML/addons/PICMLManager/Configurator.idl:
        * PIM/PICML/addons/PICMLManager/DefaultArtifactGenerator.h:
        * PIM/PICML/addons/PICMLManager/DefaultArtifactGenerator.cpp:
        * PIM/PICML/addons/PICMLManager/DefaultImplementationGenerator.h:
        * PIM/PICML/addons/PICMLManager/DefaultImplementationGenerator.cpp:
        * PIM/PICML/addons/PICMLManager/PICMLManager.idl:
        * PIM/PICML/addons/PICMLManager/PICMLManager.mpc:
        * PIM/PICML/addons/PICMLManager/PICMLManager_Impl.h:
        * PIM/PICML/addons/PICMLManager/PICMLManager_Impl.cpp:
        * PIM/PICML/addons/PICMLManager/PICMLManager_Module.cpp:
        * PIM/PICML/addons/PICMLManager/PICML_Manager_Addon.h:
        * PIM/PICML/addons/PICMLManager/PICML_Manager_Addon.cpp:

          Updated to latest version of GAME.

          Implemented an interface for configuring where the PICML Manager
          auto-generates the default component implementation and its artifacts.
          This is useful for automation purposes.

        * Utils/GAME/game/Project.h:
        * Utils/GAME/game/Project.cpp:
        * Utils/GAME/game/Collection_T.h:
        * Utils/GAME/game/GME_fwd.h:

          Implemented method for retrieving all the add-ons for a
          given project.

        * Utils/GAME/game/Component.h:
        * Utils/GAME/game/Component.cpp:
        * Utils/GAME/game/ComponentEx.h:
        * Utils/GAME/game/ComponentEx.cpp:
        * Utils/GAME/game/be/Addon_Impl_Base.h:
        * Utils/GAME/game/be/Addon_Impl_Base.inl:
        * Utils/GAME/game/be/Addon_Impl_Base.cpp:
        * Utils/GAME/game/be/Addon_Impl_T.h:
        * Utils/GAME/game/be/Addon_Impl_T.inl:
        * Utils/GAME/game/be/Addon_Impl_T.cpp:
        * Utils/GAME/game/be/ComponentEx_Impl_Base.h:
        * Utils/GAME/game/be/ComponentEx_Impl_Base.inl:
        * Utils/GAME/game/be/ComponentEx_Impl_Base.cpp:
        * Utils/GAME/game/be/ComponentEx_Impl_T.h:
        * Utils/GAME/game/be/ComponentEx_Impl_T.inl:
        * Utils/GAME/game/be/ComponentEx_Impl_T.cpp:
        * Utils/GAME/game/be/ComponentEx_T.h:
        * Utils/GAME/game/be/ComponentEx_T.inl:
        * Utils/GAME/game/be/ComponentEx_T.cpp:
        * Utils/GAME/game/be/GAME_BE.mpc:
        * Utils/GAME/game/be/Interpreter_Impl_Base.h:
        * Utils/GAME/game/be/Interpreter_Impl_Base.inl:
        * Utils/GAME/game/be/Interpreter_T.h:
        * Utils/GAME/game/be/Plugin_Impl.h:
        * Utils/GAME/game/be/Plugin_Impl.inl:

          Re-designed GAME's component framework. This re-design simplified
          a lot of things, and makes it possible to define domain-specific
          interfaces for the components.

        * Utils/GAME/game/be/Addon_T.h:
        * Utils/GAME/game/be/Addon_T.inl:
        * Utils/GAME/game/be/Addon_T.cpp:

          Removed these files.

Tue Jun 29 14:35:19 UTC 2010  James H. Hill  <hillj at cs dot iupui dot edu>

        * PIM/PICML/interpreters/Interpreters.mwc:

          Added exclude {} scope for different interpreters.

        * PIM/PICML/PICML.mwc:
        * cosmic.mwc:

          Move the PICML workspace to the PICML directory.

        * picml.mwc:

          Removed this file.

Mon Jun 28 22:05:04 UTC 2010  James H. Hill  <hillj at cs dot iupui dot edu>

        * ChangeLog:
        * ChangeLogs/ChangeLog-10c:
        * contrib:

          CoSMIC version 0.7.9 was released. Moved the ChangeLog
          to ChangeLogs/ChangeLog-09. Reverted contrib svn:externals property
          back to the HEAD revision.

   Local Variables:
   mode: change-log
   add-log-time-format: (lambda () (progn (setq tz (getenv "TZ")) (set-time-zone-rule "UTC") (setq time (format-time-string "%a %b %e %H:%M:%S %Z %Y" (current-time))) (set-time-zone-rule tz) time))
   indent-tabs-mode: nil
   End:

