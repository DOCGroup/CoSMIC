USER VISIBLE CHANGES BETWEEN CoSMIC-0.8.4 and CoSMIC-0.8.5
============================================================

. Fixed bug where the IDL generator would fail if an event, or referenced data
  type was at the same level as the object reference it.

USER VISIBLE CHANGES BETWEEN CoSMIC-0.8.2 and CoSMIC-0.8.3
============================================================

. Implemented support for template module alias.

. Implemented guard that prevent connections between a connector
  and a port if there is no valid connection possible.

. If there are no deployment plans in the model, then a
  warning message is displayed.

. Added a tag at the bottom of idl_to_picml's usage screen that
  states when the executable was created.

. Updated AMI4CCM handler to latest version of AMI4CCM standard.

. Added a --debug option to idl_to_picml, which can be used to
  print useful debugging information.

. Added a checkbox to the new component dialog that allows the user
  to determine if the servant's location is based on the fully
  qualified path of the compnent, or the component's filename.

. Implemented a new event handler that will initialize the predefined
  types folder with all the allowable predefined types.

. Bug fix where adding a template model instance to a model
  when there was more than one template model caused GME to
  crash.

. Bug fix where a complex property's data values were not populated
  if an aggregate was referenced that contained a key.

. Bug fix where generated node map had a blank line at the end
  of the file. Apparently, the execution manager does not like
  blank lines.

. Bug fix in idl_to_picml where the import would fail if there were
  extraneous comments in the code. This was resolved by adding rules
  for parsing both C and C++ comments.

USER VISIBLE CHANGES BETWEEN CoSMIC-0.8.2 and CoSMIC-0.8.3
============================================================

. Bug fix where idl_to_picml failed to import the IDL3_Plus
  test in CIAO. This was a result of the PICML metamodel not
  properly supporting some of IDL3+ semantics.

. Bug fix where the IDL generator creates bad declaration ordering
  with ComponentFactory element.

. Bug fix where the CBML model intelligence was not executing
  because its event mask was not set propertly.

. Bug fix where it was impossible to delete a ComponentInstance
  element if it contained a MirrorPortInstance or ExtendedPortInstance
  element.

. Bug fix where large number of circular dependencies caused crash
  in IDL generator interpreter.

. Bug fix where the private/public flags were missing from
  an event tag.

. Bug fix where the 'supports' statement on a component was not
  generated correctly.

USER VISIBLE CHANGES BETWEEN CoSMIC-0.8.1 and CoSMIC-0.8.2
============================================================

. Re-designed how actions are modeled in CBML and WML. Now,
  actions are called operations in WML. Likewise, they now can
  contain in, out, and inout parmeters and return values. In CBML,
  the worker actions are no longer instances of actions. Instead,
  they reference the corresponding action in the target worker.

. Updated the naming convention for the location of connector
  artifacts. For now, the location of the connector artifacts
  is defined by the fully qualified name of the hosting template
  package.

. Enhanced IDL generator to be more efficient when generating
  forward declarations and added the ability to detect and resolve
  circular dependencies.

. Added support for generating default implementation for types
  that support implementations when the .xme model is being
  imported.

. Removed the --overwrite option in idl_to_picml.

. In idl_to_picml Re-added the -i option and updated its semantics
  such that it is used to specify an initial (import) model to use
  when importing IDL, but the final model is still saved to the one
  specified using the -x option.

. Improved support to generating locality manager information into
  a deployment plan. The information for the locality manager, if
  enabled, is derived from the deployment plan model. Each collocation
  group maps to a locality manager instance. Likewise, the name of
  the collocation group maps to the ProcessName configuration property
  on the locality manager instance.

. When adding a component or connector instance to a model, the PICML
  model intelligence will either (1) automatically select the
  implementation or (2) present a dialog of valid implementations to
  select. It will then automatically create the contained type
  element.

. The location of the generated deployment descriptors is saved
  and restored during future exeuctions of the deployment plan
  generator.

. When creating a template module instance, its elements
  are expanded to contain concrete types. This makes it easier
  to reference elements in a template module instance.

USER VISIBLE CHANGES BETWEEN CoSMIC-0.8.0 and CoSMIC-0.8.1
============================================================

. Delegation of extended/mirror ports. An extended/mirror
  port can be delegated to 0..1 delegation ports. Supporting
  delegation to multiple delegation ports will results in
  deployments that are not able to deploy via DAnCE.

. Support for generating valid descriptor information for
  ami4ccm connectors. The ami4ccm support works similar to
  the dds4ccm support. To generate the necessary pragma
  statements in IDL for ami4ccm, you must enable the async
  attribute on both the Object and RequiredRequestPort.

. First version of supporting process/thread specification for
  plan locality managers. Right now, PICML treats locality manager
  as regular components. This means you set the process/thread
  affinity using properties attached to a locality manager
  instance. The property names are as follows:

  - LocalityManager.ProcessName (String)
  - LocalityArguments (String)

  As more is learned about locality managers, the design and
  implementation of locality managers will be improved.

. First version of supporting specification of CPU or CPU core
  affinity for each process/thread. The realization of this is
  similar to the process/thread specification above. The name
  of the property for specifying affinity is:

  - edu.vanderbilt.dre.DAnCE.LocalityManager.CPUAffinity

. Complete support for managing ComplexType elements via the
  Property Manager, and expose the Property Manager icon on
  the toolbar. In particular, you can move elements in a array
  up/down and delete them. In you must close the dialog and
  re-open it after you add a new element to an array consisting
  of complex types to view the members of the newly added complex
  type.

. Generation of a nodemap.dat file in conjunction with the
  auto-generated .cdd file. The name of the auto-generated file
  will be the same as the deployment plan. To include an entry
  in a .nodemap, attach a Property element of type String to the
  target NodeReference element, and set its name to StringIOR.
  The value of the Property element is a valid string IOR (i.e.,
  corbaname:, corbaloc:, IOR:).

. When making a connection between a Facet/Receptacle and
  Connector the PICML Model Intelligence either (1) auto-complete
  the connection name or (2) display a dialog for selecting the
  correct connection name.

. Support for deployment of ComponentAssembly elements under
  the new modeling semantics for PICML.

. Implemented the the first version of the ConnectorInstance
  decorator that displays the name and implementation type of a
  connector instance.

USER VISIBLE CHANGES BETWEEN CoSMIC-0.7.9 and CoSMIC-0.8.0
============================================================

. Added support for complex types, i.e., structures and sequences,
  to configuration properties in the deployment plan. This caused
  the metamodel to change and break existing models. Please use
  the latest migration script at the following location in the
  PICML paradigm directory to convert existing models.

. Implemented Beta version of the Property Manager, which is an
  interperter for manipulating property values. Currently, the
  Property Manager supports basic types, structures, structures
  of structure, sequences, and sequences of structs. When dealing
  with sequences, the Property Manager can only added elements
  to the sequence. It is not able to remove elements, or move
  elements to new locations.

. Implemented deprecation support to the DataType element and
  the DataValue attribute on a Property. This will be removed
  completely in the next release.

USER VISIBLE CHANGES BETWEEN CoSMIC-0.7.8 and CoSMIC-0.7.9
============================================================

. Added support IDL3+. This included adding support for template
  modules, port types, extended ports, mirror ports, and
  connectors to the InterfaceDefinitions aspect.

. Added support for modeling and deploying different implementations
  of a component. This resulted in changing how to model component
  instances in an assembly. This will also require you to migrate
  existing models to the lastest version of PICML.

  Please see the StockQuoter example at the following location for
  how to use the new version of PICML:

    http://www.dre.vanderbilt.edu/~schmidt/DOC_ROOT/CIAO/tutorials/Quoter/Simple/03.html

  In addition, please see the MIGRATION file in the ./docs for
  information on migrating existing models.

. Upgraded to the latest version of GME. We will no longer support
  muliple versions of GME at this time. Instead, we will only support
  the latest version of GME.

. The deployment plan interpreter now generates a supplemental .cdd
  file for each deployment it generates. If a property of type String
  with the following name is attached to a NodeReference:

    . StringIOR
    . CORBAName

  then the deployment plan interpreter will add the corresponding
  properties for that node to the generated .ccd file.

. The default component implementation generator has been added
  to the interpreter toolbar.

USER VISIBLE CHANGES BETWEEN CoSMIC-0.7.7 and CoSMIC-0.7.8
============================================================

. Enum type property values are supported.

. External ports are now defined as an Atom instead of
  as a Reference.

. Location of the external port can not be empty.

. Multiple ports connected to the same external port must of
  the same kind and object type.

. LEESA has been moved to its own repository. Please visit
  http://www.dre.vanderbilt.edu/LEESA

USER VISIBLE CHANGES BETWEEN CoSMIC-0.7.4.5 and CoSMIC-0.7.7
============================================================

. Re-enable the model intelligence feature that auto-generates
  default artifacts when a new Component is added to an
  File model element.

. When a user adds a new Component to the model, they can
  rename the component and set the suffix of the implementation
  and servant artifact.

. Implmented an IDL text editor, which allows end-users to
  write IDL instead of modeling it. When the user saves the
  file, it is serialized back into the model. It an be accessed
  using the following steps:

    1. Right click on File in tree view
    2. Select Interpret
    3. Select IDLTextEditor in listing

USER VISIBLE CHANGES BETWEEN CoSMIC-0.7.4 and CoSMIC-0.7.4.5
============================================================

. Disabled the model intelligence feature that auto-generates
  the default artifacts when a new component is added to the
  model.

. LEESA ships with a new Perl script called gen-pairs.pl that
  extends Udm generated header file with additional meta-information
  (IsDescendant and VisitorAsIndex) to speed up compilation.

USER VISIBLE CHANGES BETWEEN CoSMIC-0.7.3 and CoSMIC-0.7.4
==========================================================

. CoSMIC supports ACE/TAO/CIAO 0.7.4

. Improved PICML to better support CIAO/DAnCE 0.7.3.

. Entry points for a component implementation are no longer
  defined on an ImplementationArtifact element. Now, entry
  points are defined on the ComponentExecutorArtifact or
  ComponentServantArtifact that is attached to MonolithicImplementation
  element.

. Implemented a new interpreter named ComponentImplementationGenerator
  that will generate the default implementation and artifacts
  for an existing component in the interface definitions. This
  interpreter can be accessed via the interpreter dialog box
  (i.e., File | Run Interpreter...)

. The deployment plan interpreter now inserts plan locality
  information in the generated deployment plan.

. LEESA comes with a new StateMachine (SM) paradigm and its
  corresponding interpreter have been added to show how to use
  LEESA in a UDM-based project. Documentation of LEESA has also
  been enhanced.

. IDL_TO_PICML is more robust and faster than before.
   . Support for the MCPP preprocessor has been added to
     IDL_TO_PICML.

   . It now uses fully scoped names when generating a component
     implementation and its default artifacts to avoid name
     clashes.

   . Bug fix: idl_to_picml now uses fully scoped names when generating
     a component implementation and its default artifacts to avoid
     name clashes.

   . Bug fix: Under certain unknown circumstances, idl_to_picml failed
     to generate UUIDs on the necessary modeling elements.

   . Bug fix: A memory deletion problem associated with XMLString::transcode
     has been fixed.

   . Bug fix (3740): A problem of raising an unknown exception when -i
     command-line option is specified has been fixed.

   . Bug fix (3742): Front end of idl_to_picml now handles upto 1024
     .idl files at the command-line.
