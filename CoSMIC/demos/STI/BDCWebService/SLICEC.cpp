/* SLICEC.cpp
   Generated by gSOAP 2.7.8c from SLICE.h
   Copyright (C) 2000-2006, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "SLICEH.h"

SOAP_SOURCE_STAMP("@(#) SLICEC.cpp ver 2.7.8c 2006-08-18 15:17:48 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL);
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = (struct SOAP_ENV__Fault*)soap_malloc(soap, sizeof(struct SOAP_ENV__Fault));
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = (struct SOAP_ENV__Code*)soap_malloc(soap, sizeof(struct SOAP_ENV__Code));
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = (struct SOAP_ENV__Reason*)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason));
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = (struct SOAP_ENV__Code*)soap_malloc(soap, sizeof(struct SOAP_ENV__Code));
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	for (;;)
		if (!soap_getelement(soap, &t))
			if (soap->error || soap_ignore_element(soap))
				break;
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_short:
		return soap_in_short(soap, NULL, NULL, "xsd:short");
	case SOAP_TYPE_SLICE__CUTS_x002eTime_USCOREStamp:
		return soap_in_SLICE__CUTS_x002eTime_USCOREStamp(soap, NULL, NULL, "SLICE:CUTS.Time_Stamp");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_unsignedShort:
		return soap_in_unsignedShort(soap, NULL, NULL, "xsd:unsignedShort");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_CORBA__CORBA_x002ecompletion_USCOREstatus:
		return soap_in_CORBA__CORBA_x002ecompletion_USCOREstatus(soap, NULL, NULL, "CORBA:CORBA.completion_status");
	case SOAP_TYPE_CORBA__CORBA_x002ecompletion_USCOREstatus_:
		return soap_in_CORBA__CORBA_x002ecompletion_USCOREstatus_(soap, NULL, NULL, "CORBA:CORBA.completion_status");
	case SOAP_TYPE_SLICE__CUTS_x002eTime_USCOREStamp__:
		return soap_in_SLICE__CUTS_x002eTime_USCOREStamp__(soap, NULL, NULL, "SLICE:CUTS.Time_Stamp");
	case SOAP_TYPE_CORBA__CORBA_x002eSystemException:
		return soap_in_CORBA__CORBA_x002eSystemException(soap, NULL, NULL, "CORBA:CORBA.SystemException");
	case SOAP_TYPE_CORBA__CORBA_x002eAny:
		return soap_in_CORBA__CORBA_x002eAny(soap, NULL, NULL, "CORBA:CORBA.Any");
	case SOAP_TYPE_CORBA__CORBA_x002eTypeCode:
		return soap_in_CORBA__CORBA_x002eTypeCode(soap, NULL, NULL, "CORBA:CORBA.TypeCode");
	case SOAP_TYPE_CORBA__ObjectReference:
		return soap_in_CORBA__ObjectReference(soap, NULL, NULL, "CORBA:ObjectReference");
	case SOAP_TYPE_SLICE__CUTS_x002eCollection_USCOREStatistics:
		return soap_in_SLICE__CUTS_x002eCollection_USCOREStatistics(soap, NULL, NULL, "SLICE:CUTS.Collection_Statistics");
	case SOAP_TYPE_SLICE__CUTS_x002eBenchmark_USCOREData:
		return soap_in_SLICE__CUTS_x002eBenchmark_USCOREData(soap, NULL, NULL, "SLICE:CUTS.Benchmark_Data");
	case SOAP_TYPE_CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq:
		return soap_in_CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq(soap, NULL, NULL, "SLICE:CUTS.Port_Measurement");
	case SOAP_TYPE_SLICE__CUTS_x002ePort_USCOREMeasurement:
		return soap_in_SLICE__CUTS_x002ePort_USCOREMeasurement(soap, NULL, NULL, "SLICE:CUTS.Port_Measurement");
	case SOAP_TYPE_CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq:
		return soap_in_CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq(soap, NULL, NULL, "SLICE:CUTS.Mapped_Port_Measurement");
	case SOAP_TYPE_SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement:
		return soap_in_SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement(soap, NULL, NULL, "SLICE:CUTS.Mapped_Port_Measurement");
	case SOAP_TYPE_CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq:
		return soap_in_CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq(soap, NULL, NULL, "SLICE:CUTS.Exit_Point_Time");
	case SOAP_TYPE_SLICE__CUTS_x002eExit_USCOREPoint_USCORETime:
		return soap_in_SLICE__CUTS_x002eExit_USCOREPoint_USCORETime(soap, NULL, NULL, "SLICE:CUTS.Exit_Point_Time");
	case SOAP_TYPE_CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq:
		return soap_in_CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq(soap, NULL, NULL, "SLICE:CUTS.Worker_Measurement");
	case SOAP_TYPE_SLICE__CUTS_x002eWorker_USCOREMeasurement:
		return soap_in_SLICE__CUTS_x002eWorker_USCOREMeasurement(soap, NULL, NULL, "SLICE:CUTS.Worker_Measurement");
	case SOAP_TYPE_CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq:
		return soap_in_CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq(soap, NULL, NULL, "SLICE:CUTS.Action_Measurement");
	case SOAP_TYPE_SLICE__CUTS_x002eAction_USCOREMeasurement:
		return soap_in_SLICE__CUTS_x002eAction_USCOREMeasurement(soap, NULL, NULL, "SLICE:CUTS.Action_Measurement");
	case SOAP_TYPE_SLICE__CUTS_x002eTime_USCORESample:
		return soap_in_SLICE__CUTS_x002eTime_USCORESample(soap, NULL, NULL, "SLICE:CUTS.Time_Sample");
	case SOAP_TYPE_SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo:
		return soap_in_SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo(soap, NULL, NULL, "SLICE:CUTS.Event_Time_Info");
	case SOAP_TYPE_SLICE__CUTS_x002eTime_USCOREInfo:
		return soap_in_SLICE__CUTS_x002eTime_USCOREInfo(soap, NULL, NULL, "SLICE:CUTS.Time_Info");
	case SOAP_TYPE_CUTS_x002e_USCORESE_USCOREPath_USCORESequence:
		return soap_in_CUTS_x002e_USCORESE_USCOREPath_USCORESequence(soap, NULL, NULL, "SLICE:CUTS.Path_Element");
	case SOAP_TYPE_SLICE__CUTS_x002ePath_USCOREElement:
		return soap_in_SLICE__CUTS_x002ePath_USCOREElement(soap, NULL, NULL, "SLICE:CUTS.Path_Element");
	case SOAP_TYPE_SLICE__CUTS_x002eComponent_USCORERegistration:
		return soap_in_SLICE__CUTS_x002eComponent_USCORERegistration(soap, NULL, NULL, "SLICE:CUTS.Component_Registration");
	case SOAP_TYPE_SLICE__CUTS_x002eRegistration_USCORELimit:
		return soap_in_SLICE__CUTS_x002eRegistration_USCORELimit(soap, NULL, NULL, "SLICE:CUTS.Registration_Limit");
	case SOAP_TYPE_SLICE__CUTS_x002eRegistration_USCOREFailed:
		return soap_in_SLICE__CUTS_x002eRegistration_USCOREFailed(soap, NULL, NULL, "SLICE:CUTS.Registration_Failed");
	case SOAP_TYPE_SLICE__CUTS_x002eOperation_USCOREFailed:
		return soap_in_SLICE__CUTS_x002eOperation_USCOREFailed(soap, NULL, NULL, "SLICE:CUTS.Operation_Failed");
	case SOAP_TYPE_SLICE__CUTS_x002eID_USCORENot_USCOREFound:
		return soap_in_SLICE__CUTS_x002eID_USCORENot_USCOREFound(soap, NULL, NULL, "SLICE:CUTS.ID_Not_Found");
	case SOAP_TYPE_SLICE__CUTS_x002eBinding_USCOREFailed:
		return soap_in_SLICE__CUTS_x002eBinding_USCOREFailed(soap, NULL, NULL, "SLICE:CUTS.Binding_Failed");
	case SOAP_TYPE_xsd__unsignedShort:
		return soap_in_xsd__unsignedShort(soap, NULL, NULL, "xsd:unsignedShort");
	case SOAP_TYPE_xsd__unsignedInt:
		return soap_in_xsd__unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_xsd__string:
		return soap_in_xsd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_xsd__int:
		return soap_in_xsd__int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_xsd__anyURI_:
		return soap_in_xsd__anyURI_(soap, NULL, NULL, "xsd:anyURI");
	case SOAP_TYPE_xsd__ID_:
		return soap_in_xsd__ID_(soap, NULL, NULL, "xsd:ID");
	case SOAP_TYPE_xsd__anyType:
		return soap_in_xsd__anyType(soap, NULL, NULL, "xsd:anyType");
	case SOAP_TYPE_SLICE__bind_USCOREto_USCOREpath:
		return soap_in_SLICE__bind_USCOREto_USCOREpath(soap, NULL, NULL, "SLICE:bind_to_path");
	case SOAP_TYPE_SLICE__bind_USCOREto_USCOREpathResponse:
		return soap_in_SLICE__bind_USCOREto_USCOREpathResponse(soap, NULL, NULL, "SLICE:bind_to_pathResponse");
	case SOAP_TYPE_SLICE__unbind_USCOREto_USCOREpath:
		return soap_in_SLICE__unbind_USCOREto_USCOREpath(soap, NULL, NULL, "SLICE:unbind_to_path");
	case SOAP_TYPE_SLICE__unbind_USCOREto_USCOREpathResponse:
		return soap_in_SLICE__unbind_USCOREto_USCOREpathResponse(soap, NULL, NULL, "SLICE:unbind_to_pathResponse");
	case SOAP_TYPE_SLICE__execution_USCOREtime:
		return soap_in_SLICE__execution_USCOREtime(soap, NULL, NULL, "SLICE:execution_time");
	case SOAP_TYPE_SLICE__execution_USCOREtimeResponse:
		return soap_in_SLICE__execution_USCOREtimeResponse(soap, NULL, NULL, "SLICE:execution_timeResponse");
	case SOAP_TYPE_SLICE__collect_USCOREperformance_USCOREdata:
		return soap_in_SLICE__collect_USCOREperformance_USCOREdata(soap, NULL, NULL, "SLICE:collect_performance_data");
	case SOAP_TYPE_SLICE__collect_USCOREperformance_USCOREdataResponse:
		return soap_in_SLICE__collect_USCOREperformance_USCOREdataResponse(soap, NULL, NULL, "SLICE:collect_performance_dataResponse");
	case SOAP_TYPE_PointerToCUTS_x002e_USCORESE_USCOREPath_USCORESequence:
		return soap_in_PointerToCUTS_x002e_USCORESE_USCOREPath_USCORESequence(soap, NULL, NULL, "SLICE:CUTS.Path_Element");
	case SOAP_TYPE_PointerToSLICE__CUTS_x002eEvent_USCORETime_USCOREInfo:
		return soap_in_PointerToSLICE__CUTS_x002eEvent_USCORETime_USCOREInfo(soap, NULL, NULL, "SLICE:CUTS.Event_Time_Info");
	case SOAP_TYPE_PointerToSLICE__CUTS_x002eOperation_USCOREFailed:
		return soap_in_PointerToSLICE__CUTS_x002eOperation_USCOREFailed(soap, NULL, NULL, "SLICE:CUTS.Operation_Failed");
	case SOAP_TYPE_PointerToSLICE__CUTS_x002eID_USCORENot_USCOREFound:
		return soap_in_PointerToSLICE__CUTS_x002eID_USCORENot_USCOREFound(soap, NULL, NULL, "SLICE:CUTS.ID_Not_Found");
	case SOAP_TYPE_PointerToSLICE__CUTS_x002eBinding_USCOREFailed:
		return soap_in_PointerToSLICE__CUTS_x002eBinding_USCOREFailed(soap, NULL, NULL, "SLICE:CUTS.Binding_Failed");
	case SOAP_TYPE_PointerToCORBA__CORBA_x002eSystemException:
		return soap_in_PointerToCORBA__CORBA_x002eSystemException(soap, NULL, NULL, "CORBA:CORBA.SystemException");
	case SOAP_TYPE_PointerToPointerToSLICE__CUTS_x002ePort_USCOREMeasurement:
		return soap_in_PointerToPointerToSLICE__CUTS_x002ePort_USCOREMeasurement(soap, NULL, NULL, "SLICE:CUTS.Port_Measurement");
	case SOAP_TYPE_PointerToSLICE__CUTS_x002ePort_USCOREMeasurement:
		return soap_in_PointerToSLICE__CUTS_x002ePort_USCOREMeasurement(soap, NULL, NULL, "SLICE:CUTS.Port_Measurement");
	case SOAP_TYPE_PointerToPointerToSLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement:
		return soap_in_PointerToPointerToSLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement(soap, NULL, NULL, "SLICE:CUTS.Mapped_Port_Measurement");
	case SOAP_TYPE_PointerToSLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement:
		return soap_in_PointerToSLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement(soap, NULL, NULL, "SLICE:CUTS.Mapped_Port_Measurement");
	case SOAP_TYPE_PointerToPointerToSLICE__CUTS_x002eExit_USCOREPoint_USCORETime:
		return soap_in_PointerToPointerToSLICE__CUTS_x002eExit_USCOREPoint_USCORETime(soap, NULL, NULL, "SLICE:CUTS.Exit_Point_Time");
	case SOAP_TYPE_PointerToSLICE__CUTS_x002eExit_USCOREPoint_USCORETime:
		return soap_in_PointerToSLICE__CUTS_x002eExit_USCOREPoint_USCORETime(soap, NULL, NULL, "SLICE:CUTS.Exit_Point_Time");
	case SOAP_TYPE_PointerToPointerToSLICE__CUTS_x002eWorker_USCOREMeasurement:
		return soap_in_PointerToPointerToSLICE__CUTS_x002eWorker_USCOREMeasurement(soap, NULL, NULL, "SLICE:CUTS.Worker_Measurement");
	case SOAP_TYPE_PointerToSLICE__CUTS_x002eWorker_USCOREMeasurement:
		return soap_in_PointerToSLICE__CUTS_x002eWorker_USCOREMeasurement(soap, NULL, NULL, "SLICE:CUTS.Worker_Measurement");
	case SOAP_TYPE_PointerToPointerToSLICE__CUTS_x002eAction_USCOREMeasurement:
		return soap_in_PointerToPointerToSLICE__CUTS_x002eAction_USCOREMeasurement(soap, NULL, NULL, "SLICE:CUTS.Action_Measurement");
	case SOAP_TYPE_PointerToSLICE__CUTS_x002eAction_USCOREMeasurement:
		return soap_in_PointerToSLICE__CUTS_x002eAction_USCOREMeasurement(soap, NULL, NULL, "SLICE:CUTS.Action_Measurement");
	case SOAP_TYPE_PointerToPointerToSLICE__CUTS_x002ePath_USCOREElement:
		return soap_in_PointerToPointerToSLICE__CUTS_x002ePath_USCOREElement(soap, NULL, NULL, "SLICE:CUTS.Path_Element");
	case SOAP_TYPE_PointerToSLICE__CUTS_x002ePath_USCOREElement:
		return soap_in_PointerToSLICE__CUTS_x002ePath_USCOREElement(soap, NULL, NULL, "SLICE:CUTS.Path_Element");
	case SOAP_TYPE_PointerToxsd__anyType:
		return soap_in_PointerToxsd__anyType(soap, NULL, NULL, "xsd:anyType");
	case SOAP_TYPE_PointerToCORBA__CORBA_x002eTypeCode:
		return soap_in_PointerToCORBA__CORBA_x002eTypeCode(soap, NULL, NULL, "CORBA:CORBA.TypeCode");
	case SOAP_TYPE_PointerToxsd__anyURI:
		return soap_in_PointerToxsd__anyURI(soap, NULL, NULL, "xsd:anyURI");
	case SOAP_TYPE_PointerToCUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq:
		return soap_in_PointerToCUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq(soap, NULL, NULL, "SLICE:CUTS.Port_Measurement");
	case SOAP_TYPE_PointerToCUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq:
		return soap_in_PointerToCUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq(soap, NULL, NULL, "SLICE:CUTS.Mapped_Port_Measurement");
	case SOAP_TYPE_PointerToCUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq:
		return soap_in_PointerToCUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq(soap, NULL, NULL, "SLICE:CUTS.Worker_Measurement");
	case SOAP_TYPE_PointerToCUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq:
		return soap_in_PointerToCUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq(soap, NULL, NULL, "SLICE:CUTS.Exit_Point_Time");
	case SOAP_TYPE_PointerToCUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq:
		return soap_in_PointerToCUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq(soap, NULL, NULL, "SLICE:CUTS.Action_Measurement");
	case SOAP_TYPE_PointerToSLICE__CUTS_x002eTime_USCORESample:
		return soap_in_PointerToSLICE__CUTS_x002eTime_USCORESample(soap, NULL, NULL, "SLICE:CUTS.Time_Sample");
	case SOAP_TYPE_PointerToSLICE__CUTS_x002eTime_USCOREInfo:
		return soap_in_PointerToSLICE__CUTS_x002eTime_USCOREInfo(soap, NULL, NULL, "SLICE:CUTS.Time_Info");
	case SOAP_TYPE_PointerToCORBA__ObjectReference:
		return soap_in_PointerToCORBA__ObjectReference(soap, NULL, NULL, "CORBA:ObjectReference");
	case SOAP_TYPE_xsd__anyURI:
	{	char **s;
		s = soap_in_xsd__anyURI(soap, NULL, NULL, "xsd:anyURI");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_xsd__ID:
	{	char **s;
		s = soap_in_xsd__ID(soap, NULL, NULL, "xsd:ID");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:short"))
		{	*type = SOAP_TYPE_short;
			return soap_in_short(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SLICE:CUTS.Time_Stamp"))
		{	*type = SOAP_TYPE_SLICE__CUTS_x002eTime_USCOREStamp;
			return soap_in_SLICE__CUTS_x002eTime_USCOREStamp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedShort"))
		{	*type = SOAP_TYPE_unsignedShort;
			return soap_in_unsignedShort(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "CORBA:CORBA.completion_status"))
		{	*type = SOAP_TYPE_CORBA__CORBA_x002ecompletion_USCOREstatus;
			return soap_in_CORBA__CORBA_x002ecompletion_USCOREstatus(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "CORBA:CORBA.completion_status"))
		{	*type = SOAP_TYPE_CORBA__CORBA_x002ecompletion_USCOREstatus_;
			return soap_in_CORBA__CORBA_x002ecompletion_USCOREstatus_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SLICE:CUTS.Time_Stamp"))
		{	*type = SOAP_TYPE_SLICE__CUTS_x002eTime_USCOREStamp__;
			return soap_in_SLICE__CUTS_x002eTime_USCOREStamp__(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "CORBA:CORBA.SystemException"))
		{	*type = SOAP_TYPE_CORBA__CORBA_x002eSystemException;
			return soap_in_CORBA__CORBA_x002eSystemException(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "CORBA:CORBA.Any"))
		{	*type = SOAP_TYPE_CORBA__CORBA_x002eAny;
			return soap_in_CORBA__CORBA_x002eAny(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "CORBA:CORBA.TypeCode"))
		{	*type = SOAP_TYPE_CORBA__CORBA_x002eTypeCode;
			return soap_in_CORBA__CORBA_x002eTypeCode(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "CORBA:ObjectReference"))
		{	*type = SOAP_TYPE_CORBA__ObjectReference;
			return soap_in_CORBA__ObjectReference(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SLICE:CUTS.Collection_Statistics"))
		{	*type = SOAP_TYPE_SLICE__CUTS_x002eCollection_USCOREStatistics;
			return soap_in_SLICE__CUTS_x002eCollection_USCOREStatistics(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SLICE:CUTS.Benchmark_Data"))
		{	*type = SOAP_TYPE_SLICE__CUTS_x002eBenchmark_USCOREData;
			return soap_in_SLICE__CUTS_x002eBenchmark_USCOREData(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "SLICE:CUTS.Port_Measurement"))
		{	*type = SOAP_TYPE_CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq;
			return soap_in_CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SLICE:CUTS.Port_Measurement"))
		{	*type = SOAP_TYPE_SLICE__CUTS_x002ePort_USCOREMeasurement;
			return soap_in_SLICE__CUTS_x002ePort_USCOREMeasurement(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "SLICE:CUTS.Mapped_Port_Measurement"))
		{	*type = SOAP_TYPE_CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq;
			return soap_in_CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SLICE:CUTS.Mapped_Port_Measurement"))
		{	*type = SOAP_TYPE_SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement;
			return soap_in_SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "SLICE:CUTS.Exit_Point_Time"))
		{	*type = SOAP_TYPE_CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq;
			return soap_in_CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SLICE:CUTS.Exit_Point_Time"))
		{	*type = SOAP_TYPE_SLICE__CUTS_x002eExit_USCOREPoint_USCORETime;
			return soap_in_SLICE__CUTS_x002eExit_USCOREPoint_USCORETime(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "SLICE:CUTS.Worker_Measurement"))
		{	*type = SOAP_TYPE_CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq;
			return soap_in_CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SLICE:CUTS.Worker_Measurement"))
		{	*type = SOAP_TYPE_SLICE__CUTS_x002eWorker_USCOREMeasurement;
			return soap_in_SLICE__CUTS_x002eWorker_USCOREMeasurement(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "SLICE:CUTS.Action_Measurement"))
		{	*type = SOAP_TYPE_CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq;
			return soap_in_CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SLICE:CUTS.Action_Measurement"))
		{	*type = SOAP_TYPE_SLICE__CUTS_x002eAction_USCOREMeasurement;
			return soap_in_SLICE__CUTS_x002eAction_USCOREMeasurement(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SLICE:CUTS.Time_Sample"))
		{	*type = SOAP_TYPE_SLICE__CUTS_x002eTime_USCORESample;
			return soap_in_SLICE__CUTS_x002eTime_USCORESample(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SLICE:CUTS.Event_Time_Info"))
		{	*type = SOAP_TYPE_SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo;
			return soap_in_SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SLICE:CUTS.Time_Info"))
		{	*type = SOAP_TYPE_SLICE__CUTS_x002eTime_USCOREInfo;
			return soap_in_SLICE__CUTS_x002eTime_USCOREInfo(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "SLICE:CUTS.Path_Element"))
		{	*type = SOAP_TYPE_CUTS_x002e_USCORESE_USCOREPath_USCORESequence;
			return soap_in_CUTS_x002e_USCORESE_USCOREPath_USCORESequence(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SLICE:CUTS.Path_Element"))
		{	*type = SOAP_TYPE_SLICE__CUTS_x002ePath_USCOREElement;
			return soap_in_SLICE__CUTS_x002ePath_USCOREElement(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SLICE:CUTS.Component_Registration"))
		{	*type = SOAP_TYPE_SLICE__CUTS_x002eComponent_USCORERegistration;
			return soap_in_SLICE__CUTS_x002eComponent_USCORERegistration(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SLICE:CUTS.Registration_Limit"))
		{	*type = SOAP_TYPE_SLICE__CUTS_x002eRegistration_USCORELimit;
			return soap_in_SLICE__CUTS_x002eRegistration_USCORELimit(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SLICE:CUTS.Registration_Failed"))
		{	*type = SOAP_TYPE_SLICE__CUTS_x002eRegistration_USCOREFailed;
			return soap_in_SLICE__CUTS_x002eRegistration_USCOREFailed(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SLICE:CUTS.Operation_Failed"))
		{	*type = SOAP_TYPE_SLICE__CUTS_x002eOperation_USCOREFailed;
			return soap_in_SLICE__CUTS_x002eOperation_USCOREFailed(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SLICE:CUTS.ID_Not_Found"))
		{	*type = SOAP_TYPE_SLICE__CUTS_x002eID_USCORENot_USCOREFound;
			return soap_in_SLICE__CUTS_x002eID_USCORENot_USCOREFound(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SLICE:CUTS.Binding_Failed"))
		{	*type = SOAP_TYPE_SLICE__CUTS_x002eBinding_USCOREFailed;
			return soap_in_SLICE__CUTS_x002eBinding_USCOREFailed(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedShort"))
		{	*type = SOAP_TYPE_xsd__unsignedShort;
			return soap_in_xsd__unsignedShort(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_xsd__unsignedInt;
			return soap_in_xsd__unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_xsd__string;
			return soap_in_xsd__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_xsd__int;
			return soap_in_xsd__int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyURI"))
		{	*type = SOAP_TYPE_xsd__anyURI_;
			return soap_in_xsd__anyURI_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:ID"))
		{	*type = SOAP_TYPE_xsd__ID_;
			return soap_in_xsd__ID_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyType"))
		{	*type = SOAP_TYPE_xsd__anyType;
			return soap_in_xsd__anyType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SLICE:bind_to_path"))
		{	*type = SOAP_TYPE_SLICE__bind_USCOREto_USCOREpath;
			return soap_in_SLICE__bind_USCOREto_USCOREpath(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SLICE:bind_to_pathResponse"))
		{	*type = SOAP_TYPE_SLICE__bind_USCOREto_USCOREpathResponse;
			return soap_in_SLICE__bind_USCOREto_USCOREpathResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SLICE:unbind_to_path"))
		{	*type = SOAP_TYPE_SLICE__unbind_USCOREto_USCOREpath;
			return soap_in_SLICE__unbind_USCOREto_USCOREpath(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SLICE:unbind_to_pathResponse"))
		{	*type = SOAP_TYPE_SLICE__unbind_USCOREto_USCOREpathResponse;
			return soap_in_SLICE__unbind_USCOREto_USCOREpathResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SLICE:execution_time"))
		{	*type = SOAP_TYPE_SLICE__execution_USCOREtime;
			return soap_in_SLICE__execution_USCOREtime(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SLICE:execution_timeResponse"))
		{	*type = SOAP_TYPE_SLICE__execution_USCOREtimeResponse;
			return soap_in_SLICE__execution_USCOREtimeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SLICE:collect_performance_data"))
		{	*type = SOAP_TYPE_SLICE__collect_USCOREperformance_USCOREdata;
			return soap_in_SLICE__collect_USCOREperformance_USCOREdata(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SLICE:collect_performance_dataResponse"))
		{	*type = SOAP_TYPE_SLICE__collect_USCOREperformance_USCOREdataResponse;
			return soap_in_SLICE__collect_USCOREperformance_USCOREdataResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyURI"))
		{	char **s;
			*type = SOAP_TYPE_xsd__anyURI;
			s = soap_in_xsd__anyURI(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:ID"))
		{	char **s;
			*type = SOAP_TYPE_xsd__ID;
			s = soap_in_xsd__ID(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "CORBA:_exception.CUTS.Operation_Failed"))
		{	*type = SOAP_TYPE__CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed;
			return soap_in__CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "CORBA:_exception.CUTS.ID_Not_Found"))
		{	*type = SOAP_TYPE__CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound;
			return soap_in__CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "CORBA:_exception.CUTS.Binding_Failed"))
		{	*type = SOAP_TYPE__CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed;
			return soap_in__CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "CORBA:CORBA.SystemExceptionMessage"))
		{	*type = SOAP_TYPE__CORBA__CORBA_x002eSystemExceptionMessage;
			return soap_in__CORBA__CORBA_x002eSystemExceptionMessage(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "CORBA:SourceRepositoryID"))
		{	*type = SOAP_TYPE__CORBA__SourceRepositoryID;
			return soap_in__CORBA__SourceRepositoryID(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "CORBA:SourceIDL"))
		{	*type = SOAP_TYPE__CORBA__SourceIDL;
			return soap_in__CORBA__SourceIDL(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SOAP-ENC:arrayType"))
		{	char **s;
			*type = SOAP_TYPE__SOAP_ENC__arrayType;
			s = soap_in__SOAP_ENC__arrayType(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unknown element '%s' (level=%u, %d)\n", soap->tag, soap->level, soap->body));
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_short:
		return soap_out_short(soap, tag, id, (const short *)ptr, "xsd:short");
	case SOAP_TYPE_SLICE__CUTS_x002eTime_USCOREStamp:
		return soap_out_SLICE__CUTS_x002eTime_USCOREStamp(soap, tag, id, (const int *)ptr, "SLICE:CUTS.Time_Stamp");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_unsignedShort:
		return soap_out_unsignedShort(soap, tag, id, (const unsigned short *)ptr, "xsd:unsignedShort");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_CORBA__CORBA_x002ecompletion_USCOREstatus:
		return soap_out_CORBA__CORBA_x002ecompletion_USCOREstatus(soap, tag, id, (const enum CORBA__CORBA_x002ecompletion_USCOREstatus *)ptr, "CORBA:CORBA.completion_status");
	case SOAP_TYPE__CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed:
		return ((_CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed *)ptr)->soap_out(soap, "CORBA:_exception.CUTS.Operation_Failed", id, NULL);
	case SOAP_TYPE__CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound:
		return ((_CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound *)ptr)->soap_out(soap, "CORBA:_exception.CUTS.ID_Not_Found", id, NULL);
	case SOAP_TYPE__CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed:
		return ((_CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed *)ptr)->soap_out(soap, "CORBA:_exception.CUTS.Binding_Failed", id, NULL);
	case SOAP_TYPE__CORBA__CORBA_x002eSystemExceptionMessage:
		return ((_CORBA__CORBA_x002eSystemExceptionMessage *)ptr)->soap_out(soap, "CORBA:CORBA.SystemExceptionMessage", id, NULL);
	case SOAP_TYPE_CORBA__CORBA_x002ecompletion_USCOREstatus_:
		return ((CORBA__CORBA_x002ecompletion_USCOREstatus_ *)ptr)->soap_out(soap, tag, id, "CORBA:CORBA.completion_status");
	case SOAP_TYPE_SLICE__CUTS_x002eTime_USCOREStamp__:
		return ((SLICE__CUTS_x002eTime_USCOREStamp__ *)ptr)->soap_out(soap, tag, id, "SLICE:CUTS.Time_Stamp");
	case SOAP_TYPE__CORBA__SourceRepositoryID:
		return ((_CORBA__SourceRepositoryID *)ptr)->soap_out(soap, "CORBA:SourceRepositoryID", id, NULL);
	case SOAP_TYPE__CORBA__SourceIDL:
		return ((_CORBA__SourceIDL *)ptr)->soap_out(soap, "CORBA:SourceIDL", id, NULL);
	case SOAP_TYPE_CORBA__CORBA_x002eSystemException:
		return ((CORBA__CORBA_x002eSystemException *)ptr)->soap_out(soap, tag, id, "CORBA:CORBA.SystemException");
	case SOAP_TYPE_CORBA__CORBA_x002eAny:
		return ((CORBA__CORBA_x002eAny *)ptr)->soap_out(soap, tag, id, "CORBA:CORBA.Any");
	case SOAP_TYPE_CORBA__CORBA_x002eTypeCode:
		return ((CORBA__CORBA_x002eTypeCode *)ptr)->soap_out(soap, tag, id, "CORBA:CORBA.TypeCode");
	case SOAP_TYPE_CORBA__ObjectReference:
		return ((CORBA__ObjectReference *)ptr)->soap_out(soap, tag, id, "CORBA:ObjectReference");
	case SOAP_TYPE_SLICE__CUTS_x002eCollection_USCOREStatistics:
		return ((SLICE__CUTS_x002eCollection_USCOREStatistics *)ptr)->soap_out(soap, tag, id, "SLICE:CUTS.Collection_Statistics");
	case SOAP_TYPE_SLICE__CUTS_x002eBenchmark_USCOREData:
		return ((SLICE__CUTS_x002eBenchmark_USCOREData *)ptr)->soap_out(soap, tag, id, "SLICE:CUTS.Benchmark_Data");
	case SOAP_TYPE_CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq:
		return ((CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq *)ptr)->soap_out(soap, tag, id, "SLICE:CUTS.Port_Measurement");
	case SOAP_TYPE_SLICE__CUTS_x002ePort_USCOREMeasurement:
		return ((SLICE__CUTS_x002ePort_USCOREMeasurement *)ptr)->soap_out(soap, tag, id, "SLICE:CUTS.Port_Measurement");
	case SOAP_TYPE_CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq:
		return ((CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq *)ptr)->soap_out(soap, tag, id, "SLICE:CUTS.Mapped_Port_Measurement");
	case SOAP_TYPE_SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement:
		return ((SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement *)ptr)->soap_out(soap, tag, id, "SLICE:CUTS.Mapped_Port_Measurement");
	case SOAP_TYPE_CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq:
		return ((CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq *)ptr)->soap_out(soap, tag, id, "SLICE:CUTS.Exit_Point_Time");
	case SOAP_TYPE_SLICE__CUTS_x002eExit_USCOREPoint_USCORETime:
		return ((SLICE__CUTS_x002eExit_USCOREPoint_USCORETime *)ptr)->soap_out(soap, tag, id, "SLICE:CUTS.Exit_Point_Time");
	case SOAP_TYPE_CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq:
		return ((CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq *)ptr)->soap_out(soap, tag, id, "SLICE:CUTS.Worker_Measurement");
	case SOAP_TYPE_SLICE__CUTS_x002eWorker_USCOREMeasurement:
		return ((SLICE__CUTS_x002eWorker_USCOREMeasurement *)ptr)->soap_out(soap, tag, id, "SLICE:CUTS.Worker_Measurement");
	case SOAP_TYPE_CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq:
		return ((CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq *)ptr)->soap_out(soap, tag, id, "SLICE:CUTS.Action_Measurement");
	case SOAP_TYPE_SLICE__CUTS_x002eAction_USCOREMeasurement:
		return ((SLICE__CUTS_x002eAction_USCOREMeasurement *)ptr)->soap_out(soap, tag, id, "SLICE:CUTS.Action_Measurement");
	case SOAP_TYPE_SLICE__CUTS_x002eTime_USCORESample:
		return ((SLICE__CUTS_x002eTime_USCORESample *)ptr)->soap_out(soap, tag, id, "SLICE:CUTS.Time_Sample");
	case SOAP_TYPE_SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo:
		return ((SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo *)ptr)->soap_out(soap, tag, id, "SLICE:CUTS.Event_Time_Info");
	case SOAP_TYPE_SLICE__CUTS_x002eTime_USCOREInfo:
		return ((SLICE__CUTS_x002eTime_USCOREInfo *)ptr)->soap_out(soap, tag, id, "SLICE:CUTS.Time_Info");
	case SOAP_TYPE_CUTS_x002e_USCORESE_USCOREPath_USCORESequence:
		return ((CUTS_x002e_USCORESE_USCOREPath_USCORESequence *)ptr)->soap_out(soap, tag, id, "SLICE:CUTS.Path_Element");
	case SOAP_TYPE_SLICE__CUTS_x002ePath_USCOREElement:
		return ((SLICE__CUTS_x002ePath_USCOREElement *)ptr)->soap_out(soap, tag, id, "SLICE:CUTS.Path_Element");
	case SOAP_TYPE_SLICE__CUTS_x002eComponent_USCORERegistration:
		return ((SLICE__CUTS_x002eComponent_USCORERegistration *)ptr)->soap_out(soap, tag, id, "SLICE:CUTS.Component_Registration");
	case SOAP_TYPE_SLICE__CUTS_x002eRegistration_USCORELimit:
		return ((SLICE__CUTS_x002eRegistration_USCORELimit *)ptr)->soap_out(soap, tag, id, "SLICE:CUTS.Registration_Limit");
	case SOAP_TYPE_SLICE__CUTS_x002eRegistration_USCOREFailed:
		return ((SLICE__CUTS_x002eRegistration_USCOREFailed *)ptr)->soap_out(soap, tag, id, "SLICE:CUTS.Registration_Failed");
	case SOAP_TYPE_SLICE__CUTS_x002eOperation_USCOREFailed:
		return ((SLICE__CUTS_x002eOperation_USCOREFailed *)ptr)->soap_out(soap, tag, id, "SLICE:CUTS.Operation_Failed");
	case SOAP_TYPE_SLICE__CUTS_x002eID_USCORENot_USCOREFound:
		return ((SLICE__CUTS_x002eID_USCORENot_USCOREFound *)ptr)->soap_out(soap, tag, id, "SLICE:CUTS.ID_Not_Found");
	case SOAP_TYPE_SLICE__CUTS_x002eBinding_USCOREFailed:
		return ((SLICE__CUTS_x002eBinding_USCOREFailed *)ptr)->soap_out(soap, tag, id, "SLICE:CUTS.Binding_Failed");
	case SOAP_TYPE_xsd__unsignedShort:
		return ((xsd__unsignedShort *)ptr)->soap_out(soap, tag, id, "xsd:unsignedShort");
	case SOAP_TYPE_xsd__unsignedInt:
		return ((xsd__unsignedInt *)ptr)->soap_out(soap, tag, id, "xsd:unsignedInt");
	case SOAP_TYPE_xsd__string:
		return ((xsd__string *)ptr)->soap_out(soap, tag, id, "xsd:string");
	case SOAP_TYPE_xsd__int:
		return ((xsd__int *)ptr)->soap_out(soap, tag, id, "xsd:int");
	case SOAP_TYPE_xsd__anyURI_:
		return ((xsd__anyURI_ *)ptr)->soap_out(soap, tag, id, "xsd:anyURI");
	case SOAP_TYPE_xsd__ID_:
		return ((xsd__ID_ *)ptr)->soap_out(soap, tag, id, "xsd:ID");
	case SOAP_TYPE_xsd__anyType:
		return ((xsd__anyType *)ptr)->soap_out(soap, tag, id, "xsd:anyType");
	case SOAP_TYPE_SLICE__bind_USCOREto_USCOREpath:
		return soap_out_SLICE__bind_USCOREto_USCOREpath(soap, tag, id, (const struct SLICE__bind_USCOREto_USCOREpath *)ptr, "SLICE:bind_to_path");
	case SOAP_TYPE_SLICE__bind_USCOREto_USCOREpathResponse:
		return soap_out_SLICE__bind_USCOREto_USCOREpathResponse(soap, tag, id, (const struct SLICE__bind_USCOREto_USCOREpathResponse *)ptr, "SLICE:bind_to_pathResponse");
	case SOAP_TYPE_SLICE__unbind_USCOREto_USCOREpath:
		return soap_out_SLICE__unbind_USCOREto_USCOREpath(soap, tag, id, (const struct SLICE__unbind_USCOREto_USCOREpath *)ptr, "SLICE:unbind_to_path");
	case SOAP_TYPE_SLICE__unbind_USCOREto_USCOREpathResponse:
		return soap_out_SLICE__unbind_USCOREto_USCOREpathResponse(soap, tag, id, (const struct SLICE__unbind_USCOREto_USCOREpathResponse *)ptr, "SLICE:unbind_to_pathResponse");
	case SOAP_TYPE_SLICE__execution_USCOREtime:
		return soap_out_SLICE__execution_USCOREtime(soap, tag, id, (const struct SLICE__execution_USCOREtime *)ptr, "SLICE:execution_time");
	case SOAP_TYPE_SLICE__execution_USCOREtimeResponse:
		return soap_out_SLICE__execution_USCOREtimeResponse(soap, tag, id, (const struct SLICE__execution_USCOREtimeResponse *)ptr, "SLICE:execution_timeResponse");
	case SOAP_TYPE_SLICE__collect_USCOREperformance_USCOREdata:
		return soap_out_SLICE__collect_USCOREperformance_USCOREdata(soap, tag, id, (const struct SLICE__collect_USCOREperformance_USCOREdata *)ptr, "SLICE:collect_performance_data");
	case SOAP_TYPE_SLICE__collect_USCOREperformance_USCOREdataResponse:
		return soap_out_SLICE__collect_USCOREperformance_USCOREdataResponse(soap, tag, id, (const struct SLICE__collect_USCOREperformance_USCOREdataResponse *)ptr, "SLICE:collect_performance_dataResponse");
	case SOAP_TYPE_PointerToCUTS_x002e_USCORESE_USCOREPath_USCORESequence:
		return soap_out_PointerToCUTS_x002e_USCORESE_USCOREPath_USCORESequence(soap, tag, id, (CUTS_x002e_USCORESE_USCOREPath_USCORESequence *const*)ptr, "SLICE:CUTS.Path_Element");
	case SOAP_TYPE_PointerToSLICE__CUTS_x002eEvent_USCORETime_USCOREInfo:
		return soap_out_PointerToSLICE__CUTS_x002eEvent_USCORETime_USCOREInfo(soap, tag, id, (SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo *const*)ptr, "SLICE:CUTS.Event_Time_Info");
	case SOAP_TYPE_PointerToSLICE__CUTS_x002eOperation_USCOREFailed:
		return soap_out_PointerToSLICE__CUTS_x002eOperation_USCOREFailed(soap, tag, id, (SLICE__CUTS_x002eOperation_USCOREFailed *const*)ptr, "SLICE:CUTS.Operation_Failed");
	case SOAP_TYPE_PointerToSLICE__CUTS_x002eID_USCORENot_USCOREFound:
		return soap_out_PointerToSLICE__CUTS_x002eID_USCORENot_USCOREFound(soap, tag, id, (SLICE__CUTS_x002eID_USCORENot_USCOREFound *const*)ptr, "SLICE:CUTS.ID_Not_Found");
	case SOAP_TYPE_PointerToSLICE__CUTS_x002eBinding_USCOREFailed:
		return soap_out_PointerToSLICE__CUTS_x002eBinding_USCOREFailed(soap, tag, id, (SLICE__CUTS_x002eBinding_USCOREFailed *const*)ptr, "SLICE:CUTS.Binding_Failed");
	case SOAP_TYPE_PointerToCORBA__CORBA_x002eSystemException:
		return soap_out_PointerToCORBA__CORBA_x002eSystemException(soap, tag, id, (CORBA__CORBA_x002eSystemException *const*)ptr, "CORBA:CORBA.SystemException");
	case SOAP_TYPE_PointerToPointerToSLICE__CUTS_x002ePort_USCOREMeasurement:
		return soap_out_PointerToPointerToSLICE__CUTS_x002ePort_USCOREMeasurement(soap, tag, id, (SLICE__CUTS_x002ePort_USCOREMeasurement **const*)ptr, "SLICE:CUTS.Port_Measurement");
	case SOAP_TYPE_PointerToSLICE__CUTS_x002ePort_USCOREMeasurement:
		return soap_out_PointerToSLICE__CUTS_x002ePort_USCOREMeasurement(soap, tag, id, (SLICE__CUTS_x002ePort_USCOREMeasurement *const*)ptr, "SLICE:CUTS.Port_Measurement");
	case SOAP_TYPE_PointerToPointerToSLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement:
		return soap_out_PointerToPointerToSLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement(soap, tag, id, (SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement **const*)ptr, "SLICE:CUTS.Mapped_Port_Measurement");
	case SOAP_TYPE_PointerToSLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement:
		return soap_out_PointerToSLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement(soap, tag, id, (SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement *const*)ptr, "SLICE:CUTS.Mapped_Port_Measurement");
	case SOAP_TYPE_PointerToPointerToSLICE__CUTS_x002eExit_USCOREPoint_USCORETime:
		return soap_out_PointerToPointerToSLICE__CUTS_x002eExit_USCOREPoint_USCORETime(soap, tag, id, (SLICE__CUTS_x002eExit_USCOREPoint_USCORETime **const*)ptr, "SLICE:CUTS.Exit_Point_Time");
	case SOAP_TYPE_PointerToSLICE__CUTS_x002eExit_USCOREPoint_USCORETime:
		return soap_out_PointerToSLICE__CUTS_x002eExit_USCOREPoint_USCORETime(soap, tag, id, (SLICE__CUTS_x002eExit_USCOREPoint_USCORETime *const*)ptr, "SLICE:CUTS.Exit_Point_Time");
	case SOAP_TYPE_PointerToPointerToSLICE__CUTS_x002eWorker_USCOREMeasurement:
		return soap_out_PointerToPointerToSLICE__CUTS_x002eWorker_USCOREMeasurement(soap, tag, id, (SLICE__CUTS_x002eWorker_USCOREMeasurement **const*)ptr, "SLICE:CUTS.Worker_Measurement");
	case SOAP_TYPE_PointerToSLICE__CUTS_x002eWorker_USCOREMeasurement:
		return soap_out_PointerToSLICE__CUTS_x002eWorker_USCOREMeasurement(soap, tag, id, (SLICE__CUTS_x002eWorker_USCOREMeasurement *const*)ptr, "SLICE:CUTS.Worker_Measurement");
	case SOAP_TYPE_PointerToPointerToSLICE__CUTS_x002eAction_USCOREMeasurement:
		return soap_out_PointerToPointerToSLICE__CUTS_x002eAction_USCOREMeasurement(soap, tag, id, (SLICE__CUTS_x002eAction_USCOREMeasurement **const*)ptr, "SLICE:CUTS.Action_Measurement");
	case SOAP_TYPE_PointerToSLICE__CUTS_x002eAction_USCOREMeasurement:
		return soap_out_PointerToSLICE__CUTS_x002eAction_USCOREMeasurement(soap, tag, id, (SLICE__CUTS_x002eAction_USCOREMeasurement *const*)ptr, "SLICE:CUTS.Action_Measurement");
	case SOAP_TYPE_PointerToPointerToSLICE__CUTS_x002ePath_USCOREElement:
		return soap_out_PointerToPointerToSLICE__CUTS_x002ePath_USCOREElement(soap, tag, id, (SLICE__CUTS_x002ePath_USCOREElement **const*)ptr, "SLICE:CUTS.Path_Element");
	case SOAP_TYPE_PointerToSLICE__CUTS_x002ePath_USCOREElement:
		return soap_out_PointerToSLICE__CUTS_x002ePath_USCOREElement(soap, tag, id, (SLICE__CUTS_x002ePath_USCOREElement *const*)ptr, "SLICE:CUTS.Path_Element");
	case SOAP_TYPE_PointerToxsd__anyType:
		return soap_out_PointerToxsd__anyType(soap, tag, id, (xsd__anyType *const*)ptr, "xsd:anyType");
	case SOAP_TYPE_PointerToCORBA__CORBA_x002eTypeCode:
		return soap_out_PointerToCORBA__CORBA_x002eTypeCode(soap, tag, id, (CORBA__CORBA_x002eTypeCode *const*)ptr, "CORBA:CORBA.TypeCode");
	case SOAP_TYPE_PointerToxsd__anyURI:
		return soap_out_PointerToxsd__anyURI(soap, tag, id, (char **const*)ptr, "xsd:anyURI");
	case SOAP_TYPE_PointerToCUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq:
		return soap_out_PointerToCUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq(soap, tag, id, (CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq *const*)ptr, "SLICE:CUTS.Port_Measurement");
	case SOAP_TYPE_PointerToCUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq:
		return soap_out_PointerToCUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq(soap, tag, id, (CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq *const*)ptr, "SLICE:CUTS.Mapped_Port_Measurement");
	case SOAP_TYPE_PointerToCUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq:
		return soap_out_PointerToCUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq(soap, tag, id, (CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq *const*)ptr, "SLICE:CUTS.Worker_Measurement");
	case SOAP_TYPE_PointerToCUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq:
		return soap_out_PointerToCUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq(soap, tag, id, (CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq *const*)ptr, "SLICE:CUTS.Exit_Point_Time");
	case SOAP_TYPE_PointerToCUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq:
		return soap_out_PointerToCUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq(soap, tag, id, (CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq *const*)ptr, "SLICE:CUTS.Action_Measurement");
	case SOAP_TYPE_PointerToSLICE__CUTS_x002eTime_USCORESample:
		return soap_out_PointerToSLICE__CUTS_x002eTime_USCORESample(soap, tag, id, (SLICE__CUTS_x002eTime_USCORESample *const*)ptr, "SLICE:CUTS.Time_Sample");
	case SOAP_TYPE_PointerToSLICE__CUTS_x002eTime_USCOREInfo:
		return soap_out_PointerToSLICE__CUTS_x002eTime_USCOREInfo(soap, tag, id, (SLICE__CUTS_x002eTime_USCOREInfo *const*)ptr, "SLICE:CUTS.Time_Info");
	case SOAP_TYPE_PointerToCORBA__ObjectReference:
		return soap_out_PointerToCORBA__ObjectReference(soap, tag, id, (CORBA__ObjectReference *const*)ptr, "CORBA:ObjectReference");
	case SOAP_TYPE__SOAP_ENC__arrayType:
		return soap_out_string(soap, "SOAP-ENC:arrayType", id, (char**)&ptr, NULL);
	case SOAP_TYPE_xsd__anyURI:
		return soap_out_string(soap, tag, id, (char**)&ptr, "xsd:anyURI");
	case SOAP_TYPE_xsd__ID:
		return soap_out_string(soap, tag, id, (char**)&ptr, "xsd:ID");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, "QName", id, (char**)&ptr, NULL);
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char**)&ptr, "xsd:string");
	}
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE__CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed:
		((_CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound:
		((_CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed:
		((_CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__CORBA__CORBA_x002eSystemExceptionMessage:
		((_CORBA__CORBA_x002eSystemExceptionMessage *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_CORBA__CORBA_x002ecompletion_USCOREstatus_:
		((CORBA__CORBA_x002ecompletion_USCOREstatus_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_SLICE__CUTS_x002eTime_USCOREStamp__:
		((SLICE__CUTS_x002eTime_USCOREStamp__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__CORBA__SourceRepositoryID:
		((_CORBA__SourceRepositoryID *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__CORBA__SourceIDL:
		((_CORBA__SourceIDL *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_CORBA__CORBA_x002eSystemException:
		((CORBA__CORBA_x002eSystemException *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_CORBA__CORBA_x002eAny:
		((CORBA__CORBA_x002eAny *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_CORBA__CORBA_x002eTypeCode:
		((CORBA__CORBA_x002eTypeCode *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_CORBA__ObjectReference:
		((CORBA__ObjectReference *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_SLICE__CUTS_x002eCollection_USCOREStatistics:
		((SLICE__CUTS_x002eCollection_USCOREStatistics *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_SLICE__CUTS_x002eBenchmark_USCOREData:
		((SLICE__CUTS_x002eBenchmark_USCOREData *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq:
		((CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_SLICE__CUTS_x002ePort_USCOREMeasurement:
		((SLICE__CUTS_x002ePort_USCOREMeasurement *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq:
		((CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement:
		((SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq:
		((CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_SLICE__CUTS_x002eExit_USCOREPoint_USCORETime:
		((SLICE__CUTS_x002eExit_USCOREPoint_USCORETime *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq:
		((CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_SLICE__CUTS_x002eWorker_USCOREMeasurement:
		((SLICE__CUTS_x002eWorker_USCOREMeasurement *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq:
		((CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_SLICE__CUTS_x002eAction_USCOREMeasurement:
		((SLICE__CUTS_x002eAction_USCOREMeasurement *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_SLICE__CUTS_x002eTime_USCORESample:
		((SLICE__CUTS_x002eTime_USCORESample *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo:
		((SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_SLICE__CUTS_x002eTime_USCOREInfo:
		((SLICE__CUTS_x002eTime_USCOREInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_CUTS_x002e_USCORESE_USCOREPath_USCORESequence:
		((CUTS_x002e_USCORESE_USCOREPath_USCORESequence *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_SLICE__CUTS_x002ePath_USCOREElement:
		((SLICE__CUTS_x002ePath_USCOREElement *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_SLICE__CUTS_x002eComponent_USCORERegistration:
		((SLICE__CUTS_x002eComponent_USCORERegistration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_SLICE__CUTS_x002eRegistration_USCORELimit:
		((SLICE__CUTS_x002eRegistration_USCORELimit *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_SLICE__CUTS_x002eRegistration_USCOREFailed:
		((SLICE__CUTS_x002eRegistration_USCOREFailed *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_SLICE__CUTS_x002eOperation_USCOREFailed:
		((SLICE__CUTS_x002eOperation_USCOREFailed *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_SLICE__CUTS_x002eID_USCORENot_USCOREFound:
		((SLICE__CUTS_x002eID_USCORENot_USCOREFound *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_SLICE__CUTS_x002eBinding_USCOREFailed:
		((SLICE__CUTS_x002eBinding_USCOREFailed *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__unsignedShort:
		((xsd__unsignedShort *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__unsignedInt:
		((xsd__unsignedInt *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__string:
		((xsd__string *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__int:
		((xsd__int *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__anyURI_:
		((xsd__anyURI_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__ID_:
		((xsd__ID_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__anyType:
		((xsd__anyType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_SLICE__bind_USCOREto_USCOREpath:
		soap_serialize_SLICE__bind_USCOREto_USCOREpath(soap, (const struct SLICE__bind_USCOREto_USCOREpath *)ptr);
		break;
	case SOAP_TYPE_SLICE__bind_USCOREto_USCOREpathResponse:
		soap_serialize_SLICE__bind_USCOREto_USCOREpathResponse(soap, (const struct SLICE__bind_USCOREto_USCOREpathResponse *)ptr);
		break;
	case SOAP_TYPE_SLICE__unbind_USCOREto_USCOREpath:
		soap_serialize_SLICE__unbind_USCOREto_USCOREpath(soap, (const struct SLICE__unbind_USCOREto_USCOREpath *)ptr);
		break;
	case SOAP_TYPE_SLICE__unbind_USCOREto_USCOREpathResponse:
		soap_serialize_SLICE__unbind_USCOREto_USCOREpathResponse(soap, (const struct SLICE__unbind_USCOREto_USCOREpathResponse *)ptr);
		break;
	case SOAP_TYPE_SLICE__execution_USCOREtime:
		soap_serialize_SLICE__execution_USCOREtime(soap, (const struct SLICE__execution_USCOREtime *)ptr);
		break;
	case SOAP_TYPE_SLICE__execution_USCOREtimeResponse:
		soap_serialize_SLICE__execution_USCOREtimeResponse(soap, (const struct SLICE__execution_USCOREtimeResponse *)ptr);
		break;
	case SOAP_TYPE_SLICE__collect_USCOREperformance_USCOREdata:
		soap_serialize_SLICE__collect_USCOREperformance_USCOREdata(soap, (const struct SLICE__collect_USCOREperformance_USCOREdata *)ptr);
		break;
	case SOAP_TYPE_SLICE__collect_USCOREperformance_USCOREdataResponse:
		soap_serialize_SLICE__collect_USCOREperformance_USCOREdataResponse(soap, (const struct SLICE__collect_USCOREperformance_USCOREdataResponse *)ptr);
		break;
	case SOAP_TYPE_PointerToCUTS_x002e_USCORESE_USCOREPath_USCORESequence:
		soap_serialize_PointerToCUTS_x002e_USCORESE_USCOREPath_USCORESequence(soap, (CUTS_x002e_USCORESE_USCOREPath_USCORESequence *const*)ptr);
		break;
	case SOAP_TYPE_PointerToSLICE__CUTS_x002eEvent_USCORETime_USCOREInfo:
		soap_serialize_PointerToSLICE__CUTS_x002eEvent_USCORETime_USCOREInfo(soap, (SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo *const*)ptr);
		break;
	case SOAP_TYPE_PointerToSLICE__CUTS_x002eOperation_USCOREFailed:
		soap_serialize_PointerToSLICE__CUTS_x002eOperation_USCOREFailed(soap, (SLICE__CUTS_x002eOperation_USCOREFailed *const*)ptr);
		break;
	case SOAP_TYPE_PointerToSLICE__CUTS_x002eID_USCORENot_USCOREFound:
		soap_serialize_PointerToSLICE__CUTS_x002eID_USCORENot_USCOREFound(soap, (SLICE__CUTS_x002eID_USCORENot_USCOREFound *const*)ptr);
		break;
	case SOAP_TYPE_PointerToSLICE__CUTS_x002eBinding_USCOREFailed:
		soap_serialize_PointerToSLICE__CUTS_x002eBinding_USCOREFailed(soap, (SLICE__CUTS_x002eBinding_USCOREFailed *const*)ptr);
		break;
	case SOAP_TYPE_PointerToCORBA__CORBA_x002eSystemException:
		soap_serialize_PointerToCORBA__CORBA_x002eSystemException(soap, (CORBA__CORBA_x002eSystemException *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerToSLICE__CUTS_x002ePort_USCOREMeasurement:
		soap_serialize_PointerToPointerToSLICE__CUTS_x002ePort_USCOREMeasurement(soap, (SLICE__CUTS_x002ePort_USCOREMeasurement **const*)ptr);
		break;
	case SOAP_TYPE_PointerToSLICE__CUTS_x002ePort_USCOREMeasurement:
		soap_serialize_PointerToSLICE__CUTS_x002ePort_USCOREMeasurement(soap, (SLICE__CUTS_x002ePort_USCOREMeasurement *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerToSLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement:
		soap_serialize_PointerToPointerToSLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement(soap, (SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement **const*)ptr);
		break;
	case SOAP_TYPE_PointerToSLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement:
		soap_serialize_PointerToSLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement(soap, (SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerToSLICE__CUTS_x002eExit_USCOREPoint_USCORETime:
		soap_serialize_PointerToPointerToSLICE__CUTS_x002eExit_USCOREPoint_USCORETime(soap, (SLICE__CUTS_x002eExit_USCOREPoint_USCORETime **const*)ptr);
		break;
	case SOAP_TYPE_PointerToSLICE__CUTS_x002eExit_USCOREPoint_USCORETime:
		soap_serialize_PointerToSLICE__CUTS_x002eExit_USCOREPoint_USCORETime(soap, (SLICE__CUTS_x002eExit_USCOREPoint_USCORETime *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerToSLICE__CUTS_x002eWorker_USCOREMeasurement:
		soap_serialize_PointerToPointerToSLICE__CUTS_x002eWorker_USCOREMeasurement(soap, (SLICE__CUTS_x002eWorker_USCOREMeasurement **const*)ptr);
		break;
	case SOAP_TYPE_PointerToSLICE__CUTS_x002eWorker_USCOREMeasurement:
		soap_serialize_PointerToSLICE__CUTS_x002eWorker_USCOREMeasurement(soap, (SLICE__CUTS_x002eWorker_USCOREMeasurement *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerToSLICE__CUTS_x002eAction_USCOREMeasurement:
		soap_serialize_PointerToPointerToSLICE__CUTS_x002eAction_USCOREMeasurement(soap, (SLICE__CUTS_x002eAction_USCOREMeasurement **const*)ptr);
		break;
	case SOAP_TYPE_PointerToSLICE__CUTS_x002eAction_USCOREMeasurement:
		soap_serialize_PointerToSLICE__CUTS_x002eAction_USCOREMeasurement(soap, (SLICE__CUTS_x002eAction_USCOREMeasurement *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerToSLICE__CUTS_x002ePath_USCOREElement:
		soap_serialize_PointerToPointerToSLICE__CUTS_x002ePath_USCOREElement(soap, (SLICE__CUTS_x002ePath_USCOREElement **const*)ptr);
		break;
	case SOAP_TYPE_PointerToSLICE__CUTS_x002ePath_USCOREElement:
		soap_serialize_PointerToSLICE__CUTS_x002ePath_USCOREElement(soap, (SLICE__CUTS_x002ePath_USCOREElement *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__anyType:
		soap_serialize_PointerToxsd__anyType(soap, (xsd__anyType *const*)ptr);
		break;
	case SOAP_TYPE_PointerToCORBA__CORBA_x002eTypeCode:
		soap_serialize_PointerToCORBA__CORBA_x002eTypeCode(soap, (CORBA__CORBA_x002eTypeCode *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__anyURI:
		soap_serialize_PointerToxsd__anyURI(soap, (char **const*)ptr);
		break;
	case SOAP_TYPE_PointerToCUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq:
		soap_serialize_PointerToCUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq(soap, (CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq *const*)ptr);
		break;
	case SOAP_TYPE_PointerToCUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq:
		soap_serialize_PointerToCUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq(soap, (CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq *const*)ptr);
		break;
	case SOAP_TYPE_PointerToCUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq:
		soap_serialize_PointerToCUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq(soap, (CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq *const*)ptr);
		break;
	case SOAP_TYPE_PointerToCUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq:
		soap_serialize_PointerToCUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq(soap, (CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq *const*)ptr);
		break;
	case SOAP_TYPE_PointerToCUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq:
		soap_serialize_PointerToCUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq(soap, (CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq *const*)ptr);
		break;
	case SOAP_TYPE_PointerToSLICE__CUTS_x002eTime_USCORESample:
		soap_serialize_PointerToSLICE__CUTS_x002eTime_USCORESample(soap, (SLICE__CUTS_x002eTime_USCORESample *const*)ptr);
		break;
	case SOAP_TYPE_PointerToSLICE__CUTS_x002eTime_USCOREInfo:
		soap_serialize_PointerToSLICE__CUTS_x002eTime_USCOREInfo(soap, (SLICE__CUTS_x002eTime_USCOREInfo *const*)ptr);
		break;
	case SOAP_TYPE_PointerToCORBA__ObjectReference:
		soap_serialize_PointerToCORBA__ObjectReference(soap, (CORBA__ObjectReference *const*)ptr);
		break;
	case SOAP_TYPE__SOAP_ENC__arrayType:
		soap_serialize_string(soap, (char**)&ptr);
		break;
	case SOAP_TYPE_xsd__anyURI:
		soap_serialize_string(soap, (char**)&ptr);
		break;
	case SOAP_TYPE_xsd__ID:
		soap_serialize_string(soap, (char**)&ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char**)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char**)&ptr);
		break;
	}
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_xsd__anyType:
		return (void*)soap_instantiate_xsd__anyType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__ID_:
		return (void*)soap_instantiate_xsd__ID_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__anyURI_:
		return (void*)soap_instantiate_xsd__anyURI_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__int:
		return (void*)soap_instantiate_xsd__int(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__string:
		return (void*)soap_instantiate_xsd__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__unsignedInt:
		return (void*)soap_instantiate_xsd__unsignedInt(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__unsignedShort:
		return (void*)soap_instantiate_xsd__unsignedShort(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SLICE__CUTS_x002eTime_USCOREStamp__:
		return (void*)soap_instantiate_SLICE__CUTS_x002eTime_USCOREStamp__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_CORBA__CORBA_x002ecompletion_USCOREstatus_:
		return (void*)soap_instantiate_CORBA__CORBA_x002ecompletion_USCOREstatus_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SLICE__CUTS_x002eBinding_USCOREFailed:
		return (void*)soap_instantiate_SLICE__CUTS_x002eBinding_USCOREFailed(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SLICE__CUTS_x002eID_USCORENot_USCOREFound:
		return (void*)soap_instantiate_SLICE__CUTS_x002eID_USCORENot_USCOREFound(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SLICE__CUTS_x002eOperation_USCOREFailed:
		return (void*)soap_instantiate_SLICE__CUTS_x002eOperation_USCOREFailed(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SLICE__CUTS_x002eRegistration_USCOREFailed:
		return (void*)soap_instantiate_SLICE__CUTS_x002eRegistration_USCOREFailed(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SLICE__CUTS_x002eRegistration_USCORELimit:
		return (void*)soap_instantiate_SLICE__CUTS_x002eRegistration_USCORELimit(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SLICE__CUTS_x002eComponent_USCORERegistration:
		return (void*)soap_instantiate_SLICE__CUTS_x002eComponent_USCORERegistration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SLICE__CUTS_x002ePath_USCOREElement:
		return (void*)soap_instantiate_SLICE__CUTS_x002ePath_USCOREElement(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SLICE__CUTS_x002eTime_USCOREInfo:
		return (void*)soap_instantiate_SLICE__CUTS_x002eTime_USCOREInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo:
		return (void*)soap_instantiate_SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SLICE__CUTS_x002eTime_USCORESample:
		return (void*)soap_instantiate_SLICE__CUTS_x002eTime_USCORESample(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SLICE__CUTS_x002eAction_USCOREMeasurement:
		return (void*)soap_instantiate_SLICE__CUTS_x002eAction_USCOREMeasurement(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SLICE__CUTS_x002eWorker_USCOREMeasurement:
		return (void*)soap_instantiate_SLICE__CUTS_x002eWorker_USCOREMeasurement(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SLICE__CUTS_x002eExit_USCOREPoint_USCORETime:
		return (void*)soap_instantiate_SLICE__CUTS_x002eExit_USCOREPoint_USCORETime(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement:
		return (void*)soap_instantiate_SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SLICE__CUTS_x002ePort_USCOREMeasurement:
		return (void*)soap_instantiate_SLICE__CUTS_x002ePort_USCOREMeasurement(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SLICE__CUTS_x002eBenchmark_USCOREData:
		return (void*)soap_instantiate_SLICE__CUTS_x002eBenchmark_USCOREData(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SLICE__CUTS_x002eCollection_USCOREStatistics:
		return (void*)soap_instantiate_SLICE__CUTS_x002eCollection_USCOREStatistics(soap, -1, type, arrayType, n);
	case SOAP_TYPE_CORBA__ObjectReference:
		return (void*)soap_instantiate_CORBA__ObjectReference(soap, -1, type, arrayType, n);
	case SOAP_TYPE_CORBA__CORBA_x002eTypeCode:
		return (void*)soap_instantiate_CORBA__CORBA_x002eTypeCode(soap, -1, type, arrayType, n);
	case SOAP_TYPE_CORBA__CORBA_x002eAny:
		return (void*)soap_instantiate_CORBA__CORBA_x002eAny(soap, -1, type, arrayType, n);
	case SOAP_TYPE_CORBA__CORBA_x002eSystemException:
		return (void*)soap_instantiate_CORBA__CORBA_x002eSystemException(soap, -1, type, arrayType, n);
	case SOAP_TYPE__CORBA__SourceIDL:
		return (void*)soap_instantiate__CORBA__SourceIDL(soap, -1, type, arrayType, n);
	case SOAP_TYPE__CORBA__SourceRepositoryID:
		return (void*)soap_instantiate__CORBA__SourceRepositoryID(soap, -1, type, arrayType, n);
	case SOAP_TYPE_CUTS_x002e_USCORESE_USCOREPath_USCORESequence:
		return (void*)soap_instantiate_CUTS_x002e_USCORESE_USCOREPath_USCORESequence(soap, -1, type, arrayType, n);
	case SOAP_TYPE_CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq:
		return (void*)soap_instantiate_CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq:
		return (void*)soap_instantiate_CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq:
		return (void*)soap_instantiate_CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq:
		return (void*)soap_instantiate_CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq:
		return (void*)soap_instantiate_CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq(soap, -1, type, arrayType, n);
	case SOAP_TYPE__CORBA__CORBA_x002eSystemExceptionMessage:
		return (void*)soap_instantiate__CORBA__CORBA_x002eSystemExceptionMessage(soap, -1, type, arrayType, n);
	case SOAP_TYPE__CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed:
		return (void*)soap_instantiate__CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed(soap, -1, type, arrayType, n);
	case SOAP_TYPE__CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound:
		return (void*)soap_instantiate__CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound(soap, -1, type, arrayType, n);
	case SOAP_TYPE__CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed:
		return (void*)soap_instantiate__CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SLICE__collect_USCOREperformance_USCOREdataResponse:
		return (void*)soap_instantiate_SLICE__collect_USCOREperformance_USCOREdataResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SLICE__collect_USCOREperformance_USCOREdata:
		return (void*)soap_instantiate_SLICE__collect_USCOREperformance_USCOREdata(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SLICE__execution_USCOREtimeResponse:
		return (void*)soap_instantiate_SLICE__execution_USCOREtimeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SLICE__execution_USCOREtime:
		return (void*)soap_instantiate_SLICE__execution_USCOREtime(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SLICE__unbind_USCOREto_USCOREpathResponse:
		return (void*)soap_instantiate_SLICE__unbind_USCOREto_USCOREpathResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SLICE__unbind_USCOREto_USCOREpath:
		return (void*)soap_instantiate_SLICE__unbind_USCOREto_USCOREpath(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SLICE__bind_USCOREto_USCOREpathResponse:
		return (void*)soap_instantiate_SLICE__bind_USCOREto_USCOREpathResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SLICE__bind_USCOREto_USCOREpath:
		return (void*)soap_instantiate_SLICE__bind_USCOREto_USCOREpath(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_xsd__anyType:
		if (p->size < 0)
			delete (xsd__anyType*)p->ptr;
		else
			delete[] (xsd__anyType*)p->ptr;
		break;
	case SOAP_TYPE_xsd__ID_:
		if (p->size < 0)
			delete (xsd__ID_*)p->ptr;
		else
			delete[] (xsd__ID_*)p->ptr;
		break;
	case SOAP_TYPE_xsd__anyURI_:
		if (p->size < 0)
			delete (xsd__anyURI_*)p->ptr;
		else
			delete[] (xsd__anyURI_*)p->ptr;
		break;
	case SOAP_TYPE_xsd__int:
		if (p->size < 0)
			delete (xsd__int*)p->ptr;
		else
			delete[] (xsd__int*)p->ptr;
		break;
	case SOAP_TYPE_xsd__string:
		if (p->size < 0)
			delete (xsd__string*)p->ptr;
		else
			delete[] (xsd__string*)p->ptr;
		break;
	case SOAP_TYPE_xsd__unsignedInt:
		if (p->size < 0)
			delete (xsd__unsignedInt*)p->ptr;
		else
			delete[] (xsd__unsignedInt*)p->ptr;
		break;
	case SOAP_TYPE_xsd__unsignedShort:
		if (p->size < 0)
			delete (xsd__unsignedShort*)p->ptr;
		else
			delete[] (xsd__unsignedShort*)p->ptr;
		break;
	case SOAP_TYPE_SLICE__CUTS_x002eTime_USCOREStamp__:
		if (p->size < 0)
			delete (SLICE__CUTS_x002eTime_USCOREStamp__*)p->ptr;
		else
			delete[] (SLICE__CUTS_x002eTime_USCOREStamp__*)p->ptr;
		break;
	case SOAP_TYPE_CORBA__CORBA_x002ecompletion_USCOREstatus_:
		if (p->size < 0)
			delete (CORBA__CORBA_x002ecompletion_USCOREstatus_*)p->ptr;
		else
			delete[] (CORBA__CORBA_x002ecompletion_USCOREstatus_*)p->ptr;
		break;
	case SOAP_TYPE_SLICE__CUTS_x002eBinding_USCOREFailed:
		if (p->size < 0)
			delete (SLICE__CUTS_x002eBinding_USCOREFailed*)p->ptr;
		else
			delete[] (SLICE__CUTS_x002eBinding_USCOREFailed*)p->ptr;
		break;
	case SOAP_TYPE_SLICE__CUTS_x002eID_USCORENot_USCOREFound:
		if (p->size < 0)
			delete (SLICE__CUTS_x002eID_USCORENot_USCOREFound*)p->ptr;
		else
			delete[] (SLICE__CUTS_x002eID_USCORENot_USCOREFound*)p->ptr;
		break;
	case SOAP_TYPE_SLICE__CUTS_x002eOperation_USCOREFailed:
		if (p->size < 0)
			delete (SLICE__CUTS_x002eOperation_USCOREFailed*)p->ptr;
		else
			delete[] (SLICE__CUTS_x002eOperation_USCOREFailed*)p->ptr;
		break;
	case SOAP_TYPE_SLICE__CUTS_x002eRegistration_USCOREFailed:
		if (p->size < 0)
			delete (SLICE__CUTS_x002eRegistration_USCOREFailed*)p->ptr;
		else
			delete[] (SLICE__CUTS_x002eRegistration_USCOREFailed*)p->ptr;
		break;
	case SOAP_TYPE_SLICE__CUTS_x002eRegistration_USCORELimit:
		if (p->size < 0)
			delete (SLICE__CUTS_x002eRegistration_USCORELimit*)p->ptr;
		else
			delete[] (SLICE__CUTS_x002eRegistration_USCORELimit*)p->ptr;
		break;
	case SOAP_TYPE_SLICE__CUTS_x002eComponent_USCORERegistration:
		if (p->size < 0)
			delete (SLICE__CUTS_x002eComponent_USCORERegistration*)p->ptr;
		else
			delete[] (SLICE__CUTS_x002eComponent_USCORERegistration*)p->ptr;
		break;
	case SOAP_TYPE_SLICE__CUTS_x002ePath_USCOREElement:
		if (p->size < 0)
			delete (SLICE__CUTS_x002ePath_USCOREElement*)p->ptr;
		else
			delete[] (SLICE__CUTS_x002ePath_USCOREElement*)p->ptr;
		break;
	case SOAP_TYPE_SLICE__CUTS_x002eTime_USCOREInfo:
		if (p->size < 0)
			delete (SLICE__CUTS_x002eTime_USCOREInfo*)p->ptr;
		else
			delete[] (SLICE__CUTS_x002eTime_USCOREInfo*)p->ptr;
		break;
	case SOAP_TYPE_SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo:
		if (p->size < 0)
			delete (SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo*)p->ptr;
		else
			delete[] (SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo*)p->ptr;
		break;
	case SOAP_TYPE_SLICE__CUTS_x002eTime_USCORESample:
		if (p->size < 0)
			delete (SLICE__CUTS_x002eTime_USCORESample*)p->ptr;
		else
			delete[] (SLICE__CUTS_x002eTime_USCORESample*)p->ptr;
		break;
	case SOAP_TYPE_SLICE__CUTS_x002eAction_USCOREMeasurement:
		if (p->size < 0)
			delete (SLICE__CUTS_x002eAction_USCOREMeasurement*)p->ptr;
		else
			delete[] (SLICE__CUTS_x002eAction_USCOREMeasurement*)p->ptr;
		break;
	case SOAP_TYPE_SLICE__CUTS_x002eWorker_USCOREMeasurement:
		if (p->size < 0)
			delete (SLICE__CUTS_x002eWorker_USCOREMeasurement*)p->ptr;
		else
			delete[] (SLICE__CUTS_x002eWorker_USCOREMeasurement*)p->ptr;
		break;
	case SOAP_TYPE_SLICE__CUTS_x002eExit_USCOREPoint_USCORETime:
		if (p->size < 0)
			delete (SLICE__CUTS_x002eExit_USCOREPoint_USCORETime*)p->ptr;
		else
			delete[] (SLICE__CUTS_x002eExit_USCOREPoint_USCORETime*)p->ptr;
		break;
	case SOAP_TYPE_SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement:
		if (p->size < 0)
			delete (SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement*)p->ptr;
		else
			delete[] (SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement*)p->ptr;
		break;
	case SOAP_TYPE_SLICE__CUTS_x002ePort_USCOREMeasurement:
		if (p->size < 0)
			delete (SLICE__CUTS_x002ePort_USCOREMeasurement*)p->ptr;
		else
			delete[] (SLICE__CUTS_x002ePort_USCOREMeasurement*)p->ptr;
		break;
	case SOAP_TYPE_SLICE__CUTS_x002eBenchmark_USCOREData:
		if (p->size < 0)
			delete (SLICE__CUTS_x002eBenchmark_USCOREData*)p->ptr;
		else
			delete[] (SLICE__CUTS_x002eBenchmark_USCOREData*)p->ptr;
		break;
	case SOAP_TYPE_SLICE__CUTS_x002eCollection_USCOREStatistics:
		if (p->size < 0)
			delete (SLICE__CUTS_x002eCollection_USCOREStatistics*)p->ptr;
		else
			delete[] (SLICE__CUTS_x002eCollection_USCOREStatistics*)p->ptr;
		break;
	case SOAP_TYPE_CORBA__ObjectReference:
		if (p->size < 0)
			delete (CORBA__ObjectReference*)p->ptr;
		else
			delete[] (CORBA__ObjectReference*)p->ptr;
		break;
	case SOAP_TYPE_CORBA__CORBA_x002eTypeCode:
		if (p->size < 0)
			delete (CORBA__CORBA_x002eTypeCode*)p->ptr;
		else
			delete[] (CORBA__CORBA_x002eTypeCode*)p->ptr;
		break;
	case SOAP_TYPE_CORBA__CORBA_x002eAny:
		if (p->size < 0)
			delete (CORBA__CORBA_x002eAny*)p->ptr;
		else
			delete[] (CORBA__CORBA_x002eAny*)p->ptr;
		break;
	case SOAP_TYPE_CORBA__CORBA_x002eSystemException:
		if (p->size < 0)
			delete (CORBA__CORBA_x002eSystemException*)p->ptr;
		else
			delete[] (CORBA__CORBA_x002eSystemException*)p->ptr;
		break;
	case SOAP_TYPE__CORBA__SourceIDL:
		if (p->size < 0)
			delete (_CORBA__SourceIDL*)p->ptr;
		else
			delete[] (_CORBA__SourceIDL*)p->ptr;
		break;
	case SOAP_TYPE__CORBA__SourceRepositoryID:
		if (p->size < 0)
			delete (_CORBA__SourceRepositoryID*)p->ptr;
		else
			delete[] (_CORBA__SourceRepositoryID*)p->ptr;
		break;
	case SOAP_TYPE_CUTS_x002e_USCORESE_USCOREPath_USCORESequence:
		if (p->size < 0)
			delete (CUTS_x002e_USCORESE_USCOREPath_USCORESequence*)p->ptr;
		else
			delete[] (CUTS_x002e_USCORESE_USCOREPath_USCORESequence*)p->ptr;
		break;
	case SOAP_TYPE_CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq:
		if (p->size < 0)
			delete (CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq*)p->ptr;
		else
			delete[] (CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq*)p->ptr;
		break;
	case SOAP_TYPE_CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq:
		if (p->size < 0)
			delete (CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq*)p->ptr;
		else
			delete[] (CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq*)p->ptr;
		break;
	case SOAP_TYPE_CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq:
		if (p->size < 0)
			delete (CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq*)p->ptr;
		else
			delete[] (CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq*)p->ptr;
		break;
	case SOAP_TYPE_CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq:
		if (p->size < 0)
			delete (CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq*)p->ptr;
		else
			delete[] (CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq*)p->ptr;
		break;
	case SOAP_TYPE_CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq:
		if (p->size < 0)
			delete (CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq*)p->ptr;
		else
			delete[] (CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq*)p->ptr;
		break;
	case SOAP_TYPE__CORBA__CORBA_x002eSystemExceptionMessage:
		if (p->size < 0)
			delete (_CORBA__CORBA_x002eSystemExceptionMessage*)p->ptr;
		else
			delete[] (_CORBA__CORBA_x002eSystemExceptionMessage*)p->ptr;
		break;
	case SOAP_TYPE__CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed:
		if (p->size < 0)
			delete (_CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed*)p->ptr;
		else
			delete[] (_CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed*)p->ptr;
		break;
	case SOAP_TYPE__CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound:
		if (p->size < 0)
			delete (_CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound*)p->ptr;
		else
			delete[] (_CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound*)p->ptr;
		break;
	case SOAP_TYPE__CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed:
		if (p->size < 0)
			delete (_CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed*)p->ptr;
		else
			delete[] (_CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed*)p->ptr;
		break;
	case SOAP_TYPE_SLICE__collect_USCOREperformance_USCOREdataResponse:
		if (p->size < 0)
			delete (struct SLICE__collect_USCOREperformance_USCOREdataResponse*)p->ptr;
		else
			delete[] (struct SLICE__collect_USCOREperformance_USCOREdataResponse*)p->ptr;
		break;
	case SOAP_TYPE_SLICE__collect_USCOREperformance_USCOREdata:
		if (p->size < 0)
			delete (struct SLICE__collect_USCOREperformance_USCOREdata*)p->ptr;
		else
			delete[] (struct SLICE__collect_USCOREperformance_USCOREdata*)p->ptr;
		break;
	case SOAP_TYPE_SLICE__execution_USCOREtimeResponse:
		if (p->size < 0)
			delete (struct SLICE__execution_USCOREtimeResponse*)p->ptr;
		else
			delete[] (struct SLICE__execution_USCOREtimeResponse*)p->ptr;
		break;
	case SOAP_TYPE_SLICE__execution_USCOREtime:
		if (p->size < 0)
			delete (struct SLICE__execution_USCOREtime*)p->ptr;
		else
			delete[] (struct SLICE__execution_USCOREtime*)p->ptr;
		break;
	case SOAP_TYPE_SLICE__unbind_USCOREto_USCOREpathResponse:
		if (p->size < 0)
			delete (struct SLICE__unbind_USCOREto_USCOREpathResponse*)p->ptr;
		else
			delete[] (struct SLICE__unbind_USCOREto_USCOREpathResponse*)p->ptr;
		break;
	case SOAP_TYPE_SLICE__unbind_USCOREto_USCOREpath:
		if (p->size < 0)
			delete (struct SLICE__unbind_USCOREto_USCOREpath*)p->ptr;
		else
			delete[] (struct SLICE__unbind_USCOREto_USCOREpath*)p->ptr;
		break;
	case SOAP_TYPE_SLICE__bind_USCOREto_USCOREpathResponse:
		if (p->size < 0)
			delete (struct SLICE__bind_USCOREto_USCOREpathResponse*)p->ptr;
		else
			delete[] (struct SLICE__bind_USCOREto_USCOREpathResponse*)p->ptr;
		break;
	case SOAP_TYPE_SLICE__bind_USCOREto_USCOREpath:
		if (p->size < 0)
			delete (struct SLICE__bind_USCOREto_USCOREpath*)p->ptr;
		else
			delete[] (struct SLICE__bind_USCOREto_USCOREpath*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			delete (struct SOAP_ENV__Header*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Header*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			delete (struct SOAP_ENV__Code*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Code*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			delete (struct SOAP_ENV__Detail*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Detail*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			delete (struct SOAP_ENV__Reason*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Reason*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			delete (struct SOAP_ENV__Fault*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Fault*)p->ptr;
		break;
	}
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	return soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_short(struct soap *soap, short *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_short
	*a = SOAP_DEFAULT_short;
#else
	*a = (short)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_short(struct soap *soap, const short *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_short);
	if (soap_out_short(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_short(struct soap *soap, const char *tag, int id, const short *a, const char *type)
{
	return soap_outshort(soap, tag, id, a, type, SOAP_TYPE_short);
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_get_short(struct soap *soap, short *p, const char *tag, const char *type)
{
	if ((p = soap_in_short(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_in_short(struct soap *soap, const char *tag, short *a, const char *type)
{
	return soap_inshort(soap, tag, a, type, SOAP_TYPE_short);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SLICE__CUTS_x002eTime_USCOREStamp(struct soap *soap, int *a)
{	soap_default_int(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SLICE__CUTS_x002eTime_USCOREStamp(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SLICE__CUTS_x002eTime_USCOREStamp);
	if (soap_out_SLICE__CUTS_x002eTime_USCOREStamp(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SLICE__CUTS_x002eTime_USCOREStamp(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_SLICE__CUTS_x002eTime_USCOREStamp);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_SLICE__CUTS_x002eTime_USCOREStamp(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_SLICE__CUTS_x002eTime_USCOREStamp(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_SLICE__CUTS_x002eTime_USCOREStamp(struct soap *soap, const char *tag, int *a, const char *type)
{
	return soap_inint(soap, tag, a, type, SOAP_TYPE_SLICE__CUTS_x002eTime_USCOREStamp);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	return soap_inint(soap, tag, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedShort(struct soap *soap, unsigned short *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedShort
	*a = SOAP_DEFAULT_unsignedShort;
#else
	*a = (unsigned short)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedShort(struct soap *soap, const unsigned short *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedShort);
	if (soap_out_unsignedShort(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedShort(struct soap *soap, const char *tag, int id, const unsigned short *a, const char *type)
{
	return soap_outunsignedShort(soap, tag, id, a, type, SOAP_TYPE_unsignedShort);
}

SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_get_unsignedShort(struct soap *soap, unsigned short *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedShort(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_in_unsignedShort(struct soap *soap, const char *tag, unsigned short *a, const char *type)
{
	return soap_inunsignedShort(soap, tag, a, type, SOAP_TYPE_unsignedShort);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedInt);
	if (soap_out_unsignedInt(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{
	return soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_CORBA__CORBA_x002ecompletion_USCOREstatus(struct soap *soap, enum CORBA__CORBA_x002ecompletion_USCOREstatus *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_CORBA__CORBA_x002ecompletion_USCOREstatus
	*a = SOAP_DEFAULT_CORBA__CORBA_x002ecompletion_USCOREstatus;
#else
	*a = (enum CORBA__CORBA_x002ecompletion_USCOREstatus)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_CORBA__CORBA_x002ecompletion_USCOREstatus(struct soap *soap, const enum CORBA__CORBA_x002ecompletion_USCOREstatus *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_CORBA__CORBA_x002ecompletion_USCOREstatus);
	if (soap_out_CORBA__CORBA_x002ecompletion_USCOREstatus(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_CORBA__CORBA_x002ecompletion_USCOREstatus[] =
{	{ (long)CORBA__CORBA_x002ecompletion_USCOREstatus__COMPLETED_USCOREYES, "COMPLETED_YES" },
	{ (long)CORBA__CORBA_x002ecompletion_USCOREstatus__COMPLETED_USCORENO, "COMPLETED_NO" },
	{ (long)CORBA__CORBA_x002ecompletion_USCOREstatus__COMPLETED_USCOREMAYBE, "COMPLETED_MAYBE" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_CORBA__CORBA_x002ecompletion_USCOREstatus2s(struct soap *soap, enum CORBA__CORBA_x002ecompletion_USCOREstatus n)
{	const char *s = soap_code_str(soap_codes_CORBA__CORBA_x002ecompletion_USCOREstatus, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_CORBA__CORBA_x002ecompletion_USCOREstatus(struct soap *soap, const char *tag, int id, const enum CORBA__CORBA_x002ecompletion_USCOREstatus *a, const char *type)
{	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_CORBA__CORBA_x002ecompletion_USCOREstatus), type);
	soap_send(soap, soap_CORBA__CORBA_x002ecompletion_USCOREstatus2s(soap, *a));
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 enum CORBA__CORBA_x002ecompletion_USCOREstatus * SOAP_FMAC4 soap_get_CORBA__CORBA_x002ecompletion_USCOREstatus(struct soap *soap, enum CORBA__CORBA_x002ecompletion_USCOREstatus *p, const char *tag, const char *type)
{
	if ((p = soap_in_CORBA__CORBA_x002ecompletion_USCOREstatus(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2CORBA__CORBA_x002ecompletion_USCOREstatus(struct soap *soap, const char *s, enum CORBA__CORBA_x002ecompletion_USCOREstatus *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_CORBA__CORBA_x002ecompletion_USCOREstatus, s);
	if (map)
		*a = (enum CORBA__CORBA_x002ecompletion_USCOREstatus)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 2)))
			return soap->error = SOAP_TYPE;
		*a = (enum CORBA__CORBA_x002ecompletion_USCOREstatus)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum CORBA__CORBA_x002ecompletion_USCOREstatus * SOAP_FMAC4 soap_in_CORBA__CORBA_x002ecompletion_USCOREstatus(struct soap *soap, const char *tag, enum CORBA__CORBA_x002ecompletion_USCOREstatus *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum CORBA__CORBA_x002ecompletion_USCOREstatus *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_CORBA__CORBA_x002ecompletion_USCOREstatus, sizeof(enum CORBA__CORBA_x002ecompletion_USCOREstatus), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2CORBA__CORBA_x002ecompletion_USCOREstatus(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum CORBA__CORBA_x002ecompletion_USCOREstatus *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_CORBA__CORBA_x002ecompletion_USCOREstatus, 0, sizeof(enum CORBA__CORBA_x002ecompletion_USCOREstatus), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

void _CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToSLICE__CUTS_x002eOperation_USCOREFailed(soap, &((_CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed*)this)->exception);
	/* transient soap skipped */
}

void _CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed::soap_default(struct soap *soap)
{
	this->soap = soap;
	((_CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed*)this)->exception = NULL;
	/* transient soap skipped */
}

int _CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed(struct soap *soap, const char *tag, int id, const _CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed), type);
	soap_out_PointerToSLICE__CUTS_x002eOperation_USCOREFailed(soap, "exception", -1, &(((_CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed*)a)->exception), "");
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *_CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed(soap, this, tag, type);
}

SOAP_FMAC3 _CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed * SOAP_FMAC4 soap_get__CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed(struct soap *soap, _CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed *p, const char *tag, const char *type)
{
	if ((p = soap_in__CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *_CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed(soap, tag, this, type);
}

SOAP_FMAC3 _CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed * SOAP_FMAC4 soap_in__CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed(struct soap *soap, const char *tag, _CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed, sizeof(_CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_exception1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_exception1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSLICE__CUTS_x002eOperation_USCOREFailed(soap, "exception", &(((_CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed*)a)->exception), "SLICE:CUTS.Operation_Failed"))
				{	soap_flag_exception1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE__CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed, 0, sizeof(_CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed), 0, soap_copy__CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed * SOAP_FMAC6 soap_new__CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed(struct soap *soap, int n)
{	return soap_instantiate__CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed(struct soap *soap, _CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed * SOAP_FMAC4 soap_instantiate__CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed;
		if (size)
			*size = sizeof(_CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed);
		((_CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed[n];
		if (size)
			*size = n * sizeof(_CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed);
		for (int i = 0; i < n; i++)
			((_CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed %p -> %p\n", q, p));
	*(_CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed*)p = *(_CORBA___USCOREexception_x002eCUTS_x002eOperation_USCOREFailed*)q;
}

void _CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToSLICE__CUTS_x002eID_USCORENot_USCOREFound(soap, &((_CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound*)this)->exception);
	/* transient soap skipped */
}

void _CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound::soap_default(struct soap *soap)
{
	this->soap = soap;
	((_CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound*)this)->exception = NULL;
	/* transient soap skipped */
}

int _CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound(struct soap *soap, const char *tag, int id, const _CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound), type);
	soap_out_PointerToSLICE__CUTS_x002eID_USCORENot_USCOREFound(soap, "exception", -1, &(((_CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound*)a)->exception), "");
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *_CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound(soap, this, tag, type);
}

SOAP_FMAC3 _CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound * SOAP_FMAC4 soap_get__CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound(struct soap *soap, _CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound *p, const char *tag, const char *type)
{
	if ((p = soap_in__CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *_CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound(soap, tag, this, type);
}

SOAP_FMAC3 _CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound * SOAP_FMAC4 soap_in__CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound(struct soap *soap, const char *tag, _CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound, sizeof(_CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_exception1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_exception1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSLICE__CUTS_x002eID_USCORENot_USCOREFound(soap, "exception", &(((_CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound*)a)->exception), "SLICE:CUTS.ID_Not_Found"))
				{	soap_flag_exception1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE__CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound, 0, sizeof(_CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound), 0, soap_copy__CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound * SOAP_FMAC6 soap_new__CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound(struct soap *soap, int n)
{	return soap_instantiate__CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound(struct soap *soap, _CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound * SOAP_FMAC4 soap_instantiate__CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound;
		if (size)
			*size = sizeof(_CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound);
		((_CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound[n];
		if (size)
			*size = n * sizeof(_CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound);
		for (int i = 0; i < n; i++)
			((_CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound %p -> %p\n", q, p));
	*(_CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound*)p = *(_CORBA___USCOREexception_x002eCUTS_x002eID_USCORENot_USCOREFound*)q;
}

void _CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToSLICE__CUTS_x002eBinding_USCOREFailed(soap, &((_CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed*)this)->exception);
	/* transient soap skipped */
}

void _CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed::soap_default(struct soap *soap)
{
	this->soap = soap;
	((_CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed*)this)->exception = NULL;
	/* transient soap skipped */
}

int _CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed(struct soap *soap, const char *tag, int id, const _CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed), type);
	soap_out_PointerToSLICE__CUTS_x002eBinding_USCOREFailed(soap, "exception", -1, &(((_CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed*)a)->exception), "");
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *_CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed(soap, this, tag, type);
}

SOAP_FMAC3 _CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed * SOAP_FMAC4 soap_get__CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed(struct soap *soap, _CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed *p, const char *tag, const char *type)
{
	if ((p = soap_in__CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *_CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed(soap, tag, this, type);
}

SOAP_FMAC3 _CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed * SOAP_FMAC4 soap_in__CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed(struct soap *soap, const char *tag, _CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed, sizeof(_CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_exception1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_exception1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSLICE__CUTS_x002eBinding_USCOREFailed(soap, "exception", &(((_CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed*)a)->exception), "SLICE:CUTS.Binding_Failed"))
				{	soap_flag_exception1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE__CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed, 0, sizeof(_CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed), 0, soap_copy__CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed * SOAP_FMAC6 soap_new__CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed(struct soap *soap, int n)
{	return soap_instantiate__CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed(struct soap *soap, _CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed * SOAP_FMAC4 soap_instantiate__CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed;
		if (size)
			*size = sizeof(_CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed);
		((_CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed[n];
		if (size)
			*size = n * sizeof(_CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed);
		for (int i = 0; i < n; i++)
			((_CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed %p -> %p\n", q, p));
	*(_CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed*)p = *(_CORBA___USCOREexception_x002eCUTS_x002eBinding_USCOREFailed*)q;
}

void _CORBA__CORBA_x002eSystemExceptionMessage::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToCORBA__CORBA_x002eSystemException(soap, &((_CORBA__CORBA_x002eSystemExceptionMessage*)this)->_USCOREreturn);
	/* transient soap skipped */
}

void _CORBA__CORBA_x002eSystemExceptionMessage::soap_default(struct soap *soap)
{
	this->soap = soap;
	((_CORBA__CORBA_x002eSystemExceptionMessage*)this)->_USCOREreturn = NULL;
	/* transient soap skipped */
}

int _CORBA__CORBA_x002eSystemExceptionMessage::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__CORBA__CORBA_x002eSystemExceptionMessage);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _CORBA__CORBA_x002eSystemExceptionMessage::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__CORBA__CORBA_x002eSystemExceptionMessage(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__CORBA__CORBA_x002eSystemExceptionMessage(struct soap *soap, const char *tag, int id, const _CORBA__CORBA_x002eSystemExceptionMessage *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__CORBA__CORBA_x002eSystemExceptionMessage), type);
	soap_out_PointerToCORBA__CORBA_x002eSystemException(soap, "_return", -1, &(((_CORBA__CORBA_x002eSystemExceptionMessage*)a)->_USCOREreturn), "");
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *_CORBA__CORBA_x002eSystemExceptionMessage::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__CORBA__CORBA_x002eSystemExceptionMessage(soap, this, tag, type);
}

SOAP_FMAC3 _CORBA__CORBA_x002eSystemExceptionMessage * SOAP_FMAC4 soap_get__CORBA__CORBA_x002eSystemExceptionMessage(struct soap *soap, _CORBA__CORBA_x002eSystemExceptionMessage *p, const char *tag, const char *type)
{
	if ((p = soap_in__CORBA__CORBA_x002eSystemExceptionMessage(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *_CORBA__CORBA_x002eSystemExceptionMessage::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__CORBA__CORBA_x002eSystemExceptionMessage(soap, tag, this, type);
}

SOAP_FMAC3 _CORBA__CORBA_x002eSystemExceptionMessage * SOAP_FMAC4 soap_in__CORBA__CORBA_x002eSystemExceptionMessage(struct soap *soap, const char *tag, _CORBA__CORBA_x002eSystemExceptionMessage *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_CORBA__CORBA_x002eSystemExceptionMessage *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__CORBA__CORBA_x002eSystemExceptionMessage, sizeof(_CORBA__CORBA_x002eSystemExceptionMessage), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__CORBA__CORBA_x002eSystemExceptionMessage)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_CORBA__CORBA_x002eSystemExceptionMessage *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag__USCOREreturn1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__USCOREreturn1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToCORBA__CORBA_x002eSystemException(soap, "_return", &(((_CORBA__CORBA_x002eSystemExceptionMessage*)a)->_USCOREreturn), "CORBA:CORBA.SystemException"))
				{	soap_flag__USCOREreturn1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_CORBA__CORBA_x002eSystemExceptionMessage *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE__CORBA__CORBA_x002eSystemExceptionMessage, 0, sizeof(_CORBA__CORBA_x002eSystemExceptionMessage), 0, soap_copy__CORBA__CORBA_x002eSystemExceptionMessage);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _CORBA__CORBA_x002eSystemExceptionMessage * SOAP_FMAC6 soap_new__CORBA__CORBA_x002eSystemExceptionMessage(struct soap *soap, int n)
{	return soap_instantiate__CORBA__CORBA_x002eSystemExceptionMessage(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__CORBA__CORBA_x002eSystemExceptionMessage(struct soap *soap, _CORBA__CORBA_x002eSystemExceptionMessage *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _CORBA__CORBA_x002eSystemExceptionMessage * SOAP_FMAC4 soap_instantiate__CORBA__CORBA_x002eSystemExceptionMessage(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__CORBA__CORBA_x002eSystemExceptionMessage(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__CORBA__CORBA_x002eSystemExceptionMessage, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _CORBA__CORBA_x002eSystemExceptionMessage;
		if (size)
			*size = sizeof(_CORBA__CORBA_x002eSystemExceptionMessage);
		((_CORBA__CORBA_x002eSystemExceptionMessage*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _CORBA__CORBA_x002eSystemExceptionMessage[n];
		if (size)
			*size = n * sizeof(_CORBA__CORBA_x002eSystemExceptionMessage);
		for (int i = 0; i < n; i++)
			((_CORBA__CORBA_x002eSystemExceptionMessage*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_CORBA__CORBA_x002eSystemExceptionMessage*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__CORBA__CORBA_x002eSystemExceptionMessage(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _CORBA__CORBA_x002eSystemExceptionMessage %p -> %p\n", q, p));
	*(_CORBA__CORBA_x002eSystemExceptionMessage*)p = *(_CORBA__CORBA_x002eSystemExceptionMessage*)q;
}

void CORBA__CORBA_x002ecompletion_USCOREstatus_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

void CORBA__CORBA_x002ecompletion_USCOREstatus_::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_CORBA__CORBA_x002ecompletion_USCOREstatus(soap, &((CORBA__CORBA_x002ecompletion_USCOREstatus_*)this)->__item);
	((xsd__anyType*)this)->__item = NULL;
	/* transient soap skipped */
}

int CORBA__CORBA_x002ecompletion_USCOREstatus_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_CORBA__CORBA_x002ecompletion_USCOREstatus_);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int CORBA__CORBA_x002ecompletion_USCOREstatus_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_CORBA__CORBA_x002ecompletion_USCOREstatus_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_CORBA__CORBA_x002ecompletion_USCOREstatus_(struct soap *soap, const char *tag, int id, const CORBA__CORBA_x002ecompletion_USCOREstatus_ *a, const char *type)
{
	return soap_out_CORBA__CORBA_x002ecompletion_USCOREstatus(soap, tag, id, &(((CORBA__CORBA_x002ecompletion_USCOREstatus_*)a)->__item), "CORBA:CORBA.completion_status");
}

void *CORBA__CORBA_x002ecompletion_USCOREstatus_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_CORBA__CORBA_x002ecompletion_USCOREstatus_(soap, this, tag, type);
}

SOAP_FMAC3 CORBA__CORBA_x002ecompletion_USCOREstatus_ * SOAP_FMAC4 soap_get_CORBA__CORBA_x002ecompletion_USCOREstatus_(struct soap *soap, CORBA__CORBA_x002ecompletion_USCOREstatus_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_CORBA__CORBA_x002ecompletion_USCOREstatus_(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *CORBA__CORBA_x002ecompletion_USCOREstatus_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_CORBA__CORBA_x002ecompletion_USCOREstatus_(soap, tag, this, type);
}

SOAP_FMAC3 CORBA__CORBA_x002ecompletion_USCOREstatus_ * SOAP_FMAC4 soap_in_CORBA__CORBA_x002ecompletion_USCOREstatus_(struct soap *soap, const char *tag, CORBA__CORBA_x002ecompletion_USCOREstatus_ *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (CORBA__CORBA_x002ecompletion_USCOREstatus_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_CORBA__CORBA_x002ecompletion_USCOREstatus_, sizeof(CORBA__CORBA_x002ecompletion_USCOREstatus_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_CORBA__CORBA_x002ecompletion_USCOREstatus_)
			return (CORBA__CORBA_x002ecompletion_USCOREstatus_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_CORBA__CORBA_x002ecompletion_USCOREstatus(soap, tag, &(((CORBA__CORBA_x002ecompletion_USCOREstatus_*)a)->__item), "CORBA:CORBA.completion_status"))
		return NULL;
	return a;
}

SOAP_FMAC5 CORBA__CORBA_x002ecompletion_USCOREstatus_ * SOAP_FMAC6 soap_new_CORBA__CORBA_x002ecompletion_USCOREstatus_(struct soap *soap, int n)
{	return soap_instantiate_CORBA__CORBA_x002ecompletion_USCOREstatus_(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_CORBA__CORBA_x002ecompletion_USCOREstatus_(struct soap *soap, CORBA__CORBA_x002ecompletion_USCOREstatus_ *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 CORBA__CORBA_x002ecompletion_USCOREstatus_ * SOAP_FMAC4 soap_instantiate_CORBA__CORBA_x002ecompletion_USCOREstatus_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_CORBA__CORBA_x002ecompletion_USCOREstatus_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_CORBA__CORBA_x002ecompletion_USCOREstatus_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new CORBA__CORBA_x002ecompletion_USCOREstatus_;
		if (size)
			*size = sizeof(CORBA__CORBA_x002ecompletion_USCOREstatus_);
		((CORBA__CORBA_x002ecompletion_USCOREstatus_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new CORBA__CORBA_x002ecompletion_USCOREstatus_[n];
		if (size)
			*size = n * sizeof(CORBA__CORBA_x002ecompletion_USCOREstatus_);
		for (int i = 0; i < n; i++)
			((CORBA__CORBA_x002ecompletion_USCOREstatus_*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (CORBA__CORBA_x002ecompletion_USCOREstatus_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_CORBA__CORBA_x002ecompletion_USCOREstatus_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying CORBA__CORBA_x002ecompletion_USCOREstatus_ %p -> %p\n", q, p));
	*(CORBA__CORBA_x002ecompletion_USCOREstatus_*)p = *(CORBA__CORBA_x002ecompletion_USCOREstatus_*)q;
}

void SLICE__CUTS_x002eTime_USCOREStamp__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

void SLICE__CUTS_x002eTime_USCOREStamp__::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_SLICE__CUTS_x002eTime_USCOREStamp(soap, &((SLICE__CUTS_x002eTime_USCOREStamp__*)this)->__item);
	((xsd__anyType*)this)->__item = NULL;
	/* transient soap skipped */
}

int SLICE__CUTS_x002eTime_USCOREStamp__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_SLICE__CUTS_x002eTime_USCOREStamp__);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int SLICE__CUTS_x002eTime_USCOREStamp__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_SLICE__CUTS_x002eTime_USCOREStamp__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SLICE__CUTS_x002eTime_USCOREStamp__(struct soap *soap, const char *tag, int id, const SLICE__CUTS_x002eTime_USCOREStamp__ *a, const char *type)
{
	return soap_out_SLICE__CUTS_x002eTime_USCOREStamp(soap, tag, id, &(((SLICE__CUTS_x002eTime_USCOREStamp__*)a)->__item), "SLICE:CUTS.Time_Stamp");
}

void *SLICE__CUTS_x002eTime_USCOREStamp__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_SLICE__CUTS_x002eTime_USCOREStamp__(soap, this, tag, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eTime_USCOREStamp__ * SOAP_FMAC4 soap_get_SLICE__CUTS_x002eTime_USCOREStamp__(struct soap *soap, SLICE__CUTS_x002eTime_USCOREStamp__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_SLICE__CUTS_x002eTime_USCOREStamp__(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *SLICE__CUTS_x002eTime_USCOREStamp__::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_SLICE__CUTS_x002eTime_USCOREStamp__(soap, tag, this, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eTime_USCOREStamp__ * SOAP_FMAC4 soap_in_SLICE__CUTS_x002eTime_USCOREStamp__(struct soap *soap, const char *tag, SLICE__CUTS_x002eTime_USCOREStamp__ *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (SLICE__CUTS_x002eTime_USCOREStamp__ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_SLICE__CUTS_x002eTime_USCOREStamp__, sizeof(SLICE__CUTS_x002eTime_USCOREStamp__), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_SLICE__CUTS_x002eTime_USCOREStamp__)
			return (SLICE__CUTS_x002eTime_USCOREStamp__ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_SLICE__CUTS_x002eTime_USCOREStamp(soap, tag, &(((SLICE__CUTS_x002eTime_USCOREStamp__*)a)->__item), "SLICE:CUTS.Time_Stamp"))
		return NULL;
	return a;
}

SOAP_FMAC5 SLICE__CUTS_x002eTime_USCOREStamp__ * SOAP_FMAC6 soap_new_SLICE__CUTS_x002eTime_USCOREStamp__(struct soap *soap, int n)
{	return soap_instantiate_SLICE__CUTS_x002eTime_USCOREStamp__(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SLICE__CUTS_x002eTime_USCOREStamp__(struct soap *soap, SLICE__CUTS_x002eTime_USCOREStamp__ *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 SLICE__CUTS_x002eTime_USCOREStamp__ * SOAP_FMAC4 soap_instantiate_SLICE__CUTS_x002eTime_USCOREStamp__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SLICE__CUTS_x002eTime_USCOREStamp__(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SLICE__CUTS_x002eTime_USCOREStamp__, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new SLICE__CUTS_x002eTime_USCOREStamp__;
		if (size)
			*size = sizeof(SLICE__CUTS_x002eTime_USCOREStamp__);
		((SLICE__CUTS_x002eTime_USCOREStamp__*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new SLICE__CUTS_x002eTime_USCOREStamp__[n];
		if (size)
			*size = n * sizeof(SLICE__CUTS_x002eTime_USCOREStamp__);
		for (int i = 0; i < n; i++)
			((SLICE__CUTS_x002eTime_USCOREStamp__*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (SLICE__CUTS_x002eTime_USCOREStamp__*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SLICE__CUTS_x002eTime_USCOREStamp__(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying SLICE__CUTS_x002eTime_USCOREStamp__ %p -> %p\n", q, p));
	*(SLICE__CUTS_x002eTime_USCOREStamp__*)p = *(SLICE__CUTS_x002eTime_USCOREStamp__*)q;
}

void _CORBA__SourceRepositoryID::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &((_CORBA__SourceRepositoryID*)this)->repositoryID);
	soap_serialize_string(soap, &((_CORBA__SourceRepositoryID*)this)->version);
	/* transient soap skipped */
}

void _CORBA__SourceRepositoryID::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &((_CORBA__SourceRepositoryID*)this)->repositoryID);
	soap_default_string(soap, &((_CORBA__SourceRepositoryID*)this)->version);
	/* transient soap skipped */
}

int _CORBA__SourceRepositoryID::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__CORBA__SourceRepositoryID);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _CORBA__SourceRepositoryID::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__CORBA__SourceRepositoryID(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__CORBA__SourceRepositoryID(struct soap *soap, const char *tag, int id, const _CORBA__SourceRepositoryID *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__CORBA__SourceRepositoryID), type);
	soap_out_string(soap, "repositoryID", -1, &(((_CORBA__SourceRepositoryID*)a)->repositoryID), "");
	soap_out_string(soap, "version", -1, &(((_CORBA__SourceRepositoryID*)a)->version), "");
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *_CORBA__SourceRepositoryID::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__CORBA__SourceRepositoryID(soap, this, tag, type);
}

SOAP_FMAC3 _CORBA__SourceRepositoryID * SOAP_FMAC4 soap_get__CORBA__SourceRepositoryID(struct soap *soap, _CORBA__SourceRepositoryID *p, const char *tag, const char *type)
{
	if ((p = soap_in__CORBA__SourceRepositoryID(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *_CORBA__SourceRepositoryID::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__CORBA__SourceRepositoryID(soap, tag, this, type);
}

SOAP_FMAC3 _CORBA__SourceRepositoryID * SOAP_FMAC4 soap_in__CORBA__SourceRepositoryID(struct soap *soap, const char *tag, _CORBA__SourceRepositoryID *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_CORBA__SourceRepositoryID *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__CORBA__SourceRepositoryID, sizeof(_CORBA__SourceRepositoryID), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__CORBA__SourceRepositoryID)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_CORBA__SourceRepositoryID *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_repositoryID1 = 1, soap_flag_version1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_repositoryID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "repositoryID", &(((_CORBA__SourceRepositoryID*)a)->repositoryID), "xsd:string"))
				{	soap_flag_repositoryID1--;
					continue;
				}
			if (soap_flag_version1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "version", &(((_CORBA__SourceRepositoryID*)a)->version), "xsd:string"))
				{	soap_flag_version1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_repositoryID1 > 0 || soap_flag_version1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_CORBA__SourceRepositoryID *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE__CORBA__SourceRepositoryID, 0, sizeof(_CORBA__SourceRepositoryID), 0, soap_copy__CORBA__SourceRepositoryID);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _CORBA__SourceRepositoryID * SOAP_FMAC6 soap_new__CORBA__SourceRepositoryID(struct soap *soap, int n)
{	return soap_instantiate__CORBA__SourceRepositoryID(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__CORBA__SourceRepositoryID(struct soap *soap, _CORBA__SourceRepositoryID *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _CORBA__SourceRepositoryID * SOAP_FMAC4 soap_instantiate__CORBA__SourceRepositoryID(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__CORBA__SourceRepositoryID(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__CORBA__SourceRepositoryID, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _CORBA__SourceRepositoryID;
		if (size)
			*size = sizeof(_CORBA__SourceRepositoryID);
		((_CORBA__SourceRepositoryID*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _CORBA__SourceRepositoryID[n];
		if (size)
			*size = n * sizeof(_CORBA__SourceRepositoryID);
		for (int i = 0; i < n; i++)
			((_CORBA__SourceRepositoryID*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_CORBA__SourceRepositoryID*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__CORBA__SourceRepositoryID(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _CORBA__SourceRepositoryID %p -> %p\n", q, p));
	*(_CORBA__SourceRepositoryID*)p = *(_CORBA__SourceRepositoryID*)q;
}

void _CORBA__SourceIDL::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &((_CORBA__SourceIDL*)this)->source);
	soap_serialize_string(soap, &((_CORBA__SourceIDL*)this)->version);
	/* transient soap skipped */
}

void _CORBA__SourceIDL::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &((_CORBA__SourceIDL*)this)->source);
	soap_default_string(soap, &((_CORBA__SourceIDL*)this)->version);
	/* transient soap skipped */
}

int _CORBA__SourceIDL::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__CORBA__SourceIDL);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _CORBA__SourceIDL::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__CORBA__SourceIDL(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__CORBA__SourceIDL(struct soap *soap, const char *tag, int id, const _CORBA__SourceIDL *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__CORBA__SourceIDL), type);
	soap_out_string(soap, "source", -1, &(((_CORBA__SourceIDL*)a)->source), "");
	soap_out_string(soap, "version", -1, &(((_CORBA__SourceIDL*)a)->version), "");
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *_CORBA__SourceIDL::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__CORBA__SourceIDL(soap, this, tag, type);
}

SOAP_FMAC3 _CORBA__SourceIDL * SOAP_FMAC4 soap_get__CORBA__SourceIDL(struct soap *soap, _CORBA__SourceIDL *p, const char *tag, const char *type)
{
	if ((p = soap_in__CORBA__SourceIDL(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *_CORBA__SourceIDL::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__CORBA__SourceIDL(soap, tag, this, type);
}

SOAP_FMAC3 _CORBA__SourceIDL * SOAP_FMAC4 soap_in__CORBA__SourceIDL(struct soap *soap, const char *tag, _CORBA__SourceIDL *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_CORBA__SourceIDL *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__CORBA__SourceIDL, sizeof(_CORBA__SourceIDL), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__CORBA__SourceIDL)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_CORBA__SourceIDL *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_source1 = 1, soap_flag_version1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_source1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "source", &(((_CORBA__SourceIDL*)a)->source), "xsd:string"))
				{	soap_flag_source1--;
					continue;
				}
			if (soap_flag_version1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "version", &(((_CORBA__SourceIDL*)a)->version), "xsd:string"))
				{	soap_flag_version1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_source1 > 0 || soap_flag_version1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_CORBA__SourceIDL *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE__CORBA__SourceIDL, 0, sizeof(_CORBA__SourceIDL), 0, soap_copy__CORBA__SourceIDL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _CORBA__SourceIDL * SOAP_FMAC6 soap_new__CORBA__SourceIDL(struct soap *soap, int n)
{	return soap_instantiate__CORBA__SourceIDL(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__CORBA__SourceIDL(struct soap *soap, _CORBA__SourceIDL *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _CORBA__SourceIDL * SOAP_FMAC4 soap_instantiate__CORBA__SourceIDL(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__CORBA__SourceIDL(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__CORBA__SourceIDL, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _CORBA__SourceIDL;
		if (size)
			*size = sizeof(_CORBA__SourceIDL);
		((_CORBA__SourceIDL*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _CORBA__SourceIDL[n];
		if (size)
			*size = n * sizeof(_CORBA__SourceIDL);
		for (int i = 0; i < n; i++)
			((_CORBA__SourceIDL*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_CORBA__SourceIDL*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__CORBA__SourceIDL(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _CORBA__SourceIDL %p -> %p\n", q, p));
	*(_CORBA__SourceIDL*)p = *(_CORBA__SourceIDL*)q;
}

void CORBA__CORBA_x002eSystemException::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

void CORBA__CORBA_x002eSystemException::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_unsignedInt(soap, &((CORBA__CORBA_x002eSystemException*)this)->minor);
	soap_default_CORBA__CORBA_x002ecompletion_USCOREstatus(soap, &((CORBA__CORBA_x002eSystemException*)this)->completion_USCOREstatus);
	((xsd__anyType*)this)->__item = NULL;
	/* transient soap skipped */
}

int CORBA__CORBA_x002eSystemException::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_CORBA__CORBA_x002eSystemException);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int CORBA__CORBA_x002eSystemException::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_CORBA__CORBA_x002eSystemException(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_CORBA__CORBA_x002eSystemException(struct soap *soap, const char *tag, int id, const CORBA__CORBA_x002eSystemException *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_CORBA__CORBA_x002eSystemException), "CORBA:CORBA.SystemException");
	/* transient soap skipped */
	soap_out_unsignedInt(soap, "minor", -1, &(((CORBA__CORBA_x002eSystemException*)a)->minor), "");
	soap_out_CORBA__CORBA_x002ecompletion_USCOREstatus(soap, "completion_status", -1, &(((CORBA__CORBA_x002eSystemException*)a)->completion_USCOREstatus), "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *CORBA__CORBA_x002eSystemException::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_CORBA__CORBA_x002eSystemException(soap, this, tag, type);
}

SOAP_FMAC3 CORBA__CORBA_x002eSystemException * SOAP_FMAC4 soap_get_CORBA__CORBA_x002eSystemException(struct soap *soap, CORBA__CORBA_x002eSystemException *p, const char *tag, const char *type)
{
	if ((p = soap_in_CORBA__CORBA_x002eSystemException(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *CORBA__CORBA_x002eSystemException::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_CORBA__CORBA_x002eSystemException(soap, tag, this, type);
}

SOAP_FMAC3 CORBA__CORBA_x002eSystemException * SOAP_FMAC4 soap_in_CORBA__CORBA_x002eSystemException(struct soap *soap, const char *tag, CORBA__CORBA_x002eSystemException *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (CORBA__CORBA_x002eSystemException *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_CORBA__CORBA_x002eSystemException, sizeof(CORBA__CORBA_x002eSystemException), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_CORBA__CORBA_x002eSystemException)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (CORBA__CORBA_x002eSystemException *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag___item2 = 1, soap_flag_minor1 = 1, soap_flag_completion_USCOREstatus1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_minor1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "minor", &(((CORBA__CORBA_x002eSystemException*)a)->minor), "xsd:unsignedInt"))
				{	soap_flag_minor1--;
					continue;
				}
			if (soap_flag_completion_USCOREstatus1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_CORBA__CORBA_x002ecompletion_USCOREstatus(soap, "completion_status", &(((CORBA__CORBA_x002eSystemException*)a)->completion_USCOREstatus), "CORBA:CORBA.completion_status"))
				{	soap_flag_completion_USCOREstatus1--;
					continue;
				}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(((xsd__anyType*)a)->__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_minor1 > 0 || soap_flag_completion_USCOREstatus1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (CORBA__CORBA_x002eSystemException *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_CORBA__CORBA_x002eSystemException, 0, sizeof(CORBA__CORBA_x002eSystemException), 0, soap_copy_CORBA__CORBA_x002eSystemException);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 CORBA__CORBA_x002eSystemException * SOAP_FMAC6 soap_new_CORBA__CORBA_x002eSystemException(struct soap *soap, int n)
{	return soap_instantiate_CORBA__CORBA_x002eSystemException(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_CORBA__CORBA_x002eSystemException(struct soap *soap, CORBA__CORBA_x002eSystemException *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 CORBA__CORBA_x002eSystemException * SOAP_FMAC4 soap_instantiate_CORBA__CORBA_x002eSystemException(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_CORBA__CORBA_x002eSystemException(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_CORBA__CORBA_x002eSystemException, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new CORBA__CORBA_x002eSystemException;
		if (size)
			*size = sizeof(CORBA__CORBA_x002eSystemException);
		((CORBA__CORBA_x002eSystemException*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new CORBA__CORBA_x002eSystemException[n];
		if (size)
			*size = n * sizeof(CORBA__CORBA_x002eSystemException);
		for (int i = 0; i < n; i++)
			((CORBA__CORBA_x002eSystemException*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (CORBA__CORBA_x002eSystemException*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_CORBA__CORBA_x002eSystemException(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying CORBA__CORBA_x002eSystemException %p -> %p\n", q, p));
	*(CORBA__CORBA_x002eSystemException*)p = *(CORBA__CORBA_x002eSystemException*)q;
}

void CORBA__CORBA_x002eAny::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToCORBA__CORBA_x002eTypeCode(soap, &((CORBA__CORBA_x002eAny*)this)->type);
	soap_serialize_PointerToxsd__anyType(soap, &((CORBA__CORBA_x002eAny*)this)->value);
	/* transient soap skipped */
}

void CORBA__CORBA_x002eAny::soap_default(struct soap *soap)
{
	this->soap = soap;
	((CORBA__CORBA_x002eAny*)this)->type = NULL;
	((CORBA__CORBA_x002eAny*)this)->value = NULL;
	((xsd__anyType*)this)->__item = NULL;
	/* transient soap skipped */
}

int CORBA__CORBA_x002eAny::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_CORBA__CORBA_x002eAny);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int CORBA__CORBA_x002eAny::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_CORBA__CORBA_x002eAny(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_CORBA__CORBA_x002eAny(struct soap *soap, const char *tag, int id, const CORBA__CORBA_x002eAny *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_CORBA__CORBA_x002eAny), "CORBA:CORBA.Any");
	/* transient soap skipped */
	soap_out_PointerToCORBA__CORBA_x002eTypeCode(soap, "type", -1, &(((CORBA__CORBA_x002eAny*)a)->type), "");
	soap_out_PointerToxsd__anyType(soap, "value", -1, &(((CORBA__CORBA_x002eAny*)a)->value), "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *CORBA__CORBA_x002eAny::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_CORBA__CORBA_x002eAny(soap, this, tag, type);
}

SOAP_FMAC3 CORBA__CORBA_x002eAny * SOAP_FMAC4 soap_get_CORBA__CORBA_x002eAny(struct soap *soap, CORBA__CORBA_x002eAny *p, const char *tag, const char *type)
{
	if ((p = soap_in_CORBA__CORBA_x002eAny(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *CORBA__CORBA_x002eAny::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_CORBA__CORBA_x002eAny(soap, tag, this, type);
}

SOAP_FMAC3 CORBA__CORBA_x002eAny * SOAP_FMAC4 soap_in_CORBA__CORBA_x002eAny(struct soap *soap, const char *tag, CORBA__CORBA_x002eAny *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (CORBA__CORBA_x002eAny *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_CORBA__CORBA_x002eAny, sizeof(CORBA__CORBA_x002eAny), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_CORBA__CORBA_x002eAny)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (CORBA__CORBA_x002eAny *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag___item2 = 1, soap_flag_type1 = 1, soap_flag_value1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_type1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToCORBA__CORBA_x002eTypeCode(soap, "type", &(((CORBA__CORBA_x002eAny*)a)->type), "CORBA:CORBA.TypeCode"))
				{	soap_flag_type1--;
					continue;
				}
			if (soap_flag_value1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__anyType(soap, "value", &(((CORBA__CORBA_x002eAny*)a)->value), "xsd:anyType"))
				{	soap_flag_value1--;
					continue;
				}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(((xsd__anyType*)a)->__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_type1 > 0 || soap_flag_value1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (CORBA__CORBA_x002eAny *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_CORBA__CORBA_x002eAny, 0, sizeof(CORBA__CORBA_x002eAny), 0, soap_copy_CORBA__CORBA_x002eAny);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 CORBA__CORBA_x002eAny * SOAP_FMAC6 soap_new_CORBA__CORBA_x002eAny(struct soap *soap, int n)
{	return soap_instantiate_CORBA__CORBA_x002eAny(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_CORBA__CORBA_x002eAny(struct soap *soap, CORBA__CORBA_x002eAny *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 CORBA__CORBA_x002eAny * SOAP_FMAC4 soap_instantiate_CORBA__CORBA_x002eAny(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_CORBA__CORBA_x002eAny(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_CORBA__CORBA_x002eAny, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new CORBA__CORBA_x002eAny;
		if (size)
			*size = sizeof(CORBA__CORBA_x002eAny);
		((CORBA__CORBA_x002eAny*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new CORBA__CORBA_x002eAny[n];
		if (size)
			*size = n * sizeof(CORBA__CORBA_x002eAny);
		for (int i = 0; i < n; i++)
			((CORBA__CORBA_x002eAny*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (CORBA__CORBA_x002eAny*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_CORBA__CORBA_x002eAny(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying CORBA__CORBA_x002eAny %p -> %p\n", q, p));
	*(CORBA__CORBA_x002eAny*)p = *(CORBA__CORBA_x002eAny*)q;
}

void CORBA__CORBA_x002eTypeCode::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__anyURI(soap, &((CORBA__CORBA_x002eTypeCode*)this)->definition);
	soap_serialize_string(soap, &((CORBA__CORBA_x002eTypeCode*)this)->typename_);
	/* transient soap skipped */
}

void CORBA__CORBA_x002eTypeCode::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__anyURI(soap, &((CORBA__CORBA_x002eTypeCode*)this)->definition);
	soap_default_string(soap, &((CORBA__CORBA_x002eTypeCode*)this)->typename_);
	((xsd__anyType*)this)->__item = NULL;
	/* transient soap skipped */
}

int CORBA__CORBA_x002eTypeCode::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_CORBA__CORBA_x002eTypeCode);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int CORBA__CORBA_x002eTypeCode::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_CORBA__CORBA_x002eTypeCode(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_CORBA__CORBA_x002eTypeCode(struct soap *soap, const char *tag, int id, const CORBA__CORBA_x002eTypeCode *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_CORBA__CORBA_x002eTypeCode), "CORBA:CORBA.TypeCode");
	/* transient soap skipped */
	soap_out_xsd__anyURI(soap, "definition", -1, &(((CORBA__CORBA_x002eTypeCode*)a)->definition), "");
	soap_out_string(soap, "typename", -1, &(((CORBA__CORBA_x002eTypeCode*)a)->typename_), "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *CORBA__CORBA_x002eTypeCode::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_CORBA__CORBA_x002eTypeCode(soap, this, tag, type);
}

SOAP_FMAC3 CORBA__CORBA_x002eTypeCode * SOAP_FMAC4 soap_get_CORBA__CORBA_x002eTypeCode(struct soap *soap, CORBA__CORBA_x002eTypeCode *p, const char *tag, const char *type)
{
	if ((p = soap_in_CORBA__CORBA_x002eTypeCode(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *CORBA__CORBA_x002eTypeCode::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_CORBA__CORBA_x002eTypeCode(soap, tag, this, type);
}

SOAP_FMAC3 CORBA__CORBA_x002eTypeCode * SOAP_FMAC4 soap_in_CORBA__CORBA_x002eTypeCode(struct soap *soap, const char *tag, CORBA__CORBA_x002eTypeCode *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (CORBA__CORBA_x002eTypeCode *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_CORBA__CORBA_x002eTypeCode, sizeof(CORBA__CORBA_x002eTypeCode), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_CORBA__CORBA_x002eTypeCode)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (CORBA__CORBA_x002eTypeCode *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag___item2 = 1, soap_flag_definition1 = 1, soap_flag_typename_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_definition1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__anyURI(soap, "definition", &(((CORBA__CORBA_x002eTypeCode*)a)->definition), "xsd:anyURI"))
				{	soap_flag_definition1--;
					continue;
				}
			if (soap_flag_typename_1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "typename", &(((CORBA__CORBA_x002eTypeCode*)a)->typename_), "xsd:string"))
				{	soap_flag_typename_1--;
					continue;
				}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(((xsd__anyType*)a)->__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_definition1 > 0 || soap_flag_typename_1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (CORBA__CORBA_x002eTypeCode *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_CORBA__CORBA_x002eTypeCode, 0, sizeof(CORBA__CORBA_x002eTypeCode), 0, soap_copy_CORBA__CORBA_x002eTypeCode);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 CORBA__CORBA_x002eTypeCode * SOAP_FMAC6 soap_new_CORBA__CORBA_x002eTypeCode(struct soap *soap, int n)
{	return soap_instantiate_CORBA__CORBA_x002eTypeCode(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_CORBA__CORBA_x002eTypeCode(struct soap *soap, CORBA__CORBA_x002eTypeCode *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 CORBA__CORBA_x002eTypeCode * SOAP_FMAC4 soap_instantiate_CORBA__CORBA_x002eTypeCode(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_CORBA__CORBA_x002eTypeCode(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_CORBA__CORBA_x002eTypeCode, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new CORBA__CORBA_x002eTypeCode;
		if (size)
			*size = sizeof(CORBA__CORBA_x002eTypeCode);
		((CORBA__CORBA_x002eTypeCode*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new CORBA__CORBA_x002eTypeCode[n];
		if (size)
			*size = n * sizeof(CORBA__CORBA_x002eTypeCode);
		for (int i = 0; i < n; i++)
			((CORBA__CORBA_x002eTypeCode*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (CORBA__CORBA_x002eTypeCode*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_CORBA__CORBA_x002eTypeCode(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying CORBA__CORBA_x002eTypeCode %p -> %p\n", q, p));
	*(CORBA__CORBA_x002eTypeCode*)p = *(CORBA__CORBA_x002eTypeCode*)q;
}

void CORBA__ObjectReference::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (((CORBA__ObjectReference*)this)->url)
	{	int i;
		for (i = 0; i < ((CORBA__ObjectReference*)this)->__sizeurl; i++)
		{
			soap_serialize_xsd__anyURI(soap, ((CORBA__ObjectReference*)this)->url + i);
		}
	}
	/* transient soap skipped */
}

void CORBA__ObjectReference::soap_default(struct soap *soap)
{
	this->soap = soap;
	((CORBA__ObjectReference*)this)->__sizeurl = 0;
	((CORBA__ObjectReference*)this)->url = NULL;
	((xsd__anyType*)this)->__item = NULL;
	/* transient soap skipped */
}

int CORBA__ObjectReference::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_CORBA__ObjectReference);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int CORBA__ObjectReference::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_CORBA__ObjectReference(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_CORBA__ObjectReference(struct soap *soap, const char *tag, int id, const CORBA__ObjectReference *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_CORBA__ObjectReference), "CORBA:ObjectReference");
	/* transient soap skipped */
	if (((CORBA__ObjectReference*)a)->url)
	{	int i;
		for (i = 0; i < ((CORBA__ObjectReference*)a)->__sizeurl; i++)
			soap_out_xsd__anyURI(soap, "url", -1, ((CORBA__ObjectReference*)a)->url + i, "");
	}
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *CORBA__ObjectReference::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_CORBA__ObjectReference(soap, this, tag, type);
}

SOAP_FMAC3 CORBA__ObjectReference * SOAP_FMAC4 soap_get_CORBA__ObjectReference(struct soap *soap, CORBA__ObjectReference *p, const char *tag, const char *type)
{
	if ((p = soap_in_CORBA__ObjectReference(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *CORBA__ObjectReference::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_CORBA__ObjectReference(soap, tag, this, type);
}

SOAP_FMAC3 CORBA__ObjectReference * SOAP_FMAC4 soap_in_CORBA__ObjectReference(struct soap *soap, const char *tag, CORBA__ObjectReference *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (CORBA__ObjectReference *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_CORBA__ObjectReference, sizeof(CORBA__ObjectReference), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_CORBA__ObjectReference)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (CORBA__ObjectReference *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag___item2 = 1, soap_flag_url1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_url1 && soap->error == SOAP_TAG_MISMATCH)
			{	char **p;
				soap_new_block(soap);
				for (((CORBA__ObjectReference*)a)->__sizeurl = 0; !soap_element_begin_in(soap, "url", 1, NULL); ((CORBA__ObjectReference*)a)->__sizeurl++)
				{	p = (char **)soap_push_block(soap, sizeof(char *));
					if (!p)
						return NULL;
					*p = NULL;
					soap_revert(soap);
					if (!soap_in_xsd__anyURI(soap, "url", p, "xsd:anyURI"))
						break;
					soap_flag_url1 = 0;
				}
				((CORBA__ObjectReference*)a)->url = (char **)soap_save_block(soap, NULL, 1);
				if (!soap_flag_url1 && soap->error == SOAP_TAG_MISMATCH)
					continue;
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(((xsd__anyType*)a)->__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (CORBA__ObjectReference *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_CORBA__ObjectReference, 0, sizeof(CORBA__ObjectReference), 0, soap_copy_CORBA__ObjectReference);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 CORBA__ObjectReference * SOAP_FMAC6 soap_new_CORBA__ObjectReference(struct soap *soap, int n)
{	return soap_instantiate_CORBA__ObjectReference(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_CORBA__ObjectReference(struct soap *soap, CORBA__ObjectReference *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 CORBA__ObjectReference * SOAP_FMAC4 soap_instantiate_CORBA__ObjectReference(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_CORBA__ObjectReference(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_CORBA__ObjectReference, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new CORBA__ObjectReference;
		if (size)
			*size = sizeof(CORBA__ObjectReference);
		((CORBA__ObjectReference*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new CORBA__ObjectReference[n];
		if (size)
			*size = n * sizeof(CORBA__ObjectReference);
		for (int i = 0; i < n; i++)
			((CORBA__ObjectReference*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (CORBA__ObjectReference*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_CORBA__ObjectReference(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying CORBA__ObjectReference %p -> %p\n", q, p));
	*(CORBA__ObjectReference*)p = *(CORBA__ObjectReference*)q;
}

void SLICE__CUTS_x002eCollection_USCOREStatistics::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

void SLICE__CUTS_x002eCollection_USCOREStatistics::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &((SLICE__CUTS_x002eCollection_USCOREStatistics*)this)->start_USCOREtime);
	soap_default_int(soap, &((SLICE__CUTS_x002eCollection_USCOREStatistics*)this)->finish_USCOREtime);
	soap_default_unsignedInt(soap, &((SLICE__CUTS_x002eCollection_USCOREStatistics*)this)->component_USCOREcount);
	soap_default_xsd__ID(soap, &((SLICE__CUTS_x002eCollection_USCOREStatistics*)this)->id);
	((xsd__anyType*)this)->__item = NULL;
	/* transient soap skipped */
}

int SLICE__CUTS_x002eCollection_USCOREStatistics::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_SLICE__CUTS_x002eCollection_USCOREStatistics);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int SLICE__CUTS_x002eCollection_USCOREStatistics::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_SLICE__CUTS_x002eCollection_USCOREStatistics(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SLICE__CUTS_x002eCollection_USCOREStatistics(struct soap *soap, const char *tag, int id, const SLICE__CUTS_x002eCollection_USCOREStatistics *a, const char *type)
{
	if (((SLICE__CUTS_x002eCollection_USCOREStatistics *)a)->id)
		soap_set_attr(soap, "id", ((SLICE__CUTS_x002eCollection_USCOREStatistics *)a)->id);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SLICE__CUTS_x002eCollection_USCOREStatistics), "SLICE:CUTS.Collection_Statistics");
	/* transient soap skipped */
	soap_out_int(soap, "start_time", -1, &(((SLICE__CUTS_x002eCollection_USCOREStatistics*)a)->start_USCOREtime), "");
	soap_out_int(soap, "finish_time", -1, &(((SLICE__CUTS_x002eCollection_USCOREStatistics*)a)->finish_USCOREtime), "");
	soap_out_unsignedInt(soap, "component_count", -1, &(((SLICE__CUTS_x002eCollection_USCOREStatistics*)a)->component_USCOREcount), "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *SLICE__CUTS_x002eCollection_USCOREStatistics::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_SLICE__CUTS_x002eCollection_USCOREStatistics(soap, this, tag, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eCollection_USCOREStatistics * SOAP_FMAC4 soap_get_SLICE__CUTS_x002eCollection_USCOREStatistics(struct soap *soap, SLICE__CUTS_x002eCollection_USCOREStatistics *p, const char *tag, const char *type)
{
	if ((p = soap_in_SLICE__CUTS_x002eCollection_USCOREStatistics(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *SLICE__CUTS_x002eCollection_USCOREStatistics::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_SLICE__CUTS_x002eCollection_USCOREStatistics(soap, tag, this, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eCollection_USCOREStatistics * SOAP_FMAC4 soap_in_SLICE__CUTS_x002eCollection_USCOREStatistics(struct soap *soap, const char *tag, SLICE__CUTS_x002eCollection_USCOREStatistics *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (SLICE__CUTS_x002eCollection_USCOREStatistics *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_SLICE__CUTS_x002eCollection_USCOREStatistics, sizeof(SLICE__CUTS_x002eCollection_USCOREStatistics), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_SLICE__CUTS_x002eCollection_USCOREStatistics)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (SLICE__CUTS_x002eCollection_USCOREStatistics *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2string(soap, soap_attr_value(soap, "id", 0), &((SLICE__CUTS_x002eCollection_USCOREStatistics *)a)->id))
		return NULL;
	short soap_flag___item2 = 1, soap_flag_start_USCOREtime1 = 1, soap_flag_finish_USCOREtime1 = 1, soap_flag_component_USCOREcount1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_start_USCOREtime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "start_time", &(((SLICE__CUTS_x002eCollection_USCOREStatistics*)a)->start_USCOREtime), "xsd:int"))
				{	soap_flag_start_USCOREtime1--;
					continue;
				}
			if (soap_flag_finish_USCOREtime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "finish_time", &(((SLICE__CUTS_x002eCollection_USCOREStatistics*)a)->finish_USCOREtime), "xsd:int"))
				{	soap_flag_finish_USCOREtime1--;
					continue;
				}
			if (soap_flag_component_USCOREcount1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "component_count", &(((SLICE__CUTS_x002eCollection_USCOREStatistics*)a)->component_USCOREcount), "xsd:unsignedInt"))
				{	soap_flag_component_USCOREcount1--;
					continue;
				}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(((xsd__anyType*)a)->__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_start_USCOREtime1 > 0 || soap_flag_finish_USCOREtime1 > 0 || soap_flag_component_USCOREcount1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (SLICE__CUTS_x002eCollection_USCOREStatistics *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_SLICE__CUTS_x002eCollection_USCOREStatistics, 0, sizeof(SLICE__CUTS_x002eCollection_USCOREStatistics), 0, soap_copy_SLICE__CUTS_x002eCollection_USCOREStatistics);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 SLICE__CUTS_x002eCollection_USCOREStatistics * SOAP_FMAC6 soap_new_SLICE__CUTS_x002eCollection_USCOREStatistics(struct soap *soap, int n)
{	return soap_instantiate_SLICE__CUTS_x002eCollection_USCOREStatistics(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SLICE__CUTS_x002eCollection_USCOREStatistics(struct soap *soap, SLICE__CUTS_x002eCollection_USCOREStatistics *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 SLICE__CUTS_x002eCollection_USCOREStatistics * SOAP_FMAC4 soap_instantiate_SLICE__CUTS_x002eCollection_USCOREStatistics(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SLICE__CUTS_x002eCollection_USCOREStatistics(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SLICE__CUTS_x002eCollection_USCOREStatistics, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new SLICE__CUTS_x002eCollection_USCOREStatistics;
		if (size)
			*size = sizeof(SLICE__CUTS_x002eCollection_USCOREStatistics);
		((SLICE__CUTS_x002eCollection_USCOREStatistics*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new SLICE__CUTS_x002eCollection_USCOREStatistics[n];
		if (size)
			*size = n * sizeof(SLICE__CUTS_x002eCollection_USCOREStatistics);
		for (int i = 0; i < n; i++)
			((SLICE__CUTS_x002eCollection_USCOREStatistics*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (SLICE__CUTS_x002eCollection_USCOREStatistics*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SLICE__CUTS_x002eCollection_USCOREStatistics(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying SLICE__CUTS_x002eCollection_USCOREStatistics %p -> %p\n", q, p));
	*(SLICE__CUTS_x002eCollection_USCOREStatistics*)p = *(SLICE__CUTS_x002eCollection_USCOREStatistics*)q;
}

void SLICE__CUTS_x002eBenchmark_USCOREData::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToCUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq(soap, &((SLICE__CUTS_x002eBenchmark_USCOREData*)this)->ports);
	/* transient soap skipped */
}

void SLICE__CUTS_x002eBenchmark_USCOREData::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &((SLICE__CUTS_x002eBenchmark_USCOREData*)this)->owner);
	soap_default_SLICE__CUTS_x002eTime_USCOREStamp(soap, &((SLICE__CUTS_x002eBenchmark_USCOREData*)this)->timestamp);
	((SLICE__CUTS_x002eBenchmark_USCOREData*)this)->ports = NULL;
	((xsd__anyType*)this)->__item = NULL;
	/* transient soap skipped */
}

int SLICE__CUTS_x002eBenchmark_USCOREData::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_SLICE__CUTS_x002eBenchmark_USCOREData);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int SLICE__CUTS_x002eBenchmark_USCOREData::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_SLICE__CUTS_x002eBenchmark_USCOREData(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SLICE__CUTS_x002eBenchmark_USCOREData(struct soap *soap, const char *tag, int id, const SLICE__CUTS_x002eBenchmark_USCOREData *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SLICE__CUTS_x002eBenchmark_USCOREData), "SLICE:CUTS.Benchmark_Data");
	/* transient soap skipped */
	soap_out_int(soap, "owner", -1, &(((SLICE__CUTS_x002eBenchmark_USCOREData*)a)->owner), "");
	soap_out_SLICE__CUTS_x002eTime_USCOREStamp(soap, "timestamp", -1, &(((SLICE__CUTS_x002eBenchmark_USCOREData*)a)->timestamp), "");
	soap_out_PointerToCUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq(soap, "ports", -1, &(((SLICE__CUTS_x002eBenchmark_USCOREData*)a)->ports), "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *SLICE__CUTS_x002eBenchmark_USCOREData::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_SLICE__CUTS_x002eBenchmark_USCOREData(soap, this, tag, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eBenchmark_USCOREData * SOAP_FMAC4 soap_get_SLICE__CUTS_x002eBenchmark_USCOREData(struct soap *soap, SLICE__CUTS_x002eBenchmark_USCOREData *p, const char *tag, const char *type)
{
	if ((p = soap_in_SLICE__CUTS_x002eBenchmark_USCOREData(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *SLICE__CUTS_x002eBenchmark_USCOREData::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_SLICE__CUTS_x002eBenchmark_USCOREData(soap, tag, this, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eBenchmark_USCOREData * SOAP_FMAC4 soap_in_SLICE__CUTS_x002eBenchmark_USCOREData(struct soap *soap, const char *tag, SLICE__CUTS_x002eBenchmark_USCOREData *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (SLICE__CUTS_x002eBenchmark_USCOREData *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_SLICE__CUTS_x002eBenchmark_USCOREData, sizeof(SLICE__CUTS_x002eBenchmark_USCOREData), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_SLICE__CUTS_x002eBenchmark_USCOREData)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (SLICE__CUTS_x002eBenchmark_USCOREData *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag___item2 = 1, soap_flag_owner1 = 1, soap_flag_timestamp1 = 1, soap_flag_ports1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_owner1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "owner", &(((SLICE__CUTS_x002eBenchmark_USCOREData*)a)->owner), "xsd:int"))
				{	soap_flag_owner1--;
					continue;
				}
			if (soap_flag_timestamp1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_SLICE__CUTS_x002eTime_USCOREStamp(soap, "timestamp", &(((SLICE__CUTS_x002eBenchmark_USCOREData*)a)->timestamp), "SLICE:CUTS.Time_Stamp"))
				{	soap_flag_timestamp1--;
					continue;
				}
			if (soap_flag_ports1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToCUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq(soap, "ports", &(((SLICE__CUTS_x002eBenchmark_USCOREData*)a)->ports), "SLICE:CUTS.Port_Measurement"))
				{	soap_flag_ports1--;
					continue;
				}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(((xsd__anyType*)a)->__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_owner1 > 0 || soap_flag_timestamp1 > 0 || soap_flag_ports1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (SLICE__CUTS_x002eBenchmark_USCOREData *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_SLICE__CUTS_x002eBenchmark_USCOREData, 0, sizeof(SLICE__CUTS_x002eBenchmark_USCOREData), 0, soap_copy_SLICE__CUTS_x002eBenchmark_USCOREData);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 SLICE__CUTS_x002eBenchmark_USCOREData * SOAP_FMAC6 soap_new_SLICE__CUTS_x002eBenchmark_USCOREData(struct soap *soap, int n)
{	return soap_instantiate_SLICE__CUTS_x002eBenchmark_USCOREData(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SLICE__CUTS_x002eBenchmark_USCOREData(struct soap *soap, SLICE__CUTS_x002eBenchmark_USCOREData *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 SLICE__CUTS_x002eBenchmark_USCOREData * SOAP_FMAC4 soap_instantiate_SLICE__CUTS_x002eBenchmark_USCOREData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SLICE__CUTS_x002eBenchmark_USCOREData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SLICE__CUTS_x002eBenchmark_USCOREData, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new SLICE__CUTS_x002eBenchmark_USCOREData;
		if (size)
			*size = sizeof(SLICE__CUTS_x002eBenchmark_USCOREData);
		((SLICE__CUTS_x002eBenchmark_USCOREData*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new SLICE__CUTS_x002eBenchmark_USCOREData[n];
		if (size)
			*size = n * sizeof(SLICE__CUTS_x002eBenchmark_USCOREData);
		for (int i = 0; i < n; i++)
			((SLICE__CUTS_x002eBenchmark_USCOREData*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (SLICE__CUTS_x002eBenchmark_USCOREData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SLICE__CUTS_x002eBenchmark_USCOREData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying SLICE__CUTS_x002eBenchmark_USCOREData %p -> %p\n", q, p));
	*(SLICE__CUTS_x002eBenchmark_USCOREData*)p = *(SLICE__CUTS_x002eBenchmark_USCOREData*)q;
}

void CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq::soap_serialize(struct soap *soap) const
{
	if (this->__ptritem && !soap_array_reference(soap, this, (struct soap_array*)&this->__ptritem, 1, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq))
		for (int i = 0; i < this->__size; i++)
		{
			soap_serialize_PointerToSLICE__CUTS_x002ePort_USCOREMeasurement(soap, this->__ptritem + i);
		}
}

void CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptritem = NULL;
}

int CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptritem, 1, tag, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq(struct soap *soap, const char *tag, int id, const CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq *a, const char *type)
{
	int i, n = a->__size;
	char *t = soap_putsize(soap, "SLICE:CUTS.Port_Measurement", a->__size);
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptritem, 1, type, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq);
	if (id < 0)
		return soap->error;
	soap_array_begin_out(soap, tag, id, t, NULL);
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_PointerToSLICE__CUTS_x002ePort_USCOREMeasurement(soap, "item", -1, &a->__ptritem[i], "");
	}
	soap->position = 0;
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq(soap, this, tag, type);
}

SOAP_FMAC3 CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq * SOAP_FMAC4 soap_get_CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq(struct soap *soap, CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq *p, const char *tag, const char *type)
{
	if ((p = soap_in_CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq(soap, tag, this, type);
}

SOAP_FMAC3 CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq * SOAP_FMAC4 soap_in_CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq(struct soap *soap, const char *tag, CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq *a, const char *type)
{	int i, j;
	SLICE__CUTS_x002ePort_USCOREMeasurement **p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq, sizeof(CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptritem = (SLICE__CUTS_x002ePort_USCOREMeasurement **)soap_malloc(soap, sizeof(SLICE__CUTS_x002ePort_USCOREMeasurement *) * a->__size);
			for (i = 0; i < a->__size; i++)
				a->__ptritem[i] = NULL;
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_PointerToSLICE__CUTS_x002ePort_USCOREMeasurement(soap, NULL, a->__ptritem + i, "SLICE:CUTS.Port_Measurement"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	soap_new_block(soap);
			for (a->__size = 0; ; a->__size++)
			{	p = (SLICE__CUTS_x002ePort_USCOREMeasurement **)soap_push_block(soap, sizeof(SLICE__CUTS_x002ePort_USCOREMeasurement *));
				if (!p)
					return NULL;
				*p = NULL;
				if (!soap_in_PointerToSLICE__CUTS_x002ePort_USCOREMeasurement(soap, NULL, p, "SLICE:CUTS.Port_Measurement"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap);
			a->__ptritem = (SLICE__CUTS_x002ePort_USCOREMeasurement **)soap_malloc(soap, soap->blist->size);
			soap_save_block(soap, (char*)a->__ptritem, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq, 0, sizeof(CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq), 0, soap_copy_CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq * SOAP_FMAC6 soap_new_CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq(struct soap *soap, int n)
{	return soap_instantiate_CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq(struct soap *soap, CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq * SOAP_FMAC4 soap_instantiate_CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq;
		if (size)
			*size = sizeof(CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq);
		((CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq[n];
		if (size)
			*size = n * sizeof(CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq);
		for (int i = 0; i < n; i++)
			((CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq %p -> %p\n", q, p));
	*(CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq*)p = *(CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq*)q;
}

void SLICE__CUTS_x002ePort_USCOREMeasurement::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &((SLICE__CUTS_x002ePort_USCOREMeasurement*)this)->port);
	soap_serialize_PointerToCUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq(soap, &((SLICE__CUTS_x002ePort_USCOREMeasurement*)this)->measurements);
	/* transient soap skipped */
}

void SLICE__CUTS_x002ePort_USCOREMeasurement::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &((SLICE__CUTS_x002ePort_USCOREMeasurement*)this)->port);
	((SLICE__CUTS_x002ePort_USCOREMeasurement*)this)->measurements = NULL;
	((xsd__anyType*)this)->__item = NULL;
	/* transient soap skipped */
}

int SLICE__CUTS_x002ePort_USCOREMeasurement::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_SLICE__CUTS_x002ePort_USCOREMeasurement);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int SLICE__CUTS_x002ePort_USCOREMeasurement::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_SLICE__CUTS_x002ePort_USCOREMeasurement(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SLICE__CUTS_x002ePort_USCOREMeasurement(struct soap *soap, const char *tag, int id, const SLICE__CUTS_x002ePort_USCOREMeasurement *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SLICE__CUTS_x002ePort_USCOREMeasurement), "SLICE:CUTS.Port_Measurement");
	/* transient soap skipped */
	soap_out_string(soap, "port", -1, &(((SLICE__CUTS_x002ePort_USCOREMeasurement*)a)->port), "");
	soap_out_PointerToCUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq(soap, "measurements", -1, &(((SLICE__CUTS_x002ePort_USCOREMeasurement*)a)->measurements), "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *SLICE__CUTS_x002ePort_USCOREMeasurement::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_SLICE__CUTS_x002ePort_USCOREMeasurement(soap, this, tag, type);
}

SOAP_FMAC3 SLICE__CUTS_x002ePort_USCOREMeasurement * SOAP_FMAC4 soap_get_SLICE__CUTS_x002ePort_USCOREMeasurement(struct soap *soap, SLICE__CUTS_x002ePort_USCOREMeasurement *p, const char *tag, const char *type)
{
	if ((p = soap_in_SLICE__CUTS_x002ePort_USCOREMeasurement(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *SLICE__CUTS_x002ePort_USCOREMeasurement::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_SLICE__CUTS_x002ePort_USCOREMeasurement(soap, tag, this, type);
}

SOAP_FMAC3 SLICE__CUTS_x002ePort_USCOREMeasurement * SOAP_FMAC4 soap_in_SLICE__CUTS_x002ePort_USCOREMeasurement(struct soap *soap, const char *tag, SLICE__CUTS_x002ePort_USCOREMeasurement *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (SLICE__CUTS_x002ePort_USCOREMeasurement *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_SLICE__CUTS_x002ePort_USCOREMeasurement, sizeof(SLICE__CUTS_x002ePort_USCOREMeasurement), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_SLICE__CUTS_x002ePort_USCOREMeasurement)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (SLICE__CUTS_x002ePort_USCOREMeasurement *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag___item2 = 1, soap_flag_port1 = 1, soap_flag_measurements1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_port1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "port", &(((SLICE__CUTS_x002ePort_USCOREMeasurement*)a)->port), "xsd:string"))
				{	soap_flag_port1--;
					continue;
				}
			if (soap_flag_measurements1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToCUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq(soap, "measurements", &(((SLICE__CUTS_x002ePort_USCOREMeasurement*)a)->measurements), "SLICE:CUTS.Mapped_Port_Measurement"))
				{	soap_flag_measurements1--;
					continue;
				}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(((xsd__anyType*)a)->__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_port1 > 0 || soap_flag_measurements1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (SLICE__CUTS_x002ePort_USCOREMeasurement *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_SLICE__CUTS_x002ePort_USCOREMeasurement, 0, sizeof(SLICE__CUTS_x002ePort_USCOREMeasurement), 0, soap_copy_SLICE__CUTS_x002ePort_USCOREMeasurement);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 SLICE__CUTS_x002ePort_USCOREMeasurement * SOAP_FMAC6 soap_new_SLICE__CUTS_x002ePort_USCOREMeasurement(struct soap *soap, int n)
{	return soap_instantiate_SLICE__CUTS_x002ePort_USCOREMeasurement(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SLICE__CUTS_x002ePort_USCOREMeasurement(struct soap *soap, SLICE__CUTS_x002ePort_USCOREMeasurement *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 SLICE__CUTS_x002ePort_USCOREMeasurement * SOAP_FMAC4 soap_instantiate_SLICE__CUTS_x002ePort_USCOREMeasurement(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SLICE__CUTS_x002ePort_USCOREMeasurement(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SLICE__CUTS_x002ePort_USCOREMeasurement, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new SLICE__CUTS_x002ePort_USCOREMeasurement;
		if (size)
			*size = sizeof(SLICE__CUTS_x002ePort_USCOREMeasurement);
		((SLICE__CUTS_x002ePort_USCOREMeasurement*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new SLICE__CUTS_x002ePort_USCOREMeasurement[n];
		if (size)
			*size = n * sizeof(SLICE__CUTS_x002ePort_USCOREMeasurement);
		for (int i = 0; i < n; i++)
			((SLICE__CUTS_x002ePort_USCOREMeasurement*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (SLICE__CUTS_x002ePort_USCOREMeasurement*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SLICE__CUTS_x002ePort_USCOREMeasurement(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying SLICE__CUTS_x002ePort_USCOREMeasurement %p -> %p\n", q, p));
	*(SLICE__CUTS_x002ePort_USCOREMeasurement*)p = *(SLICE__CUTS_x002ePort_USCOREMeasurement*)q;
}

void CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq::soap_serialize(struct soap *soap) const
{
	if (this->__ptritem && !soap_array_reference(soap, this, (struct soap_array*)&this->__ptritem, 1, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq))
		for (int i = 0; i < this->__size; i++)
		{
			soap_serialize_PointerToSLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement(soap, this->__ptritem + i);
		}
}

void CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptritem = NULL;
}

int CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptritem, 1, tag, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq(struct soap *soap, const char *tag, int id, const CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq *a, const char *type)
{
	int i, n = a->__size;
	char *t = soap_putsize(soap, "SLICE:CUTS.Mapped_Port_Measurement", a->__size);
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptritem, 1, type, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq);
	if (id < 0)
		return soap->error;
	soap_array_begin_out(soap, tag, id, t, NULL);
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_PointerToSLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement(soap, "item", -1, &a->__ptritem[i], "");
	}
	soap->position = 0;
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq(soap, this, tag, type);
}

SOAP_FMAC3 CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq * SOAP_FMAC4 soap_get_CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq(struct soap *soap, CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq *p, const char *tag, const char *type)
{
	if ((p = soap_in_CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq(soap, tag, this, type);
}

SOAP_FMAC3 CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq * SOAP_FMAC4 soap_in_CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq(struct soap *soap, const char *tag, CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq *a, const char *type)
{	int i, j;
	SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement **p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq, sizeof(CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptritem = (SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement **)soap_malloc(soap, sizeof(SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement *) * a->__size);
			for (i = 0; i < a->__size; i++)
				a->__ptritem[i] = NULL;
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_PointerToSLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement(soap, NULL, a->__ptritem + i, "SLICE:CUTS.Mapped_Port_Measurement"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	soap_new_block(soap);
			for (a->__size = 0; ; a->__size++)
			{	p = (SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement **)soap_push_block(soap, sizeof(SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement *));
				if (!p)
					return NULL;
				*p = NULL;
				if (!soap_in_PointerToSLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement(soap, NULL, p, "SLICE:CUTS.Mapped_Port_Measurement"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap);
			a->__ptritem = (SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement **)soap_malloc(soap, soap->blist->size);
			soap_save_block(soap, (char*)a->__ptritem, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq, 0, sizeof(CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq), 0, soap_copy_CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq * SOAP_FMAC6 soap_new_CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq(struct soap *soap, int n)
{	return soap_instantiate_CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq(struct soap *soap, CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq * SOAP_FMAC4 soap_instantiate_CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq;
		if (size)
			*size = sizeof(CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq);
		((CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq[n];
		if (size)
			*size = n * sizeof(CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq);
		for (int i = 0; i < n; i++)
			((CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq %p -> %p\n", q, p));
	*(CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq*)p = *(CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq*)q;
}

void SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToSLICE__CUTS_x002eTime_USCORESample(soap, &((SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement*)this)->transit_USCOREtime);
	soap_serialize_PointerToSLICE__CUTS_x002eTime_USCORESample(soap, &((SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement*)this)->process_USCOREtime);
	soap_serialize_PointerToCUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq(soap, &((SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement*)this)->exit_USCOREtimes);
	soap_serialize_PointerToCUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq(soap, &((SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement*)this)->workers);
	/* transient soap skipped */
}

void SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &((SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement*)this)->owner);
	((SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement*)this)->transit_USCOREtime = NULL;
	((SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement*)this)->process_USCOREtime = NULL;
	((SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement*)this)->exit_USCOREtimes = NULL;
	((SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement*)this)->workers = NULL;
	((xsd__anyType*)this)->__item = NULL;
	/* transient soap skipped */
}

int SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement(struct soap *soap, const char *tag, int id, const SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement), "SLICE:CUTS.Mapped_Port_Measurement");
	/* transient soap skipped */
	soap_out_int(soap, "owner", -1, &(((SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement*)a)->owner), "");
	soap_out_PointerToSLICE__CUTS_x002eTime_USCORESample(soap, "transit_time", -1, &(((SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement*)a)->transit_USCOREtime), "");
	soap_out_PointerToSLICE__CUTS_x002eTime_USCORESample(soap, "process_time", -1, &(((SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement*)a)->process_USCOREtime), "");
	soap_out_PointerToCUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq(soap, "exit_times", -1, &(((SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement*)a)->exit_USCOREtimes), "");
	soap_out_PointerToCUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq(soap, "workers", -1, &(((SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement*)a)->workers), "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement(soap, this, tag, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement * SOAP_FMAC4 soap_get_SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement(struct soap *soap, SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement *p, const char *tag, const char *type)
{
	if ((p = soap_in_SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement(soap, tag, this, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement * SOAP_FMAC4 soap_in_SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement(struct soap *soap, const char *tag, SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement, sizeof(SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag___item2 = 1, soap_flag_owner1 = 1, soap_flag_transit_USCOREtime1 = 1, soap_flag_process_USCOREtime1 = 1, soap_flag_exit_USCOREtimes1 = 1, soap_flag_workers1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_owner1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "owner", &(((SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement*)a)->owner), "xsd:int"))
				{	soap_flag_owner1--;
					continue;
				}
			if (soap_flag_transit_USCOREtime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSLICE__CUTS_x002eTime_USCORESample(soap, "transit_time", &(((SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement*)a)->transit_USCOREtime), "SLICE:CUTS.Time_Sample"))
				{	soap_flag_transit_USCOREtime1--;
					continue;
				}
			if (soap_flag_process_USCOREtime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSLICE__CUTS_x002eTime_USCORESample(soap, "process_time", &(((SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement*)a)->process_USCOREtime), "SLICE:CUTS.Time_Sample"))
				{	soap_flag_process_USCOREtime1--;
					continue;
				}
			if (soap_flag_exit_USCOREtimes1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToCUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq(soap, "exit_times", &(((SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement*)a)->exit_USCOREtimes), "SLICE:CUTS.Exit_Point_Time"))
				{	soap_flag_exit_USCOREtimes1--;
					continue;
				}
			if (soap_flag_workers1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToCUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq(soap, "workers", &(((SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement*)a)->workers), "SLICE:CUTS.Worker_Measurement"))
				{	soap_flag_workers1--;
					continue;
				}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(((xsd__anyType*)a)->__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_owner1 > 0 || soap_flag_transit_USCOREtime1 > 0 || soap_flag_process_USCOREtime1 > 0 || soap_flag_exit_USCOREtimes1 > 0 || soap_flag_workers1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement, 0, sizeof(SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement), 0, soap_copy_SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement * SOAP_FMAC6 soap_new_SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement(struct soap *soap, int n)
{	return soap_instantiate_SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement(struct soap *soap, SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement * SOAP_FMAC4 soap_instantiate_SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement;
		if (size)
			*size = sizeof(SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement);
		((SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement[n];
		if (size)
			*size = n * sizeof(SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement);
		for (int i = 0; i < n; i++)
			((SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement %p -> %p\n", q, p));
	*(SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement*)p = *(SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement*)q;
}

void CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq::soap_serialize(struct soap *soap) const
{
	if (this->__ptritem && !soap_array_reference(soap, this, (struct soap_array*)&this->__ptritem, 1, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq))
		for (int i = 0; i < this->__size; i++)
		{
			soap_serialize_PointerToSLICE__CUTS_x002eExit_USCOREPoint_USCORETime(soap, this->__ptritem + i);
		}
}

void CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptritem = NULL;
}

int CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptritem, 1, tag, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq(struct soap *soap, const char *tag, int id, const CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq *a, const char *type)
{
	int i, n = a->__size;
	char *t = soap_putsize(soap, "SLICE:CUTS.Exit_Point_Time", a->__size);
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptritem, 1, type, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq);
	if (id < 0)
		return soap->error;
	soap_array_begin_out(soap, tag, id, t, NULL);
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_PointerToSLICE__CUTS_x002eExit_USCOREPoint_USCORETime(soap, "item", -1, &a->__ptritem[i], "");
	}
	soap->position = 0;
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq(soap, this, tag, type);
}

SOAP_FMAC3 CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq * SOAP_FMAC4 soap_get_CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq(struct soap *soap, CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq *p, const char *tag, const char *type)
{
	if ((p = soap_in_CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq(soap, tag, this, type);
}

SOAP_FMAC3 CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq * SOAP_FMAC4 soap_in_CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq(struct soap *soap, const char *tag, CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq *a, const char *type)
{	int i, j;
	SLICE__CUTS_x002eExit_USCOREPoint_USCORETime **p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq, sizeof(CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptritem = (SLICE__CUTS_x002eExit_USCOREPoint_USCORETime **)soap_malloc(soap, sizeof(SLICE__CUTS_x002eExit_USCOREPoint_USCORETime *) * a->__size);
			for (i = 0; i < a->__size; i++)
				a->__ptritem[i] = NULL;
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_PointerToSLICE__CUTS_x002eExit_USCOREPoint_USCORETime(soap, NULL, a->__ptritem + i, "SLICE:CUTS.Exit_Point_Time"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	soap_new_block(soap);
			for (a->__size = 0; ; a->__size++)
			{	p = (SLICE__CUTS_x002eExit_USCOREPoint_USCORETime **)soap_push_block(soap, sizeof(SLICE__CUTS_x002eExit_USCOREPoint_USCORETime *));
				if (!p)
					return NULL;
				*p = NULL;
				if (!soap_in_PointerToSLICE__CUTS_x002eExit_USCOREPoint_USCORETime(soap, NULL, p, "SLICE:CUTS.Exit_Point_Time"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap);
			a->__ptritem = (SLICE__CUTS_x002eExit_USCOREPoint_USCORETime **)soap_malloc(soap, soap->blist->size);
			soap_save_block(soap, (char*)a->__ptritem, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq, 0, sizeof(CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq), 0, soap_copy_CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq * SOAP_FMAC6 soap_new_CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq(struct soap *soap, int n)
{	return soap_instantiate_CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq(struct soap *soap, CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq * SOAP_FMAC4 soap_instantiate_CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq;
		if (size)
			*size = sizeof(CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq);
		((CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq[n];
		if (size)
			*size = n * sizeof(CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq);
		for (int i = 0; i < n; i++)
			((CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq %p -> %p\n", q, p));
	*(CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq*)p = *(CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq*)q;
}

void SLICE__CUTS_x002eExit_USCOREPoint_USCORETime::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &((SLICE__CUTS_x002eExit_USCOREPoint_USCORETime*)this)->exit_USCOREpoint_USCORE);
	soap_serialize_PointerToSLICE__CUTS_x002eTime_USCORESample(soap, &((SLICE__CUTS_x002eExit_USCOREPoint_USCORETime*)this)->time_USCOREsample_USCORE);
	/* transient soap skipped */
}

void SLICE__CUTS_x002eExit_USCOREPoint_USCORETime::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &((SLICE__CUTS_x002eExit_USCOREPoint_USCORETime*)this)->exit_USCOREpoint_USCORE);
	((SLICE__CUTS_x002eExit_USCOREPoint_USCORETime*)this)->time_USCOREsample_USCORE = NULL;
	((xsd__anyType*)this)->__item = NULL;
	/* transient soap skipped */
}

int SLICE__CUTS_x002eExit_USCOREPoint_USCORETime::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_SLICE__CUTS_x002eExit_USCOREPoint_USCORETime);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int SLICE__CUTS_x002eExit_USCOREPoint_USCORETime::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_SLICE__CUTS_x002eExit_USCOREPoint_USCORETime(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SLICE__CUTS_x002eExit_USCOREPoint_USCORETime(struct soap *soap, const char *tag, int id, const SLICE__CUTS_x002eExit_USCOREPoint_USCORETime *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SLICE__CUTS_x002eExit_USCOREPoint_USCORETime), "SLICE:CUTS.Exit_Point_Time");
	/* transient soap skipped */
	soap_out_string(soap, "exit_point_", -1, &(((SLICE__CUTS_x002eExit_USCOREPoint_USCORETime*)a)->exit_USCOREpoint_USCORE), "");
	soap_out_PointerToSLICE__CUTS_x002eTime_USCORESample(soap, "time_sample_", -1, &(((SLICE__CUTS_x002eExit_USCOREPoint_USCORETime*)a)->time_USCOREsample_USCORE), "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *SLICE__CUTS_x002eExit_USCOREPoint_USCORETime::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_SLICE__CUTS_x002eExit_USCOREPoint_USCORETime(soap, this, tag, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eExit_USCOREPoint_USCORETime * SOAP_FMAC4 soap_get_SLICE__CUTS_x002eExit_USCOREPoint_USCORETime(struct soap *soap, SLICE__CUTS_x002eExit_USCOREPoint_USCORETime *p, const char *tag, const char *type)
{
	if ((p = soap_in_SLICE__CUTS_x002eExit_USCOREPoint_USCORETime(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *SLICE__CUTS_x002eExit_USCOREPoint_USCORETime::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_SLICE__CUTS_x002eExit_USCOREPoint_USCORETime(soap, tag, this, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eExit_USCOREPoint_USCORETime * SOAP_FMAC4 soap_in_SLICE__CUTS_x002eExit_USCOREPoint_USCORETime(struct soap *soap, const char *tag, SLICE__CUTS_x002eExit_USCOREPoint_USCORETime *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (SLICE__CUTS_x002eExit_USCOREPoint_USCORETime *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_SLICE__CUTS_x002eExit_USCOREPoint_USCORETime, sizeof(SLICE__CUTS_x002eExit_USCOREPoint_USCORETime), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_SLICE__CUTS_x002eExit_USCOREPoint_USCORETime)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (SLICE__CUTS_x002eExit_USCOREPoint_USCORETime *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag___item2 = 1, soap_flag_exit_USCOREpoint_USCORE1 = 1, soap_flag_time_USCOREsample_USCORE1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_exit_USCOREpoint_USCORE1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "exit_point_", &(((SLICE__CUTS_x002eExit_USCOREPoint_USCORETime*)a)->exit_USCOREpoint_USCORE), "xsd:string"))
				{	soap_flag_exit_USCOREpoint_USCORE1--;
					continue;
				}
			if (soap_flag_time_USCOREsample_USCORE1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSLICE__CUTS_x002eTime_USCORESample(soap, "time_sample_", &(((SLICE__CUTS_x002eExit_USCOREPoint_USCORETime*)a)->time_USCOREsample_USCORE), "SLICE:CUTS.Time_Sample"))
				{	soap_flag_time_USCOREsample_USCORE1--;
					continue;
				}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(((xsd__anyType*)a)->__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_exit_USCOREpoint_USCORE1 > 0 || soap_flag_time_USCOREsample_USCORE1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (SLICE__CUTS_x002eExit_USCOREPoint_USCORETime *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_SLICE__CUTS_x002eExit_USCOREPoint_USCORETime, 0, sizeof(SLICE__CUTS_x002eExit_USCOREPoint_USCORETime), 0, soap_copy_SLICE__CUTS_x002eExit_USCOREPoint_USCORETime);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 SLICE__CUTS_x002eExit_USCOREPoint_USCORETime * SOAP_FMAC6 soap_new_SLICE__CUTS_x002eExit_USCOREPoint_USCORETime(struct soap *soap, int n)
{	return soap_instantiate_SLICE__CUTS_x002eExit_USCOREPoint_USCORETime(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SLICE__CUTS_x002eExit_USCOREPoint_USCORETime(struct soap *soap, SLICE__CUTS_x002eExit_USCOREPoint_USCORETime *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 SLICE__CUTS_x002eExit_USCOREPoint_USCORETime * SOAP_FMAC4 soap_instantiate_SLICE__CUTS_x002eExit_USCOREPoint_USCORETime(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SLICE__CUTS_x002eExit_USCOREPoint_USCORETime(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SLICE__CUTS_x002eExit_USCOREPoint_USCORETime, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new SLICE__CUTS_x002eExit_USCOREPoint_USCORETime;
		if (size)
			*size = sizeof(SLICE__CUTS_x002eExit_USCOREPoint_USCORETime);
		((SLICE__CUTS_x002eExit_USCOREPoint_USCORETime*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new SLICE__CUTS_x002eExit_USCOREPoint_USCORETime[n];
		if (size)
			*size = n * sizeof(SLICE__CUTS_x002eExit_USCOREPoint_USCORETime);
		for (int i = 0; i < n; i++)
			((SLICE__CUTS_x002eExit_USCOREPoint_USCORETime*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (SLICE__CUTS_x002eExit_USCOREPoint_USCORETime*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SLICE__CUTS_x002eExit_USCOREPoint_USCORETime(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying SLICE__CUTS_x002eExit_USCOREPoint_USCORETime %p -> %p\n", q, p));
	*(SLICE__CUTS_x002eExit_USCOREPoint_USCORETime*)p = *(SLICE__CUTS_x002eExit_USCOREPoint_USCORETime*)q;
}

void CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq::soap_serialize(struct soap *soap) const
{
	if (this->__ptritem && !soap_array_reference(soap, this, (struct soap_array*)&this->__ptritem, 1, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq))
		for (int i = 0; i < this->__size; i++)
		{
			soap_serialize_PointerToSLICE__CUTS_x002eWorker_USCOREMeasurement(soap, this->__ptritem + i);
		}
}

void CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptritem = NULL;
}

int CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptritem, 1, tag, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq(struct soap *soap, const char *tag, int id, const CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq *a, const char *type)
{
	int i, n = a->__size;
	char *t = soap_putsize(soap, "SLICE:CUTS.Worker_Measurement", a->__size);
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptritem, 1, type, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq);
	if (id < 0)
		return soap->error;
	soap_array_begin_out(soap, tag, id, t, NULL);
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_PointerToSLICE__CUTS_x002eWorker_USCOREMeasurement(soap, "item", -1, &a->__ptritem[i], "");
	}
	soap->position = 0;
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq(soap, this, tag, type);
}

SOAP_FMAC3 CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq * SOAP_FMAC4 soap_get_CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq(struct soap *soap, CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq *p, const char *tag, const char *type)
{
	if ((p = soap_in_CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq(soap, tag, this, type);
}

SOAP_FMAC3 CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq * SOAP_FMAC4 soap_in_CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq(struct soap *soap, const char *tag, CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq *a, const char *type)
{	int i, j;
	SLICE__CUTS_x002eWorker_USCOREMeasurement **p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq, sizeof(CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptritem = (SLICE__CUTS_x002eWorker_USCOREMeasurement **)soap_malloc(soap, sizeof(SLICE__CUTS_x002eWorker_USCOREMeasurement *) * a->__size);
			for (i = 0; i < a->__size; i++)
				a->__ptritem[i] = NULL;
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_PointerToSLICE__CUTS_x002eWorker_USCOREMeasurement(soap, NULL, a->__ptritem + i, "SLICE:CUTS.Worker_Measurement"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	soap_new_block(soap);
			for (a->__size = 0; ; a->__size++)
			{	p = (SLICE__CUTS_x002eWorker_USCOREMeasurement **)soap_push_block(soap, sizeof(SLICE__CUTS_x002eWorker_USCOREMeasurement *));
				if (!p)
					return NULL;
				*p = NULL;
				if (!soap_in_PointerToSLICE__CUTS_x002eWorker_USCOREMeasurement(soap, NULL, p, "SLICE:CUTS.Worker_Measurement"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap);
			a->__ptritem = (SLICE__CUTS_x002eWorker_USCOREMeasurement **)soap_malloc(soap, soap->blist->size);
			soap_save_block(soap, (char*)a->__ptritem, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq, 0, sizeof(CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq), 0, soap_copy_CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq * SOAP_FMAC6 soap_new_CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq(struct soap *soap, int n)
{	return soap_instantiate_CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq(struct soap *soap, CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq * SOAP_FMAC4 soap_instantiate_CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq;
		if (size)
			*size = sizeof(CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq);
		((CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq[n];
		if (size)
			*size = n * sizeof(CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq);
		for (int i = 0; i < n; i++)
			((CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq %p -> %p\n", q, p));
	*(CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq*)p = *(CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq*)q;
}

void SLICE__CUTS_x002eWorker_USCOREMeasurement::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToCUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq(soap, &((SLICE__CUTS_x002eWorker_USCOREMeasurement*)this)->actions);
	/* transient soap skipped */
}

void SLICE__CUTS_x002eWorker_USCOREMeasurement::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &((SLICE__CUTS_x002eWorker_USCOREMeasurement*)this)->type);
	((SLICE__CUTS_x002eWorker_USCOREMeasurement*)this)->actions = NULL;
	((xsd__anyType*)this)->__item = NULL;
	/* transient soap skipped */
}

int SLICE__CUTS_x002eWorker_USCOREMeasurement::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_SLICE__CUTS_x002eWorker_USCOREMeasurement);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int SLICE__CUTS_x002eWorker_USCOREMeasurement::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_SLICE__CUTS_x002eWorker_USCOREMeasurement(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SLICE__CUTS_x002eWorker_USCOREMeasurement(struct soap *soap, const char *tag, int id, const SLICE__CUTS_x002eWorker_USCOREMeasurement *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SLICE__CUTS_x002eWorker_USCOREMeasurement), "SLICE:CUTS.Worker_Measurement");
	/* transient soap skipped */
	soap_out_int(soap, "type", -1, &(((SLICE__CUTS_x002eWorker_USCOREMeasurement*)a)->type), "");
	soap_out_PointerToCUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq(soap, "actions", -1, &(((SLICE__CUTS_x002eWorker_USCOREMeasurement*)a)->actions), "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *SLICE__CUTS_x002eWorker_USCOREMeasurement::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_SLICE__CUTS_x002eWorker_USCOREMeasurement(soap, this, tag, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eWorker_USCOREMeasurement * SOAP_FMAC4 soap_get_SLICE__CUTS_x002eWorker_USCOREMeasurement(struct soap *soap, SLICE__CUTS_x002eWorker_USCOREMeasurement *p, const char *tag, const char *type)
{
	if ((p = soap_in_SLICE__CUTS_x002eWorker_USCOREMeasurement(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *SLICE__CUTS_x002eWorker_USCOREMeasurement::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_SLICE__CUTS_x002eWorker_USCOREMeasurement(soap, tag, this, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eWorker_USCOREMeasurement * SOAP_FMAC4 soap_in_SLICE__CUTS_x002eWorker_USCOREMeasurement(struct soap *soap, const char *tag, SLICE__CUTS_x002eWorker_USCOREMeasurement *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (SLICE__CUTS_x002eWorker_USCOREMeasurement *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_SLICE__CUTS_x002eWorker_USCOREMeasurement, sizeof(SLICE__CUTS_x002eWorker_USCOREMeasurement), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_SLICE__CUTS_x002eWorker_USCOREMeasurement)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (SLICE__CUTS_x002eWorker_USCOREMeasurement *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag___item2 = 1, soap_flag_type1 = 1, soap_flag_actions1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_type1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "type", &(((SLICE__CUTS_x002eWorker_USCOREMeasurement*)a)->type), "xsd:int"))
				{	soap_flag_type1--;
					continue;
				}
			if (soap_flag_actions1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToCUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq(soap, "actions", &(((SLICE__CUTS_x002eWorker_USCOREMeasurement*)a)->actions), "SLICE:CUTS.Action_Measurement"))
				{	soap_flag_actions1--;
					continue;
				}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(((xsd__anyType*)a)->__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_type1 > 0 || soap_flag_actions1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (SLICE__CUTS_x002eWorker_USCOREMeasurement *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_SLICE__CUTS_x002eWorker_USCOREMeasurement, 0, sizeof(SLICE__CUTS_x002eWorker_USCOREMeasurement), 0, soap_copy_SLICE__CUTS_x002eWorker_USCOREMeasurement);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 SLICE__CUTS_x002eWorker_USCOREMeasurement * SOAP_FMAC6 soap_new_SLICE__CUTS_x002eWorker_USCOREMeasurement(struct soap *soap, int n)
{	return soap_instantiate_SLICE__CUTS_x002eWorker_USCOREMeasurement(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SLICE__CUTS_x002eWorker_USCOREMeasurement(struct soap *soap, SLICE__CUTS_x002eWorker_USCOREMeasurement *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 SLICE__CUTS_x002eWorker_USCOREMeasurement * SOAP_FMAC4 soap_instantiate_SLICE__CUTS_x002eWorker_USCOREMeasurement(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SLICE__CUTS_x002eWorker_USCOREMeasurement(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SLICE__CUTS_x002eWorker_USCOREMeasurement, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new SLICE__CUTS_x002eWorker_USCOREMeasurement;
		if (size)
			*size = sizeof(SLICE__CUTS_x002eWorker_USCOREMeasurement);
		((SLICE__CUTS_x002eWorker_USCOREMeasurement*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new SLICE__CUTS_x002eWorker_USCOREMeasurement[n];
		if (size)
			*size = n * sizeof(SLICE__CUTS_x002eWorker_USCOREMeasurement);
		for (int i = 0; i < n; i++)
			((SLICE__CUTS_x002eWorker_USCOREMeasurement*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (SLICE__CUTS_x002eWorker_USCOREMeasurement*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SLICE__CUTS_x002eWorker_USCOREMeasurement(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying SLICE__CUTS_x002eWorker_USCOREMeasurement %p -> %p\n", q, p));
	*(SLICE__CUTS_x002eWorker_USCOREMeasurement*)p = *(SLICE__CUTS_x002eWorker_USCOREMeasurement*)q;
}

void CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq::soap_serialize(struct soap *soap) const
{
	if (this->__ptritem && !soap_array_reference(soap, this, (struct soap_array*)&this->__ptritem, 1, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq))
		for (int i = 0; i < this->__size; i++)
		{
			soap_serialize_PointerToSLICE__CUTS_x002eAction_USCOREMeasurement(soap, this->__ptritem + i);
		}
}

void CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptritem = NULL;
}

int CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptritem, 1, tag, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq(struct soap *soap, const char *tag, int id, const CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq *a, const char *type)
{
	int i, n = a->__size;
	char *t = soap_putsize(soap, "SLICE:CUTS.Action_Measurement", a->__size);
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptritem, 1, type, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq);
	if (id < 0)
		return soap->error;
	soap_array_begin_out(soap, tag, id, t, NULL);
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_PointerToSLICE__CUTS_x002eAction_USCOREMeasurement(soap, "item", -1, &a->__ptritem[i], "");
	}
	soap->position = 0;
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq(soap, this, tag, type);
}

SOAP_FMAC3 CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq * SOAP_FMAC4 soap_get_CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq(struct soap *soap, CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq *p, const char *tag, const char *type)
{
	if ((p = soap_in_CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq(soap, tag, this, type);
}

SOAP_FMAC3 CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq * SOAP_FMAC4 soap_in_CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq(struct soap *soap, const char *tag, CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq *a, const char *type)
{	int i, j;
	SLICE__CUTS_x002eAction_USCOREMeasurement **p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq, sizeof(CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptritem = (SLICE__CUTS_x002eAction_USCOREMeasurement **)soap_malloc(soap, sizeof(SLICE__CUTS_x002eAction_USCOREMeasurement *) * a->__size);
			for (i = 0; i < a->__size; i++)
				a->__ptritem[i] = NULL;
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_PointerToSLICE__CUTS_x002eAction_USCOREMeasurement(soap, NULL, a->__ptritem + i, "SLICE:CUTS.Action_Measurement"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	soap_new_block(soap);
			for (a->__size = 0; ; a->__size++)
			{	p = (SLICE__CUTS_x002eAction_USCOREMeasurement **)soap_push_block(soap, sizeof(SLICE__CUTS_x002eAction_USCOREMeasurement *));
				if (!p)
					return NULL;
				*p = NULL;
				if (!soap_in_PointerToSLICE__CUTS_x002eAction_USCOREMeasurement(soap, NULL, p, "SLICE:CUTS.Action_Measurement"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap);
			a->__ptritem = (SLICE__CUTS_x002eAction_USCOREMeasurement **)soap_malloc(soap, soap->blist->size);
			soap_save_block(soap, (char*)a->__ptritem, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq, 0, sizeof(CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq), 0, soap_copy_CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq * SOAP_FMAC6 soap_new_CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq(struct soap *soap, int n)
{	return soap_instantiate_CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq(struct soap *soap, CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq * SOAP_FMAC4 soap_instantiate_CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq;
		if (size)
			*size = sizeof(CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq);
		((CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq[n];
		if (size)
			*size = n * sizeof(CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq);
		for (int i = 0; i < n; i++)
			((CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq %p -> %p\n", q, p));
	*(CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq*)p = *(CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq*)q;
}

void SLICE__CUTS_x002eAction_USCOREMeasurement::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToSLICE__CUTS_x002eTime_USCORESample(soap, &((SLICE__CUTS_x002eAction_USCOREMeasurement*)this)->time);
	/* transient soap skipped */
}

void SLICE__CUTS_x002eAction_USCOREMeasurement::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &((SLICE__CUTS_x002eAction_USCOREMeasurement*)this)->type);
	((SLICE__CUTS_x002eAction_USCOREMeasurement*)this)->time = NULL;
	((xsd__anyType*)this)->__item = NULL;
	/* transient soap skipped */
}

int SLICE__CUTS_x002eAction_USCOREMeasurement::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_SLICE__CUTS_x002eAction_USCOREMeasurement);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int SLICE__CUTS_x002eAction_USCOREMeasurement::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_SLICE__CUTS_x002eAction_USCOREMeasurement(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SLICE__CUTS_x002eAction_USCOREMeasurement(struct soap *soap, const char *tag, int id, const SLICE__CUTS_x002eAction_USCOREMeasurement *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SLICE__CUTS_x002eAction_USCOREMeasurement), "SLICE:CUTS.Action_Measurement");
	/* transient soap skipped */
	soap_out_int(soap, "type", -1, &(((SLICE__CUTS_x002eAction_USCOREMeasurement*)a)->type), "");
	soap_out_PointerToSLICE__CUTS_x002eTime_USCORESample(soap, "time", -1, &(((SLICE__CUTS_x002eAction_USCOREMeasurement*)a)->time), "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *SLICE__CUTS_x002eAction_USCOREMeasurement::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_SLICE__CUTS_x002eAction_USCOREMeasurement(soap, this, tag, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eAction_USCOREMeasurement * SOAP_FMAC4 soap_get_SLICE__CUTS_x002eAction_USCOREMeasurement(struct soap *soap, SLICE__CUTS_x002eAction_USCOREMeasurement *p, const char *tag, const char *type)
{
	if ((p = soap_in_SLICE__CUTS_x002eAction_USCOREMeasurement(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *SLICE__CUTS_x002eAction_USCOREMeasurement::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_SLICE__CUTS_x002eAction_USCOREMeasurement(soap, tag, this, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eAction_USCOREMeasurement * SOAP_FMAC4 soap_in_SLICE__CUTS_x002eAction_USCOREMeasurement(struct soap *soap, const char *tag, SLICE__CUTS_x002eAction_USCOREMeasurement *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (SLICE__CUTS_x002eAction_USCOREMeasurement *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_SLICE__CUTS_x002eAction_USCOREMeasurement, sizeof(SLICE__CUTS_x002eAction_USCOREMeasurement), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_SLICE__CUTS_x002eAction_USCOREMeasurement)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (SLICE__CUTS_x002eAction_USCOREMeasurement *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag___item2 = 1, soap_flag_type1 = 1, soap_flag_time1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_type1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "type", &(((SLICE__CUTS_x002eAction_USCOREMeasurement*)a)->type), "xsd:int"))
				{	soap_flag_type1--;
					continue;
				}
			if (soap_flag_time1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSLICE__CUTS_x002eTime_USCORESample(soap, "time", &(((SLICE__CUTS_x002eAction_USCOREMeasurement*)a)->time), "SLICE:CUTS.Time_Sample"))
				{	soap_flag_time1--;
					continue;
				}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(((xsd__anyType*)a)->__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_type1 > 0 || soap_flag_time1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (SLICE__CUTS_x002eAction_USCOREMeasurement *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_SLICE__CUTS_x002eAction_USCOREMeasurement, 0, sizeof(SLICE__CUTS_x002eAction_USCOREMeasurement), 0, soap_copy_SLICE__CUTS_x002eAction_USCOREMeasurement);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 SLICE__CUTS_x002eAction_USCOREMeasurement * SOAP_FMAC6 soap_new_SLICE__CUTS_x002eAction_USCOREMeasurement(struct soap *soap, int n)
{	return soap_instantiate_SLICE__CUTS_x002eAction_USCOREMeasurement(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SLICE__CUTS_x002eAction_USCOREMeasurement(struct soap *soap, SLICE__CUTS_x002eAction_USCOREMeasurement *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 SLICE__CUTS_x002eAction_USCOREMeasurement * SOAP_FMAC4 soap_instantiate_SLICE__CUTS_x002eAction_USCOREMeasurement(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SLICE__CUTS_x002eAction_USCOREMeasurement(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SLICE__CUTS_x002eAction_USCOREMeasurement, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new SLICE__CUTS_x002eAction_USCOREMeasurement;
		if (size)
			*size = sizeof(SLICE__CUTS_x002eAction_USCOREMeasurement);
		((SLICE__CUTS_x002eAction_USCOREMeasurement*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new SLICE__CUTS_x002eAction_USCOREMeasurement[n];
		if (size)
			*size = n * sizeof(SLICE__CUTS_x002eAction_USCOREMeasurement);
		for (int i = 0; i < n; i++)
			((SLICE__CUTS_x002eAction_USCOREMeasurement*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (SLICE__CUTS_x002eAction_USCOREMeasurement*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SLICE__CUTS_x002eAction_USCOREMeasurement(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying SLICE__CUTS_x002eAction_USCOREMeasurement %p -> %p\n", q, p));
	*(SLICE__CUTS_x002eAction_USCOREMeasurement*)p = *(SLICE__CUTS_x002eAction_USCOREMeasurement*)q;
}

void SLICE__CUTS_x002eTime_USCORESample::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToSLICE__CUTS_x002eTime_USCOREInfo(soap, &((SLICE__CUTS_x002eTime_USCORESample*)this)->time);
	/* transient soap skipped */
}

void SLICE__CUTS_x002eTime_USCORESample::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &((SLICE__CUTS_x002eTime_USCORESample*)this)->count);
	((SLICE__CUTS_x002eTime_USCORESample*)this)->time = NULL;
	((xsd__anyType*)this)->__item = NULL;
	/* transient soap skipped */
}

int SLICE__CUTS_x002eTime_USCORESample::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_SLICE__CUTS_x002eTime_USCORESample);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int SLICE__CUTS_x002eTime_USCORESample::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_SLICE__CUTS_x002eTime_USCORESample(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SLICE__CUTS_x002eTime_USCORESample(struct soap *soap, const char *tag, int id, const SLICE__CUTS_x002eTime_USCORESample *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SLICE__CUTS_x002eTime_USCORESample), "SLICE:CUTS.Time_Sample");
	/* transient soap skipped */
	soap_out_int(soap, "count", -1, &(((SLICE__CUTS_x002eTime_USCORESample*)a)->count), "");
	soap_out_PointerToSLICE__CUTS_x002eTime_USCOREInfo(soap, "time", -1, &(((SLICE__CUTS_x002eTime_USCORESample*)a)->time), "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *SLICE__CUTS_x002eTime_USCORESample::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_SLICE__CUTS_x002eTime_USCORESample(soap, this, tag, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eTime_USCORESample * SOAP_FMAC4 soap_get_SLICE__CUTS_x002eTime_USCORESample(struct soap *soap, SLICE__CUTS_x002eTime_USCORESample *p, const char *tag, const char *type)
{
	if ((p = soap_in_SLICE__CUTS_x002eTime_USCORESample(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *SLICE__CUTS_x002eTime_USCORESample::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_SLICE__CUTS_x002eTime_USCORESample(soap, tag, this, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eTime_USCORESample * SOAP_FMAC4 soap_in_SLICE__CUTS_x002eTime_USCORESample(struct soap *soap, const char *tag, SLICE__CUTS_x002eTime_USCORESample *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (SLICE__CUTS_x002eTime_USCORESample *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_SLICE__CUTS_x002eTime_USCORESample, sizeof(SLICE__CUTS_x002eTime_USCORESample), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_SLICE__CUTS_x002eTime_USCORESample)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (SLICE__CUTS_x002eTime_USCORESample *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag___item2 = 1, soap_flag_count1 = 1, soap_flag_time1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_count1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "count", &(((SLICE__CUTS_x002eTime_USCORESample*)a)->count), "xsd:int"))
				{	soap_flag_count1--;
					continue;
				}
			if (soap_flag_time1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSLICE__CUTS_x002eTime_USCOREInfo(soap, "time", &(((SLICE__CUTS_x002eTime_USCORESample*)a)->time), "SLICE:CUTS.Time_Info"))
				{	soap_flag_time1--;
					continue;
				}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(((xsd__anyType*)a)->__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_count1 > 0 || soap_flag_time1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (SLICE__CUTS_x002eTime_USCORESample *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_SLICE__CUTS_x002eTime_USCORESample, 0, sizeof(SLICE__CUTS_x002eTime_USCORESample), 0, soap_copy_SLICE__CUTS_x002eTime_USCORESample);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 SLICE__CUTS_x002eTime_USCORESample * SOAP_FMAC6 soap_new_SLICE__CUTS_x002eTime_USCORESample(struct soap *soap, int n)
{	return soap_instantiate_SLICE__CUTS_x002eTime_USCORESample(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SLICE__CUTS_x002eTime_USCORESample(struct soap *soap, SLICE__CUTS_x002eTime_USCORESample *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 SLICE__CUTS_x002eTime_USCORESample * SOAP_FMAC4 soap_instantiate_SLICE__CUTS_x002eTime_USCORESample(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SLICE__CUTS_x002eTime_USCORESample(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SLICE__CUTS_x002eTime_USCORESample, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new SLICE__CUTS_x002eTime_USCORESample;
		if (size)
			*size = sizeof(SLICE__CUTS_x002eTime_USCORESample);
		((SLICE__CUTS_x002eTime_USCORESample*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new SLICE__CUTS_x002eTime_USCORESample[n];
		if (size)
			*size = n * sizeof(SLICE__CUTS_x002eTime_USCORESample);
		for (int i = 0; i < n; i++)
			((SLICE__CUTS_x002eTime_USCORESample*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (SLICE__CUTS_x002eTime_USCORESample*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SLICE__CUTS_x002eTime_USCORESample(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying SLICE__CUTS_x002eTime_USCORESample %p -> %p\n", q, p));
	*(SLICE__CUTS_x002eTime_USCORESample*)p = *(SLICE__CUTS_x002eTime_USCORESample*)q;
}

void SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToSLICE__CUTS_x002eTime_USCOREInfo(soap, &((SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo*)this)->time);
	/* transient soap skipped */
}

void SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo::soap_default(struct soap *soap)
{
	this->soap = soap;
	((SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo*)this)->time = NULL;
	soap_default_int(soap, &((SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo*)this)->max_USCOREevents);
	soap_default_int(soap, &((SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo*)this)->min_USCOREevents);
	((xsd__anyType*)this)->__item = NULL;
	/* transient soap skipped */
}

int SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo(struct soap *soap, const char *tag, int id, const SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo), "SLICE:CUTS.Event_Time_Info");
	/* transient soap skipped */
	soap_out_PointerToSLICE__CUTS_x002eTime_USCOREInfo(soap, "time", -1, &(((SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo*)a)->time), "");
	soap_out_int(soap, "max_events", -1, &(((SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo*)a)->max_USCOREevents), "");
	soap_out_int(soap, "min_events", -1, &(((SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo*)a)->min_USCOREevents), "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo(soap, this, tag, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo * SOAP_FMAC4 soap_get_SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo(struct soap *soap, SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo(soap, tag, this, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo * SOAP_FMAC4 soap_in_SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo(struct soap *soap, const char *tag, SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo, sizeof(SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag___item2 = 1, soap_flag_time1 = 1, soap_flag_max_USCOREevents1 = 1, soap_flag_min_USCOREevents1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_time1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSLICE__CUTS_x002eTime_USCOREInfo(soap, "time", &(((SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo*)a)->time), "SLICE:CUTS.Time_Info"))
				{	soap_flag_time1--;
					continue;
				}
			if (soap_flag_max_USCOREevents1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "max_events", &(((SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo*)a)->max_USCOREevents), "xsd:int"))
				{	soap_flag_max_USCOREevents1--;
					continue;
				}
			if (soap_flag_min_USCOREevents1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "min_events", &(((SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo*)a)->min_USCOREevents), "xsd:int"))
				{	soap_flag_min_USCOREevents1--;
					continue;
				}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(((xsd__anyType*)a)->__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_time1 > 0 || soap_flag_max_USCOREevents1 > 0 || soap_flag_min_USCOREevents1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo, 0, sizeof(SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo), 0, soap_copy_SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo * SOAP_FMAC6 soap_new_SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo(struct soap *soap, int n)
{	return soap_instantiate_SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo(struct soap *soap, SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo * SOAP_FMAC4 soap_instantiate_SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo;
		if (size)
			*size = sizeof(SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo);
		((SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo[n];
		if (size)
			*size = n * sizeof(SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo);
		for (int i = 0; i < n; i++)
			((SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo %p -> %p\n", q, p));
	*(SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo*)p = *(SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo*)q;
}

void SLICE__CUTS_x002eTime_USCOREInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

void SLICE__CUTS_x002eTime_USCOREInfo::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_SLICE__CUTS_x002eTime_USCOREStamp(soap, &((SLICE__CUTS_x002eTime_USCOREInfo*)this)->total);
	soap_default_SLICE__CUTS_x002eTime_USCOREStamp(soap, &((SLICE__CUTS_x002eTime_USCOREInfo*)this)->max_);
	soap_default_SLICE__CUTS_x002eTime_USCOREStamp(soap, &((SLICE__CUTS_x002eTime_USCOREInfo*)this)->min_);
	((xsd__anyType*)this)->__item = NULL;
	/* transient soap skipped */
}

int SLICE__CUTS_x002eTime_USCOREInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_SLICE__CUTS_x002eTime_USCOREInfo);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int SLICE__CUTS_x002eTime_USCOREInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_SLICE__CUTS_x002eTime_USCOREInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SLICE__CUTS_x002eTime_USCOREInfo(struct soap *soap, const char *tag, int id, const SLICE__CUTS_x002eTime_USCOREInfo *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SLICE__CUTS_x002eTime_USCOREInfo), "SLICE:CUTS.Time_Info");
	/* transient soap skipped */
	soap_out_SLICE__CUTS_x002eTime_USCOREStamp(soap, "total", -1, &(((SLICE__CUTS_x002eTime_USCOREInfo*)a)->total), "");
	soap_out_SLICE__CUTS_x002eTime_USCOREStamp(soap, "max", -1, &(((SLICE__CUTS_x002eTime_USCOREInfo*)a)->max_), "");
	soap_out_SLICE__CUTS_x002eTime_USCOREStamp(soap, "min", -1, &(((SLICE__CUTS_x002eTime_USCOREInfo*)a)->min_), "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *SLICE__CUTS_x002eTime_USCOREInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_SLICE__CUTS_x002eTime_USCOREInfo(soap, this, tag, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eTime_USCOREInfo * SOAP_FMAC4 soap_get_SLICE__CUTS_x002eTime_USCOREInfo(struct soap *soap, SLICE__CUTS_x002eTime_USCOREInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_SLICE__CUTS_x002eTime_USCOREInfo(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *SLICE__CUTS_x002eTime_USCOREInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_SLICE__CUTS_x002eTime_USCOREInfo(soap, tag, this, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eTime_USCOREInfo * SOAP_FMAC4 soap_in_SLICE__CUTS_x002eTime_USCOREInfo(struct soap *soap, const char *tag, SLICE__CUTS_x002eTime_USCOREInfo *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (SLICE__CUTS_x002eTime_USCOREInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_SLICE__CUTS_x002eTime_USCOREInfo, sizeof(SLICE__CUTS_x002eTime_USCOREInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_SLICE__CUTS_x002eTime_USCOREInfo)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (SLICE__CUTS_x002eTime_USCOREInfo *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag___item2 = 1, soap_flag_total1 = 1, soap_flag_max_1 = 1, soap_flag_min_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_total1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_SLICE__CUTS_x002eTime_USCOREStamp(soap, "total", &(((SLICE__CUTS_x002eTime_USCOREInfo*)a)->total), "SLICE:CUTS.Time_Stamp"))
				{	soap_flag_total1--;
					continue;
				}
			if (soap_flag_max_1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_SLICE__CUTS_x002eTime_USCOREStamp(soap, "max", &(((SLICE__CUTS_x002eTime_USCOREInfo*)a)->max_), "SLICE:CUTS.Time_Stamp"))
				{	soap_flag_max_1--;
					continue;
				}
			if (soap_flag_min_1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_SLICE__CUTS_x002eTime_USCOREStamp(soap, "min", &(((SLICE__CUTS_x002eTime_USCOREInfo*)a)->min_), "SLICE:CUTS.Time_Stamp"))
				{	soap_flag_min_1--;
					continue;
				}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(((xsd__anyType*)a)->__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_total1 > 0 || soap_flag_max_1 > 0 || soap_flag_min_1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (SLICE__CUTS_x002eTime_USCOREInfo *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_SLICE__CUTS_x002eTime_USCOREInfo, 0, sizeof(SLICE__CUTS_x002eTime_USCOREInfo), 0, soap_copy_SLICE__CUTS_x002eTime_USCOREInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 SLICE__CUTS_x002eTime_USCOREInfo * SOAP_FMAC6 soap_new_SLICE__CUTS_x002eTime_USCOREInfo(struct soap *soap, int n)
{	return soap_instantiate_SLICE__CUTS_x002eTime_USCOREInfo(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SLICE__CUTS_x002eTime_USCOREInfo(struct soap *soap, SLICE__CUTS_x002eTime_USCOREInfo *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 SLICE__CUTS_x002eTime_USCOREInfo * SOAP_FMAC4 soap_instantiate_SLICE__CUTS_x002eTime_USCOREInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SLICE__CUTS_x002eTime_USCOREInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SLICE__CUTS_x002eTime_USCOREInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new SLICE__CUTS_x002eTime_USCOREInfo;
		if (size)
			*size = sizeof(SLICE__CUTS_x002eTime_USCOREInfo);
		((SLICE__CUTS_x002eTime_USCOREInfo*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new SLICE__CUTS_x002eTime_USCOREInfo[n];
		if (size)
			*size = n * sizeof(SLICE__CUTS_x002eTime_USCOREInfo);
		for (int i = 0; i < n; i++)
			((SLICE__CUTS_x002eTime_USCOREInfo*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (SLICE__CUTS_x002eTime_USCOREInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SLICE__CUTS_x002eTime_USCOREInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying SLICE__CUTS_x002eTime_USCOREInfo %p -> %p\n", q, p));
	*(SLICE__CUTS_x002eTime_USCOREInfo*)p = *(SLICE__CUTS_x002eTime_USCOREInfo*)q;
}

void CUTS_x002e_USCORESE_USCOREPath_USCORESequence::soap_serialize(struct soap *soap) const
{
	if (this->__ptritem && !soap_array_reference(soap, this, (struct soap_array*)&this->__ptritem, 1, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREPath_USCORESequence))
		for (int i = 0; i < this->__size; i++)
		{
			soap_serialize_PointerToSLICE__CUTS_x002ePath_USCOREElement(soap, this->__ptritem + i);
		}
}

void CUTS_x002e_USCORESE_USCOREPath_USCORESequence::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptritem = NULL;
}

int CUTS_x002e_USCORESE_USCOREPath_USCORESequence::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptritem, 1, tag, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREPath_USCORESequence);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int CUTS_x002e_USCORESE_USCOREPath_USCORESequence::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_CUTS_x002e_USCORESE_USCOREPath_USCORESequence(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_CUTS_x002e_USCORESE_USCOREPath_USCORESequence(struct soap *soap, const char *tag, int id, const CUTS_x002e_USCORESE_USCOREPath_USCORESequence *a, const char *type)
{
	int i, n = a->__size;
	char *t = soap_putsize(soap, "SLICE:CUTS.Path_Element", a->__size);
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptritem, 1, type, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREPath_USCORESequence);
	if (id < 0)
		return soap->error;
	soap_array_begin_out(soap, tag, id, t, NULL);
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_PointerToSLICE__CUTS_x002ePath_USCOREElement(soap, "item", -1, &a->__ptritem[i], "");
	}
	soap->position = 0;
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *CUTS_x002e_USCORESE_USCOREPath_USCORESequence::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_CUTS_x002e_USCORESE_USCOREPath_USCORESequence(soap, this, tag, type);
}

SOAP_FMAC3 CUTS_x002e_USCORESE_USCOREPath_USCORESequence * SOAP_FMAC4 soap_get_CUTS_x002e_USCORESE_USCOREPath_USCORESequence(struct soap *soap, CUTS_x002e_USCORESE_USCOREPath_USCORESequence *p, const char *tag, const char *type)
{
	if ((p = soap_in_CUTS_x002e_USCORESE_USCOREPath_USCORESequence(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *CUTS_x002e_USCORESE_USCOREPath_USCORESequence::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_CUTS_x002e_USCORESE_USCOREPath_USCORESequence(soap, tag, this, type);
}

SOAP_FMAC3 CUTS_x002e_USCORESE_USCOREPath_USCORESequence * SOAP_FMAC4 soap_in_CUTS_x002e_USCORESE_USCOREPath_USCORESequence(struct soap *soap, const char *tag, CUTS_x002e_USCORESE_USCOREPath_USCORESequence *a, const char *type)
{	int i, j;
	SLICE__CUTS_x002ePath_USCOREElement **p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (CUTS_x002e_USCORESE_USCOREPath_USCORESequence *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREPath_USCORESequence, sizeof(CUTS_x002e_USCORESE_USCOREPath_USCORESequence), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptritem = (SLICE__CUTS_x002ePath_USCOREElement **)soap_malloc(soap, sizeof(SLICE__CUTS_x002ePath_USCOREElement *) * a->__size);
			for (i = 0; i < a->__size; i++)
				a->__ptritem[i] = NULL;
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_PointerToSLICE__CUTS_x002ePath_USCOREElement(soap, NULL, a->__ptritem + i, "SLICE:CUTS.Path_Element"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	soap_new_block(soap);
			for (a->__size = 0; ; a->__size++)
			{	p = (SLICE__CUTS_x002ePath_USCOREElement **)soap_push_block(soap, sizeof(SLICE__CUTS_x002ePath_USCOREElement *));
				if (!p)
					return NULL;
				*p = NULL;
				if (!soap_in_PointerToSLICE__CUTS_x002ePath_USCOREElement(soap, NULL, p, "SLICE:CUTS.Path_Element"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap);
			a->__ptritem = (SLICE__CUTS_x002ePath_USCOREElement **)soap_malloc(soap, soap->blist->size);
			soap_save_block(soap, (char*)a->__ptritem, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (CUTS_x002e_USCORESE_USCOREPath_USCORESequence *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREPath_USCORESequence, 0, sizeof(CUTS_x002e_USCORESE_USCOREPath_USCORESequence), 0, soap_copy_CUTS_x002e_USCORESE_USCOREPath_USCORESequence);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 CUTS_x002e_USCORESE_USCOREPath_USCORESequence * SOAP_FMAC6 soap_new_CUTS_x002e_USCORESE_USCOREPath_USCORESequence(struct soap *soap, int n)
{	return soap_instantiate_CUTS_x002e_USCORESE_USCOREPath_USCORESequence(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_CUTS_x002e_USCORESE_USCOREPath_USCORESequence(struct soap *soap, CUTS_x002e_USCORESE_USCOREPath_USCORESequence *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 CUTS_x002e_USCORESE_USCOREPath_USCORESequence * SOAP_FMAC4 soap_instantiate_CUTS_x002e_USCORESE_USCOREPath_USCORESequence(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_CUTS_x002e_USCORESE_USCOREPath_USCORESequence(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREPath_USCORESequence, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new CUTS_x002e_USCORESE_USCOREPath_USCORESequence;
		if (size)
			*size = sizeof(CUTS_x002e_USCORESE_USCOREPath_USCORESequence);
		((CUTS_x002e_USCORESE_USCOREPath_USCORESequence*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new CUTS_x002e_USCORESE_USCOREPath_USCORESequence[n];
		if (size)
			*size = n * sizeof(CUTS_x002e_USCORESE_USCOREPath_USCORESequence);
		for (int i = 0; i < n; i++)
			((CUTS_x002e_USCORESE_USCOREPath_USCORESequence*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (CUTS_x002e_USCORESE_USCOREPath_USCORESequence*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_CUTS_x002e_USCORESE_USCOREPath_USCORESequence(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying CUTS_x002e_USCORESE_USCOREPath_USCORESequence %p -> %p\n", q, p));
	*(CUTS_x002e_USCORESE_USCOREPath_USCORESequence*)p = *(CUTS_x002e_USCORESE_USCOREPath_USCORESequence*)q;
}

void SLICE__CUTS_x002ePath_USCOREElement::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &((SLICE__CUTS_x002ePath_USCOREElement*)this)->node);
	soap_serialize_string(soap, &((SLICE__CUTS_x002ePath_USCOREElement*)this)->src);
	soap_serialize_string(soap, &((SLICE__CUTS_x002ePath_USCOREElement*)this)->dst);
	/* transient soap skipped */
}

void SLICE__CUTS_x002ePath_USCOREElement::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &((SLICE__CUTS_x002ePath_USCOREElement*)this)->node);
	soap_default_string(soap, &((SLICE__CUTS_x002ePath_USCOREElement*)this)->src);
	soap_default_string(soap, &((SLICE__CUTS_x002ePath_USCOREElement*)this)->dst);
	((xsd__anyType*)this)->__item = NULL;
	/* transient soap skipped */
}

int SLICE__CUTS_x002ePath_USCOREElement::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_SLICE__CUTS_x002ePath_USCOREElement);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int SLICE__CUTS_x002ePath_USCOREElement::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_SLICE__CUTS_x002ePath_USCOREElement(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SLICE__CUTS_x002ePath_USCOREElement(struct soap *soap, const char *tag, int id, const SLICE__CUTS_x002ePath_USCOREElement *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SLICE__CUTS_x002ePath_USCOREElement), "SLICE:CUTS.Path_Element");
	/* transient soap skipped */
	soap_out_string(soap, "node", -1, &(((SLICE__CUTS_x002ePath_USCOREElement*)a)->node), "");
	soap_out_string(soap, "src", -1, &(((SLICE__CUTS_x002ePath_USCOREElement*)a)->src), "");
	soap_out_string(soap, "dst", -1, &(((SLICE__CUTS_x002ePath_USCOREElement*)a)->dst), "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *SLICE__CUTS_x002ePath_USCOREElement::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_SLICE__CUTS_x002ePath_USCOREElement(soap, this, tag, type);
}

SOAP_FMAC3 SLICE__CUTS_x002ePath_USCOREElement * SOAP_FMAC4 soap_get_SLICE__CUTS_x002ePath_USCOREElement(struct soap *soap, SLICE__CUTS_x002ePath_USCOREElement *p, const char *tag, const char *type)
{
	if ((p = soap_in_SLICE__CUTS_x002ePath_USCOREElement(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *SLICE__CUTS_x002ePath_USCOREElement::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_SLICE__CUTS_x002ePath_USCOREElement(soap, tag, this, type);
}

SOAP_FMAC3 SLICE__CUTS_x002ePath_USCOREElement * SOAP_FMAC4 soap_in_SLICE__CUTS_x002ePath_USCOREElement(struct soap *soap, const char *tag, SLICE__CUTS_x002ePath_USCOREElement *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (SLICE__CUTS_x002ePath_USCOREElement *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_SLICE__CUTS_x002ePath_USCOREElement, sizeof(SLICE__CUTS_x002ePath_USCOREElement), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_SLICE__CUTS_x002ePath_USCOREElement)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (SLICE__CUTS_x002ePath_USCOREElement *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag___item2 = 1, soap_flag_node1 = 1, soap_flag_src1 = 1, soap_flag_dst1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_node1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "node", &(((SLICE__CUTS_x002ePath_USCOREElement*)a)->node), "xsd:string"))
				{	soap_flag_node1--;
					continue;
				}
			if (soap_flag_src1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "src", &(((SLICE__CUTS_x002ePath_USCOREElement*)a)->src), "xsd:string"))
				{	soap_flag_src1--;
					continue;
				}
			if (soap_flag_dst1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "dst", &(((SLICE__CUTS_x002ePath_USCOREElement*)a)->dst), "xsd:string"))
				{	soap_flag_dst1--;
					continue;
				}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(((xsd__anyType*)a)->__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_node1 > 0 || soap_flag_src1 > 0 || soap_flag_dst1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (SLICE__CUTS_x002ePath_USCOREElement *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_SLICE__CUTS_x002ePath_USCOREElement, 0, sizeof(SLICE__CUTS_x002ePath_USCOREElement), 0, soap_copy_SLICE__CUTS_x002ePath_USCOREElement);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 SLICE__CUTS_x002ePath_USCOREElement * SOAP_FMAC6 soap_new_SLICE__CUTS_x002ePath_USCOREElement(struct soap *soap, int n)
{	return soap_instantiate_SLICE__CUTS_x002ePath_USCOREElement(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SLICE__CUTS_x002ePath_USCOREElement(struct soap *soap, SLICE__CUTS_x002ePath_USCOREElement *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 SLICE__CUTS_x002ePath_USCOREElement * SOAP_FMAC4 soap_instantiate_SLICE__CUTS_x002ePath_USCOREElement(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SLICE__CUTS_x002ePath_USCOREElement(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SLICE__CUTS_x002ePath_USCOREElement, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new SLICE__CUTS_x002ePath_USCOREElement;
		if (size)
			*size = sizeof(SLICE__CUTS_x002ePath_USCOREElement);
		((SLICE__CUTS_x002ePath_USCOREElement*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new SLICE__CUTS_x002ePath_USCOREElement[n];
		if (size)
			*size = n * sizeof(SLICE__CUTS_x002ePath_USCOREElement);
		for (int i = 0; i < n; i++)
			((SLICE__CUTS_x002ePath_USCOREElement*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (SLICE__CUTS_x002ePath_USCOREElement*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SLICE__CUTS_x002ePath_USCOREElement(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying SLICE__CUTS_x002ePath_USCOREElement %p -> %p\n", q, p));
	*(SLICE__CUTS_x002ePath_USCOREElement*)p = *(SLICE__CUTS_x002ePath_USCOREElement*)q;
}

void SLICE__CUTS_x002eComponent_USCORERegistration::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToCORBA__ObjectReference(soap, &((SLICE__CUTS_x002eComponent_USCORERegistration*)this)->agent);
	soap_serialize_string(soap, &((SLICE__CUTS_x002eComponent_USCORERegistration*)this)->name);
	soap_serialize_string(soap, &((SLICE__CUTS_x002eComponent_USCORERegistration*)this)->ipaddr);
	soap_serialize_string(soap, &((SLICE__CUTS_x002eComponent_USCORERegistration*)this)->hostname);
	/* transient soap skipped */
}

void SLICE__CUTS_x002eComponent_USCORERegistration::soap_default(struct soap *soap)
{
	this->soap = soap;
	((SLICE__CUTS_x002eComponent_USCORERegistration*)this)->agent = NULL;
	soap_default_string(soap, &((SLICE__CUTS_x002eComponent_USCORERegistration*)this)->name);
	soap_default_string(soap, &((SLICE__CUTS_x002eComponent_USCORERegistration*)this)->ipaddr);
	soap_default_string(soap, &((SLICE__CUTS_x002eComponent_USCORERegistration*)this)->hostname);
	((xsd__anyType*)this)->__item = NULL;
	/* transient soap skipped */
}

int SLICE__CUTS_x002eComponent_USCORERegistration::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_SLICE__CUTS_x002eComponent_USCORERegistration);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int SLICE__CUTS_x002eComponent_USCORERegistration::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_SLICE__CUTS_x002eComponent_USCORERegistration(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SLICE__CUTS_x002eComponent_USCORERegistration(struct soap *soap, const char *tag, int id, const SLICE__CUTS_x002eComponent_USCORERegistration *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SLICE__CUTS_x002eComponent_USCORERegistration), "SLICE:CUTS.Component_Registration");
	/* transient soap skipped */
	soap_out_PointerToCORBA__ObjectReference(soap, "agent", -1, &(((SLICE__CUTS_x002eComponent_USCORERegistration*)a)->agent), "");
	soap_out_string(soap, "name", -1, &(((SLICE__CUTS_x002eComponent_USCORERegistration*)a)->name), "");
	soap_out_string(soap, "ipaddr", -1, &(((SLICE__CUTS_x002eComponent_USCORERegistration*)a)->ipaddr), "");
	soap_out_string(soap, "hostname", -1, &(((SLICE__CUTS_x002eComponent_USCORERegistration*)a)->hostname), "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *SLICE__CUTS_x002eComponent_USCORERegistration::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_SLICE__CUTS_x002eComponent_USCORERegistration(soap, this, tag, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eComponent_USCORERegistration * SOAP_FMAC4 soap_get_SLICE__CUTS_x002eComponent_USCORERegistration(struct soap *soap, SLICE__CUTS_x002eComponent_USCORERegistration *p, const char *tag, const char *type)
{
	if ((p = soap_in_SLICE__CUTS_x002eComponent_USCORERegistration(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *SLICE__CUTS_x002eComponent_USCORERegistration::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_SLICE__CUTS_x002eComponent_USCORERegistration(soap, tag, this, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eComponent_USCORERegistration * SOAP_FMAC4 soap_in_SLICE__CUTS_x002eComponent_USCORERegistration(struct soap *soap, const char *tag, SLICE__CUTS_x002eComponent_USCORERegistration *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (SLICE__CUTS_x002eComponent_USCORERegistration *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_SLICE__CUTS_x002eComponent_USCORERegistration, sizeof(SLICE__CUTS_x002eComponent_USCORERegistration), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_SLICE__CUTS_x002eComponent_USCORERegistration)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (SLICE__CUTS_x002eComponent_USCORERegistration *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag___item2 = 1, soap_flag_agent1 = 1, soap_flag_name1 = 1, soap_flag_ipaddr1 = 1, soap_flag_hostname1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_agent1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToCORBA__ObjectReference(soap, "agent", &(((SLICE__CUTS_x002eComponent_USCORERegistration*)a)->agent), "CORBA:ObjectReference"))
				{	soap_flag_agent1--;
					continue;
				}
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "name", &(((SLICE__CUTS_x002eComponent_USCORERegistration*)a)->name), "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			if (soap_flag_ipaddr1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ipaddr", &(((SLICE__CUTS_x002eComponent_USCORERegistration*)a)->ipaddr), "xsd:string"))
				{	soap_flag_ipaddr1--;
					continue;
				}
			if (soap_flag_hostname1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "hostname", &(((SLICE__CUTS_x002eComponent_USCORERegistration*)a)->hostname), "xsd:string"))
				{	soap_flag_hostname1--;
					continue;
				}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(((xsd__anyType*)a)->__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_agent1 > 0 || soap_flag_name1 > 0 || soap_flag_ipaddr1 > 0 || soap_flag_hostname1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (SLICE__CUTS_x002eComponent_USCORERegistration *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_SLICE__CUTS_x002eComponent_USCORERegistration, 0, sizeof(SLICE__CUTS_x002eComponent_USCORERegistration), 0, soap_copy_SLICE__CUTS_x002eComponent_USCORERegistration);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 SLICE__CUTS_x002eComponent_USCORERegistration * SOAP_FMAC6 soap_new_SLICE__CUTS_x002eComponent_USCORERegistration(struct soap *soap, int n)
{	return soap_instantiate_SLICE__CUTS_x002eComponent_USCORERegistration(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SLICE__CUTS_x002eComponent_USCORERegistration(struct soap *soap, SLICE__CUTS_x002eComponent_USCORERegistration *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 SLICE__CUTS_x002eComponent_USCORERegistration * SOAP_FMAC4 soap_instantiate_SLICE__CUTS_x002eComponent_USCORERegistration(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SLICE__CUTS_x002eComponent_USCORERegistration(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SLICE__CUTS_x002eComponent_USCORERegistration, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new SLICE__CUTS_x002eComponent_USCORERegistration;
		if (size)
			*size = sizeof(SLICE__CUTS_x002eComponent_USCORERegistration);
		((SLICE__CUTS_x002eComponent_USCORERegistration*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new SLICE__CUTS_x002eComponent_USCORERegistration[n];
		if (size)
			*size = n * sizeof(SLICE__CUTS_x002eComponent_USCORERegistration);
		for (int i = 0; i < n; i++)
			((SLICE__CUTS_x002eComponent_USCORERegistration*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (SLICE__CUTS_x002eComponent_USCORERegistration*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SLICE__CUTS_x002eComponent_USCORERegistration(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying SLICE__CUTS_x002eComponent_USCORERegistration %p -> %p\n", q, p));
	*(SLICE__CUTS_x002eComponent_USCORERegistration*)p = *(SLICE__CUTS_x002eComponent_USCORERegistration*)q;
}

void SLICE__CUTS_x002eRegistration_USCORELimit::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

void SLICE__CUTS_x002eRegistration_USCORELimit::soap_default(struct soap *soap)
{
	this->soap = soap;
	((xsd__anyType*)this)->__item = NULL;
	/* transient soap skipped */
}

int SLICE__CUTS_x002eRegistration_USCORELimit::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_SLICE__CUTS_x002eRegistration_USCORELimit);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int SLICE__CUTS_x002eRegistration_USCORELimit::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_SLICE__CUTS_x002eRegistration_USCORELimit(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SLICE__CUTS_x002eRegistration_USCORELimit(struct soap *soap, const char *tag, int id, const SLICE__CUTS_x002eRegistration_USCORELimit *a, const char *type)
{
	return soap_outliteral(soap, tag, &(((xsd__anyType*)a)->__item), "SLICE:CUTS.Registration_Limit");
}

void *SLICE__CUTS_x002eRegistration_USCORELimit::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_SLICE__CUTS_x002eRegistration_USCORELimit(soap, this, tag, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eRegistration_USCORELimit * SOAP_FMAC4 soap_get_SLICE__CUTS_x002eRegistration_USCORELimit(struct soap *soap, SLICE__CUTS_x002eRegistration_USCORELimit *p, const char *tag, const char *type)
{
	if ((p = soap_in_SLICE__CUTS_x002eRegistration_USCORELimit(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *SLICE__CUTS_x002eRegistration_USCORELimit::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_SLICE__CUTS_x002eRegistration_USCORELimit(soap, tag, this, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eRegistration_USCORELimit * SOAP_FMAC4 soap_in_SLICE__CUTS_x002eRegistration_USCORELimit(struct soap *soap, const char *tag, SLICE__CUTS_x002eRegistration_USCORELimit *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (SLICE__CUTS_x002eRegistration_USCORELimit *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_SLICE__CUTS_x002eRegistration_USCORELimit, sizeof(SLICE__CUTS_x002eRegistration_USCORELimit), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_SLICE__CUTS_x002eRegistration_USCORELimit)
			return (SLICE__CUTS_x002eRegistration_USCORELimit *)a->soap_in(soap, tag, type);
	}
	if (!soap_inliteral(soap, tag, &(((xsd__anyType*)a)->__item)))
		return NULL;
	return a;
}

SOAP_FMAC5 SLICE__CUTS_x002eRegistration_USCORELimit * SOAP_FMAC6 soap_new_SLICE__CUTS_x002eRegistration_USCORELimit(struct soap *soap, int n)
{	return soap_instantiate_SLICE__CUTS_x002eRegistration_USCORELimit(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SLICE__CUTS_x002eRegistration_USCORELimit(struct soap *soap, SLICE__CUTS_x002eRegistration_USCORELimit *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 SLICE__CUTS_x002eRegistration_USCORELimit * SOAP_FMAC4 soap_instantiate_SLICE__CUTS_x002eRegistration_USCORELimit(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SLICE__CUTS_x002eRegistration_USCORELimit(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SLICE__CUTS_x002eRegistration_USCORELimit, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new SLICE__CUTS_x002eRegistration_USCORELimit;
		if (size)
			*size = sizeof(SLICE__CUTS_x002eRegistration_USCORELimit);
		((SLICE__CUTS_x002eRegistration_USCORELimit*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new SLICE__CUTS_x002eRegistration_USCORELimit[n];
		if (size)
			*size = n * sizeof(SLICE__CUTS_x002eRegistration_USCORELimit);
		for (int i = 0; i < n; i++)
			((SLICE__CUTS_x002eRegistration_USCORELimit*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (SLICE__CUTS_x002eRegistration_USCORELimit*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SLICE__CUTS_x002eRegistration_USCORELimit(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying SLICE__CUTS_x002eRegistration_USCORELimit %p -> %p\n", q, p));
	*(SLICE__CUTS_x002eRegistration_USCORELimit*)p = *(SLICE__CUTS_x002eRegistration_USCORELimit*)q;
}

void SLICE__CUTS_x002eRegistration_USCOREFailed::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

void SLICE__CUTS_x002eRegistration_USCOREFailed::soap_default(struct soap *soap)
{
	this->soap = soap;
	((xsd__anyType*)this)->__item = NULL;
	/* transient soap skipped */
}

int SLICE__CUTS_x002eRegistration_USCOREFailed::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_SLICE__CUTS_x002eRegistration_USCOREFailed);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int SLICE__CUTS_x002eRegistration_USCOREFailed::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_SLICE__CUTS_x002eRegistration_USCOREFailed(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SLICE__CUTS_x002eRegistration_USCOREFailed(struct soap *soap, const char *tag, int id, const SLICE__CUTS_x002eRegistration_USCOREFailed *a, const char *type)
{
	return soap_outliteral(soap, tag, &(((xsd__anyType*)a)->__item), "SLICE:CUTS.Registration_Failed");
}

void *SLICE__CUTS_x002eRegistration_USCOREFailed::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_SLICE__CUTS_x002eRegistration_USCOREFailed(soap, this, tag, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eRegistration_USCOREFailed * SOAP_FMAC4 soap_get_SLICE__CUTS_x002eRegistration_USCOREFailed(struct soap *soap, SLICE__CUTS_x002eRegistration_USCOREFailed *p, const char *tag, const char *type)
{
	if ((p = soap_in_SLICE__CUTS_x002eRegistration_USCOREFailed(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *SLICE__CUTS_x002eRegistration_USCOREFailed::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_SLICE__CUTS_x002eRegistration_USCOREFailed(soap, tag, this, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eRegistration_USCOREFailed * SOAP_FMAC4 soap_in_SLICE__CUTS_x002eRegistration_USCOREFailed(struct soap *soap, const char *tag, SLICE__CUTS_x002eRegistration_USCOREFailed *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (SLICE__CUTS_x002eRegistration_USCOREFailed *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_SLICE__CUTS_x002eRegistration_USCOREFailed, sizeof(SLICE__CUTS_x002eRegistration_USCOREFailed), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_SLICE__CUTS_x002eRegistration_USCOREFailed)
			return (SLICE__CUTS_x002eRegistration_USCOREFailed *)a->soap_in(soap, tag, type);
	}
	if (!soap_inliteral(soap, tag, &(((xsd__anyType*)a)->__item)))
		return NULL;
	return a;
}

SOAP_FMAC5 SLICE__CUTS_x002eRegistration_USCOREFailed * SOAP_FMAC6 soap_new_SLICE__CUTS_x002eRegistration_USCOREFailed(struct soap *soap, int n)
{	return soap_instantiate_SLICE__CUTS_x002eRegistration_USCOREFailed(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SLICE__CUTS_x002eRegistration_USCOREFailed(struct soap *soap, SLICE__CUTS_x002eRegistration_USCOREFailed *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 SLICE__CUTS_x002eRegistration_USCOREFailed * SOAP_FMAC4 soap_instantiate_SLICE__CUTS_x002eRegistration_USCOREFailed(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SLICE__CUTS_x002eRegistration_USCOREFailed(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SLICE__CUTS_x002eRegistration_USCOREFailed, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new SLICE__CUTS_x002eRegistration_USCOREFailed;
		if (size)
			*size = sizeof(SLICE__CUTS_x002eRegistration_USCOREFailed);
		((SLICE__CUTS_x002eRegistration_USCOREFailed*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new SLICE__CUTS_x002eRegistration_USCOREFailed[n];
		if (size)
			*size = n * sizeof(SLICE__CUTS_x002eRegistration_USCOREFailed);
		for (int i = 0; i < n; i++)
			((SLICE__CUTS_x002eRegistration_USCOREFailed*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (SLICE__CUTS_x002eRegistration_USCOREFailed*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SLICE__CUTS_x002eRegistration_USCOREFailed(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying SLICE__CUTS_x002eRegistration_USCOREFailed %p -> %p\n", q, p));
	*(SLICE__CUTS_x002eRegistration_USCOREFailed*)p = *(SLICE__CUTS_x002eRegistration_USCOREFailed*)q;
}

void SLICE__CUTS_x002eOperation_USCOREFailed::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

void SLICE__CUTS_x002eOperation_USCOREFailed::soap_default(struct soap *soap)
{
	this->soap = soap;
	((xsd__anyType*)this)->__item = NULL;
	/* transient soap skipped */
}

int SLICE__CUTS_x002eOperation_USCOREFailed::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_SLICE__CUTS_x002eOperation_USCOREFailed);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int SLICE__CUTS_x002eOperation_USCOREFailed::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_SLICE__CUTS_x002eOperation_USCOREFailed(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SLICE__CUTS_x002eOperation_USCOREFailed(struct soap *soap, const char *tag, int id, const SLICE__CUTS_x002eOperation_USCOREFailed *a, const char *type)
{
	return soap_outliteral(soap, tag, &(((xsd__anyType*)a)->__item), "SLICE:CUTS.Operation_Failed");
}

void *SLICE__CUTS_x002eOperation_USCOREFailed::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_SLICE__CUTS_x002eOperation_USCOREFailed(soap, this, tag, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eOperation_USCOREFailed * SOAP_FMAC4 soap_get_SLICE__CUTS_x002eOperation_USCOREFailed(struct soap *soap, SLICE__CUTS_x002eOperation_USCOREFailed *p, const char *tag, const char *type)
{
	if ((p = soap_in_SLICE__CUTS_x002eOperation_USCOREFailed(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *SLICE__CUTS_x002eOperation_USCOREFailed::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_SLICE__CUTS_x002eOperation_USCOREFailed(soap, tag, this, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eOperation_USCOREFailed * SOAP_FMAC4 soap_in_SLICE__CUTS_x002eOperation_USCOREFailed(struct soap *soap, const char *tag, SLICE__CUTS_x002eOperation_USCOREFailed *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (SLICE__CUTS_x002eOperation_USCOREFailed *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_SLICE__CUTS_x002eOperation_USCOREFailed, sizeof(SLICE__CUTS_x002eOperation_USCOREFailed), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_SLICE__CUTS_x002eOperation_USCOREFailed)
			return (SLICE__CUTS_x002eOperation_USCOREFailed *)a->soap_in(soap, tag, type);
	}
	if (!soap_inliteral(soap, tag, &(((xsd__anyType*)a)->__item)))
		return NULL;
	return a;
}

SOAP_FMAC5 SLICE__CUTS_x002eOperation_USCOREFailed * SOAP_FMAC6 soap_new_SLICE__CUTS_x002eOperation_USCOREFailed(struct soap *soap, int n)
{	return soap_instantiate_SLICE__CUTS_x002eOperation_USCOREFailed(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SLICE__CUTS_x002eOperation_USCOREFailed(struct soap *soap, SLICE__CUTS_x002eOperation_USCOREFailed *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 SLICE__CUTS_x002eOperation_USCOREFailed * SOAP_FMAC4 soap_instantiate_SLICE__CUTS_x002eOperation_USCOREFailed(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SLICE__CUTS_x002eOperation_USCOREFailed(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SLICE__CUTS_x002eOperation_USCOREFailed, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new SLICE__CUTS_x002eOperation_USCOREFailed;
		if (size)
			*size = sizeof(SLICE__CUTS_x002eOperation_USCOREFailed);
		((SLICE__CUTS_x002eOperation_USCOREFailed*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new SLICE__CUTS_x002eOperation_USCOREFailed[n];
		if (size)
			*size = n * sizeof(SLICE__CUTS_x002eOperation_USCOREFailed);
		for (int i = 0; i < n; i++)
			((SLICE__CUTS_x002eOperation_USCOREFailed*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (SLICE__CUTS_x002eOperation_USCOREFailed*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SLICE__CUTS_x002eOperation_USCOREFailed(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying SLICE__CUTS_x002eOperation_USCOREFailed %p -> %p\n", q, p));
	*(SLICE__CUTS_x002eOperation_USCOREFailed*)p = *(SLICE__CUTS_x002eOperation_USCOREFailed*)q;
}

void SLICE__CUTS_x002eID_USCORENot_USCOREFound::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

void SLICE__CUTS_x002eID_USCORENot_USCOREFound::soap_default(struct soap *soap)
{
	this->soap = soap;
	((xsd__anyType*)this)->__item = NULL;
	/* transient soap skipped */
}

int SLICE__CUTS_x002eID_USCORENot_USCOREFound::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_SLICE__CUTS_x002eID_USCORENot_USCOREFound);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int SLICE__CUTS_x002eID_USCORENot_USCOREFound::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_SLICE__CUTS_x002eID_USCORENot_USCOREFound(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SLICE__CUTS_x002eID_USCORENot_USCOREFound(struct soap *soap, const char *tag, int id, const SLICE__CUTS_x002eID_USCORENot_USCOREFound *a, const char *type)
{
	return soap_outliteral(soap, tag, &(((xsd__anyType*)a)->__item), "SLICE:CUTS.ID_Not_Found");
}

void *SLICE__CUTS_x002eID_USCORENot_USCOREFound::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_SLICE__CUTS_x002eID_USCORENot_USCOREFound(soap, this, tag, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eID_USCORENot_USCOREFound * SOAP_FMAC4 soap_get_SLICE__CUTS_x002eID_USCORENot_USCOREFound(struct soap *soap, SLICE__CUTS_x002eID_USCORENot_USCOREFound *p, const char *tag, const char *type)
{
	if ((p = soap_in_SLICE__CUTS_x002eID_USCORENot_USCOREFound(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *SLICE__CUTS_x002eID_USCORENot_USCOREFound::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_SLICE__CUTS_x002eID_USCORENot_USCOREFound(soap, tag, this, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eID_USCORENot_USCOREFound * SOAP_FMAC4 soap_in_SLICE__CUTS_x002eID_USCORENot_USCOREFound(struct soap *soap, const char *tag, SLICE__CUTS_x002eID_USCORENot_USCOREFound *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (SLICE__CUTS_x002eID_USCORENot_USCOREFound *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_SLICE__CUTS_x002eID_USCORENot_USCOREFound, sizeof(SLICE__CUTS_x002eID_USCORENot_USCOREFound), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_SLICE__CUTS_x002eID_USCORENot_USCOREFound)
			return (SLICE__CUTS_x002eID_USCORENot_USCOREFound *)a->soap_in(soap, tag, type);
	}
	if (!soap_inliteral(soap, tag, &(((xsd__anyType*)a)->__item)))
		return NULL;
	return a;
}

SOAP_FMAC5 SLICE__CUTS_x002eID_USCORENot_USCOREFound * SOAP_FMAC6 soap_new_SLICE__CUTS_x002eID_USCORENot_USCOREFound(struct soap *soap, int n)
{	return soap_instantiate_SLICE__CUTS_x002eID_USCORENot_USCOREFound(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SLICE__CUTS_x002eID_USCORENot_USCOREFound(struct soap *soap, SLICE__CUTS_x002eID_USCORENot_USCOREFound *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 SLICE__CUTS_x002eID_USCORENot_USCOREFound * SOAP_FMAC4 soap_instantiate_SLICE__CUTS_x002eID_USCORENot_USCOREFound(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SLICE__CUTS_x002eID_USCORENot_USCOREFound(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SLICE__CUTS_x002eID_USCORENot_USCOREFound, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new SLICE__CUTS_x002eID_USCORENot_USCOREFound;
		if (size)
			*size = sizeof(SLICE__CUTS_x002eID_USCORENot_USCOREFound);
		((SLICE__CUTS_x002eID_USCORENot_USCOREFound*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new SLICE__CUTS_x002eID_USCORENot_USCOREFound[n];
		if (size)
			*size = n * sizeof(SLICE__CUTS_x002eID_USCORENot_USCOREFound);
		for (int i = 0; i < n; i++)
			((SLICE__CUTS_x002eID_USCORENot_USCOREFound*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (SLICE__CUTS_x002eID_USCORENot_USCOREFound*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SLICE__CUTS_x002eID_USCORENot_USCOREFound(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying SLICE__CUTS_x002eID_USCORENot_USCOREFound %p -> %p\n", q, p));
	*(SLICE__CUTS_x002eID_USCORENot_USCOREFound*)p = *(SLICE__CUTS_x002eID_USCORENot_USCOREFound*)q;
}

void SLICE__CUTS_x002eBinding_USCOREFailed::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

void SLICE__CUTS_x002eBinding_USCOREFailed::soap_default(struct soap *soap)
{
	this->soap = soap;
	((xsd__anyType*)this)->__item = NULL;
	/* transient soap skipped */
}

int SLICE__CUTS_x002eBinding_USCOREFailed::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_SLICE__CUTS_x002eBinding_USCOREFailed);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int SLICE__CUTS_x002eBinding_USCOREFailed::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_SLICE__CUTS_x002eBinding_USCOREFailed(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SLICE__CUTS_x002eBinding_USCOREFailed(struct soap *soap, const char *tag, int id, const SLICE__CUTS_x002eBinding_USCOREFailed *a, const char *type)
{
	return soap_outliteral(soap, tag, &(((xsd__anyType*)a)->__item), "SLICE:CUTS.Binding_Failed");
}

void *SLICE__CUTS_x002eBinding_USCOREFailed::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_SLICE__CUTS_x002eBinding_USCOREFailed(soap, this, tag, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eBinding_USCOREFailed * SOAP_FMAC4 soap_get_SLICE__CUTS_x002eBinding_USCOREFailed(struct soap *soap, SLICE__CUTS_x002eBinding_USCOREFailed *p, const char *tag, const char *type)
{
	if ((p = soap_in_SLICE__CUTS_x002eBinding_USCOREFailed(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *SLICE__CUTS_x002eBinding_USCOREFailed::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_SLICE__CUTS_x002eBinding_USCOREFailed(soap, tag, this, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eBinding_USCOREFailed * SOAP_FMAC4 soap_in_SLICE__CUTS_x002eBinding_USCOREFailed(struct soap *soap, const char *tag, SLICE__CUTS_x002eBinding_USCOREFailed *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (SLICE__CUTS_x002eBinding_USCOREFailed *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_SLICE__CUTS_x002eBinding_USCOREFailed, sizeof(SLICE__CUTS_x002eBinding_USCOREFailed), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_SLICE__CUTS_x002eBinding_USCOREFailed)
			return (SLICE__CUTS_x002eBinding_USCOREFailed *)a->soap_in(soap, tag, type);
	}
	if (!soap_inliteral(soap, tag, &(((xsd__anyType*)a)->__item)))
		return NULL;
	return a;
}

SOAP_FMAC5 SLICE__CUTS_x002eBinding_USCOREFailed * SOAP_FMAC6 soap_new_SLICE__CUTS_x002eBinding_USCOREFailed(struct soap *soap, int n)
{	return soap_instantiate_SLICE__CUTS_x002eBinding_USCOREFailed(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SLICE__CUTS_x002eBinding_USCOREFailed(struct soap *soap, SLICE__CUTS_x002eBinding_USCOREFailed *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 SLICE__CUTS_x002eBinding_USCOREFailed * SOAP_FMAC4 soap_instantiate_SLICE__CUTS_x002eBinding_USCOREFailed(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SLICE__CUTS_x002eBinding_USCOREFailed(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SLICE__CUTS_x002eBinding_USCOREFailed, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new SLICE__CUTS_x002eBinding_USCOREFailed;
		if (size)
			*size = sizeof(SLICE__CUTS_x002eBinding_USCOREFailed);
		((SLICE__CUTS_x002eBinding_USCOREFailed*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new SLICE__CUTS_x002eBinding_USCOREFailed[n];
		if (size)
			*size = n * sizeof(SLICE__CUTS_x002eBinding_USCOREFailed);
		for (int i = 0; i < n; i++)
			((SLICE__CUTS_x002eBinding_USCOREFailed*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (SLICE__CUTS_x002eBinding_USCOREFailed*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SLICE__CUTS_x002eBinding_USCOREFailed(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying SLICE__CUTS_x002eBinding_USCOREFailed %p -> %p\n", q, p));
	*(SLICE__CUTS_x002eBinding_USCOREFailed*)p = *(SLICE__CUTS_x002eBinding_USCOREFailed*)q;
}

void xsd__unsignedShort::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

void xsd__unsignedShort::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_unsignedShort(soap, &((xsd__unsignedShort*)this)->__item);
	((xsd__anyType*)this)->__item = NULL;
	/* transient soap skipped */
}

int xsd__unsignedShort::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__unsignedShort);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int xsd__unsignedShort::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__unsignedShort(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedShort(struct soap *soap, const char *tag, int id, const xsd__unsignedShort *a, const char *type)
{
	return soap_out_unsignedShort(soap, tag, id, &(((xsd__unsignedShort*)a)->__item), "xsd:unsignedShort");
}

void *xsd__unsignedShort::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__unsignedShort(soap, this, tag, type);
}

SOAP_FMAC3 xsd__unsignedShort * SOAP_FMAC4 soap_get_xsd__unsignedShort(struct soap *soap, xsd__unsignedShort *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedShort(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *xsd__unsignedShort::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__unsignedShort(soap, tag, this, type);
}

SOAP_FMAC3 xsd__unsignedShort * SOAP_FMAC4 soap_in_xsd__unsignedShort(struct soap *soap, const char *tag, xsd__unsignedShort *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__unsignedShort *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__unsignedShort, sizeof(xsd__unsignedShort), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__unsignedShort)
			return (xsd__unsignedShort *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_unsignedShort(soap, tag, &(((xsd__unsignedShort*)a)->__item), "xsd:unsignedShort"))
		return NULL;
	return a;
}

SOAP_FMAC5 xsd__unsignedShort * SOAP_FMAC6 soap_new_xsd__unsignedShort(struct soap *soap, int n)
{	return soap_instantiate_xsd__unsignedShort(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_xsd__unsignedShort(struct soap *soap, xsd__unsignedShort *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 xsd__unsignedShort * SOAP_FMAC4 soap_instantiate_xsd__unsignedShort(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__unsignedShort(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__unsignedShort, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new xsd__unsignedShort;
		if (size)
			*size = sizeof(xsd__unsignedShort);
		((xsd__unsignedShort*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new xsd__unsignedShort[n];
		if (size)
			*size = n * sizeof(xsd__unsignedShort);
		for (int i = 0; i < n; i++)
			((xsd__unsignedShort*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__unsignedShort*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__unsignedShort(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__unsignedShort %p -> %p\n", q, p));
	*(xsd__unsignedShort*)p = *(xsd__unsignedShort*)q;
}

void xsd__unsignedInt::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

void xsd__unsignedInt::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_unsignedInt(soap, &((xsd__unsignedInt*)this)->__item);
	((xsd__anyType*)this)->__item = NULL;
	/* transient soap skipped */
}

int xsd__unsignedInt::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__unsignedInt);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int xsd__unsignedInt::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__unsignedInt(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedInt(struct soap *soap, const char *tag, int id, const xsd__unsignedInt *a, const char *type)
{
	return soap_out_unsignedInt(soap, tag, id, &(((xsd__unsignedInt*)a)->__item), "xsd:unsignedInt");
}

void *xsd__unsignedInt::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__unsignedInt(soap, this, tag, type);
}

SOAP_FMAC3 xsd__unsignedInt * SOAP_FMAC4 soap_get_xsd__unsignedInt(struct soap *soap, xsd__unsignedInt *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedInt(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *xsd__unsignedInt::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__unsignedInt(soap, tag, this, type);
}

SOAP_FMAC3 xsd__unsignedInt * SOAP_FMAC4 soap_in_xsd__unsignedInt(struct soap *soap, const char *tag, xsd__unsignedInt *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__unsignedInt *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__unsignedInt, sizeof(xsd__unsignedInt), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__unsignedInt)
			return (xsd__unsignedInt *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_unsignedInt(soap, tag, &(((xsd__unsignedInt*)a)->__item), "xsd:unsignedInt"))
		return NULL;
	return a;
}

SOAP_FMAC5 xsd__unsignedInt * SOAP_FMAC6 soap_new_xsd__unsignedInt(struct soap *soap, int n)
{	return soap_instantiate_xsd__unsignedInt(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_xsd__unsignedInt(struct soap *soap, xsd__unsignedInt *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 xsd__unsignedInt * SOAP_FMAC4 soap_instantiate_xsd__unsignedInt(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__unsignedInt(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__unsignedInt, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new xsd__unsignedInt;
		if (size)
			*size = sizeof(xsd__unsignedInt);
		((xsd__unsignedInt*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new xsd__unsignedInt[n];
		if (size)
			*size = n * sizeof(xsd__unsignedInt);
		for (int i = 0; i < n; i++)
			((xsd__unsignedInt*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__unsignedInt*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__unsignedInt(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__unsignedInt %p -> %p\n", q, p));
	*(xsd__unsignedInt*)p = *(xsd__unsignedInt*)q;
}

void xsd__string::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &((xsd__string*)this)->__item);
	/* transient soap skipped */
}

void xsd__string::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &((xsd__string*)this)->__item);
	((xsd__anyType*)this)->__item = NULL;
	/* transient soap skipped */
}

int xsd__string::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__string);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int xsd__string::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__string(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap *soap, const char *tag, int id, const xsd__string *a, const char *type)
{
	return soap_out_string(soap, tag, id, &(((xsd__string*)a)->__item), "xsd:string");
}

void *xsd__string::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__string(soap, this, tag, type);
}

SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_get_xsd__string(struct soap *soap, xsd__string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__string(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *xsd__string::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__string(soap, tag, this, type);
}

SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_in_xsd__string(struct soap *soap, const char *tag, xsd__string *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__string *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__string, sizeof(xsd__string), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__string)
			return (xsd__string *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_string(soap, tag, &(((xsd__string*)a)->__item), "xsd:string"))
		return NULL;
	return a;
}

SOAP_FMAC5 xsd__string * SOAP_FMAC6 soap_new_xsd__string(struct soap *soap, int n)
{	return soap_instantiate_xsd__string(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_xsd__string(struct soap *soap, xsd__string *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_instantiate_xsd__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new xsd__string;
		if (size)
			*size = sizeof(xsd__string);
		((xsd__string*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new xsd__string[n];
		if (size)
			*size = n * sizeof(xsd__string);
		for (int i = 0; i < n; i++)
			((xsd__string*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__string %p -> %p\n", q, p));
	*(xsd__string*)p = *(xsd__string*)q;
}

void xsd__int::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

void xsd__int::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &((xsd__int*)this)->__item);
	((xsd__anyType*)this)->__item = NULL;
	/* transient soap skipped */
}

int xsd__int::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__int);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int xsd__int::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__int(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int(struct soap *soap, const char *tag, int id, const xsd__int *a, const char *type)
{
	return soap_out_int(soap, tag, id, &(((xsd__int*)a)->__item), "xsd:int");
}

void *xsd__int::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__int(soap, this, tag, type);
}

SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_get_xsd__int(struct soap *soap, xsd__int *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__int(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *xsd__int::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__int(soap, tag, this, type);
}

SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_in_xsd__int(struct soap *soap, const char *tag, xsd__int *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__int *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__int, sizeof(xsd__int), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__int)
			return (xsd__int *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_int(soap, tag, &(((xsd__int*)a)->__item), "xsd:int"))
		return NULL;
	return a;
}

SOAP_FMAC5 xsd__int * SOAP_FMAC6 soap_new_xsd__int(struct soap *soap, int n)
{	return soap_instantiate_xsd__int(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_xsd__int(struct soap *soap, xsd__int *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_instantiate_xsd__int(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__int(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__int, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new xsd__int;
		if (size)
			*size = sizeof(xsd__int);
		((xsd__int*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new xsd__int[n];
		if (size)
			*size = n * sizeof(xsd__int);
		for (int i = 0; i < n; i++)
			((xsd__int*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__int*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__int(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__int %p -> %p\n", q, p));
	*(xsd__int*)p = *(xsd__int*)q;
}

void xsd__anyURI_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__anyURI(soap, &((xsd__anyURI_*)this)->__item);
	/* transient soap skipped */
}

void xsd__anyURI_::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__anyURI(soap, &((xsd__anyURI_*)this)->__item);
	((xsd__anyType*)this)->__item = NULL;
	/* transient soap skipped */
}

int xsd__anyURI_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__anyURI_);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int xsd__anyURI_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__anyURI_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI_(struct soap *soap, const char *tag, int id, const xsd__anyURI_ *a, const char *type)
{
	return soap_out_xsd__anyURI(soap, tag, id, &(((xsd__anyURI_*)a)->__item), "xsd:anyURI");
}

void *xsd__anyURI_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__anyURI_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__anyURI_ * SOAP_FMAC4 soap_get_xsd__anyURI_(struct soap *soap, xsd__anyURI_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyURI_(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *xsd__anyURI_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__anyURI_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__anyURI_ * SOAP_FMAC4 soap_in_xsd__anyURI_(struct soap *soap, const char *tag, xsd__anyURI_ *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__anyURI_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__anyURI_, sizeof(xsd__anyURI_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__anyURI_)
			return (xsd__anyURI_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__anyURI(soap, tag, &(((xsd__anyURI_*)a)->__item), "xsd:anyURI"))
		return NULL;
	return a;
}

SOAP_FMAC5 xsd__anyURI_ * SOAP_FMAC6 soap_new_xsd__anyURI_(struct soap *soap, int n)
{	return soap_instantiate_xsd__anyURI_(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_xsd__anyURI_(struct soap *soap, xsd__anyURI_ *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 xsd__anyURI_ * SOAP_FMAC4 soap_instantiate_xsd__anyURI_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__anyURI_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__anyURI_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new xsd__anyURI_;
		if (size)
			*size = sizeof(xsd__anyURI_);
		((xsd__anyURI_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new xsd__anyURI_[n];
		if (size)
			*size = n * sizeof(xsd__anyURI_);
		for (int i = 0; i < n; i++)
			((xsd__anyURI_*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__anyURI_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__anyURI_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__anyURI_ %p -> %p\n", q, p));
	*(xsd__anyURI_*)p = *(xsd__anyURI_*)q;
}

void xsd__ID_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__ID(soap, &((xsd__ID_*)this)->__item);
	/* transient soap skipped */
}

void xsd__ID_::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__ID(soap, &((xsd__ID_*)this)->__item);
	((xsd__anyType*)this)->__item = NULL;
	/* transient soap skipped */
}

int xsd__ID_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__ID_);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int xsd__ID_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__ID_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__ID_(struct soap *soap, const char *tag, int id, const xsd__ID_ *a, const char *type)
{
	return soap_out_xsd__ID(soap, tag, id, &(((xsd__ID_*)a)->__item), "xsd:ID");
}

void *xsd__ID_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__ID_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__ID_ * SOAP_FMAC4 soap_get_xsd__ID_(struct soap *soap, xsd__ID_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__ID_(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *xsd__ID_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__ID_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__ID_ * SOAP_FMAC4 soap_in_xsd__ID_(struct soap *soap, const char *tag, xsd__ID_ *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__ID_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__ID_, sizeof(xsd__ID_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__ID_)
			return (xsd__ID_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__ID(soap, tag, &(((xsd__ID_*)a)->__item), "xsd:ID"))
		return NULL;
	return a;
}

SOAP_FMAC5 xsd__ID_ * SOAP_FMAC6 soap_new_xsd__ID_(struct soap *soap, int n)
{	return soap_instantiate_xsd__ID_(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_xsd__ID_(struct soap *soap, xsd__ID_ *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 xsd__ID_ * SOAP_FMAC4 soap_instantiate_xsd__ID_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__ID_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__ID_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new xsd__ID_;
		if (size)
			*size = sizeof(xsd__ID_);
		((xsd__ID_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new xsd__ID_[n];
		if (size)
			*size = n * sizeof(xsd__ID_);
		for (int i = 0; i < n; i++)
			((xsd__ID_*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__ID_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__ID_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__ID_ %p -> %p\n", q, p));
	*(xsd__ID_*)p = *(xsd__ID_*)q;
}

void xsd__anyType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

void xsd__anyType::soap_default(struct soap *soap)
{
	this->soap = soap;
	((xsd__anyType*)this)->__item = NULL;
	/* transient soap skipped */
}

int xsd__anyType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__anyType);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int xsd__anyType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__anyType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyType(struct soap *soap, const char *tag, int id, const xsd__anyType *a, const char *type)
{
	return soap_outliteral(soap, tag, &(((xsd__anyType*)a)->__item), NULL);
}

void *xsd__anyType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__anyType(soap, this, tag, type);
}

SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_get_xsd__anyType(struct soap *soap, xsd__anyType *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyType(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *xsd__anyType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__anyType(soap, tag, this, type);
}

SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_in_xsd__anyType(struct soap *soap, const char *tag, xsd__anyType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__anyType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__anyType, sizeof(xsd__anyType), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__anyType)
			return (xsd__anyType *)a->soap_in(soap, tag, type);
	}
	if (!soap_inliteral(soap, tag, &(((xsd__anyType*)a)->__item)))
		return NULL;
	return a;
}

SOAP_FMAC5 xsd__anyType * SOAP_FMAC6 soap_new_xsd__anyType(struct soap *soap, int n)
{	return soap_instantiate_xsd__anyType(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_xsd__anyType(struct soap *soap, xsd__anyType *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_instantiate_xsd__anyType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__anyType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__anyType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (type && !soap_match_tag(soap, type, "xsd:ID"))
	{	cp->type = SOAP_TYPE_xsd__ID_;
		if (n < 0)
		{	cp->ptr = (void*)new xsd__ID_;
			if (size)
				*size = sizeof(xsd__ID_);
			((xsd__ID_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new xsd__ID_[n];
			if (size)
				*size = n * sizeof(xsd__ID_);
			for (int i = 0; i < n; i++)
				((xsd__ID_*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__ID_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:anyURI"))
	{	cp->type = SOAP_TYPE_xsd__anyURI_;
		if (n < 0)
		{	cp->ptr = (void*)new xsd__anyURI_;
			if (size)
				*size = sizeof(xsd__anyURI_);
			((xsd__anyURI_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new xsd__anyURI_[n];
			if (size)
				*size = n * sizeof(xsd__anyURI_);
			for (int i = 0; i < n; i++)
				((xsd__anyURI_*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__anyURI_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:int"))
	{	cp->type = SOAP_TYPE_xsd__int;
		if (n < 0)
		{	cp->ptr = (void*)new xsd__int;
			if (size)
				*size = sizeof(xsd__int);
			((xsd__int*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new xsd__int[n];
			if (size)
				*size = n * sizeof(xsd__int);
			for (int i = 0; i < n; i++)
				((xsd__int*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__int*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:string"))
	{	cp->type = SOAP_TYPE_xsd__string;
		if (n < 0)
		{	cp->ptr = (void*)new xsd__string;
			if (size)
				*size = sizeof(xsd__string);
			((xsd__string*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new xsd__string[n];
			if (size)
				*size = n * sizeof(xsd__string);
			for (int i = 0; i < n; i++)
				((xsd__string*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__string*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:unsignedInt"))
	{	cp->type = SOAP_TYPE_xsd__unsignedInt;
		if (n < 0)
		{	cp->ptr = (void*)new xsd__unsignedInt;
			if (size)
				*size = sizeof(xsd__unsignedInt);
			((xsd__unsignedInt*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new xsd__unsignedInt[n];
			if (size)
				*size = n * sizeof(xsd__unsignedInt);
			for (int i = 0; i < n; i++)
				((xsd__unsignedInt*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__unsignedInt*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:unsignedShort"))
	{	cp->type = SOAP_TYPE_xsd__unsignedShort;
		if (n < 0)
		{	cp->ptr = (void*)new xsd__unsignedShort;
			if (size)
				*size = sizeof(xsd__unsignedShort);
			((xsd__unsignedShort*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new xsd__unsignedShort[n];
			if (size)
				*size = n * sizeof(xsd__unsignedShort);
			for (int i = 0; i < n; i++)
				((xsd__unsignedShort*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__unsignedShort*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "SLICE:CUTS.Time_Stamp"))
	{	cp->type = SOAP_TYPE_SLICE__CUTS_x002eTime_USCOREStamp__;
		if (n < 0)
		{	cp->ptr = (void*)new SLICE__CUTS_x002eTime_USCOREStamp__;
			if (size)
				*size = sizeof(SLICE__CUTS_x002eTime_USCOREStamp__);
			((SLICE__CUTS_x002eTime_USCOREStamp__*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new SLICE__CUTS_x002eTime_USCOREStamp__[n];
			if (size)
				*size = n * sizeof(SLICE__CUTS_x002eTime_USCOREStamp__);
			for (int i = 0; i < n; i++)
				((SLICE__CUTS_x002eTime_USCOREStamp__*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (SLICE__CUTS_x002eTime_USCOREStamp__*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "CORBA:CORBA.completion_status"))
	{	cp->type = SOAP_TYPE_CORBA__CORBA_x002ecompletion_USCOREstatus_;
		if (n < 0)
		{	cp->ptr = (void*)new CORBA__CORBA_x002ecompletion_USCOREstatus_;
			if (size)
				*size = sizeof(CORBA__CORBA_x002ecompletion_USCOREstatus_);
			((CORBA__CORBA_x002ecompletion_USCOREstatus_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new CORBA__CORBA_x002ecompletion_USCOREstatus_[n];
			if (size)
				*size = n * sizeof(CORBA__CORBA_x002ecompletion_USCOREstatus_);
			for (int i = 0; i < n; i++)
				((CORBA__CORBA_x002ecompletion_USCOREstatus_*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (CORBA__CORBA_x002ecompletion_USCOREstatus_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "SLICE:CUTS.Binding_Failed"))
	{	cp->type = SOAP_TYPE_SLICE__CUTS_x002eBinding_USCOREFailed;
		if (n < 0)
		{	cp->ptr = (void*)new SLICE__CUTS_x002eBinding_USCOREFailed;
			if (size)
				*size = sizeof(SLICE__CUTS_x002eBinding_USCOREFailed);
			((SLICE__CUTS_x002eBinding_USCOREFailed*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new SLICE__CUTS_x002eBinding_USCOREFailed[n];
			if (size)
				*size = n * sizeof(SLICE__CUTS_x002eBinding_USCOREFailed);
			for (int i = 0; i < n; i++)
				((SLICE__CUTS_x002eBinding_USCOREFailed*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (SLICE__CUTS_x002eBinding_USCOREFailed*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "SLICE:CUTS.ID_Not_Found"))
	{	cp->type = SOAP_TYPE_SLICE__CUTS_x002eID_USCORENot_USCOREFound;
		if (n < 0)
		{	cp->ptr = (void*)new SLICE__CUTS_x002eID_USCORENot_USCOREFound;
			if (size)
				*size = sizeof(SLICE__CUTS_x002eID_USCORENot_USCOREFound);
			((SLICE__CUTS_x002eID_USCORENot_USCOREFound*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new SLICE__CUTS_x002eID_USCORENot_USCOREFound[n];
			if (size)
				*size = n * sizeof(SLICE__CUTS_x002eID_USCORENot_USCOREFound);
			for (int i = 0; i < n; i++)
				((SLICE__CUTS_x002eID_USCORENot_USCOREFound*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (SLICE__CUTS_x002eID_USCORENot_USCOREFound*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "SLICE:CUTS.Operation_Failed"))
	{	cp->type = SOAP_TYPE_SLICE__CUTS_x002eOperation_USCOREFailed;
		if (n < 0)
		{	cp->ptr = (void*)new SLICE__CUTS_x002eOperation_USCOREFailed;
			if (size)
				*size = sizeof(SLICE__CUTS_x002eOperation_USCOREFailed);
			((SLICE__CUTS_x002eOperation_USCOREFailed*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new SLICE__CUTS_x002eOperation_USCOREFailed[n];
			if (size)
				*size = n * sizeof(SLICE__CUTS_x002eOperation_USCOREFailed);
			for (int i = 0; i < n; i++)
				((SLICE__CUTS_x002eOperation_USCOREFailed*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (SLICE__CUTS_x002eOperation_USCOREFailed*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "SLICE:CUTS.Registration_Failed"))
	{	cp->type = SOAP_TYPE_SLICE__CUTS_x002eRegistration_USCOREFailed;
		if (n < 0)
		{	cp->ptr = (void*)new SLICE__CUTS_x002eRegistration_USCOREFailed;
			if (size)
				*size = sizeof(SLICE__CUTS_x002eRegistration_USCOREFailed);
			((SLICE__CUTS_x002eRegistration_USCOREFailed*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new SLICE__CUTS_x002eRegistration_USCOREFailed[n];
			if (size)
				*size = n * sizeof(SLICE__CUTS_x002eRegistration_USCOREFailed);
			for (int i = 0; i < n; i++)
				((SLICE__CUTS_x002eRegistration_USCOREFailed*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (SLICE__CUTS_x002eRegistration_USCOREFailed*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "SLICE:CUTS.Registration_Limit"))
	{	cp->type = SOAP_TYPE_SLICE__CUTS_x002eRegistration_USCORELimit;
		if (n < 0)
		{	cp->ptr = (void*)new SLICE__CUTS_x002eRegistration_USCORELimit;
			if (size)
				*size = sizeof(SLICE__CUTS_x002eRegistration_USCORELimit);
			((SLICE__CUTS_x002eRegistration_USCORELimit*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new SLICE__CUTS_x002eRegistration_USCORELimit[n];
			if (size)
				*size = n * sizeof(SLICE__CUTS_x002eRegistration_USCORELimit);
			for (int i = 0; i < n; i++)
				((SLICE__CUTS_x002eRegistration_USCORELimit*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (SLICE__CUTS_x002eRegistration_USCORELimit*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "SLICE:CUTS.Component_Registration"))
	{	cp->type = SOAP_TYPE_SLICE__CUTS_x002eComponent_USCORERegistration;
		if (n < 0)
		{	cp->ptr = (void*)new SLICE__CUTS_x002eComponent_USCORERegistration;
			if (size)
				*size = sizeof(SLICE__CUTS_x002eComponent_USCORERegistration);
			((SLICE__CUTS_x002eComponent_USCORERegistration*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new SLICE__CUTS_x002eComponent_USCORERegistration[n];
			if (size)
				*size = n * sizeof(SLICE__CUTS_x002eComponent_USCORERegistration);
			for (int i = 0; i < n; i++)
				((SLICE__CUTS_x002eComponent_USCORERegistration*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (SLICE__CUTS_x002eComponent_USCORERegistration*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "SLICE:CUTS.Path_Element"))
	{	cp->type = SOAP_TYPE_SLICE__CUTS_x002ePath_USCOREElement;
		if (n < 0)
		{	cp->ptr = (void*)new SLICE__CUTS_x002ePath_USCOREElement;
			if (size)
				*size = sizeof(SLICE__CUTS_x002ePath_USCOREElement);
			((SLICE__CUTS_x002ePath_USCOREElement*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new SLICE__CUTS_x002ePath_USCOREElement[n];
			if (size)
				*size = n * sizeof(SLICE__CUTS_x002ePath_USCOREElement);
			for (int i = 0; i < n; i++)
				((SLICE__CUTS_x002ePath_USCOREElement*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (SLICE__CUTS_x002ePath_USCOREElement*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "SLICE:CUTS.Time_Info"))
	{	cp->type = SOAP_TYPE_SLICE__CUTS_x002eTime_USCOREInfo;
		if (n < 0)
		{	cp->ptr = (void*)new SLICE__CUTS_x002eTime_USCOREInfo;
			if (size)
				*size = sizeof(SLICE__CUTS_x002eTime_USCOREInfo);
			((SLICE__CUTS_x002eTime_USCOREInfo*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new SLICE__CUTS_x002eTime_USCOREInfo[n];
			if (size)
				*size = n * sizeof(SLICE__CUTS_x002eTime_USCOREInfo);
			for (int i = 0; i < n; i++)
				((SLICE__CUTS_x002eTime_USCOREInfo*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (SLICE__CUTS_x002eTime_USCOREInfo*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "SLICE:CUTS.Event_Time_Info"))
	{	cp->type = SOAP_TYPE_SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo;
		if (n < 0)
		{	cp->ptr = (void*)new SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo;
			if (size)
				*size = sizeof(SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo);
			((SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo[n];
			if (size)
				*size = n * sizeof(SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo);
			for (int i = 0; i < n; i++)
				((SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "SLICE:CUTS.Time_Sample"))
	{	cp->type = SOAP_TYPE_SLICE__CUTS_x002eTime_USCORESample;
		if (n < 0)
		{	cp->ptr = (void*)new SLICE__CUTS_x002eTime_USCORESample;
			if (size)
				*size = sizeof(SLICE__CUTS_x002eTime_USCORESample);
			((SLICE__CUTS_x002eTime_USCORESample*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new SLICE__CUTS_x002eTime_USCORESample[n];
			if (size)
				*size = n * sizeof(SLICE__CUTS_x002eTime_USCORESample);
			for (int i = 0; i < n; i++)
				((SLICE__CUTS_x002eTime_USCORESample*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (SLICE__CUTS_x002eTime_USCORESample*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "SLICE:CUTS.Action_Measurement"))
	{	cp->type = SOAP_TYPE_SLICE__CUTS_x002eAction_USCOREMeasurement;
		if (n < 0)
		{	cp->ptr = (void*)new SLICE__CUTS_x002eAction_USCOREMeasurement;
			if (size)
				*size = sizeof(SLICE__CUTS_x002eAction_USCOREMeasurement);
			((SLICE__CUTS_x002eAction_USCOREMeasurement*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new SLICE__CUTS_x002eAction_USCOREMeasurement[n];
			if (size)
				*size = n * sizeof(SLICE__CUTS_x002eAction_USCOREMeasurement);
			for (int i = 0; i < n; i++)
				((SLICE__CUTS_x002eAction_USCOREMeasurement*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (SLICE__CUTS_x002eAction_USCOREMeasurement*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "SLICE:CUTS.Worker_Measurement"))
	{	cp->type = SOAP_TYPE_SLICE__CUTS_x002eWorker_USCOREMeasurement;
		if (n < 0)
		{	cp->ptr = (void*)new SLICE__CUTS_x002eWorker_USCOREMeasurement;
			if (size)
				*size = sizeof(SLICE__CUTS_x002eWorker_USCOREMeasurement);
			((SLICE__CUTS_x002eWorker_USCOREMeasurement*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new SLICE__CUTS_x002eWorker_USCOREMeasurement[n];
			if (size)
				*size = n * sizeof(SLICE__CUTS_x002eWorker_USCOREMeasurement);
			for (int i = 0; i < n; i++)
				((SLICE__CUTS_x002eWorker_USCOREMeasurement*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (SLICE__CUTS_x002eWorker_USCOREMeasurement*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "SLICE:CUTS.Exit_Point_Time"))
	{	cp->type = SOAP_TYPE_SLICE__CUTS_x002eExit_USCOREPoint_USCORETime;
		if (n < 0)
		{	cp->ptr = (void*)new SLICE__CUTS_x002eExit_USCOREPoint_USCORETime;
			if (size)
				*size = sizeof(SLICE__CUTS_x002eExit_USCOREPoint_USCORETime);
			((SLICE__CUTS_x002eExit_USCOREPoint_USCORETime*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new SLICE__CUTS_x002eExit_USCOREPoint_USCORETime[n];
			if (size)
				*size = n * sizeof(SLICE__CUTS_x002eExit_USCOREPoint_USCORETime);
			for (int i = 0; i < n; i++)
				((SLICE__CUTS_x002eExit_USCOREPoint_USCORETime*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (SLICE__CUTS_x002eExit_USCOREPoint_USCORETime*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "SLICE:CUTS.Mapped_Port_Measurement"))
	{	cp->type = SOAP_TYPE_SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement;
		if (n < 0)
		{	cp->ptr = (void*)new SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement;
			if (size)
				*size = sizeof(SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement);
			((SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement[n];
			if (size)
				*size = n * sizeof(SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement);
			for (int i = 0; i < n; i++)
				((SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "SLICE:CUTS.Port_Measurement"))
	{	cp->type = SOAP_TYPE_SLICE__CUTS_x002ePort_USCOREMeasurement;
		if (n < 0)
		{	cp->ptr = (void*)new SLICE__CUTS_x002ePort_USCOREMeasurement;
			if (size)
				*size = sizeof(SLICE__CUTS_x002ePort_USCOREMeasurement);
			((SLICE__CUTS_x002ePort_USCOREMeasurement*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new SLICE__CUTS_x002ePort_USCOREMeasurement[n];
			if (size)
				*size = n * sizeof(SLICE__CUTS_x002ePort_USCOREMeasurement);
			for (int i = 0; i < n; i++)
				((SLICE__CUTS_x002ePort_USCOREMeasurement*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (SLICE__CUTS_x002ePort_USCOREMeasurement*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "SLICE:CUTS.Benchmark_Data"))
	{	cp->type = SOAP_TYPE_SLICE__CUTS_x002eBenchmark_USCOREData;
		if (n < 0)
		{	cp->ptr = (void*)new SLICE__CUTS_x002eBenchmark_USCOREData;
			if (size)
				*size = sizeof(SLICE__CUTS_x002eBenchmark_USCOREData);
			((SLICE__CUTS_x002eBenchmark_USCOREData*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new SLICE__CUTS_x002eBenchmark_USCOREData[n];
			if (size)
				*size = n * sizeof(SLICE__CUTS_x002eBenchmark_USCOREData);
			for (int i = 0; i < n; i++)
				((SLICE__CUTS_x002eBenchmark_USCOREData*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (SLICE__CUTS_x002eBenchmark_USCOREData*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "SLICE:CUTS.Collection_Statistics"))
	{	cp->type = SOAP_TYPE_SLICE__CUTS_x002eCollection_USCOREStatistics;
		if (n < 0)
		{	cp->ptr = (void*)new SLICE__CUTS_x002eCollection_USCOREStatistics;
			if (size)
				*size = sizeof(SLICE__CUTS_x002eCollection_USCOREStatistics);
			((SLICE__CUTS_x002eCollection_USCOREStatistics*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new SLICE__CUTS_x002eCollection_USCOREStatistics[n];
			if (size)
				*size = n * sizeof(SLICE__CUTS_x002eCollection_USCOREStatistics);
			for (int i = 0; i < n; i++)
				((SLICE__CUTS_x002eCollection_USCOREStatistics*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (SLICE__CUTS_x002eCollection_USCOREStatistics*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "CORBA:ObjectReference"))
	{	cp->type = SOAP_TYPE_CORBA__ObjectReference;
		if (n < 0)
		{	cp->ptr = (void*)new CORBA__ObjectReference;
			if (size)
				*size = sizeof(CORBA__ObjectReference);
			((CORBA__ObjectReference*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new CORBA__ObjectReference[n];
			if (size)
				*size = n * sizeof(CORBA__ObjectReference);
			for (int i = 0; i < n; i++)
				((CORBA__ObjectReference*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (CORBA__ObjectReference*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "CORBA:CORBA.TypeCode"))
	{	cp->type = SOAP_TYPE_CORBA__CORBA_x002eTypeCode;
		if (n < 0)
		{	cp->ptr = (void*)new CORBA__CORBA_x002eTypeCode;
			if (size)
				*size = sizeof(CORBA__CORBA_x002eTypeCode);
			((CORBA__CORBA_x002eTypeCode*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new CORBA__CORBA_x002eTypeCode[n];
			if (size)
				*size = n * sizeof(CORBA__CORBA_x002eTypeCode);
			for (int i = 0; i < n; i++)
				((CORBA__CORBA_x002eTypeCode*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (CORBA__CORBA_x002eTypeCode*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "CORBA:CORBA.Any"))
	{	cp->type = SOAP_TYPE_CORBA__CORBA_x002eAny;
		if (n < 0)
		{	cp->ptr = (void*)new CORBA__CORBA_x002eAny;
			if (size)
				*size = sizeof(CORBA__CORBA_x002eAny);
			((CORBA__CORBA_x002eAny*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new CORBA__CORBA_x002eAny[n];
			if (size)
				*size = n * sizeof(CORBA__CORBA_x002eAny);
			for (int i = 0; i < n; i++)
				((CORBA__CORBA_x002eAny*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (CORBA__CORBA_x002eAny*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "CORBA:CORBA.SystemException"))
	{	cp->type = SOAP_TYPE_CORBA__CORBA_x002eSystemException;
		if (n < 0)
		{	cp->ptr = (void*)new CORBA__CORBA_x002eSystemException;
			if (size)
				*size = sizeof(CORBA__CORBA_x002eSystemException);
			((CORBA__CORBA_x002eSystemException*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new CORBA__CORBA_x002eSystemException[n];
			if (size)
				*size = n * sizeof(CORBA__CORBA_x002eSystemException);
			for (int i = 0; i < n; i++)
				((CORBA__CORBA_x002eSystemException*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (CORBA__CORBA_x002eSystemException*)cp->ptr;
	}
	if (arrayType && !soap_match_tag(soap, arrayType, "SLICE:CUTS.Path_Element"))
	{	cp->type = SOAP_TYPE_CUTS_x002e_USCORESE_USCOREPath_USCORESequence;
		if (n < 0)
		{	cp->ptr = (void*)new CUTS_x002e_USCORESE_USCOREPath_USCORESequence;
			if (size)
				*size = sizeof(CUTS_x002e_USCORESE_USCOREPath_USCORESequence);
			((CUTS_x002e_USCORESE_USCOREPath_USCORESequence*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new CUTS_x002e_USCORESE_USCOREPath_USCORESequence[n];
			if (size)
				*size = n * sizeof(CUTS_x002e_USCORESE_USCOREPath_USCORESequence);
			for (int i = 0; i < n; i++)
				((CUTS_x002e_USCORESE_USCOREPath_USCORESequence*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (CUTS_x002e_USCORESE_USCOREPath_USCORESequence*)cp->ptr;
	}
	if (arrayType && !soap_match_tag(soap, arrayType, "SLICE:CUTS.Action_Measurement"))
	{	cp->type = SOAP_TYPE_CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq;
		if (n < 0)
		{	cp->ptr = (void*)new CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq;
			if (size)
				*size = sizeof(CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq);
			((CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq[n];
			if (size)
				*size = n * sizeof(CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq);
			for (int i = 0; i < n; i++)
				((CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq*)cp->ptr;
	}
	if (arrayType && !soap_match_tag(soap, arrayType, "SLICE:CUTS.Worker_Measurement"))
	{	cp->type = SOAP_TYPE_CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq;
		if (n < 0)
		{	cp->ptr = (void*)new CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq;
			if (size)
				*size = sizeof(CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq);
			((CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq[n];
			if (size)
				*size = n * sizeof(CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq);
			for (int i = 0; i < n; i++)
				((CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq*)cp->ptr;
	}
	if (arrayType && !soap_match_tag(soap, arrayType, "SLICE:CUTS.Exit_Point_Time"))
	{	cp->type = SOAP_TYPE_CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq;
		if (n < 0)
		{	cp->ptr = (void*)new CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq;
			if (size)
				*size = sizeof(CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq);
			((CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq[n];
			if (size)
				*size = n * sizeof(CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq);
			for (int i = 0; i < n; i++)
				((CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq*)cp->ptr;
	}
	if (arrayType && !soap_match_tag(soap, arrayType, "SLICE:CUTS.Mapped_Port_Measurement"))
	{	cp->type = SOAP_TYPE_CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq;
		if (n < 0)
		{	cp->ptr = (void*)new CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq;
			if (size)
				*size = sizeof(CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq);
			((CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq[n];
			if (size)
				*size = n * sizeof(CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq);
			for (int i = 0; i < n; i++)
				((CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq*)cp->ptr;
	}
	if (arrayType && !soap_match_tag(soap, arrayType, "SLICE:CUTS.Port_Measurement"))
	{	cp->type = SOAP_TYPE_CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq;
		if (n < 0)
		{	cp->ptr = (void*)new CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq;
			if (size)
				*size = sizeof(CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq);
			((CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq[n];
			if (size)
				*size = n * sizeof(CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq);
			for (int i = 0; i < n; i++)
				((CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq*)cp->ptr;
	}
	if (n < 0)
	{	cp->ptr = (void*)new xsd__anyType;
		if (size)
			*size = sizeof(xsd__anyType);
		((xsd__anyType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new xsd__anyType[n];
		if (size)
			*size = n * sizeof(xsd__anyType);
		for (int i = 0; i < n; i++)
			((xsd__anyType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__anyType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__anyType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__anyType %p -> %p\n", q, p));
	*(xsd__anyType*)p = *(xsd__anyType*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type);
	soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, "");
	soap_out_string(soap, "faultstring", -1, &a->faultstring, "");
	soap_out_string(soap, "faultactor", -1, &a->faultactor, "");
	soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, "");
	soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, "");
	soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, "");
	soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, "");
	soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, "");
	soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	short soap_flag_faultcode = 1, soap_flag_faultstring = 1, soap_flag_faultactor = 1, soap_flag_detail = 1, soap_flag_SOAP_ENV__Code = 1, soap_flag_SOAP_ENV__Reason = 1, soap_flag_SOAP_ENV__Node = 1, soap_flag_SOAP_ENV__Role = 1, soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Fault * SOAP_FMAC6 soap_new_SOAP_ENV__Fault(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault;
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault[n];
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type);
	soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	short soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Reason * SOAP_FMAC6 soap_new_SOAP_ENV__Reason(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason;
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason[n];
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type);
	soap_putelement(soap, a->fault, "fault", -1, a->__type);
	soap_outliteral(soap, "-any", &a->__any, NULL);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	short soap_flag_fault = 1, soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Detail * SOAP_FMAC6 soap_new_SOAP_ENV__Detail(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail;
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail[n];
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type);
	soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, "");
	soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	short soap_flag_SOAP_ENV__Value = 1, soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Code * SOAP_FMAC6 soap_new_SOAP_ENV__Code(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Code;
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Code[n];
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	/* transient dummy skipped */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	/* transient dummy skipped */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type);
	/* transient dummy skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
		/* transient dummy skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Header * SOAP_FMAC6 soap_new_SOAP_ENV__Header(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Header;
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Header[n];
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SLICE__bind_USCOREto_USCOREpath(struct soap *soap, const struct SLICE__bind_USCOREto_USCOREpath *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerToCUTS_x002e_USCORESE_USCOREPath_USCORESequence(soap, &a->path);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SLICE__bind_USCOREto_USCOREpath(struct soap *soap, struct SLICE__bind_USCOREto_USCOREpath *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->path = NULL;
	soap_default_unsignedShort(soap, &a->flags);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SLICE__bind_USCOREto_USCOREpath(struct soap *soap, const struct SLICE__bind_USCOREto_USCOREpath *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SLICE__bind_USCOREto_USCOREpath);
	if (soap_out_SLICE__bind_USCOREto_USCOREpath(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SLICE__bind_USCOREto_USCOREpath(struct soap *soap, const char *tag, int id, const struct SLICE__bind_USCOREto_USCOREpath *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SLICE__bind_USCOREto_USCOREpath), type);
	soap_out_PointerToCUTS_x002e_USCORESE_USCOREPath_USCORESequence(soap, "path", -1, &a->path, "");
	soap_out_unsignedShort(soap, "flags", -1, &a->flags, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SLICE__bind_USCOREto_USCOREpath * SOAP_FMAC4 soap_get_SLICE__bind_USCOREto_USCOREpath(struct soap *soap, struct SLICE__bind_USCOREto_USCOREpath *p, const char *tag, const char *type)
{
	if ((p = soap_in_SLICE__bind_USCOREto_USCOREpath(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SLICE__bind_USCOREto_USCOREpath * SOAP_FMAC4 soap_in_SLICE__bind_USCOREto_USCOREpath(struct soap *soap, const char *tag, struct SLICE__bind_USCOREto_USCOREpath *a, const char *type)
{
	short soap_flag_path = 1, soap_flag_flags = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SLICE__bind_USCOREto_USCOREpath *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SLICE__bind_USCOREto_USCOREpath, sizeof(struct SLICE__bind_USCOREto_USCOREpath), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SLICE__bind_USCOREto_USCOREpath(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_path && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToCUTS_x002e_USCORESE_USCOREPath_USCORESequence(soap, "path", &a->path, "SLICE:CUTS.Path_Element"))
				{	soap_flag_path--;
					continue;
				}
			if (soap_flag_flags && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedShort(soap, "flags", &a->flags, "xsd:unsignedShort"))
				{	soap_flag_flags--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_flags > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SLICE__bind_USCOREto_USCOREpath *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_SLICE__bind_USCOREto_USCOREpath, 0, sizeof(struct SLICE__bind_USCOREto_USCOREpath), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SLICE__bind_USCOREto_USCOREpath * SOAP_FMAC6 soap_new_SLICE__bind_USCOREto_USCOREpath(struct soap *soap, int n)
{	return soap_instantiate_SLICE__bind_USCOREto_USCOREpath(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SLICE__bind_USCOREto_USCOREpath(struct soap *soap, struct SLICE__bind_USCOREto_USCOREpath *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SLICE__bind_USCOREto_USCOREpath * SOAP_FMAC4 soap_instantiate_SLICE__bind_USCOREto_USCOREpath(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SLICE__bind_USCOREto_USCOREpath(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SLICE__bind_USCOREto_USCOREpath, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SLICE__bind_USCOREto_USCOREpath;
		if (size)
			*size = sizeof(struct SLICE__bind_USCOREto_USCOREpath);
	}
	else
	{	cp->ptr = (void*)new struct SLICE__bind_USCOREto_USCOREpath[n];
		if (size)
			*size = n * sizeof(struct SLICE__bind_USCOREto_USCOREpath);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SLICE__bind_USCOREto_USCOREpath*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SLICE__bind_USCOREto_USCOREpath(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SLICE__bind_USCOREto_USCOREpath %p -> %p\n", q, p));
	*(struct SLICE__bind_USCOREto_USCOREpath*)p = *(struct SLICE__bind_USCOREto_USCOREpath*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SLICE__bind_USCOREto_USCOREpathResponse(struct soap *soap, const struct SLICE__bind_USCOREto_USCOREpathResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SLICE__bind_USCOREto_USCOREpathResponse(struct soap *soap, struct SLICE__bind_USCOREto_USCOREpathResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->_USCOREreturn);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SLICE__bind_USCOREto_USCOREpathResponse(struct soap *soap, const struct SLICE__bind_USCOREto_USCOREpathResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SLICE__bind_USCOREto_USCOREpathResponse);
	if (soap_out_SLICE__bind_USCOREto_USCOREpathResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SLICE__bind_USCOREto_USCOREpathResponse(struct soap *soap, const char *tag, int id, const struct SLICE__bind_USCOREto_USCOREpathResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SLICE__bind_USCOREto_USCOREpathResponse), type);
	soap_element_result(soap, "_return");
	soap_out_int(soap, "_return", -1, &a->_USCOREreturn, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SLICE__bind_USCOREto_USCOREpathResponse * SOAP_FMAC4 soap_get_SLICE__bind_USCOREto_USCOREpathResponse(struct soap *soap, struct SLICE__bind_USCOREto_USCOREpathResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_SLICE__bind_USCOREto_USCOREpathResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SLICE__bind_USCOREto_USCOREpathResponse * SOAP_FMAC4 soap_in_SLICE__bind_USCOREto_USCOREpathResponse(struct soap *soap, const char *tag, struct SLICE__bind_USCOREto_USCOREpathResponse *a, const char *type)
{
	short soap_flag__USCOREreturn = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SLICE__bind_USCOREto_USCOREpathResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SLICE__bind_USCOREto_USCOREpathResponse, sizeof(struct SLICE__bind_USCOREto_USCOREpathResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SLICE__bind_USCOREto_USCOREpathResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__USCOREreturn && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "_return", &a->_USCOREreturn, "xsd:int"))
				{	soap_flag__USCOREreturn--;
					continue;
				}
			soap_check_result(soap, "_return");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__USCOREreturn > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SLICE__bind_USCOREto_USCOREpathResponse *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_SLICE__bind_USCOREto_USCOREpathResponse, 0, sizeof(struct SLICE__bind_USCOREto_USCOREpathResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SLICE__bind_USCOREto_USCOREpathResponse * SOAP_FMAC6 soap_new_SLICE__bind_USCOREto_USCOREpathResponse(struct soap *soap, int n)
{	return soap_instantiate_SLICE__bind_USCOREto_USCOREpathResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SLICE__bind_USCOREto_USCOREpathResponse(struct soap *soap, struct SLICE__bind_USCOREto_USCOREpathResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SLICE__bind_USCOREto_USCOREpathResponse * SOAP_FMAC4 soap_instantiate_SLICE__bind_USCOREto_USCOREpathResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SLICE__bind_USCOREto_USCOREpathResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SLICE__bind_USCOREto_USCOREpathResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SLICE__bind_USCOREto_USCOREpathResponse;
		if (size)
			*size = sizeof(struct SLICE__bind_USCOREto_USCOREpathResponse);
	}
	else
	{	cp->ptr = (void*)new struct SLICE__bind_USCOREto_USCOREpathResponse[n];
		if (size)
			*size = n * sizeof(struct SLICE__bind_USCOREto_USCOREpathResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SLICE__bind_USCOREto_USCOREpathResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SLICE__bind_USCOREto_USCOREpathResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SLICE__bind_USCOREto_USCOREpathResponse %p -> %p\n", q, p));
	*(struct SLICE__bind_USCOREto_USCOREpathResponse*)p = *(struct SLICE__bind_USCOREto_USCOREpathResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SLICE__unbind_USCOREto_USCOREpath(struct soap *soap, const struct SLICE__unbind_USCOREto_USCOREpath *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SLICE__unbind_USCOREto_USCOREpath(struct soap *soap, struct SLICE__unbind_USCOREto_USCOREpath *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->path_USCOREid);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SLICE__unbind_USCOREto_USCOREpath(struct soap *soap, const struct SLICE__unbind_USCOREto_USCOREpath *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SLICE__unbind_USCOREto_USCOREpath);
	if (soap_out_SLICE__unbind_USCOREto_USCOREpath(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SLICE__unbind_USCOREto_USCOREpath(struct soap *soap, const char *tag, int id, const struct SLICE__unbind_USCOREto_USCOREpath *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SLICE__unbind_USCOREto_USCOREpath), type);
	soap_out_int(soap, "path_id", -1, &a->path_USCOREid, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SLICE__unbind_USCOREto_USCOREpath * SOAP_FMAC4 soap_get_SLICE__unbind_USCOREto_USCOREpath(struct soap *soap, struct SLICE__unbind_USCOREto_USCOREpath *p, const char *tag, const char *type)
{
	if ((p = soap_in_SLICE__unbind_USCOREto_USCOREpath(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SLICE__unbind_USCOREto_USCOREpath * SOAP_FMAC4 soap_in_SLICE__unbind_USCOREto_USCOREpath(struct soap *soap, const char *tag, struct SLICE__unbind_USCOREto_USCOREpath *a, const char *type)
{
	short soap_flag_path_USCOREid = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SLICE__unbind_USCOREto_USCOREpath *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SLICE__unbind_USCOREto_USCOREpath, sizeof(struct SLICE__unbind_USCOREto_USCOREpath), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SLICE__unbind_USCOREto_USCOREpath(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_path_USCOREid && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "path_id", &a->path_USCOREid, "xsd:int"))
				{	soap_flag_path_USCOREid--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_path_USCOREid > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SLICE__unbind_USCOREto_USCOREpath *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_SLICE__unbind_USCOREto_USCOREpath, 0, sizeof(struct SLICE__unbind_USCOREto_USCOREpath), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SLICE__unbind_USCOREto_USCOREpath * SOAP_FMAC6 soap_new_SLICE__unbind_USCOREto_USCOREpath(struct soap *soap, int n)
{	return soap_instantiate_SLICE__unbind_USCOREto_USCOREpath(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SLICE__unbind_USCOREto_USCOREpath(struct soap *soap, struct SLICE__unbind_USCOREto_USCOREpath *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SLICE__unbind_USCOREto_USCOREpath * SOAP_FMAC4 soap_instantiate_SLICE__unbind_USCOREto_USCOREpath(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SLICE__unbind_USCOREto_USCOREpath(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SLICE__unbind_USCOREto_USCOREpath, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SLICE__unbind_USCOREto_USCOREpath;
		if (size)
			*size = sizeof(struct SLICE__unbind_USCOREto_USCOREpath);
	}
	else
	{	cp->ptr = (void*)new struct SLICE__unbind_USCOREto_USCOREpath[n];
		if (size)
			*size = n * sizeof(struct SLICE__unbind_USCOREto_USCOREpath);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SLICE__unbind_USCOREto_USCOREpath*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SLICE__unbind_USCOREto_USCOREpath(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SLICE__unbind_USCOREto_USCOREpath %p -> %p\n", q, p));
	*(struct SLICE__unbind_USCOREto_USCOREpath*)p = *(struct SLICE__unbind_USCOREto_USCOREpath*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SLICE__unbind_USCOREto_USCOREpathResponse(struct soap *soap, const struct SLICE__unbind_USCOREto_USCOREpathResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SLICE__unbind_USCOREto_USCOREpathResponse(struct soap *soap, struct SLICE__unbind_USCOREto_USCOREpathResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SLICE__unbind_USCOREto_USCOREpathResponse(struct soap *soap, const struct SLICE__unbind_USCOREto_USCOREpathResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SLICE__unbind_USCOREto_USCOREpathResponse);
	if (soap_out_SLICE__unbind_USCOREto_USCOREpathResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SLICE__unbind_USCOREto_USCOREpathResponse(struct soap *soap, const char *tag, int id, const struct SLICE__unbind_USCOREto_USCOREpathResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SLICE__unbind_USCOREto_USCOREpathResponse), type);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SLICE__unbind_USCOREto_USCOREpathResponse * SOAP_FMAC4 soap_get_SLICE__unbind_USCOREto_USCOREpathResponse(struct soap *soap, struct SLICE__unbind_USCOREto_USCOREpathResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_SLICE__unbind_USCOREto_USCOREpathResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SLICE__unbind_USCOREto_USCOREpathResponse * SOAP_FMAC4 soap_in_SLICE__unbind_USCOREto_USCOREpathResponse(struct soap *soap, const char *tag, struct SLICE__unbind_USCOREto_USCOREpathResponse *a, const char *type)
{;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SLICE__unbind_USCOREto_USCOREpathResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SLICE__unbind_USCOREto_USCOREpathResponse, sizeof(struct SLICE__unbind_USCOREto_USCOREpathResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SLICE__unbind_USCOREto_USCOREpathResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SLICE__unbind_USCOREto_USCOREpathResponse *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_SLICE__unbind_USCOREto_USCOREpathResponse, 0, sizeof(struct SLICE__unbind_USCOREto_USCOREpathResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SLICE__unbind_USCOREto_USCOREpathResponse * SOAP_FMAC6 soap_new_SLICE__unbind_USCOREto_USCOREpathResponse(struct soap *soap, int n)
{	return soap_instantiate_SLICE__unbind_USCOREto_USCOREpathResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SLICE__unbind_USCOREto_USCOREpathResponse(struct soap *soap, struct SLICE__unbind_USCOREto_USCOREpathResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SLICE__unbind_USCOREto_USCOREpathResponse * SOAP_FMAC4 soap_instantiate_SLICE__unbind_USCOREto_USCOREpathResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SLICE__unbind_USCOREto_USCOREpathResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SLICE__unbind_USCOREto_USCOREpathResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SLICE__unbind_USCOREto_USCOREpathResponse;
		if (size)
			*size = sizeof(struct SLICE__unbind_USCOREto_USCOREpathResponse);
	}
	else
	{	cp->ptr = (void*)new struct SLICE__unbind_USCOREto_USCOREpathResponse[n];
		if (size)
			*size = n * sizeof(struct SLICE__unbind_USCOREto_USCOREpathResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SLICE__unbind_USCOREto_USCOREpathResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SLICE__unbind_USCOREto_USCOREpathResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SLICE__unbind_USCOREto_USCOREpathResponse %p -> %p\n", q, p));
	*(struct SLICE__unbind_USCOREto_USCOREpathResponse*)p = *(struct SLICE__unbind_USCOREto_USCOREpathResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SLICE__execution_USCOREtime(struct soap *soap, const struct SLICE__execution_USCOREtime *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SLICE__execution_USCOREtime(struct soap *soap, struct SLICE__execution_USCOREtime *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->path_USCOREid);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SLICE__execution_USCOREtime(struct soap *soap, const struct SLICE__execution_USCOREtime *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SLICE__execution_USCOREtime);
	if (soap_out_SLICE__execution_USCOREtime(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SLICE__execution_USCOREtime(struct soap *soap, const char *tag, int id, const struct SLICE__execution_USCOREtime *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SLICE__execution_USCOREtime), type);
	soap_out_int(soap, "path_id", -1, &a->path_USCOREid, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SLICE__execution_USCOREtime * SOAP_FMAC4 soap_get_SLICE__execution_USCOREtime(struct soap *soap, struct SLICE__execution_USCOREtime *p, const char *tag, const char *type)
{
	if ((p = soap_in_SLICE__execution_USCOREtime(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SLICE__execution_USCOREtime * SOAP_FMAC4 soap_in_SLICE__execution_USCOREtime(struct soap *soap, const char *tag, struct SLICE__execution_USCOREtime *a, const char *type)
{
	short soap_flag_path_USCOREid = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SLICE__execution_USCOREtime *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SLICE__execution_USCOREtime, sizeof(struct SLICE__execution_USCOREtime), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SLICE__execution_USCOREtime(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_path_USCOREid && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "path_id", &a->path_USCOREid, "xsd:int"))
				{	soap_flag_path_USCOREid--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_path_USCOREid > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SLICE__execution_USCOREtime *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_SLICE__execution_USCOREtime, 0, sizeof(struct SLICE__execution_USCOREtime), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SLICE__execution_USCOREtime * SOAP_FMAC6 soap_new_SLICE__execution_USCOREtime(struct soap *soap, int n)
{	return soap_instantiate_SLICE__execution_USCOREtime(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SLICE__execution_USCOREtime(struct soap *soap, struct SLICE__execution_USCOREtime *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SLICE__execution_USCOREtime * SOAP_FMAC4 soap_instantiate_SLICE__execution_USCOREtime(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SLICE__execution_USCOREtime(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SLICE__execution_USCOREtime, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SLICE__execution_USCOREtime;
		if (size)
			*size = sizeof(struct SLICE__execution_USCOREtime);
	}
	else
	{	cp->ptr = (void*)new struct SLICE__execution_USCOREtime[n];
		if (size)
			*size = n * sizeof(struct SLICE__execution_USCOREtime);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SLICE__execution_USCOREtime*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SLICE__execution_USCOREtime(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SLICE__execution_USCOREtime %p -> %p\n", q, p));
	*(struct SLICE__execution_USCOREtime*)p = *(struct SLICE__execution_USCOREtime*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SLICE__execution_USCOREtimeResponse(struct soap *soap, const struct SLICE__execution_USCOREtimeResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerToSLICE__CUTS_x002eEvent_USCORETime_USCOREInfo(soap, &a->_USCOREreturn);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SLICE__execution_USCOREtimeResponse(struct soap *soap, struct SLICE__execution_USCOREtimeResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->_USCOREreturn = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SLICE__execution_USCOREtimeResponse(struct soap *soap, const struct SLICE__execution_USCOREtimeResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SLICE__execution_USCOREtimeResponse);
	if (soap_out_SLICE__execution_USCOREtimeResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SLICE__execution_USCOREtimeResponse(struct soap *soap, const char *tag, int id, const struct SLICE__execution_USCOREtimeResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SLICE__execution_USCOREtimeResponse), type);
	if (a->_USCOREreturn)
		soap_element_result(soap, "_return");
	soap_out_PointerToSLICE__CUTS_x002eEvent_USCORETime_USCOREInfo(soap, "_return", -1, &a->_USCOREreturn, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SLICE__execution_USCOREtimeResponse * SOAP_FMAC4 soap_get_SLICE__execution_USCOREtimeResponse(struct soap *soap, struct SLICE__execution_USCOREtimeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_SLICE__execution_USCOREtimeResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SLICE__execution_USCOREtimeResponse * SOAP_FMAC4 soap_in_SLICE__execution_USCOREtimeResponse(struct soap *soap, const char *tag, struct SLICE__execution_USCOREtimeResponse *a, const char *type)
{
	short soap_flag__USCOREreturn = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SLICE__execution_USCOREtimeResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SLICE__execution_USCOREtimeResponse, sizeof(struct SLICE__execution_USCOREtimeResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SLICE__execution_USCOREtimeResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__USCOREreturn && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSLICE__CUTS_x002eEvent_USCORETime_USCOREInfo(soap, "_return", &a->_USCOREreturn, "SLICE:CUTS.Event_Time_Info"))
				{	soap_flag__USCOREreturn--;
					continue;
				}
			soap_check_result(soap, "_return");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SLICE__execution_USCOREtimeResponse *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_SLICE__execution_USCOREtimeResponse, 0, sizeof(struct SLICE__execution_USCOREtimeResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SLICE__execution_USCOREtimeResponse * SOAP_FMAC6 soap_new_SLICE__execution_USCOREtimeResponse(struct soap *soap, int n)
{	return soap_instantiate_SLICE__execution_USCOREtimeResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SLICE__execution_USCOREtimeResponse(struct soap *soap, struct SLICE__execution_USCOREtimeResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SLICE__execution_USCOREtimeResponse * SOAP_FMAC4 soap_instantiate_SLICE__execution_USCOREtimeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SLICE__execution_USCOREtimeResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SLICE__execution_USCOREtimeResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SLICE__execution_USCOREtimeResponse;
		if (size)
			*size = sizeof(struct SLICE__execution_USCOREtimeResponse);
	}
	else
	{	cp->ptr = (void*)new struct SLICE__execution_USCOREtimeResponse[n];
		if (size)
			*size = n * sizeof(struct SLICE__execution_USCOREtimeResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SLICE__execution_USCOREtimeResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SLICE__execution_USCOREtimeResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SLICE__execution_USCOREtimeResponse %p -> %p\n", q, p));
	*(struct SLICE__execution_USCOREtimeResponse*)p = *(struct SLICE__execution_USCOREtimeResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SLICE__collect_USCOREperformance_USCOREdata(struct soap *soap, const struct SLICE__collect_USCOREperformance_USCOREdata *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SLICE__collect_USCOREperformance_USCOREdata(struct soap *soap, struct SLICE__collect_USCOREperformance_USCOREdata *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SLICE__collect_USCOREperformance_USCOREdata(struct soap *soap, const struct SLICE__collect_USCOREperformance_USCOREdata *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SLICE__collect_USCOREperformance_USCOREdata);
	if (soap_out_SLICE__collect_USCOREperformance_USCOREdata(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SLICE__collect_USCOREperformance_USCOREdata(struct soap *soap, const char *tag, int id, const struct SLICE__collect_USCOREperformance_USCOREdata *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SLICE__collect_USCOREperformance_USCOREdata), type);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SLICE__collect_USCOREperformance_USCOREdata * SOAP_FMAC4 soap_get_SLICE__collect_USCOREperformance_USCOREdata(struct soap *soap, struct SLICE__collect_USCOREperformance_USCOREdata *p, const char *tag, const char *type)
{
	if ((p = soap_in_SLICE__collect_USCOREperformance_USCOREdata(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SLICE__collect_USCOREperformance_USCOREdata * SOAP_FMAC4 soap_in_SLICE__collect_USCOREperformance_USCOREdata(struct soap *soap, const char *tag, struct SLICE__collect_USCOREperformance_USCOREdata *a, const char *type)
{;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SLICE__collect_USCOREperformance_USCOREdata *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SLICE__collect_USCOREperformance_USCOREdata, sizeof(struct SLICE__collect_USCOREperformance_USCOREdata), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SLICE__collect_USCOREperformance_USCOREdata(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SLICE__collect_USCOREperformance_USCOREdata *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_SLICE__collect_USCOREperformance_USCOREdata, 0, sizeof(struct SLICE__collect_USCOREperformance_USCOREdata), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SLICE__collect_USCOREperformance_USCOREdata * SOAP_FMAC6 soap_new_SLICE__collect_USCOREperformance_USCOREdata(struct soap *soap, int n)
{	return soap_instantiate_SLICE__collect_USCOREperformance_USCOREdata(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SLICE__collect_USCOREperformance_USCOREdata(struct soap *soap, struct SLICE__collect_USCOREperformance_USCOREdata *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SLICE__collect_USCOREperformance_USCOREdata * SOAP_FMAC4 soap_instantiate_SLICE__collect_USCOREperformance_USCOREdata(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SLICE__collect_USCOREperformance_USCOREdata(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SLICE__collect_USCOREperformance_USCOREdata, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SLICE__collect_USCOREperformance_USCOREdata;
		if (size)
			*size = sizeof(struct SLICE__collect_USCOREperformance_USCOREdata);
	}
	else
	{	cp->ptr = (void*)new struct SLICE__collect_USCOREperformance_USCOREdata[n];
		if (size)
			*size = n * sizeof(struct SLICE__collect_USCOREperformance_USCOREdata);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SLICE__collect_USCOREperformance_USCOREdata*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SLICE__collect_USCOREperformance_USCOREdata(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SLICE__collect_USCOREperformance_USCOREdata %p -> %p\n", q, p));
	*(struct SLICE__collect_USCOREperformance_USCOREdata*)p = *(struct SLICE__collect_USCOREperformance_USCOREdata*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SLICE__collect_USCOREperformance_USCOREdataResponse(struct soap *soap, const struct SLICE__collect_USCOREperformance_USCOREdataResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SLICE__collect_USCOREperformance_USCOREdataResponse(struct soap *soap, struct SLICE__collect_USCOREperformance_USCOREdataResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SLICE__collect_USCOREperformance_USCOREdataResponse(struct soap *soap, const struct SLICE__collect_USCOREperformance_USCOREdataResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SLICE__collect_USCOREperformance_USCOREdataResponse);
	if (soap_out_SLICE__collect_USCOREperformance_USCOREdataResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SLICE__collect_USCOREperformance_USCOREdataResponse(struct soap *soap, const char *tag, int id, const struct SLICE__collect_USCOREperformance_USCOREdataResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SLICE__collect_USCOREperformance_USCOREdataResponse), type);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SLICE__collect_USCOREperformance_USCOREdataResponse * SOAP_FMAC4 soap_get_SLICE__collect_USCOREperformance_USCOREdataResponse(struct soap *soap, struct SLICE__collect_USCOREperformance_USCOREdataResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_SLICE__collect_USCOREperformance_USCOREdataResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SLICE__collect_USCOREperformance_USCOREdataResponse * SOAP_FMAC4 soap_in_SLICE__collect_USCOREperformance_USCOREdataResponse(struct soap *soap, const char *tag, struct SLICE__collect_USCOREperformance_USCOREdataResponse *a, const char *type)
{;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SLICE__collect_USCOREperformance_USCOREdataResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SLICE__collect_USCOREperformance_USCOREdataResponse, sizeof(struct SLICE__collect_USCOREperformance_USCOREdataResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SLICE__collect_USCOREperformance_USCOREdataResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SLICE__collect_USCOREperformance_USCOREdataResponse *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_SLICE__collect_USCOREperformance_USCOREdataResponse, 0, sizeof(struct SLICE__collect_USCOREperformance_USCOREdataResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SLICE__collect_USCOREperformance_USCOREdataResponse * SOAP_FMAC6 soap_new_SLICE__collect_USCOREperformance_USCOREdataResponse(struct soap *soap, int n)
{	return soap_instantiate_SLICE__collect_USCOREperformance_USCOREdataResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SLICE__collect_USCOREperformance_USCOREdataResponse(struct soap *soap, struct SLICE__collect_USCOREperformance_USCOREdataResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SLICE__collect_USCOREperformance_USCOREdataResponse * SOAP_FMAC4 soap_instantiate_SLICE__collect_USCOREperformance_USCOREdataResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SLICE__collect_USCOREperformance_USCOREdataResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SLICE__collect_USCOREperformance_USCOREdataResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SLICE__collect_USCOREperformance_USCOREdataResponse;
		if (size)
			*size = sizeof(struct SLICE__collect_USCOREperformance_USCOREdataResponse);
	}
	else
	{	cp->ptr = (void*)new struct SLICE__collect_USCOREperformance_USCOREdataResponse[n];
		if (size)
			*size = n * sizeof(struct SLICE__collect_USCOREperformance_USCOREdataResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SLICE__collect_USCOREperformance_USCOREdataResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SLICE__collect_USCOREperformance_USCOREdataResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SLICE__collect_USCOREperformance_USCOREdataResponse %p -> %p\n", q, p));
	*(struct SLICE__collect_USCOREperformance_USCOREdataResponse*)p = *(struct SLICE__collect_USCOREperformance_USCOREdataResponse*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToCUTS_x002e_USCORESE_USCOREPath_USCORESequence(struct soap *soap, CUTS_x002e_USCORESE_USCOREPath_USCORESequence *const*a)
{
	if (*a)
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToCUTS_x002e_USCORESE_USCOREPath_USCORESequence(struct soap *soap, CUTS_x002e_USCORESE_USCOREPath_USCORESequence *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToCUTS_x002e_USCORESE_USCOREPath_USCORESequence);
	if (soap_out_PointerToCUTS_x002e_USCORESE_USCOREPath_USCORESequence(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToCUTS_x002e_USCORESE_USCOREPath_USCORESequence(struct soap *soap, const char *tag, int id, CUTS_x002e_USCORESE_USCOREPath_USCORESequence *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, (struct soap_array*)&(*a)->__ptritem, 1, type, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREPath_USCORESequence);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 CUTS_x002e_USCORESE_USCOREPath_USCORESequence ** SOAP_FMAC4 soap_get_PointerToCUTS_x002e_USCORESE_USCOREPath_USCORESequence(struct soap *soap, CUTS_x002e_USCORESE_USCOREPath_USCORESequence **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToCUTS_x002e_USCORESE_USCOREPath_USCORESequence(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 CUTS_x002e_USCORESE_USCOREPath_USCORESequence ** SOAP_FMAC4 soap_in_PointerToCUTS_x002e_USCORESE_USCOREPath_USCORESequence(struct soap *soap, const char *tag, CUTS_x002e_USCORESE_USCOREPath_USCORESequence **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (CUTS_x002e_USCORESE_USCOREPath_USCORESequence **)soap_malloc(soap, sizeof(CUTS_x002e_USCORESE_USCOREPath_USCORESequence *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (CUTS_x002e_USCORESE_USCOREPath_USCORESequence *)soap_instantiate_CUTS_x002e_USCORESE_USCOREPath_USCORESequence(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (CUTS_x002e_USCORESE_USCOREPath_USCORESequence **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREPath_USCORESequence, sizeof(CUTS_x002e_USCORESE_USCOREPath_USCORESequence), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSLICE__CUTS_x002eEvent_USCORETime_USCOREInfo(struct soap *soap, SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSLICE__CUTS_x002eEvent_USCORETime_USCOREInfo(struct soap *soap, SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSLICE__CUTS_x002eEvent_USCORETime_USCOREInfo);
	if (soap_out_PointerToSLICE__CUTS_x002eEvent_USCORETime_USCOREInfo(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSLICE__CUTS_x002eEvent_USCORETime_USCOREInfo(struct soap *soap, const char *tag, int id, SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo ** SOAP_FMAC4 soap_get_PointerToSLICE__CUTS_x002eEvent_USCORETime_USCOREInfo(struct soap *soap, SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSLICE__CUTS_x002eEvent_USCORETime_USCOREInfo(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo ** SOAP_FMAC4 soap_in_PointerToSLICE__CUTS_x002eEvent_USCORETime_USCOREInfo(struct soap *soap, const char *tag, SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo **)soap_malloc(soap, sizeof(SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo *)soap_instantiate_SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo, sizeof(SLICE__CUTS_x002eEvent_USCORETime_USCOREInfo), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSLICE__CUTS_x002eOperation_USCOREFailed(struct soap *soap, SLICE__CUTS_x002eOperation_USCOREFailed *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SLICE__CUTS_x002eOperation_USCOREFailed))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSLICE__CUTS_x002eOperation_USCOREFailed(struct soap *soap, SLICE__CUTS_x002eOperation_USCOREFailed *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSLICE__CUTS_x002eOperation_USCOREFailed);
	if (soap_out_PointerToSLICE__CUTS_x002eOperation_USCOREFailed(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSLICE__CUTS_x002eOperation_USCOREFailed(struct soap *soap, const char *tag, int id, SLICE__CUTS_x002eOperation_USCOREFailed *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SLICE__CUTS_x002eOperation_USCOREFailed);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eOperation_USCOREFailed ** SOAP_FMAC4 soap_get_PointerToSLICE__CUTS_x002eOperation_USCOREFailed(struct soap *soap, SLICE__CUTS_x002eOperation_USCOREFailed **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSLICE__CUTS_x002eOperation_USCOREFailed(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 SLICE__CUTS_x002eOperation_USCOREFailed ** SOAP_FMAC4 soap_in_PointerToSLICE__CUTS_x002eOperation_USCOREFailed(struct soap *soap, const char *tag, SLICE__CUTS_x002eOperation_USCOREFailed **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (SLICE__CUTS_x002eOperation_USCOREFailed **)soap_malloc(soap, sizeof(SLICE__CUTS_x002eOperation_USCOREFailed *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (SLICE__CUTS_x002eOperation_USCOREFailed *)soap_instantiate_SLICE__CUTS_x002eOperation_USCOREFailed(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (SLICE__CUTS_x002eOperation_USCOREFailed **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SLICE__CUTS_x002eOperation_USCOREFailed, sizeof(SLICE__CUTS_x002eOperation_USCOREFailed), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSLICE__CUTS_x002eID_USCORENot_USCOREFound(struct soap *soap, SLICE__CUTS_x002eID_USCORENot_USCOREFound *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SLICE__CUTS_x002eID_USCORENot_USCOREFound))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSLICE__CUTS_x002eID_USCORENot_USCOREFound(struct soap *soap, SLICE__CUTS_x002eID_USCORENot_USCOREFound *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSLICE__CUTS_x002eID_USCORENot_USCOREFound);
	if (soap_out_PointerToSLICE__CUTS_x002eID_USCORENot_USCOREFound(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSLICE__CUTS_x002eID_USCORENot_USCOREFound(struct soap *soap, const char *tag, int id, SLICE__CUTS_x002eID_USCORENot_USCOREFound *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SLICE__CUTS_x002eID_USCORENot_USCOREFound);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eID_USCORENot_USCOREFound ** SOAP_FMAC4 soap_get_PointerToSLICE__CUTS_x002eID_USCORENot_USCOREFound(struct soap *soap, SLICE__CUTS_x002eID_USCORENot_USCOREFound **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSLICE__CUTS_x002eID_USCORENot_USCOREFound(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 SLICE__CUTS_x002eID_USCORENot_USCOREFound ** SOAP_FMAC4 soap_in_PointerToSLICE__CUTS_x002eID_USCORENot_USCOREFound(struct soap *soap, const char *tag, SLICE__CUTS_x002eID_USCORENot_USCOREFound **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (SLICE__CUTS_x002eID_USCORENot_USCOREFound **)soap_malloc(soap, sizeof(SLICE__CUTS_x002eID_USCORENot_USCOREFound *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (SLICE__CUTS_x002eID_USCORENot_USCOREFound *)soap_instantiate_SLICE__CUTS_x002eID_USCORENot_USCOREFound(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (SLICE__CUTS_x002eID_USCORENot_USCOREFound **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SLICE__CUTS_x002eID_USCORENot_USCOREFound, sizeof(SLICE__CUTS_x002eID_USCORENot_USCOREFound), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSLICE__CUTS_x002eBinding_USCOREFailed(struct soap *soap, SLICE__CUTS_x002eBinding_USCOREFailed *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SLICE__CUTS_x002eBinding_USCOREFailed))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSLICE__CUTS_x002eBinding_USCOREFailed(struct soap *soap, SLICE__CUTS_x002eBinding_USCOREFailed *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSLICE__CUTS_x002eBinding_USCOREFailed);
	if (soap_out_PointerToSLICE__CUTS_x002eBinding_USCOREFailed(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSLICE__CUTS_x002eBinding_USCOREFailed(struct soap *soap, const char *tag, int id, SLICE__CUTS_x002eBinding_USCOREFailed *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SLICE__CUTS_x002eBinding_USCOREFailed);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eBinding_USCOREFailed ** SOAP_FMAC4 soap_get_PointerToSLICE__CUTS_x002eBinding_USCOREFailed(struct soap *soap, SLICE__CUTS_x002eBinding_USCOREFailed **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSLICE__CUTS_x002eBinding_USCOREFailed(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 SLICE__CUTS_x002eBinding_USCOREFailed ** SOAP_FMAC4 soap_in_PointerToSLICE__CUTS_x002eBinding_USCOREFailed(struct soap *soap, const char *tag, SLICE__CUTS_x002eBinding_USCOREFailed **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (SLICE__CUTS_x002eBinding_USCOREFailed **)soap_malloc(soap, sizeof(SLICE__CUTS_x002eBinding_USCOREFailed *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (SLICE__CUTS_x002eBinding_USCOREFailed *)soap_instantiate_SLICE__CUTS_x002eBinding_USCOREFailed(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (SLICE__CUTS_x002eBinding_USCOREFailed **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SLICE__CUTS_x002eBinding_USCOREFailed, sizeof(SLICE__CUTS_x002eBinding_USCOREFailed), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToCORBA__CORBA_x002eSystemException(struct soap *soap, CORBA__CORBA_x002eSystemException *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_CORBA__CORBA_x002eSystemException))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToCORBA__CORBA_x002eSystemException(struct soap *soap, CORBA__CORBA_x002eSystemException *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToCORBA__CORBA_x002eSystemException);
	if (soap_out_PointerToCORBA__CORBA_x002eSystemException(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToCORBA__CORBA_x002eSystemException(struct soap *soap, const char *tag, int id, CORBA__CORBA_x002eSystemException *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_CORBA__CORBA_x002eSystemException);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 CORBA__CORBA_x002eSystemException ** SOAP_FMAC4 soap_get_PointerToCORBA__CORBA_x002eSystemException(struct soap *soap, CORBA__CORBA_x002eSystemException **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToCORBA__CORBA_x002eSystemException(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 CORBA__CORBA_x002eSystemException ** SOAP_FMAC4 soap_in_PointerToCORBA__CORBA_x002eSystemException(struct soap *soap, const char *tag, CORBA__CORBA_x002eSystemException **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (CORBA__CORBA_x002eSystemException **)soap_malloc(soap, sizeof(CORBA__CORBA_x002eSystemException *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (CORBA__CORBA_x002eSystemException *)soap_instantiate_CORBA__CORBA_x002eSystemException(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (CORBA__CORBA_x002eSystemException **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_CORBA__CORBA_x002eSystemException, sizeof(CORBA__CORBA_x002eSystemException), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToSLICE__CUTS_x002ePort_USCOREMeasurement(struct soap *soap, SLICE__CUTS_x002ePort_USCOREMeasurement **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerToSLICE__CUTS_x002ePort_USCOREMeasurement))
		soap_serialize_PointerToSLICE__CUTS_x002ePort_USCOREMeasurement(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToSLICE__CUTS_x002ePort_USCOREMeasurement(struct soap *soap, SLICE__CUTS_x002ePort_USCOREMeasurement **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToPointerToSLICE__CUTS_x002ePort_USCOREMeasurement);
	if (soap_out_PointerToPointerToSLICE__CUTS_x002ePort_USCOREMeasurement(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToSLICE__CUTS_x002ePort_USCOREMeasurement(struct soap *soap, const char *tag, int id, SLICE__CUTS_x002ePort_USCOREMeasurement **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerToSLICE__CUTS_x002ePort_USCOREMeasurement);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToSLICE__CUTS_x002ePort_USCOREMeasurement(soap, tag, id, *a, type);
}

SOAP_FMAC3 SLICE__CUTS_x002ePort_USCOREMeasurement *** SOAP_FMAC4 soap_get_PointerToPointerToSLICE__CUTS_x002ePort_USCOREMeasurement(struct soap *soap, SLICE__CUTS_x002ePort_USCOREMeasurement ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToSLICE__CUTS_x002ePort_USCOREMeasurement(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 SLICE__CUTS_x002ePort_USCOREMeasurement *** SOAP_FMAC4 soap_in_PointerToPointerToSLICE__CUTS_x002ePort_USCOREMeasurement(struct soap *soap, const char *tag, SLICE__CUTS_x002ePort_USCOREMeasurement ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (SLICE__CUTS_x002ePort_USCOREMeasurement ***)soap_malloc(soap, sizeof(SLICE__CUTS_x002ePort_USCOREMeasurement **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToSLICE__CUTS_x002ePort_USCOREMeasurement(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (SLICE__CUTS_x002ePort_USCOREMeasurement ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PointerToSLICE__CUTS_x002ePort_USCOREMeasurement, sizeof(SLICE__CUTS_x002ePort_USCOREMeasurement *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSLICE__CUTS_x002ePort_USCOREMeasurement(struct soap *soap, SLICE__CUTS_x002ePort_USCOREMeasurement *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SLICE__CUTS_x002ePort_USCOREMeasurement))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSLICE__CUTS_x002ePort_USCOREMeasurement(struct soap *soap, SLICE__CUTS_x002ePort_USCOREMeasurement *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSLICE__CUTS_x002ePort_USCOREMeasurement);
	if (soap_out_PointerToSLICE__CUTS_x002ePort_USCOREMeasurement(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSLICE__CUTS_x002ePort_USCOREMeasurement(struct soap *soap, const char *tag, int id, SLICE__CUTS_x002ePort_USCOREMeasurement *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SLICE__CUTS_x002ePort_USCOREMeasurement);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 SLICE__CUTS_x002ePort_USCOREMeasurement ** SOAP_FMAC4 soap_get_PointerToSLICE__CUTS_x002ePort_USCOREMeasurement(struct soap *soap, SLICE__CUTS_x002ePort_USCOREMeasurement **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSLICE__CUTS_x002ePort_USCOREMeasurement(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 SLICE__CUTS_x002ePort_USCOREMeasurement ** SOAP_FMAC4 soap_in_PointerToSLICE__CUTS_x002ePort_USCOREMeasurement(struct soap *soap, const char *tag, SLICE__CUTS_x002ePort_USCOREMeasurement **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (SLICE__CUTS_x002ePort_USCOREMeasurement **)soap_malloc(soap, sizeof(SLICE__CUTS_x002ePort_USCOREMeasurement *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (SLICE__CUTS_x002ePort_USCOREMeasurement *)soap_instantiate_SLICE__CUTS_x002ePort_USCOREMeasurement(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (SLICE__CUTS_x002ePort_USCOREMeasurement **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SLICE__CUTS_x002ePort_USCOREMeasurement, sizeof(SLICE__CUTS_x002ePort_USCOREMeasurement), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToSLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement(struct soap *soap, SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerToSLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement))
		soap_serialize_PointerToSLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToSLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement(struct soap *soap, SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToPointerToSLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement);
	if (soap_out_PointerToPointerToSLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToSLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement(struct soap *soap, const char *tag, int id, SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerToSLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToSLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement(soap, tag, id, *a, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement *** SOAP_FMAC4 soap_get_PointerToPointerToSLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement(struct soap *soap, SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToSLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement *** SOAP_FMAC4 soap_in_PointerToPointerToSLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement(struct soap *soap, const char *tag, SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement ***)soap_malloc(soap, sizeof(SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToSLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PointerToSLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement, sizeof(SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement(struct soap *soap, SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement(struct soap *soap, SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement);
	if (soap_out_PointerToSLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement(struct soap *soap, const char *tag, int id, SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement ** SOAP_FMAC4 soap_get_PointerToSLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement(struct soap *soap, SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement ** SOAP_FMAC4 soap_in_PointerToSLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement(struct soap *soap, const char *tag, SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement **)soap_malloc(soap, sizeof(SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement *)soap_instantiate_SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement, sizeof(SLICE__CUTS_x002eMapped_USCOREPort_USCOREMeasurement), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToSLICE__CUTS_x002eExit_USCOREPoint_USCORETime(struct soap *soap, SLICE__CUTS_x002eExit_USCOREPoint_USCORETime **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerToSLICE__CUTS_x002eExit_USCOREPoint_USCORETime))
		soap_serialize_PointerToSLICE__CUTS_x002eExit_USCOREPoint_USCORETime(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToSLICE__CUTS_x002eExit_USCOREPoint_USCORETime(struct soap *soap, SLICE__CUTS_x002eExit_USCOREPoint_USCORETime **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToPointerToSLICE__CUTS_x002eExit_USCOREPoint_USCORETime);
	if (soap_out_PointerToPointerToSLICE__CUTS_x002eExit_USCOREPoint_USCORETime(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToSLICE__CUTS_x002eExit_USCOREPoint_USCORETime(struct soap *soap, const char *tag, int id, SLICE__CUTS_x002eExit_USCOREPoint_USCORETime **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerToSLICE__CUTS_x002eExit_USCOREPoint_USCORETime);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToSLICE__CUTS_x002eExit_USCOREPoint_USCORETime(soap, tag, id, *a, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eExit_USCOREPoint_USCORETime *** SOAP_FMAC4 soap_get_PointerToPointerToSLICE__CUTS_x002eExit_USCOREPoint_USCORETime(struct soap *soap, SLICE__CUTS_x002eExit_USCOREPoint_USCORETime ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToSLICE__CUTS_x002eExit_USCOREPoint_USCORETime(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 SLICE__CUTS_x002eExit_USCOREPoint_USCORETime *** SOAP_FMAC4 soap_in_PointerToPointerToSLICE__CUTS_x002eExit_USCOREPoint_USCORETime(struct soap *soap, const char *tag, SLICE__CUTS_x002eExit_USCOREPoint_USCORETime ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (SLICE__CUTS_x002eExit_USCOREPoint_USCORETime ***)soap_malloc(soap, sizeof(SLICE__CUTS_x002eExit_USCOREPoint_USCORETime **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToSLICE__CUTS_x002eExit_USCOREPoint_USCORETime(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (SLICE__CUTS_x002eExit_USCOREPoint_USCORETime ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PointerToSLICE__CUTS_x002eExit_USCOREPoint_USCORETime, sizeof(SLICE__CUTS_x002eExit_USCOREPoint_USCORETime *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSLICE__CUTS_x002eExit_USCOREPoint_USCORETime(struct soap *soap, SLICE__CUTS_x002eExit_USCOREPoint_USCORETime *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SLICE__CUTS_x002eExit_USCOREPoint_USCORETime))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSLICE__CUTS_x002eExit_USCOREPoint_USCORETime(struct soap *soap, SLICE__CUTS_x002eExit_USCOREPoint_USCORETime *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSLICE__CUTS_x002eExit_USCOREPoint_USCORETime);
	if (soap_out_PointerToSLICE__CUTS_x002eExit_USCOREPoint_USCORETime(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSLICE__CUTS_x002eExit_USCOREPoint_USCORETime(struct soap *soap, const char *tag, int id, SLICE__CUTS_x002eExit_USCOREPoint_USCORETime *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SLICE__CUTS_x002eExit_USCOREPoint_USCORETime);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eExit_USCOREPoint_USCORETime ** SOAP_FMAC4 soap_get_PointerToSLICE__CUTS_x002eExit_USCOREPoint_USCORETime(struct soap *soap, SLICE__CUTS_x002eExit_USCOREPoint_USCORETime **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSLICE__CUTS_x002eExit_USCOREPoint_USCORETime(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 SLICE__CUTS_x002eExit_USCOREPoint_USCORETime ** SOAP_FMAC4 soap_in_PointerToSLICE__CUTS_x002eExit_USCOREPoint_USCORETime(struct soap *soap, const char *tag, SLICE__CUTS_x002eExit_USCOREPoint_USCORETime **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (SLICE__CUTS_x002eExit_USCOREPoint_USCORETime **)soap_malloc(soap, sizeof(SLICE__CUTS_x002eExit_USCOREPoint_USCORETime *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (SLICE__CUTS_x002eExit_USCOREPoint_USCORETime *)soap_instantiate_SLICE__CUTS_x002eExit_USCOREPoint_USCORETime(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (SLICE__CUTS_x002eExit_USCOREPoint_USCORETime **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SLICE__CUTS_x002eExit_USCOREPoint_USCORETime, sizeof(SLICE__CUTS_x002eExit_USCOREPoint_USCORETime), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToSLICE__CUTS_x002eWorker_USCOREMeasurement(struct soap *soap, SLICE__CUTS_x002eWorker_USCOREMeasurement **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerToSLICE__CUTS_x002eWorker_USCOREMeasurement))
		soap_serialize_PointerToSLICE__CUTS_x002eWorker_USCOREMeasurement(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToSLICE__CUTS_x002eWorker_USCOREMeasurement(struct soap *soap, SLICE__CUTS_x002eWorker_USCOREMeasurement **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToPointerToSLICE__CUTS_x002eWorker_USCOREMeasurement);
	if (soap_out_PointerToPointerToSLICE__CUTS_x002eWorker_USCOREMeasurement(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToSLICE__CUTS_x002eWorker_USCOREMeasurement(struct soap *soap, const char *tag, int id, SLICE__CUTS_x002eWorker_USCOREMeasurement **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerToSLICE__CUTS_x002eWorker_USCOREMeasurement);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToSLICE__CUTS_x002eWorker_USCOREMeasurement(soap, tag, id, *a, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eWorker_USCOREMeasurement *** SOAP_FMAC4 soap_get_PointerToPointerToSLICE__CUTS_x002eWorker_USCOREMeasurement(struct soap *soap, SLICE__CUTS_x002eWorker_USCOREMeasurement ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToSLICE__CUTS_x002eWorker_USCOREMeasurement(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 SLICE__CUTS_x002eWorker_USCOREMeasurement *** SOAP_FMAC4 soap_in_PointerToPointerToSLICE__CUTS_x002eWorker_USCOREMeasurement(struct soap *soap, const char *tag, SLICE__CUTS_x002eWorker_USCOREMeasurement ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (SLICE__CUTS_x002eWorker_USCOREMeasurement ***)soap_malloc(soap, sizeof(SLICE__CUTS_x002eWorker_USCOREMeasurement **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToSLICE__CUTS_x002eWorker_USCOREMeasurement(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (SLICE__CUTS_x002eWorker_USCOREMeasurement ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PointerToSLICE__CUTS_x002eWorker_USCOREMeasurement, sizeof(SLICE__CUTS_x002eWorker_USCOREMeasurement *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSLICE__CUTS_x002eWorker_USCOREMeasurement(struct soap *soap, SLICE__CUTS_x002eWorker_USCOREMeasurement *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SLICE__CUTS_x002eWorker_USCOREMeasurement))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSLICE__CUTS_x002eWorker_USCOREMeasurement(struct soap *soap, SLICE__CUTS_x002eWorker_USCOREMeasurement *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSLICE__CUTS_x002eWorker_USCOREMeasurement);
	if (soap_out_PointerToSLICE__CUTS_x002eWorker_USCOREMeasurement(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSLICE__CUTS_x002eWorker_USCOREMeasurement(struct soap *soap, const char *tag, int id, SLICE__CUTS_x002eWorker_USCOREMeasurement *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SLICE__CUTS_x002eWorker_USCOREMeasurement);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eWorker_USCOREMeasurement ** SOAP_FMAC4 soap_get_PointerToSLICE__CUTS_x002eWorker_USCOREMeasurement(struct soap *soap, SLICE__CUTS_x002eWorker_USCOREMeasurement **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSLICE__CUTS_x002eWorker_USCOREMeasurement(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 SLICE__CUTS_x002eWorker_USCOREMeasurement ** SOAP_FMAC4 soap_in_PointerToSLICE__CUTS_x002eWorker_USCOREMeasurement(struct soap *soap, const char *tag, SLICE__CUTS_x002eWorker_USCOREMeasurement **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (SLICE__CUTS_x002eWorker_USCOREMeasurement **)soap_malloc(soap, sizeof(SLICE__CUTS_x002eWorker_USCOREMeasurement *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (SLICE__CUTS_x002eWorker_USCOREMeasurement *)soap_instantiate_SLICE__CUTS_x002eWorker_USCOREMeasurement(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (SLICE__CUTS_x002eWorker_USCOREMeasurement **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SLICE__CUTS_x002eWorker_USCOREMeasurement, sizeof(SLICE__CUTS_x002eWorker_USCOREMeasurement), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToSLICE__CUTS_x002eAction_USCOREMeasurement(struct soap *soap, SLICE__CUTS_x002eAction_USCOREMeasurement **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerToSLICE__CUTS_x002eAction_USCOREMeasurement))
		soap_serialize_PointerToSLICE__CUTS_x002eAction_USCOREMeasurement(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToSLICE__CUTS_x002eAction_USCOREMeasurement(struct soap *soap, SLICE__CUTS_x002eAction_USCOREMeasurement **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToPointerToSLICE__CUTS_x002eAction_USCOREMeasurement);
	if (soap_out_PointerToPointerToSLICE__CUTS_x002eAction_USCOREMeasurement(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToSLICE__CUTS_x002eAction_USCOREMeasurement(struct soap *soap, const char *tag, int id, SLICE__CUTS_x002eAction_USCOREMeasurement **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerToSLICE__CUTS_x002eAction_USCOREMeasurement);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToSLICE__CUTS_x002eAction_USCOREMeasurement(soap, tag, id, *a, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eAction_USCOREMeasurement *** SOAP_FMAC4 soap_get_PointerToPointerToSLICE__CUTS_x002eAction_USCOREMeasurement(struct soap *soap, SLICE__CUTS_x002eAction_USCOREMeasurement ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToSLICE__CUTS_x002eAction_USCOREMeasurement(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 SLICE__CUTS_x002eAction_USCOREMeasurement *** SOAP_FMAC4 soap_in_PointerToPointerToSLICE__CUTS_x002eAction_USCOREMeasurement(struct soap *soap, const char *tag, SLICE__CUTS_x002eAction_USCOREMeasurement ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (SLICE__CUTS_x002eAction_USCOREMeasurement ***)soap_malloc(soap, sizeof(SLICE__CUTS_x002eAction_USCOREMeasurement **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToSLICE__CUTS_x002eAction_USCOREMeasurement(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (SLICE__CUTS_x002eAction_USCOREMeasurement ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PointerToSLICE__CUTS_x002eAction_USCOREMeasurement, sizeof(SLICE__CUTS_x002eAction_USCOREMeasurement *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSLICE__CUTS_x002eAction_USCOREMeasurement(struct soap *soap, SLICE__CUTS_x002eAction_USCOREMeasurement *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SLICE__CUTS_x002eAction_USCOREMeasurement))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSLICE__CUTS_x002eAction_USCOREMeasurement(struct soap *soap, SLICE__CUTS_x002eAction_USCOREMeasurement *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSLICE__CUTS_x002eAction_USCOREMeasurement);
	if (soap_out_PointerToSLICE__CUTS_x002eAction_USCOREMeasurement(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSLICE__CUTS_x002eAction_USCOREMeasurement(struct soap *soap, const char *tag, int id, SLICE__CUTS_x002eAction_USCOREMeasurement *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SLICE__CUTS_x002eAction_USCOREMeasurement);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eAction_USCOREMeasurement ** SOAP_FMAC4 soap_get_PointerToSLICE__CUTS_x002eAction_USCOREMeasurement(struct soap *soap, SLICE__CUTS_x002eAction_USCOREMeasurement **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSLICE__CUTS_x002eAction_USCOREMeasurement(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 SLICE__CUTS_x002eAction_USCOREMeasurement ** SOAP_FMAC4 soap_in_PointerToSLICE__CUTS_x002eAction_USCOREMeasurement(struct soap *soap, const char *tag, SLICE__CUTS_x002eAction_USCOREMeasurement **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (SLICE__CUTS_x002eAction_USCOREMeasurement **)soap_malloc(soap, sizeof(SLICE__CUTS_x002eAction_USCOREMeasurement *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (SLICE__CUTS_x002eAction_USCOREMeasurement *)soap_instantiate_SLICE__CUTS_x002eAction_USCOREMeasurement(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (SLICE__CUTS_x002eAction_USCOREMeasurement **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SLICE__CUTS_x002eAction_USCOREMeasurement, sizeof(SLICE__CUTS_x002eAction_USCOREMeasurement), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToSLICE__CUTS_x002ePath_USCOREElement(struct soap *soap, SLICE__CUTS_x002ePath_USCOREElement **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerToSLICE__CUTS_x002ePath_USCOREElement))
		soap_serialize_PointerToSLICE__CUTS_x002ePath_USCOREElement(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToSLICE__CUTS_x002ePath_USCOREElement(struct soap *soap, SLICE__CUTS_x002ePath_USCOREElement **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToPointerToSLICE__CUTS_x002ePath_USCOREElement);
	if (soap_out_PointerToPointerToSLICE__CUTS_x002ePath_USCOREElement(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToSLICE__CUTS_x002ePath_USCOREElement(struct soap *soap, const char *tag, int id, SLICE__CUTS_x002ePath_USCOREElement **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerToSLICE__CUTS_x002ePath_USCOREElement);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToSLICE__CUTS_x002ePath_USCOREElement(soap, tag, id, *a, type);
}

SOAP_FMAC3 SLICE__CUTS_x002ePath_USCOREElement *** SOAP_FMAC4 soap_get_PointerToPointerToSLICE__CUTS_x002ePath_USCOREElement(struct soap *soap, SLICE__CUTS_x002ePath_USCOREElement ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToSLICE__CUTS_x002ePath_USCOREElement(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 SLICE__CUTS_x002ePath_USCOREElement *** SOAP_FMAC4 soap_in_PointerToPointerToSLICE__CUTS_x002ePath_USCOREElement(struct soap *soap, const char *tag, SLICE__CUTS_x002ePath_USCOREElement ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (SLICE__CUTS_x002ePath_USCOREElement ***)soap_malloc(soap, sizeof(SLICE__CUTS_x002ePath_USCOREElement **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToSLICE__CUTS_x002ePath_USCOREElement(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (SLICE__CUTS_x002ePath_USCOREElement ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PointerToSLICE__CUTS_x002ePath_USCOREElement, sizeof(SLICE__CUTS_x002ePath_USCOREElement *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSLICE__CUTS_x002ePath_USCOREElement(struct soap *soap, SLICE__CUTS_x002ePath_USCOREElement *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SLICE__CUTS_x002ePath_USCOREElement))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSLICE__CUTS_x002ePath_USCOREElement(struct soap *soap, SLICE__CUTS_x002ePath_USCOREElement *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSLICE__CUTS_x002ePath_USCOREElement);
	if (soap_out_PointerToSLICE__CUTS_x002ePath_USCOREElement(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSLICE__CUTS_x002ePath_USCOREElement(struct soap *soap, const char *tag, int id, SLICE__CUTS_x002ePath_USCOREElement *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SLICE__CUTS_x002ePath_USCOREElement);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 SLICE__CUTS_x002ePath_USCOREElement ** SOAP_FMAC4 soap_get_PointerToSLICE__CUTS_x002ePath_USCOREElement(struct soap *soap, SLICE__CUTS_x002ePath_USCOREElement **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSLICE__CUTS_x002ePath_USCOREElement(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 SLICE__CUTS_x002ePath_USCOREElement ** SOAP_FMAC4 soap_in_PointerToSLICE__CUTS_x002ePath_USCOREElement(struct soap *soap, const char *tag, SLICE__CUTS_x002ePath_USCOREElement **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (SLICE__CUTS_x002ePath_USCOREElement **)soap_malloc(soap, sizeof(SLICE__CUTS_x002ePath_USCOREElement *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (SLICE__CUTS_x002ePath_USCOREElement *)soap_instantiate_SLICE__CUTS_x002ePath_USCOREElement(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (SLICE__CUTS_x002ePath_USCOREElement **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SLICE__CUTS_x002ePath_USCOREElement, sizeof(SLICE__CUTS_x002ePath_USCOREElement), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__anyType(struct soap *soap, xsd__anyType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_xsd__anyType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__anyType(struct soap *soap, xsd__anyType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToxsd__anyType);
	if (soap_out_PointerToxsd__anyType(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__anyType(struct soap *soap, const char *tag, int id, xsd__anyType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_xsd__anyType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 xsd__anyType ** SOAP_FMAC4 soap_get_PointerToxsd__anyType(struct soap *soap, xsd__anyType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxsd__anyType(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 xsd__anyType ** SOAP_FMAC4 soap_in_PointerToxsd__anyType(struct soap *soap, const char *tag, xsd__anyType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (xsd__anyType **)soap_malloc(soap, sizeof(xsd__anyType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (xsd__anyType *)soap_instantiate_xsd__anyType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (xsd__anyType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xsd__anyType, sizeof(xsd__anyType), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToCORBA__CORBA_x002eTypeCode(struct soap *soap, CORBA__CORBA_x002eTypeCode *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_CORBA__CORBA_x002eTypeCode))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToCORBA__CORBA_x002eTypeCode(struct soap *soap, CORBA__CORBA_x002eTypeCode *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToCORBA__CORBA_x002eTypeCode);
	if (soap_out_PointerToCORBA__CORBA_x002eTypeCode(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToCORBA__CORBA_x002eTypeCode(struct soap *soap, const char *tag, int id, CORBA__CORBA_x002eTypeCode *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_CORBA__CORBA_x002eTypeCode);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 CORBA__CORBA_x002eTypeCode ** SOAP_FMAC4 soap_get_PointerToCORBA__CORBA_x002eTypeCode(struct soap *soap, CORBA__CORBA_x002eTypeCode **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToCORBA__CORBA_x002eTypeCode(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 CORBA__CORBA_x002eTypeCode ** SOAP_FMAC4 soap_in_PointerToCORBA__CORBA_x002eTypeCode(struct soap *soap, const char *tag, CORBA__CORBA_x002eTypeCode **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (CORBA__CORBA_x002eTypeCode **)soap_malloc(soap, sizeof(CORBA__CORBA_x002eTypeCode *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (CORBA__CORBA_x002eTypeCode *)soap_instantiate_CORBA__CORBA_x002eTypeCode(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (CORBA__CORBA_x002eTypeCode **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_CORBA__CORBA_x002eTypeCode, sizeof(CORBA__CORBA_x002eTypeCode), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__anyURI(struct soap *soap, char **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_xsd__anyURI))
		soap_serialize_xsd__anyURI(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__anyURI(struct soap *soap, char **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToxsd__anyURI);
	if (soap_out_PointerToxsd__anyURI(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__anyURI(struct soap *soap, const char *tag, int id, char **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_xsd__anyURI);
	if (id < 0)
		return soap->error;
	return soap_out_xsd__anyURI(soap, tag, id, *a, type);
}

SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerToxsd__anyURI(struct soap *soap, char ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxsd__anyURI(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerToxsd__anyURI(struct soap *soap, const char *tag, char ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (char ***)soap_malloc(soap, sizeof(char **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_xsd__anyURI(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (char ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xsd__anyURI, sizeof(char *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToCUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq(struct soap *soap, CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq *const*a)
{
	if (*a)
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToCUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq(struct soap *soap, CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToCUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq);
	if (soap_out_PointerToCUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToCUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq(struct soap *soap, const char *tag, int id, CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, (struct soap_array*)&(*a)->__ptritem, 1, type, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq ** SOAP_FMAC4 soap_get_PointerToCUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq(struct soap *soap, CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToCUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq ** SOAP_FMAC4 soap_in_PointerToCUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq(struct soap *soap, const char *tag, CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq **)soap_malloc(soap, sizeof(CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq *)soap_instantiate_CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq, sizeof(CUTS_x002e_USCORESE_USCOREPort_USCOREMeasurement_USCORESeq), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToCUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq(struct soap *soap, CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq *const*a)
{
	if (*a)
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToCUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq(struct soap *soap, CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToCUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq);
	if (soap_out_PointerToCUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToCUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq(struct soap *soap, const char *tag, int id, CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, (struct soap_array*)&(*a)->__ptritem, 1, type, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq ** SOAP_FMAC4 soap_get_PointerToCUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq(struct soap *soap, CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToCUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq ** SOAP_FMAC4 soap_in_PointerToCUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq(struct soap *soap, const char *tag, CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq **)soap_malloc(soap, sizeof(CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq *)soap_instantiate_CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq, sizeof(CUTS_x002e_USCORESE_USCOREMapped_USCOREPort_USCOREMeasurement_USCORESeq), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToCUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq(struct soap *soap, CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq *const*a)
{
	if (*a)
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToCUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq(struct soap *soap, CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToCUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq);
	if (soap_out_PointerToCUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToCUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq(struct soap *soap, const char *tag, int id, CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, (struct soap_array*)&(*a)->__ptritem, 1, type, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq ** SOAP_FMAC4 soap_get_PointerToCUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq(struct soap *soap, CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToCUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq ** SOAP_FMAC4 soap_in_PointerToCUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq(struct soap *soap, const char *tag, CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq **)soap_malloc(soap, sizeof(CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq *)soap_instantiate_CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq, sizeof(CUTS_x002e_USCORESE_USCOREWorker_USCOREMeasurement_USCORESeq), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToCUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq(struct soap *soap, CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq *const*a)
{
	if (*a)
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToCUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq(struct soap *soap, CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToCUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq);
	if (soap_out_PointerToCUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToCUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq(struct soap *soap, const char *tag, int id, CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, (struct soap_array*)&(*a)->__ptritem, 1, type, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq ** SOAP_FMAC4 soap_get_PointerToCUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq(struct soap *soap, CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToCUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq ** SOAP_FMAC4 soap_in_PointerToCUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq(struct soap *soap, const char *tag, CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq **)soap_malloc(soap, sizeof(CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq *)soap_instantiate_CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq, sizeof(CUTS_x002e_USCORESE_USCOREExit_USCOREPoint_USCORETime_USCORESeq), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToCUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq(struct soap *soap, CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq *const*a)
{
	if (*a)
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToCUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq(struct soap *soap, CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToCUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq);
	if (soap_out_PointerToCUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToCUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq(struct soap *soap, const char *tag, int id, CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, (struct soap_array*)&(*a)->__ptritem, 1, type, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq ** SOAP_FMAC4 soap_get_PointerToCUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq(struct soap *soap, CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToCUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq ** SOAP_FMAC4 soap_in_PointerToCUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq(struct soap *soap, const char *tag, CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq **)soap_malloc(soap, sizeof(CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq *)soap_instantiate_CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq, sizeof(CUTS_x002e_USCORESE_USCOREAction_USCOREMeasurement_USCORESeq), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSLICE__CUTS_x002eTime_USCORESample(struct soap *soap, SLICE__CUTS_x002eTime_USCORESample *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SLICE__CUTS_x002eTime_USCORESample))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSLICE__CUTS_x002eTime_USCORESample(struct soap *soap, SLICE__CUTS_x002eTime_USCORESample *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSLICE__CUTS_x002eTime_USCORESample);
	if (soap_out_PointerToSLICE__CUTS_x002eTime_USCORESample(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSLICE__CUTS_x002eTime_USCORESample(struct soap *soap, const char *tag, int id, SLICE__CUTS_x002eTime_USCORESample *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SLICE__CUTS_x002eTime_USCORESample);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eTime_USCORESample ** SOAP_FMAC4 soap_get_PointerToSLICE__CUTS_x002eTime_USCORESample(struct soap *soap, SLICE__CUTS_x002eTime_USCORESample **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSLICE__CUTS_x002eTime_USCORESample(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 SLICE__CUTS_x002eTime_USCORESample ** SOAP_FMAC4 soap_in_PointerToSLICE__CUTS_x002eTime_USCORESample(struct soap *soap, const char *tag, SLICE__CUTS_x002eTime_USCORESample **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (SLICE__CUTS_x002eTime_USCORESample **)soap_malloc(soap, sizeof(SLICE__CUTS_x002eTime_USCORESample *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (SLICE__CUTS_x002eTime_USCORESample *)soap_instantiate_SLICE__CUTS_x002eTime_USCORESample(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (SLICE__CUTS_x002eTime_USCORESample **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SLICE__CUTS_x002eTime_USCORESample, sizeof(SLICE__CUTS_x002eTime_USCORESample), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSLICE__CUTS_x002eTime_USCOREInfo(struct soap *soap, SLICE__CUTS_x002eTime_USCOREInfo *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SLICE__CUTS_x002eTime_USCOREInfo))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSLICE__CUTS_x002eTime_USCOREInfo(struct soap *soap, SLICE__CUTS_x002eTime_USCOREInfo *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSLICE__CUTS_x002eTime_USCOREInfo);
	if (soap_out_PointerToSLICE__CUTS_x002eTime_USCOREInfo(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSLICE__CUTS_x002eTime_USCOREInfo(struct soap *soap, const char *tag, int id, SLICE__CUTS_x002eTime_USCOREInfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SLICE__CUTS_x002eTime_USCOREInfo);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 SLICE__CUTS_x002eTime_USCOREInfo ** SOAP_FMAC4 soap_get_PointerToSLICE__CUTS_x002eTime_USCOREInfo(struct soap *soap, SLICE__CUTS_x002eTime_USCOREInfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSLICE__CUTS_x002eTime_USCOREInfo(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 SLICE__CUTS_x002eTime_USCOREInfo ** SOAP_FMAC4 soap_in_PointerToSLICE__CUTS_x002eTime_USCOREInfo(struct soap *soap, const char *tag, SLICE__CUTS_x002eTime_USCOREInfo **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (SLICE__CUTS_x002eTime_USCOREInfo **)soap_malloc(soap, sizeof(SLICE__CUTS_x002eTime_USCOREInfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (SLICE__CUTS_x002eTime_USCOREInfo *)soap_instantiate_SLICE__CUTS_x002eTime_USCOREInfo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (SLICE__CUTS_x002eTime_USCOREInfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SLICE__CUTS_x002eTime_USCOREInfo, sizeof(SLICE__CUTS_x002eTime_USCOREInfo), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToCORBA__ObjectReference(struct soap *soap, CORBA__ObjectReference *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_CORBA__ObjectReference))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToCORBA__ObjectReference(struct soap *soap, CORBA__ObjectReference *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToCORBA__ObjectReference);
	if (soap_out_PointerToCORBA__ObjectReference(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToCORBA__ObjectReference(struct soap *soap, const char *tag, int id, CORBA__ObjectReference *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_CORBA__ObjectReference);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 CORBA__ObjectReference ** SOAP_FMAC4 soap_get_PointerToCORBA__ObjectReference(struct soap *soap, CORBA__ObjectReference **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToCORBA__ObjectReference(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 CORBA__ObjectReference ** SOAP_FMAC4 soap_in_PointerToCORBA__ObjectReference(struct soap *soap, const char *tag, CORBA__ObjectReference **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (CORBA__ObjectReference **)soap_malloc(soap, sizeof(CORBA__ObjectReference *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (CORBA__ObjectReference *)soap_instantiate_CORBA__ObjectReference(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (CORBA__ObjectReference **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_CORBA__ObjectReference, sizeof(CORBA__ObjectReference), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__SOAP_ENC__arrayType(struct soap *soap, char **a)
{	soap_default_string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__SOAP_ENC__arrayType(struct soap *soap, char *const*a)
{	soap_serialize_string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__SOAP_ENC__arrayType(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__SOAP_ENC__arrayType);
	if (soap_out__SOAP_ENC__arrayType(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__SOAP_ENC__arrayType(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__SOAP_ENC__arrayType);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__SOAP_ENC__arrayType(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__SOAP_ENC__arrayType(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__SOAP_ENC__arrayType(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE__SOAP_ENC__arrayType, 1, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__anyURI(struct soap *soap, char **a)
{	soap_default_string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap *soap, char *const*a)
{	soap_serialize_string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__anyURI);
	if (soap_out_xsd__anyURI(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_xsd__anyURI);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__anyURI(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyURI(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_xsd__anyURI, 1, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__ID(struct soap *soap, char **a)
{	soap_default_string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__ID(struct soap *soap, char *const*a)
{	soap_serialize_string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__ID(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__ID);
	if (soap_out_xsd__ID(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__ID(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_xsd__ID);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__ID(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__ID(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__ID(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_xsd__ID, 1, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap *soap, char **a)
{	soap_default_string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{	soap_serialize_string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, -1, -1);
}

/* End of SLICEC.cpp */
