// -*- IDL -*-

//=============================================================================
/**
 * @file      Benchmark_Data_Collector.idl
 *
 * $Id$
 *
 * @author    James H. Hill
 */
//=============================================================================

#ifndef _BENCHMARK_DATA_COLLECTOR_IDL_
#define _BENCHMARK_DATA_COLLECTOR_IDL_

#include "cuts/CUTS.idl"
#include "service.idl"

module CUTS
{
  /// Type definition for a listing of service names.
  typedef sequence <string> BDC_Service_Names;

  //===========================================================================
  /**
   * @interface BDC_Control_Handle
   *
   * Controller for programmatically interacting with the Benchmark Data
   * Collecter. This interface allows clients to dynamically add/remove
   * services and query for a listing of loaded services. It also allows
   * clients to remotely interact with the services, if available. For
   * example, a database service may allow a client to control when to
   * start/stop a test for experimentation purpose.
   */
  //===========================================================================

  interface BDC_Control_Handle
  {
    /// Explicitly force the Benchmark Data Collector to query
    /// all components for their performance metrics.
    void collect_performance_data ();

    /// Load a set of services.
    unsigned long load_services (in BDC_Service_Descriptors svcs);

    /// Unload a set of services.
    void unload_services (in BDC_Service_Names names);

    /// Get a reference to a particular service.
    BDC_Service get_service (in string name)
      raises (Service_Not_Found);

    /// Get a listing of all the services loaded.
    void list_services (out BDC_Service_Names svcs);
  };

  //===========================================================================
  /**
   * @component Benchmark_Data_Collector
   *
   * Service component responsible for managing collected metrics. This
   * components is responsible for managing information about the components
   * in the system. It is also responsible for collecting performance metrics
   * from each of the components in the system and storing it in a online
   * databaes. Lastly, the Benchmark_Data_Collector manages services that
   * act upon the collected metrics.
   */
  //===========================================================================

  component Benchmark_Data_Collector
  {
    provides Testing_Service testing_service;

    provides BDC_Control_Handle controls;

    // provides BDC_Service_Manager service_manager;

    attribute long timeout;

    attribute string service;

    attribute string test_uuid;
  };

  //===========================================================================
  /**
   * @home Benchmark_Data_Collector_Home
   *
   * Home for the Benchmark_Data_Collector.
   */
  //===========================================================================

  home Benchmark_Data_Collector_Home
    manages Benchmark_Data_Collector
  {

  };
};

#endif // !defined _BENCHMARK_DATA_COLLECTOR_IDL_
