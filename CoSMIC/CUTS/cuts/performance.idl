// -*- IDL -*-

//=============================================================================
/**
 * @file    performance.idl
 *
 * $Id$
 *
 * @author James H. Hill <hillj@isis.vanderbilt.edu>
 */
//=============================================================================

#ifndef _CUTS_PERFORMANCE_IDL_
#define _CUTS_PERFORMANCE_IDL_

module CUTS
{
  //===========================================================================
  /**
   * @struct Time_Stamp
   *
   * Time value specified in seconds and microseconds.
   */
  //===========================================================================

  struct Time_Stamp
  {
    /// The second time value.
    unsigned long sec;

    /// The microsecond time value.
    unsigned long usec;
  };

  //===========================================================================
  /**
   * @struct Endpoint_Time
   *
   * The time value for reaching an endpoint of a component. The
   * endpoint can be either a facet or event source. The \a uid for
   * the endpoint is the same as the \a uid in the Port_Description.
   */
  //===========================================================================

  struct Endpoint_Time
  {
    /// Unique id of the endpoint.
    long uid;

    /// Timing information for the endpoint.
    Time_Stamp exittime;
  };

  /// Type defintition for a listing of endpoints.
  typedef sequence <Endpoint_Time> Endpoint_Times;

  struct Action_Time
  {
    /// The unique id of the action.
    long uid;

    /// The type/classification of the action.
    long type;

    /// The measured duration of the action.
    Time_Stamp duration;
  };

  /// Type definition for a listing of action times.
  typedef sequence <Action_Time> Action_Times;

  //===========================================================================
  /**
   * @struct Metric_Record
   *
   * Record containing metrics for a single event. The record contains
   * the sender of the event that generated this record. It also contains
   * the queueing and processing time (close_time - open_time) for the
   * event. Lastly, the time when the event generated new events to send
   * to other components is captured.
   */
  //===========================================================================

  struct Metric_Record
  {
    /// Unique id of component that sent event to create record.
    long sender;

    /// Open time of the record.
    Time_Stamp open_time;

    /// Close time of the record.
    Time_Stamp close_time;

    /// Queueing time for the event.
    Time_Stamp queue_time;

    /// Log of the endpoints for this record.
    Endpoint_Times ep_times;

    /// Log of the action times for a record.
    Action_Times action_log;
  };

  /// Type definition for a collection of Metric_Record objects.
  typedef sequence <Metric_Record> Metric_Log;

  //===========================================================================
  /**
   * @struct Time_Info
   *
   * Timing information collected while running an experiment.
   */
  //===========================================================================

  struct Time_Info
  {
    /// Number of events in the timing info.
    unsigned long count;

    /// Total time during which the sample data was processed
    Time_Stamp total;

    /// Maximum time taken to process an event during sample period
    Time_Stamp max;

    /// Minimum time to process an event during the sample period
    Time_Stamp min;
  };

  //===========================================================================
  /**
   * @struct Endpoint_Time_Info
   *
   * Overall timing information for a endpoint.
   */
  //===========================================================================

  struct Endpoint_Time_Info
  {
    /// Unique id of the endpoint.
    long uid;

    /// Timing information for the endpoint.
    Time_Info info;
  };

  /// Type definition for collection of timing information for endpoints.
  typedef sequence <Endpoint_Time_Info> Endpoint_Time_Infos;

  //===========================================================================
  /**
   * @struct Port_Summary
   *
   * Summary of the collected timing information for a port.
   */
  //===========================================================================

  struct Port_Summary
  {
    /// Overall processing time for all the events.
    Time_Info process_time;

    /// Overall queueing time for all the events.
    Time_Info queue_time;

    /// Timing information for all the endpoints.
    Endpoint_Time_Infos endpoint_times;
  };

  //===========================================================================
  /**
   * @struct Sorted_Port_Metric
   *
   * The timing information for a specific port. The timing information
   * contains a summary and raw data of all the collected metrics. The
   * \a history is optional.
   */
  //===========================================================================

  struct Sorted_Port_Metric
  {
    /// Unique id for the sorting (key value).
    long uid;

    /// Summary of the metrics collected.
    Port_Summary summary;
  };

  typedef sequence <Sorted_Port_Metric> Sorted_Port_Metrics;

  //===========================================================================
  /**
   * @struct Port_Metric
   *
   * The timing information for a specific port. The timing information
   * contains a summary and raw data of all the collected metrics. The
   * \a history is optional.
   */
  //===========================================================================

  struct Port_Metric
  {
    /// Unique id for the port metric.
    long uid;

    /// Summary of the collected performance metrics.
    Sorted_Port_Metrics sorted_metrics;

    /// Collection of all the records collected.
    Metric_Log history;
  };

  /// Type definition for a collection of port metrics.
  typedef sequence <Port_Metric> Port_Metrics;

  //===========================================================================
  /**
   * @struct Component_Metric
   *
   * Timing information for a component.
   */
  //===========================================================================

  struct Component_Metric
  {
    /// Unique id for the component.
    long uid;

    /// Time of collection.
    Time_Stamp collection_time;

    /// Collection of port metrics for the component.
    Port_Metrics metrics;
  };
};

#endif  // !defined _CUTS_PERFORMANCE_IDL_
