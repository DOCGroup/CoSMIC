// -*- IDL -*-

//=============================================================================
/**
 * @file    performance.idl
 *
 * $Id$
 *
 * @author James H. Hill <hillj@isis.vanderbilt.edu>
 */
//=============================================================================

#ifndef _CUTS_PERFORMANCE_IDL_
#define _CUTS_PERFORMANCE_IDL_

module CUTS
{
  /// Type definition for the time.
  struct Time_Stamp
  {
    unsigned long sec;
    unsigned long usec;
  };

  /// Type definition for the timing history.
  typedef sequence <long> Time_Stamp_History;

  struct Endpoint_Time
  {
    long uid;

    Time_Stamp exittime;
  };

  typedef sequence <Endpoint_Time> Endpoint_Time_Log;

  struct Metric_Record
  {
    long sender;

    Time_Stamp open_time;

    Time_Stamp close_time;

    Time_Stamp queue_time;

    Endpoint_Time_Log endpoint_times;
  };

  typedef sequence <Metric_Record> Metric_Log;

  //===========================================================================
  /**
   * @struct Time_Info
   *
   * Timing information collected while running an experiment.
   */
  //===========================================================================

  struct Time_Info
  {
    /// Total time during which the sample data was processed
    Time_Stamp total;

    /// Maximum time taken to process an event during sample period
    Time_Stamp max;

    /// Minimum time to process an event during the sample period
    Time_Stamp min;
  };

  //===========================================================================
  /**
   * @struct Time_Sample
   *
   * The timing information for a single sample. This structure contains
   * the number of measurements collected in a sample, as well as the
   * statistical information about each metrics in the sample.
   */
  //===========================================================================

  struct Time_Sample
  {
    /// Number of timing measurements taken.
    long count;

    /// Timing info for the sample.
    Time_Info time;
  };

  //===========================================================================
  /**
   * @struct Action_Measurement
   *
   * Soon to be obsolete.
   */
  //===========================================================================

  struct Action_Measurement
  {
    long type;

    Time_Sample time;
  };

  /// Type definition for a collection of action metrics.
  typedef sequence <Action_Measurement> Action_Measurement_Seq;

  //===========================================================================
  /**
   * @struct Worker_Measurement
   *
   * Collection of information relating to a type of sample taken
   * during a port operation.
   */
  //===========================================================================

  struct Worker_Measurement
  {
    /// Type of sample collected
    long type;

    /// Collection of action timing metrics.
    Action_Measurement_Seq actions;
  };

  /// Type definition for a <Data_Sample> sequence.
  typedef sequence <Worker_Measurement> Worker_Measurement_Seq;

  //===========================================================================
  /**
   * @struct Exit_Point_Time
   *
   * Timing information for transmitting metrics related to an exit
   * point.
   */
  //===========================================================================

  struct Exit_Point_Time
  {
    /// The human readable name of the exit point.
    string exit_point_;

    /// The timing metrics for this exit point.
    Time_Sample time_sample_;
  };

  /// Type definition for a collection of exit point metrics.
  typedef sequence <Exit_Point_Time> Exit_Point_Time_Seq;

  struct Mapped_Port_Measurement
  {
    long owner;

    /// Time taken to transmit an event.
    Time_Sample transit_time;

    /// Time taken to process an event.
    Time_Sample process_time;

    /// Exit point times for this port.
    Exit_Point_Time_Seq exit_times;
  };

  typedef sequence <Mapped_Port_Measurement> Mapped_Port_Measurement_Seq;

  struct Endpoint_Id
  {
    long uid;
    string name;
  };

  typedef sequence <Endpoint_Id> Endpoint_Ids;

  struct Port_Measurement
  {
    /// event id associated with the data samples
    string port;

    Mapped_Port_Measurement_Seq measurements;

    Metric_Log log;

    Endpoint_Ids endpoints;
  };

  typedef sequence <Port_Measurement> Port_Measurement_Seq;

  /// The value of an invalid ID.
  const long INVALID_ID = -1;

  struct Benchmark_Data
  {
    /// id of the CoWorkEr transmitting the data
    long owner;

    /// time at which the data was reported
    Time_Stamp timestamp;

    /// this is the sequence of benchmark data being reported
    Port_Measurement_Seq ports;
  };
};

#endif  // !defined _CUTS_PERFORMANCE_IDL_
