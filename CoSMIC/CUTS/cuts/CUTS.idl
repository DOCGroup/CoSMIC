// -*- IDL -*-

//=============================================================================
/**
 * @file    CUTS.idl
 *
 * $Id$
 *
 * This file contains the information shared between all components in
 * Component Workload Emulator (CoWorkEr) Utilization Test Suite (CUTS).
 *
 * @author James H. Hill <hillj@isis.vanderbilt.edu>
 */
//=============================================================================

#ifndef _CUTS_IDL_
#define _CUTS_IDL_

#include <Components.idl>
#include "cuts/performance.idl"
#include "cuts/BenchmarkAgent.idl"

module CUTS
{
  exception Binding_Failed { };
  exception ID_Not_Found { };

  /**
   * This is a generic exception raised when a operation fails for some
   * unknown reason, and is not a system exception. Some reasons for
   * raising this exception would be failing to get a lock or a NULL
   * reference.
   */
  exception Operation_Failed { };

  //===========================================================================
  /**
   * Base type for all events in CUTS. Each event must defined an <event_type>
   * and a <dispatch_time>. The <dispatch_time> is when the event was sent
   * across the wire. The <event_type> is determined at compile-time by
   * parameterizing the Event_Traits template class.
   *
   * Ex: Event_Traits <Event_Class>::event_type_;
   */
  //===========================================================================

  eventtype CUTS_Event
  {
    /// Dispatch time for the event
    public long dispatch_time;
  };

  //===========================================================================
  /**
   * This is the base type for events that want associate a data payload
   * with tranmitting an event. The system will generate a data payload
   * for your event depending on your specifications in the modeling lanauge.
   */
  //===========================================================================
  eventtype Data_Event : CUTS::CUTS_Event
  {
    /// Data payload associated with the event
    public string data;
  };

  //===========================================================================
  /**
   *
   */
  //===========================================================================

  struct CoWorkEr_Info
  {
    /// UUID of the CoWorkEr.
    string UUID;

    /// IP address of the CoWorkEr.
    long ipaddr;
  };

  //===========================================================================
  /**
   * @struct Path_Element
   */
  //===========================================================================

  struct Path_Element
  {
    /// UUID of the component.
    string UUID;

    /// Name of the source port.
    string src;

    /// Name of the destination port.
    string dst;
  };

  /// Type definition for a path sequence.
  typedef sequence <Path_Element> Path_Sequence;

  interface Path_Measurment
  {
    long bind_to_path (in Path_Sequence path)
      raises (Binding_Failed);

    void unbind_to_path (in long path_id);

    Time_Info execution_time (in long path_id)
      raises (ID_Not_Found, Operation_Failed);
  };

  interface BDC_Control_Handle
  {
    void collect_performance_data ();
  };

  //===========================================================================
  /**
   *
   */
  //===========================================================================

  component Benchmark_Data_Collector
  {
    /// get the <Data_Collector> facet
    uses multiple Benchmark_Agent benchmark_agents;

    provides Path_Measurment online_measurements;

    provides BDC_Control_Handle controls;

    /// Name of the server hosting the database
    attribute string server_name;

    /// The timeout value for collecting performance metrics.
    attribute long timeout;
  };

  //===========================================================================
  /**
   *
   */
  //===========================================================================

  home Benchmark_Data_Collector_Home
    manages Benchmark_Data_Collector
  {

  };
};

#endif  // !defined _CUTS_IDL_
