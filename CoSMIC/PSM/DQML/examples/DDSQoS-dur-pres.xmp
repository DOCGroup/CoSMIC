<?xml version="1.0"?>
<!DOCTYPE paradigm SYSTEM "edf.dtd">

<paradigm name="DDSQoS" guid="{F2B8F5E0-E7F6-4B7C-8145-DCF5A7021D9F}" cdate="Mon Oct 09 18:20:04 2006" mdate="Mon Oct 09 18:20:04 2006" >

	<comment></comment>

	<author></author>

	<folder name = "RootFolder" metaref = "1000"  rootobjects = "DDSQoS" >
		<constraint type="function" name="Are_Durabilities_Compatible">
			<![CDATA[method;gme::Model;reader: DataReader, writers: ocl::Set;ocl::Boolean;
			let dr_durqos_set = reader.connectedFCOs(dr_durqos_Connection) in

-- If a DR has a DurabilityQosPolicy association then use that.
-- Otherwise, the requested default value (i.e., VOLATILE) is compatible with any offered value so return true
-- We just need one DataWriter durability policy to be compatible so use the exists function.
if (dr_durqos_set->size() = 1) then
   writers->exists(c: DataWriter |  Is_Durability_Compatible(dr_durqos_set,
--                          c.connectedFCOs(dw_durqos_Connection).theOnly().oclAsType(DurabilityQosPolicy)))
                          c.connectedFCOs(dw_durqos_Connection)))
else
   true
endif


-- PREVIOUS DEFINITION ABOVE WITH ARGS reader: DataReader, writers: ocl::Set
---- DONT DO IT THIS WAY!!! let dr_durqos_set = reader.connectedFCOs(DurabilityQosPolicy) in
--let dr_durqos_set = reader.connectedFCOs(dr_durqos_Connection) in
--
---- If a DR has a DurabilityQosPolicy association then use that.
---- Otherwise, the requested default value (i.e., VOLATILE) is compatible with any offered value so return true
---- We just need one DataWriter durability policy to be compatible so use the exists function.
--if (dr_durqos_set->size() = 1) then
--   writers->exists( c: DataWriter |  Compare_Durability_QoS_DR_DW(dr_durqos_set->theOnly().oclAsType(DurabilityQosPolicy), c))
--else
--   true
--endif]]>
		</constraint>
		<constraint type="function" name="Are_Presentations_Compatible">
			<![CDATA[method;gme::Model;subscribers: ocl::Set, writers: ocl::Set;ocl::Boolean;
			-- If the set of Subscribers is not empty (which is the valid case - there should be only one) then
-- get its Presentation QoS (if it has one) and compare it with the Presentation QoSs that the
-- Publishers (associated with the writers) have (if any)
-- We just need one Publisher presentation policy to be compatible so use the exists function.
if (subscribers->size() > 0) then
   let subscriber = subscribers.theOnly().oclAsType(Subscriber) in
   let presentations = subscriber.connectedFCOs(sub_presqos_Connection) in
   if (presentations->size() > 0) then
      writers->exists(c: DataWriter |  Are_Pub_Presentations_Compatible(presentations.theOnly().oclAsType(PresentationQosPolicy),
                                                                                                               c.connectedFCOs(dw_pub_Connection)))
   else
      -- Here we have a subscriber with no presentation QoS policy.
      -- The requested default values (i.e., INSTANCE, coherent_access=FALSE, ordered_access=FALSE)
      -- are compatible with any offered value so return true
      true
   endif
else
   -- Otherwise, there is no subscriber for the DataReader (which is invalid but should be handled here).
   -- The requested default values (i.e., INSTANCE, coherent_access=FALSE, ordered_access=FALSE)
   -- are compatible with any offered value so return true
   true
endif]]>
		</constraint>
		<constraint type="function" name="Are_Pub_Presentations_Compatible">
			<![CDATA[method;gme::Model;sub_pres: PresentationQosPolicy, publishers: ocl::Set;ocl::Boolean;
			-- If the set of Publishers is not empty (which is the valid case - there should be only one) then
-- get its Presentation QoS (if it has one) and compare it with the Subscriber's Presentation QoS
-- that was passed in.
if (publishers->size() > 0) then
   let publisher = publishers.theOnly().oclAsType(Publisher) in
   let presentations = publisher.connectedFCOs(pub_presqos_Connection) in
   if (presentations->size() > 0) then
      Is_Presentation_Compatible(sub_pres,
                                                   presentations.theOnly().oclAsType(PresentationQosPolicy))
   else
      -- Here we have a subscriber with no presentation QoS policy.
      -- The requested values need to match the default values (i.e., INSTANCE, coherent_access=FALSE,
      -- ordered_access) to be compatible.
      sub_pres.PresentationQosAccessScopeKind = #INSTANCE and 
        sub_pres.coherent_access = false and
        sub_pres.ordered_access = false
   endif
else
   -- Otherwise, there is no publisher for the DataWriter (which is invalid but should be handled here).
   -- The requested values need to match the default values (i.e., INSTANCE, coherent_access=FALSE,
   -- ordered_access) to be compatible.
   sub_pres.PresentationQosAccessScopeKind = #INSTANCE and 
     sub_pres.coherent_access = false and
     sub_pres.ordered_access = false
endif]]>
		</constraint>
		<constraint type="function" name="Is_Durability_Compatible">
			<![CDATA[method;gme::Model;dr_qos_policies: ocl::Set, dw_qos_policies: ocl::Set;ocl::Boolean;
			--let dw_qos_kind = writer.connectedFCOs(dw_durqos_Connection).theOnly().oclAsType(DurabilityQosPolicy).DurabilityQosKind in
-- PREVIOUS ABOVE

if (dr_qos_policies->size() = 1) then
   let dr_qos_kind = dr_qos_policies->theOnly().oclAsType(DurabilityQosPolicy).DurabilityQosKind in

   if (dw_qos_policies->size() = 1) then
      let dw_qos_kind = dw_qos_policies->theOnly().oclAsType(DurabilityQosPolicy).DurabilityQosKind in

   -- The DDS specification defines compatibility such that the requested value must be <=
   -- offered value. Order is defined as
   -- VOLATILE < TRANSIENT_LOCAL < TRANSIENT < PERSISTENT.
   -- NOTE: A Topic can use this function as will since there is an implied DataWriter if a Topic
   -- is associated with a DurabilityQosPolicy
      (((dw_qos_kind = #VOLATILE or dw_qos_kind = #TRANSIENT_LOCAL
                  or dw_qos_kind = #TRANSIENT or dw_qos_kind = #PERSISTENT)
                  and dr_qos_kind = #VOLATILE) or
                ((dw_qos_kind = #TRANSIENT_LOCAL
                  or dw_qos_kind = #TRANSIENT or dw_qos_kind = #PERSISTENT)
                  and dr_qos_kind = #TRANSIENT_LOCAL) or
                ((dw_qos_kind = #TRANSIENT or dw_qos_kind = #PERSISTENT)
                  and dr_qos_kind = #TRANSIENT) or
                ((dw_qos_kind = #PERSISTENT)
                  and dr_qos_kind = #PERSISTENT))
   else
      dr_qos_kind = #VOLATILE
   endif
else
   true
endif


-- PREVIOUS CODE BELOW WITH ARGS dr_qos_policy: DurabilityQosPolicy, writer: DataWriter
--let dw_qos_kind = writer.connectedFCOs(dw_durqos_Connection).theOnly().oclAsType(DurabilityQosPolicy).DurabilityQosKind in
--let dr_qos_kind = dr_qos_policy.DurabilityQosKind in
--
---- If there is a DurabilityQosPolicy associated with the DataWriter then compare it
---- with the DurabilityQosPolicy of the DataReader passed in.
---- The DDS specification defines compatibility such that the requested value must be <=
---- offered value. Order is defined as
---- VOLATILE < TRANSIENT_LOCAL < TRANSIENT < PERSISTENT.
--if (writer.connectedFCOs(dw_durqos_Connection).size() = 1) then
--   (((dw_qos_kind = #VOLATILE or dw_qos_kind = #TRANSIENT_LOCAL
--               or dw_qos_kind = #TRANSIENT or dw_qos_kind = #PERSISTENT)
--               and dr_qos_kind = #VOLATILE) or
--             ((dw_qos_kind = #TRANSIENT_LOCAL
--               or dw_qos_kind = #TRANSIENT or dw_qos_kind = #PERSISTENT)
--               and dr_qos_kind = #TRANSIENT_LOCAL) or
--             ((dw_qos_kind = #TRANSIENT or dw_qos_kind = #PERSISTENT)
--               and dr_qos_kind = #TRANSIENT) or
--             ((dw_qos_kind = #PERSISTENT)
--               and dr_qos_kind = #PERSISTENT))
--else
--   -- No explicit durability QoS specified for the DW. Use the default value which is VOLATILE.
--   -- The requested value (i.e., from the DataReader) must be VOLATILE for compatibility
--   dr_qos_kind = #VOLATILE
--endif]]>
		</constraint>
		<constraint type="function" name="Is_Presentation_Compatible">
			<![CDATA[method;gme::Model;sub_pres: PresentationQosPolicy, pub_pres: PresentationQosPolicy;ocl::Boolean;
			let sub_pres_kind = sub_pres.PresentationQosAccessScopeKind in
let pub_pres_kind = pub_pres.PresentationQosAccessScopeKind in

-- The DDS specification defines compatibility such that the requested value must be <=
-- offered value. Order is defined as INSTANCE < TOPIC < GROUP.
   (((pub_pres_kind = #INSTANCE or pub_pres_kind = #TOPIC
               or pub_pres_kind = #GROUP)
               and sub_pres_kind = #INSTANCE) or
             ((pub_pres_kind = #TOPIC or pub_pres_kind = #GROUP)
               and sub_pres_kind = #TOPIC) or
             ((pub_pres_kind = #GROUP)
               and sub_pres_kind = #GROUP)) and
   (pub_pres.coherent_access = sub_pres.coherent_access or
    pub_pres.coherent_access) and
   (pub_pres.ordered_access = sub_pres.ordered_access or
    pub_pres.ordered_access)]]>
		</constraint>
		<attrdef name="DurabilityQosKind" metaref = "1047" valuetype = "enum" defvalue = "VOLATILE">
			<enumitem dispname = "VOLATILE" value = "VOLATILE"></enumitem>
			<enumitem dispname = "TRANSIENT_LOCAL" value = "TRANSIENT_LOCAL"></enumitem>
			<enumitem dispname = "TRANSIENT" value = "TRANSIENT"></enumitem>
			<enumitem dispname = "PERSISTENT" value = "PERSISTENT"></enumitem>
		</attrdef>
		<attrdef name="Name" metaref = "1046" valuetype = "string" defvalue = "">
		</attrdef>
		<attrdef name="PresentationQosAccessScopeKind" metaref = "1108" valuetype = "enum" defvalue = "INSTANCE">
			<enumitem dispname = "INSTANCE" value = "INSTANCE"></enumitem>
			<enumitem dispname = "TOPIC" value = "TOPIC"></enumitem>
			<enumitem dispname = "GROUP" value = "GROUP"></enumitem>
		</attrdef>
		<attrdef name="coherent_access" metaref = "1109" valuetype = "boolean" defvalue = "false">
		</attrdef>
		<attrdef name="ordered_access" metaref = "1110" valuetype = "boolean" defvalue = "false">
		</attrdef>
		<atom name = "DurabilityQosPolicy" metaref = "1051"  attributes = "Name DurabilityQosKind">
				<regnode name = "namePosition" value ="4"></regnode>
		</atom>
		<atom name = "HistoryQosPolicy" metaref = "1052"  attributes = "Name">
				<regnode name = "namePosition" value ="4"></regnode>
		</atom>
		<atom name = "LifespanQosPolicy" metaref = "1053"  attributes = "Name">
				<regnode name = "namePosition" value ="4"></regnode>
		</atom>
		<atom name = "OwnershipQosPolicy" metaref = "1054"  attributes = "Name">
				<regnode name = "namePosition" value ="4"></regnode>
		</atom>
		<atom name = "OwnershipStrengthQosPolicy" metaref = "1055"  attributes = "Name">
				<regnode name = "namePosition" value ="4"></regnode>
		</atom>
		<atom name = "PresentationQosPolicy" metaref = "1111"  attributes = "Name PresentationQosAccessScopeKind coherent_access ordered_access">
				<regnode name = "namePosition" value ="4"></regnode>
		</atom>
		<connection name = "dr_durqos_Connection" metaref = "1081" >
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "DataReader"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "DurabilityQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "dr_sub_Connection" metaref = "1102" >
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "Subscriber"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "DataReader"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "dr_topic_Connection" metaref = "1093" >
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "DataReader"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "Topic"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "dw_durqos_Connection" metaref = "1083" >
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "DataWriter"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "DurabilityQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "dw_pub_Connection" metaref = "1103" >
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "Publisher"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "DataWriter"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "dw_topic_Connection" metaref = "1094" >
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "DataWriter"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "Topic"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "pub_presqos_Connection" metaref = "1112" >
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "Publisher"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PresentationQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "sub_presqos_Connection" metaref = "1113" >
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "Subscriber"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PresentationQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "topic_durqos_Connection" metaref = "1095" >
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "Topic"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "DurabilityQosPolicy"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<model name = "DDSQoS" metaref = "1002" >
				<regnode name = "namePosition" value ="4"></regnode>
			<role name = "DataReader" metaref = "1004" kind = "DataReader"></role>
			<role name = "DataWriter" metaref = "1005" kind = "DataWriter"></role>
			<role name = "DurabilityQosPolicy" metaref = "1056" kind = "DurabilityQosPolicy"></role>
			<role name = "HistoryQosPolicy" metaref = "1057" kind = "HistoryQosPolicy"></role>
			<role name = "LifespanQosPolicy" metaref = "1058" kind = "LifespanQosPolicy"></role>
			<role name = "OwnershipQosPolicy" metaref = "1059" kind = "OwnershipQosPolicy"></role>
			<role name = "OwnershipStrengthQosPolicy" metaref = "1060" kind = "OwnershipStrengthQosPolicy"></role>
			<role name = "PresentationQosPolicy" metaref = "1114" kind = "PresentationQosPolicy"></role>
			<role name = "Publisher" metaref = "1011" kind = "Publisher"></role>
			<role name = "Subscriber" metaref = "1012" kind = "Subscriber"></role>
			<role name = "Topic" metaref = "1013" kind = "Topic"></role>
			<role name = "dr_durqos_Connection" metaref = "1082" kind = "dr_durqos_Connection"></role>
			<role name = "dr_sub_Connection" metaref = "1104" kind = "dr_sub_Connection"></role>
			<role name = "dr_topic_Connection" metaref = "1096" kind = "dr_topic_Connection"></role>
			<role name = "dw_durqos_Connection" metaref = "1085" kind = "dw_durqos_Connection"></role>
			<role name = "dw_pub_Connection" metaref = "1105" kind = "dw_pub_Connection"></role>
			<role name = "dw_topic_Connection" metaref = "1097" kind = "dw_topic_Connection"></role>
			<role name = "pub_presqos_Connection" metaref = "1115" kind = "pub_presqos_Connection"></role>
			<role name = "sub_presqos_Connection" metaref = "1116" kind = "sub_presqos_Connection"></role>
			<role name = "topic_durqos_Connection" metaref = "1098" kind = "topic_durqos_Connection"></role>
			<aspect name = "Configuration" metaref = "1014" >
				<part metaref = "1016" role = "DataReader" primary = "yes" linked = "no"></part>
				<part metaref = "1017" role = "DataWriter" primary = "yes" linked = "no"></part>
				<part metaref = "1061" role = "DurabilityQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1062" role = "HistoryQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1063" role = "LifespanQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1064" role = "OwnershipQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1065" role = "OwnershipStrengthQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1117" role = "PresentationQosPolicy" primary = "yes" linked = "no"></part>
				<part metaref = "1023" role = "Publisher" primary = "yes" linked = "no"></part>
				<part metaref = "1024" role = "Subscriber" primary = "yes" linked = "no"></part>
				<part metaref = "1025" role = "Topic" primary = "yes" linked = "no"></part>
				<part metaref = "1091" role = "dr_durqos_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1106" role = "dr_sub_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1099" role = "dr_topic_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1092" role = "dw_durqos_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1107" role = "dw_pub_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1100" role = "dw_topic_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1118" role = "pub_presqos_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1119" role = "sub_presqos_Connection" primary = "yes" linked = "no"></part>
				<part metaref = "1101" role = "topic_durqos_Connection" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "DataReader" metaref = "1026" >
				<regnode name = "namePosition" value ="4"></regnode>
			<constraint name="Validdr_durqos_ConnectiondstCardinality2" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", dr_durqos_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to DataReader as "dst" over dr_durqos_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validdr_sub_ConnectionsrcCardinality3" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", dr_sub_Connection ) -> size in
                     (srcCount >= 1)]]>
				<dispname>Multiplicity of objects, which are associated to DataReader as "src" over dr_sub_Connection, has to match 1..*.</dispname>
			</constraint>
			<constraint name="Validdr_topic_ConnectiondstCardinality6" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", dr_topic_Connection ) -> size in
                     (dstCount = 1)]]>
				<dispname>Multiplicity of objects, which are associated to DataReader as "dst" over dr_topic_Connection, has to match 1.</dispname>
			</constraint>
			<aspect name = "Aspect" metaref = "1120" >
			</aspect>
		</model>
		<model name = "DataWriter" metaref = "1028" >
				<regnode name = "namePosition" value ="4"></regnode>
			<constraint name="Validdw_durqos_ConnectiondstCardinality8" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", dw_durqos_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to DataWriter as "dst" over dw_durqos_Connection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="Validdw_pub_ConnectionsrcCardinality9" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", dw_pub_Connection ) -> size in
                     (srcCount = 1)]]>
				<dispname>Multiplicity of objects, which are associated to DataWriter as "src" over dw_pub_Connection, has to match 1.</dispname>
			</constraint>
			<constraint name="Validdw_topic_ConnectiondstCardinality12" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", dw_topic_Connection ) -> size in
                     (dstCount = 1)]]>
				<dispname>Multiplicity of objects, which are associated to DataWriter as "dst" over dw_topic_Connection, has to match 1.</dispname>
			</constraint>
			<aspect name = "Aspect" metaref = "1121" >
			</aspect>
		</model>
		<model name = "Publisher" metaref = "1040" >
				<regnode name = "namePosition" value ="4"></regnode>
			<constraint name="Validdw_pub_ConnectiondstCardinality10" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", dw_pub_Connection ) -> size in
                     (dstCount >= 1)]]>
				<dispname>Multiplicity of objects, which are associated to Publisher as "dst" over dw_pub_Connection, has to match 1..*.</dispname>
			</constraint>
			<constraint name="Validpub_presqos_ConnectiondstCardinality14" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", pub_presqos_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to Publisher as "dst" over pub_presqos_Connection, has to match 0..1.</dispname>
			</constraint>
			<aspect name = "Aspect" metaref = "1122" >
			</aspect>
		</model>
		<model name = "Subscriber" metaref = "1042" >
				<regnode name = "namePosition" value ="4"></regnode>
			<constraint name="Validdr_sub_ConnectiondstCardinality4" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", dr_sub_Connection ) -> size in
                     (dstCount >= 1)]]>
				<dispname>Multiplicity of objects, which are associated to Subscriber as "dst" over dr_sub_Connection, has to match 1..*.</dispname>
			</constraint>
			<constraint name="Validsub_presqos_ConnectiondstCardinality16" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", sub_presqos_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to Subscriber as "dst" over sub_presqos_Connection, has to match 0..1.</dispname>
			</constraint>
			<aspect name = "Aspect" metaref = "1123" >
			</aspect>
		</model>
		<model name = "Topic" metaref = "1044" >
				<regnode name = "namePosition" value ="4"></regnode>
			<constraint name="Compatible_Durability" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[-- Get all the DataReaders associated with this topic
let readers = self.connectedFCOs(dr_topic_Connection) in
let topic_durqos_policies = self.connectedFCOs(topic_durqos_Connection) in

-- If the Topic has a DurabilityQosPolicy it needs to be checked for
-- compatibility along with all the DataWriters
readers->forAll( c: DataReader |  Is_Durability_Compatible(c.connectedFCOs(dr_durqos_Connection),
                                                                                              topic_durqos_policies)
                                                      or
                                                      Are_Durabilities_Compatible(c,
                                                                                                   self.connectedFCOs(dw_topic_Connection)))


-- PREVIOUS BELOW
--self.connectedFCOs(dr_topic_Connection)->forAll( c: DataReader |  
--Compare_Durability_QoS(c, self.connectedFCOs(dw_topic_Connection)))]]>
				<dispname>For data to flow, the requested Durability QoS must be compatible with the offered Durability QoS</dispname>
			</constraint>
			<constraint name="Compatible_Presentation" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[-- Get all the DataReaders associated with this topic
let readers = self.connectedFCOs(dr_topic_Connection) in

readers->forAll(c: DataReader |  Are_Presentations_Compatible(c.connectedFCOs(dr_sub_Connection),
                                                                                                   self.connectedFCOs(dw_topic_Connection)))]]>
				<dispname>For data to flow, the requested Presentation QoS must be compatible with the offered Presentation QoS</dispname>
			</constraint>
			<constraint name="Validdr_topic_ConnectionsrcCardinality5" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", dr_topic_Connection ) -> size in
                     (srcCount >= 1)]]>
				<dispname>Multiplicity of objects, which are associated to Topic as "src" over dr_topic_Connection, has to match 1..*.</dispname>
			</constraint>
			<constraint name="Validdw_topic_ConnectionsrcCardinality11" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", dw_topic_Connection ) -> size in
                     (srcCount >= 1)]]>
				<dispname>Multiplicity of objects, which are associated to Topic as "src" over dw_topic_Connection, has to match 1..*.</dispname>
			</constraint>
			<constraint name="Validtopic_durqos_ConnectiondstCardinality18" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", topic_durqos_Connection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to Topic as "dst" over topic_durqos_Connection, has to match 0..1.</dispname>
			</constraint>
			<aspect name = "Aspect" metaref = "1124" >
			</aspect>
		</model>
	</folder>
</paradigm>
