/*
 * @file: ConfiguratorDialog.cpp
 *
 * ConfiguratorDialog QT construction file
 *
 * Most of the file is generated by the QT resource compiler
 * 
 * @author: Emre Turkay <emre.turkay@vanderbilt.edu>
 */

#include "ConfiguratorDialog.h"

#include <qframe.h>
#include <qheader.h>
#include <qlistview.h>
#include <qpushbutton.h>
#include <qtextbrowser.h>
#include <qlayout.h>
#include <qvariant.h>
#include <qtooltip.h>
#include <qwhatsthis.h>
#include <qfiledialog.h>

#include <fstream>

/* 
 *  Constructs a ConfiguratorDialog which is a child of 'parent', with the 
 *  name 'name' and widget flags set to 'f' 
 *
 *  The dialog will by default be modeless, unless you set 'modal' to
 *  TRUE to construct a modal dialog.
 */
ConfiguratorDialog::ConfiguratorDialog( Rule *rule, QWidget* parent,  const char* name, bool modal, WFlags fl )
: QDialog( parent, name, modal, fl ), rule_(rule) {
    if ( !name )
	setName( "ConfiguratorDialog" );
    resize( 709, 571 ); 
    setCaption( tr( "Form1" ) );
    ConfiguratorDialogLayout = new QGridLayout( this ); 
    ConfiguratorDialogLayout->setSpacing( 6 );
    ConfiguratorDialogLayout->setMargin( 11 );

    help_view_ = new Help_View(this);
    help_view_->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)7, (QSizePolicy::SizeType)5, help_view_->sizePolicy().hasHeightForWidth() ) );
    help_view_->setMinimumSize( QSize( 0, 200 ) );

    ConfiguratorDialogLayout->addMultiCellWidget( help_view_, 1, 1, 0, 1 );

    options_view_ = new Options_View(this, help_view_);
    category_list_view_ = new Category_List_View(this, options_view_);
    category_list_view_->addColumn( tr( "" ) );
    category_list_view_->header()->setClickEnabled( FALSE, category_list_view_->header()->count() - 1 );
    category_list_view_->header()->setResizeEnabled( FALSE, category_list_view_->header()->count() - 1 );
    category_list_view_->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)7, (QSizePolicy::SizeType)7, category_list_view_->sizePolicy().hasHeightForWidth() ) );
    category_list_view_->setRootIsDecorated( TRUE );

    ConfiguratorDialogLayout->addWidget( category_list_view_, 0, 0 );

    options_view_->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)7, (QSizePolicy::SizeType)7, options_view_->sizePolicy().hasHeightForWidth() ) );
    options_view_->setFrameShape( QFrame::StyledPanel );
    options_view_->setFrameShadow( QFrame::Raised );

    ConfiguratorDialogLayout->addWidget( options_view_, 0, 1 );

    Frame4 = new QFrame( this, "Frame4" );
    Frame4->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)7, (QSizePolicy::SizeType)5, Frame4->sizePolicy().hasHeightForWidth() ) );
    Frame4->setMinimumSize( QSize( 0, 40 ) );
    Frame4->setFrameShape( QFrame::StyledPanel );
    Frame4->setFrameShadow( QFrame::Raised );
    Frame4Layout = new QHBoxLayout( Frame4 ); 
    Frame4Layout->setSpacing( 6 );
    Frame4Layout->setMargin( 11 );

    Layout2 = new QHBoxLayout; 
    Layout2->setSpacing( 6 );
    Layout2->setMargin( 0 );
    QSpacerItem* spacer = new QSpacerItem( 20, 20, QSizePolicy::Expanding, QSizePolicy::Minimum );
    Layout2->addItem( spacer );

    create_button_ = new QPushButton(Frame4, "create_button_");
    create_button_->setText( tr( "C&reate" ) );
    Layout2->addWidget(create_button_);

    close_button_ = new QPushButton(Frame4, "close_button_");
    close_button_->setText( tr( "&Close" ) );
    Layout2->addWidget(close_button_);
    Frame4Layout->addLayout( Layout2 );

    ConfiguratorDialogLayout->addMultiCellWidget( Frame4, 2, 2, 0, 1 );

    // signals and slots connections
    connect(close_button_, SIGNAL( clicked() ), this, SLOT( reject() ) );
	connect(create_button_, SIGNAL(clicked()), this, SLOT(create_svc_conf()));
}

/*  
 *  Destroys the object and frees any allocated resources
 */
ConfiguratorDialog::~ConfiguratorDialog()
{
    // no need to delete child widgets, Qt does it all for us
}

ConfiguratorDialog::set_categories(Option_Category* root)
{
	root_ = root;
	Option_Category* category;
	Category_List_Item* list_item;

	for (Option_Category::const_iterator iter = root->begin();
	     iter != root->end(); ++iter) {
		category = dynamic_cast<Option_Category*> (*iter);
		if (category) {
			list_item = new Category_List_Item(category_list_view_, category);
			set_category(category, list_item);
			category_list_view_->insertItem(list_item);
		}
	}
}

ConfiguratorDialog::set_category(Option_Category* this_category, Category_List_Item* this_item)
{
	Option_Category* category;
	Category_List_Item* list_item;

	for (Option_Category::const_iterator iter = this_category->begin();
	     iter != this_category->end(); ++iter) {
		category = dynamic_cast<Option_Category*> (*iter);
		if (category) {
			list_item = new Category_List_Item(category_list_view_, category);
			set_category(category, list_item);
			this_item->insertItem(list_item);
		}
	}
}

void ConfiguratorDialog::create_svc_conf()
{
	QString file_name = QFileDialog::getSaveFileName("svc_conf.xml", "XML Files (*.xml)", this);

	if (!file_name.isNull()) {
		std::ofstream os(file_name);

		os << "<?xml version='1.0'?>" << std::endl
		   << "<ACE_Svc_Conf>" << std::endl;

		for (Option_Category::iterator iter = root_->begin();
			 iter != root_->end(); ++iter)
			(*iter)->write_xml(os);

		os << "</ACE_Svc_Conf>" << std::endl;
	}
}
