/*
  This file is automatically generated by the OCML tool.
  Do not edit this file, all changes to this file will be erased.
*/


#include "rule_validator.h"


/*
 * Function prototypes
 */

bool rule_id_0068_00000008(Option_Category& root);  // FlagEqConnection
bool rule_id_0067_00000006(Option_Category& root);  // flag_option
bool rule_id_0068_00000009(Option_Category& root);  // IntEqConnection
bool rule_id_0067_00000005(Option_Category& root);  // integer_option
bool rule_id_0066_00000008(Option_Category& root);  // OR
bool rule_id_0068_00000007(Option_Category& root);  // StrEqConnection
bool rule_id_0067_00000004(Option_Category& root);  // string_option

/*
 * Function definitions
 */

bool rule_id_0065_00000007(Option_Category& root) // NewRule_eq
{
  return
    rule_id_0066_00000008(root) &&
    true;
}

bool rule_id_0066_00000008(Option_Category& root) // OR
{
  return
    rule_id_0068_00000008(root) ||
    rule_id_0068_00000009(root) ||
    rule_id_0068_00000007(root) ||
    false;
}

bool rule_id_0068_00000008(Option_Category& root) // FlagEqConnection
{
  return
    check_flag_eq((Flag_Option*)&((Tree_Node&)(root)["NewOptionCategory"]["flag_option"]), true);
}

bool rule_id_0068_00000009(Option_Category& root) // IntEqConnection
{
  return
    check_int_eq((Integer_Option*)&((Tree_Node&)(root)["NewOptionCategory"]["integer_option"]), 13);
}

bool rule_id_0068_00000007(Option_Category& root) // StrEqConnection
{
  return
    check_str_eq((String_Option*)&((Tree_Node&)(root)["NewOptionCategory"]["string_option"]), "test");
}


/*
 * Main rule function
 */

bool rule_check(Option_Category& root)
{
  return 
    rule_id_0065_00000007(root)
  ;
}

