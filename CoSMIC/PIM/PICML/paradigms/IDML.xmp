<?xml version="1.0"?>
<!DOCTYPE paradigm SYSTEM "edf.dtd">

<paradigm name ="IDML">

   <comment> Generated by the Meta2000 interpreter </comment>

   <folder name = "RootFolder" metaref = "1000" rootobjects = "File " >
      <constraint name="UniqueGlobalDeclNames" eventmask = "0x0" depth = "0" priority = "1">
         <![CDATA[self.models ("File")->forAll (a : gme::Model | a.allFileScopeDecls (a)->forAll (x, y : gme::FCO | x <> y implies x.name <> y.name))]]>
         <dispname>Declarations at global scope must have unique names</dispname>
      </constraint>
      <constraint type="function" name="allFileScopeDecls">
         <![CDATA[method;gme::Model;top : gme::Model;ocl::Set;
let incl_files = self.oclAsType (gme::Model).filePartsRecursive () in
  self.oclAsType (gme::Model).allScopeDecls () +
    if (incl_files->size < 1) then
      Set{}
    else
      incl_files->iterate (file ; accu = Set{} | accu + 
        if (file = top) then
          Set{}
        else
          file.oclAsType (gme::Model).allScopeDecls ()
        endif)
    endif]]>
      </constraint>
      <constraint type="function" name="allScopeDecls">
         <![CDATA[method;gme::Model;;ocl::Set;
self.parts ("BoxedDef") + self.parts ("ExceptionDef") +
self.parts ("ConstantDef") + self.parts ("Package") +
self.parts ("AggregateDef") + self.parts ("SwitchedAggregateDef") +
self.parts ("EnumerationDef") + self.parts ("AliasDef") +
self.parts ("InterfaceDef") + self.parts ("ValueDef") +
self.parts ("EventDef") + self.parts ("ComponentDef") +
self.parts ("ComponentManager")
]]>
      </constraint>
      <constraint type="function" name="filePartsRecursive">
         <![CDATA[method;gme::Model;;ocl::Set;
let closure = self.parts ("File") in
  if (closure->size < 1) then
    Set{}
  else
    closure->iterate (rec ; accu = Set{} | accu + rec.oclAsType (gme::Model).filePartsRecursive ())
  endif]]>
      </constraint>
      <constraint type="function" name="allMembers">
         <![CDATA[method;gme::Model;;ocl::Set;
self.parts ("BoundedString") + self.parts ("NamedTypeRef") +
self.parts ("FixedPoint") + self.parts ("PredefinedType") +
self.parts ("FixedSizeCollection") + self.parts ("VariableSizeCollection")]]>
      </constraint>
      <constraint type="function" name="inheritedOps">
         <![CDATA[method;gme::Model;;ocl::Set;
let ancestors = self.inheritsRecursive (self) in
ancestors->iterate (ancestor; accu = Set{} | accu + ancestor.oclAsType (gme::Model).localOps ())]]>
      </constraint>
      <constraint type="function" name="inheritsRecursive">
         <![CDATA[method;gme::Model;top : gme::Model;ocl::Set;
let closure = self.referenceParts (Inherits)->collect (x : gme::Reference | x.refersTo ().oclAsType (gme::Model))->asSet () in
  if (closure->size < 1) then
    Set{}
  else
    closure->iterate (rec; accu = Set{} | accu + 
      if (rec = top) then
        Set{top}
      else
        rec.inheritsRecursive (top)
      endif)
  endif]]>
      </constraint>
      <constraint type="function" name="localOps">
         <![CDATA[method;gme::Model;;ocl::Set;
self.parts ("OnewayOperation") + self.parts ("TwowayOperation") +
self.parts ("FactoryOperation") + self.parts ("LookupOperation")]]>
      </constraint>
      <constraint type="function" name="supportedWithAncestors">
         <![CDATA[method;gme::Model;;ocl::Set;
let supported_set = self.referenceParts (Supports) in
supported_set->iterate (ref; accu = Set{} | 
  let supported = ref.refersTo ().oclAsType (gme::Model) in
  accu + supported.inheritsRecursive (supported))]]>
      </constraint>
      <attrdef name="truncatable" metaref = "1001" valuetype = "boolean" defvalue = "false">
         <dispname></dispname>
      </attrdef>
      <atom name = "BoundedString" metaref = "1002"  attributes = "bound wide">
         <dispname>BoundedString</dispname>
            <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="NonNegativeBound" eventmask = "0x1" depth = "1" priority = "1">
            <![CDATA[bound >= 0]]>
            <dispname>Bounded cannot be negative</dispname>
         </constraint>
         <constraint name="UniqueMemberNames" eventmask = "0x80000111" depth = "1" priority = "1">
            <![CDATA[let members = self.parent ().oclAsType (gme::Model).allMembers () in
if (members -> size <= 1) then
    true
else
    members -> forAll (a, b : gme::FCO | a <> b implies a.name <> b.name)
endif]]>
            <dispname>All members in a scope must have unique names</dispname>
         </constraint>
         <constraint name="ValidIdentifier" eventmask = "0x80000011" depth = "1" priority = "1">
            <![CDATA[name.trim().match( "^[_]?[a-zA-Z][_a-zA-Z0-9]*$" )]]>
            <dispname>Not a valid identifier</dispname>
         </constraint>
            <attrdef name="bound" metaref = "1003" valuetype = "integer" defvalue = "0">
               <dispname></dispname>
            </attrdef>
            <attrdef name="wide" metaref = "1004" valuetype = "boolean" defvalue = "false">
               <dispname></dispname>
            </attrdef>
            <regnode name = "icon" value ="boundedstring.bmp"></regnode>
      </atom>
      <atom name = "FixedPoint" metaref = "1005"  attributes = "total_digits decimal_digits">
         <dispname>FixedPoint</dispname>
            <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="DecimalDigitsNotGreater" eventmask = "0x0" depth = "1" priority = "1">
            <![CDATA[total_digits >= decimal_digits]]>
            <dispname>The number of decimal digits cannot be greater than the number of total digits</dispname>
         </constraint>
         <constraint name="NonNegativeFixedPointParameters" eventmask = "0x1" depth = "1" priority = "1">
            <![CDATA[decimal_digits >= 0 and total_digits >= 0]]>
            <dispname>Neither the number of decimal digits nor the number of total digits can be negative</dispname>
         </constraint>
         <constraint name="UniqueMemberNames" eventmask = "0x80000111" depth = "1" priority = "1">
            <![CDATA[let members = self.parent ().oclAsType (gme::Model).allMembers () in
if (members -> size <= 1) then
    true
else
    members -> forAll (a, b : gme::FCO | a <> b implies a.name <> b.name)
endif]]>
            <dispname>All members in a scope must have unique names</dispname>
         </constraint>
         <constraint name="ValidIdentifier" eventmask = "0x80000011" depth = "1" priority = "1">
            <![CDATA[name.trim().match( "^[_]?[a-zA-Z][_a-zA-Z0-9]*$" )]]>
            <dispname>Not a valid identifier</dispname>
         </constraint>
            <attrdef name="total_digits" metaref = "1006" valuetype = "integer" defvalue = "">
               <dispname></dispname>
            </attrdef>
            <attrdef name="decimal_digits" metaref = "1007" valuetype = "integer" defvalue = "">
               <dispname></dispname>
            </attrdef>
            <regnode name = "icon" value ="fixedpoint.bmp"></regnode>
      </atom>
      <atom name = "PredefinedType" metaref = "1008"  attributes = "which_type">
         <dispname>PredefinedType</dispname>
            <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="UniqueMemberNames" eventmask = "0x80000111" depth = "1" priority = "1">
            <![CDATA[let members = self.parent ().oclAsType (gme::Model).allMembers () in
if (members -> size <= 1) then
    true
else
    members -> forAll (a, b : gme::FCO | a <> b implies a.name <> b.name)
endif]]>
            <dispname>All members in a scope must have unique names</dispname>
         </constraint>
         <constraint name="ValidIdentifier" eventmask = "0x80000011" depth = "1" priority = "1">
            <![CDATA[name.trim().match( "^[_]?[a-zA-Z][_a-zA-Z0-9]*$" )]]>
            <dispname>Not a valid identifier</dispname>
         </constraint>
            <attrdef name="which_type" metaref = "1009" valuetype = "enum" defvalue = "UNSIGNED_LONG">
               <dispname></dispname>
               <enumitem dispname = "BOOLEAN" value = "BOOLEAN"></enumitem>
               <enumitem dispname = "BYTE" value = "BYTE"></enumitem>
               <enumitem dispname = "CHARACTER" value = "CHARACTER"></enumitem>
               <enumitem dispname = "WIDE_CHARACTER" value = "WIDE_CHARACTER"></enumitem>
               <enumitem dispname = "SHORT" value = "SHORT"></enumitem>
               <enumitem dispname = "UNSIGNED_SHORT" value = "UNSIGNED_SHORT"></enumitem>
               <enumitem dispname = "LONG" value = "LONG"></enumitem>
               <enumitem dispname = "UNSIGNED_LONG" value = "UNSIGNED_LONG"></enumitem>
               <enumitem dispname = "LONGLONG" value = "LONGLONG"></enumitem>
               <enumitem dispname = "UNSIGNED_LONGLONG" value = "UNSIGNED_LONGLONG"></enumitem>
               <enumitem dispname = "FLOAT" value = "FLOAT"></enumitem>
               <enumitem dispname = "DOUBLE" value = "DOUBLE"></enumitem>
               <enumitem dispname = "LONGDOUBLE" value = "LONGDOUBLE"></enumitem>
               <enumitem dispname = "STRING" value = "STRING"></enumitem>
               <enumitem dispname = "WIDE_STRING" value = "WIDE_STRING"></enumitem>
               <enumitem dispname = "GENERIC_CONTAINER" value = "GENERIC_CONTAINER"></enumitem>
               <enumitem dispname = "GENERIC_OBJECT_BY_VALUE" value = "GENERIC_OBJECT_BY_VALUE"></enumitem>
               <enumitem dispname = "GENERIC_OBJECT_REFERENCE" value = "GENERIC_OBJECT_REFERENCE"></enumitem>
               <enumitem dispname = "TYPE_ENCODING" value = "TYPE_ENCODING"></enumitem>
               <enumitem dispname = "TYPE_KIND" value = "TYPE_KIND"></enumitem>
            </attrdef>
            <regnode name = "icon" value ="predefined.bmp"></regnode>
      </atom>
      <atom name = "EnumValue" metaref = "1010" >
         <dispname>EnumValue</dispname>
            <regnode name = "namePosition" value ="4"></regnode>
            <regnode name = "icon" value ="enumvalue.bmp"></regnode>
      </atom>
      <atom name = "Label" metaref = "1011" >
         <dispname>Label</dispname>
            <regnode name = "namePosition" value ="4"></regnode>
            <regnode name = "icon" value ="label.bmp"></regnode>
      </atom>
      <atom name = "PrivateFlag" metaref = "1012" >
         <dispname>PrivateFlag</dispname>
            <regnode name = "namePosition" value ="4"></regnode>
            <constraint name="ValidMakeMemberPrivateDstCardinality1" eventmask = "0x0" depth = "0" priority = "2">
               <![CDATA[let dstCount = self.attachingConnections( "dst", MakeMemberPrivate ) -> size in
(dstCount <= 1)]]>
               <dispname>Multiplicity of objects, which are associated to PrivateFlag as "dst" over MakeMemberPrivate, has to match 0..1.</dispname>
            </constraint>
            <regnode name = "icon" value ="private.bmp"></regnode>
            <regnode name = "isNameEnabled" value ="false"></regnode>
      </atom>
      <atom name = "PrefixTag" metaref = "1013" >
         <dispname>PrefixTag</dispname>
            <regnode name = "namePosition" value ="4"></regnode>
            <regnode name = "icon" value ="prefix.bmp"></regnode>
      </atom>
      <atom name = "SpecifyIdTag" metaref = "1014" >
         <dispname>SpecifyIdTag</dispname>
            <regnode name = "namePosition" value ="4"></regnode>
            <regnode name = "icon" value ="id.bmp"></regnode>
      </atom>
      <atom name = "VersionTag" metaref = "1015" >
         <dispname>VersionTag</dispname>
            <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="ValidVersion" eventmask = "0x1" depth = "1" priority = "1">
            <![CDATA[name.trim ().match( "^[0-9]*.[0-9]*$" )]]>
            <dispname>Version must be a valid decimal number</dispname>
         </constraint>
            <regnode name = "icon" value ="version.bmp"></regnode>
      </atom>
      <reference name = "ExceptionRef" metaref = "1016" >
         <dispname>ExceptionRef</dispname>
            <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="NonNullReference" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[not refersTo ().isNull ()]]>
            <dispname>A reference cannot be null</dispname>
         </constraint>
            <regnode name = "icon" value ="exceptionref.bmp"></regnode>
         <pointerspec name ="ref">
            <pointeritem desc = "ExceptionDef"></pointeritem>
         </pointerspec>
      </reference>
      <reference name = "FileRef" metaref = "1017" >
         <dispname>FileRef</dispname>
            <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="NonNullReference" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[not refersTo ().isNull ()]]>
            <dispname>A reference cannot be null</dispname>
         </constraint>
            <regnode name = "icon" value ="fileref.bmp"></regnode>
         <pointerspec name ="ref">
            <pointeritem desc = "File"></pointeritem>
         </pointerspec>
      </reference>
      <reference name = "EnumRef" metaref = "1018" >
         <dispname>EnumRef</dispname>
            <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="NonNullReference" eventmask = "0x0" depth = "1" priority = "1">
            <![CDATA[not refersTo ().isNull ()]]>
            <dispname>A reference to a named type must be assigned</dispname>
         </constraint>
            <regnode name = "icon" value ="enumref.bmp"></regnode>
         <pointerspec name ="ref">
            <pointeritem desc = "EnumerationDef"></pointeritem>
         </pointerspec>
      </reference>
      <reference name = "NamedTypeRef" metaref = "1019" >
         <dispname>NamedTypeRef</dispname>
            <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="NonNullReference" eventmask = "0x0" depth = "1" priority = "1">
            <![CDATA[not refersTo ().isNull ()]]>
            <dispname>A reference to a named type must be assigned</dispname>
         </constraint>
         <constraint name="UniqueMemberNames" eventmask = "0x80000111" depth = "1" priority = "1">
            <![CDATA[let members = self.parent ().oclAsType (gme::Model).allMembers () in
if (members -> size <= 1) then
    true
else
    members -> forAll (a, b : gme::FCO | a <> b implies a.name <> b.name)
endif]]>
            <dispname>All members in a scope must have unique names</dispname>
         </constraint>
         <constraint name="ValidIdentifier" eventmask = "0x80000011" depth = "1" priority = "1">
            <![CDATA[name.trim().match( "^[_]?[a-zA-Z][_a-zA-Z0-9]*$" )]]>
            <dispname>Not a valid identifier</dispname>
         </constraint>
            <regnode name = "icon" value ="namedtyperef.bmp"></regnode>
         <pointerspec name ="ref">
            <pointeritem desc = "AggregateDef"></pointeritem>
            <pointeritem desc = "AliasDef"></pointeritem>
            <pointeritem desc = "BoxedDef"></pointeritem>
            <pointeritem desc = "ComponentDef"></pointeritem>
            <pointeritem desc = "ComponentFactory"></pointeritem>
            <pointeritem desc = "EnumerationDef"></pointeritem>
            <pointeritem desc = "EventDef"></pointeritem>
            <pointeritem desc = "ObjectDef"></pointeritem>
            <pointeritem desc = "SwitchedAggregateDef"></pointeritem>
            <pointeritem desc = "ValueDef"></pointeritem>
         </pointerspec>
      </reference>
      <reference name = "GetException" metaref = "1020" >
         <dispname>GetException</dispname>
            <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="NoNullReference" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[not self.refersTo ().isNull ()]]>
            <dispname>A reference cannot be null</dispname>
         </constraint>
            <regnode name = "icon" value ="getexception.bmp"></regnode>
         <pointerspec name ="ref">
            <pointeritem desc = "ExceptionDef"></pointeritem>
         </pointerspec>
      </reference>
      <reference name = "Inherits" metaref = "1021" >
         <dispname>Inherits</dispname>
            <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="NoNullReference" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[not self.refersTo ().isNull ()]]>
            <dispname>A reference cannot be null</dispname>
         </constraint>
            <regnode name = "icon" value ="inherits.bmp"></regnode>
         <pointerspec name ="ref">
            <pointeritem desc = "ComponentDef"></pointeritem>
            <pointeritem desc = "ComponentFactory"></pointeritem>
            <pointeritem desc = "EventDef"></pointeritem>
            <pointeritem desc = "ObjectDef"></pointeritem>
            <pointeritem desc = "ValueDef"></pointeritem>
         </pointerspec>
      </reference>
      <reference name = "LookupKey" metaref = "1022" >
         <dispname>LookupKey</dispname>
            <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="NoNullReference" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[not self.refersTo ().isNull ()]]>
            <dispname>A reference cannot be null</dispname>
         </constraint>
            <regnode name = "icon" value ="lookupkey.bmp"></regnode>
         <pointerspec name ="ref">
            <pointeritem desc = "ValueDef"></pointeritem>
         </pointerspec>
      </reference>
      <reference name = "Manages" metaref = "1023" >
         <dispname>Manages</dispname>
            <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="NoNullReference" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[not self.refersTo ().isNull ()]]>
            <dispname>A reference cannot be null</dispname>
         </constraint>
            <regnode name = "icon" value ="manages.bmp"></regnode>
         <pointerspec name ="ref">
            <pointeritem desc = "ComponentDef"></pointeritem>
         </pointerspec>
      </reference>
      <reference name = "SetException" metaref = "1024" >
         <dispname>SetException</dispname>
            <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="NoNullReference" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[not self.refersTo ().isNull ()]]>
            <dispname>A reference cannot be null</dispname>
         </constraint>
            <regnode name = "icon" value ="setexception.bmp"></regnode>
         <pointerspec name ="ref">
            <pointeritem desc = "ExceptionDef"></pointeritem>
         </pointerspec>
      </reference>
      <reference name = "Supports" metaref = "1025" >
         <dispname>Supports</dispname>
            <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="NoNullReference" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[not self.refersTo ().isNull ()]]>
            <dispname>A reference cannot be null</dispname>
         </constraint>
            <regnode name = "icon" value ="supports.bmp"></regnode>
         <pointerspec name ="ref">
            <pointeritem desc = "ObjectDef"></pointeritem>
         </pointerspec>
      </reference>
      <reference name = "EventRef" metaref = "1026" >
         <dispname>EventRef</dispname>
            <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="NoNullReference" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[not self.refersTo ().isNull ()]]>
            <dispname>A reference cannot be null</dispname>
         </constraint>
            <regnode name = "icon" value ="eventref.bmp"></regnode>
         <pointerspec name ="ref">
            <pointeritem desc = "EventDef"></pointeritem>
         </pointerspec>
      </reference>
      <reference name = "ObjectRef" metaref = "1027" >
         <dispname>ObjectRef</dispname>
            <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="NoNullReference" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[not self.refersTo ().isNull ()]]>
            <dispname>A reference cannot be null</dispname>
         </constraint>
            <regnode name = "icon" value ="objectref.bmp"></regnode>
         <pointerspec name ="ref">
            <pointeritem desc = "ObjectDef"></pointeritem>
         </pointerspec>
      </reference>
      <connection name = "LabelConnection" metaref = "1028" >
         <dispname>LabelConnection</dispname>
         <regnode name = "color" value ="0x000000"></regnode>
         <regnode name = "dstStyle" value ="butt"></regnode>
         <regnode name = "srcStyle" value ="butt"></regnode>
         <regnode name = "lineType" value ="solid"></regnode>
         <connjoint>
            <pointerspec name = "src">
               <pointeritem desc = "BoundedString"></pointeritem>
               <pointeritem desc = "Discriminator PredefinedType"></pointeritem>
               <pointeritem desc = "FixedPoint"></pointeritem>
               <pointeritem desc = "FixedSizeCollection BoundedString"></pointeritem>
               <pointeritem desc = "FixedSizeCollection FixedPoint"></pointeritem>
               <pointeritem desc = "FixedSizeCollection FixedSizeCollection"></pointeritem>
               <pointeritem desc = "FixedSizeCollection NamedTypeRef"></pointeritem>
               <pointeritem desc = "FixedSizeCollection PredefinedType"></pointeritem>
               <pointeritem desc = "FixedSizeCollection VariableSizeCollection"></pointeritem>
               <pointeritem desc = "FixedSizeCollection"></pointeritem>
               <pointeritem desc = "NamedTypeRef BoundedString"></pointeritem>
               <pointeritem desc = "NamedTypeRef FixedPoint"></pointeritem>
               <pointeritem desc = "NamedTypeRef FixedSizeCollection"></pointeritem>
               <pointeritem desc = "NamedTypeRef NamedTypeRef"></pointeritem>
               <pointeritem desc = "NamedTypeRef PredefinedType"></pointeritem>
               <pointeritem desc = "NamedTypeRef VariableSizeCollection"></pointeritem>
               <pointeritem desc = "NamedTypeRef"></pointeritem>
               <pointeritem desc = "PredefinedType"></pointeritem>
               <pointeritem desc = "VariableSizeCollection BoundedString"></pointeritem>
               <pointeritem desc = "VariableSizeCollection FixedPoint"></pointeritem>
               <pointeritem desc = "VariableSizeCollection FixedSizeCollection"></pointeritem>
               <pointeritem desc = "VariableSizeCollection NamedTypeRef"></pointeritem>
               <pointeritem desc = "VariableSizeCollection PredefinedType"></pointeritem>
               <pointeritem desc = "VariableSizeCollection VariableSizeCollection"></pointeritem>
               <pointeritem desc = "VariableSizeCollection"></pointeritem>
            </pointerspec>
            <pointerspec name = "dst">
               <pointeritem desc = "Label"></pointeritem>
               <pointeritem desc = "NamedTypeRef Label"></pointeritem>
            </pointerspec>
         </connjoint>
      </connection>
      <connection name = "MakeMemberPrivate" metaref = "1029" >
         <dispname>MakeMemberPrivate</dispname>
         <regnode name = "color" value ="0x000000"></regnode>
         <regnode name = "dstStyle" value ="butt"></regnode>
         <regnode name = "srcStyle" value ="butt"></regnode>
         <regnode name = "lineType" value ="solid"></regnode>
         <connjoint>
            <pointerspec name = "src">
               <pointeritem desc = "AggregateDef BoundedString"></pointeritem>
               <pointeritem desc = "AggregateDef FixedPoint"></pointeritem>
               <pointeritem desc = "AggregateDef FixedSizeCollection"></pointeritem>
               <pointeritem desc = "AggregateDef NamedTypeRef"></pointeritem>
               <pointeritem desc = "AggregateDef PredefinedType"></pointeritem>
               <pointeritem desc = "AggregateDef VariableSizeCollection"></pointeritem>
               <pointeritem desc = "AliasDef BoundedString"></pointeritem>
               <pointeritem desc = "AliasDef FixedPoint"></pointeritem>
               <pointeritem desc = "AliasDef FixedSizeCollection"></pointeritem>
               <pointeritem desc = "AliasDef NamedTypeRef"></pointeritem>
               <pointeritem desc = "AliasDef PredefinedType"></pointeritem>
               <pointeritem desc = "AliasDef VariableSizeCollection"></pointeritem>
               <pointeritem desc = "Attribute BoundedString"></pointeritem>
               <pointeritem desc = "Attribute FixedPoint"></pointeritem>
               <pointeritem desc = "Attribute FixedSizeCollection"></pointeritem>
               <pointeritem desc = "Attribute NamedTypeRef"></pointeritem>
               <pointeritem desc = "Attribute PredefinedType"></pointeritem>
               <pointeritem desc = "Attribute VariableSizeCollection"></pointeritem>
               <pointeritem desc = "BoundedString"></pointeritem>
               <pointeritem desc = "ConstantDef FixedPoint"></pointeritem>
               <pointeritem desc = "ConstantDef BoundedString"></pointeritem>
               <pointeritem desc = "ConstantDef PredefinedType"></pointeritem>
               <pointeritem desc = "ExceptionDef BoundedString"></pointeritem>
               <pointeritem desc = "ExceptionDef FixedPoint"></pointeritem>
               <pointeritem desc = "ExceptionDef FixedSizeCollection"></pointeritem>
               <pointeritem desc = "ExceptionDef NamedTypeRef"></pointeritem>
               <pointeritem desc = "ExceptionDef PredefinedType"></pointeritem>
               <pointeritem desc = "ExceptionDef VariableSizeCollection"></pointeritem>
               <pointeritem desc = "FixedPoint"></pointeritem>
               <pointeritem desc = "FixedSizeCollection BoundedString"></pointeritem>
               <pointeritem desc = "FixedSizeCollection FixedPoint"></pointeritem>
               <pointeritem desc = "FixedSizeCollection FixedSizeCollection"></pointeritem>
               <pointeritem desc = "FixedSizeCollection NamedTypeRef"></pointeritem>
               <pointeritem desc = "FixedSizeCollection PredefinedType"></pointeritem>
               <pointeritem desc = "FixedSizeCollection VariableSizeCollection"></pointeritem>
               <pointeritem desc = "FixedSizeCollection"></pointeritem>
               <pointeritem desc = "Inherits BoundedString"></pointeritem>
               <pointeritem desc = "Inherits FixedPoint"></pointeritem>
               <pointeritem desc = "Inherits FixedSizeCollection"></pointeritem>
               <pointeritem desc = "Inherits NamedTypeRef"></pointeritem>
               <pointeritem desc = "Inherits PredefinedType"></pointeritem>
               <pointeritem desc = "Inherits VariableSizeCollection"></pointeritem>
               <pointeritem desc = "NamedTypeRef BoundedString"></pointeritem>
               <pointeritem desc = "NamedTypeRef FixedPoint"></pointeritem>
               <pointeritem desc = "NamedTypeRef FixedSizeCollection"></pointeritem>
               <pointeritem desc = "NamedTypeRef NamedTypeRef"></pointeritem>
               <pointeritem desc = "NamedTypeRef PredefinedType"></pointeritem>
               <pointeritem desc = "NamedTypeRef VariableSizeCollection"></pointeritem>
               <pointeritem desc = "NamedTypeRef"></pointeritem>
               <pointeritem desc = "PredefinedType"></pointeritem>
               <pointeritem desc = "ReadonlyAttribute BoundedString"></pointeritem>
               <pointeritem desc = "ReadonlyAttribute FixedPoint"></pointeritem>
               <pointeritem desc = "ReadonlyAttribute FixedSizeCollection"></pointeritem>
               <pointeritem desc = "ReadonlyAttribute NamedTypeRef"></pointeritem>
               <pointeritem desc = "ReadonlyAttribute PredefinedType"></pointeritem>
               <pointeritem desc = "ReadonlyAttribute VariableSizeCollection"></pointeritem>
               <pointeritem desc = "SwitchedAggregateDef BoundedString"></pointeritem>
               <pointeritem desc = "SwitchedAggregateDef FixedPoint"></pointeritem>
               <pointeritem desc = "SwitchedAggregateDef FixedSizeCollection"></pointeritem>
               <pointeritem desc = "SwitchedAggregateDef NamedTypeRef"></pointeritem>
               <pointeritem desc = "SwitchedAggregateDef PredefinedType"></pointeritem>
               <pointeritem desc = "SwitchedAggregateDef VariableSizeCollection"></pointeritem>
               <pointeritem desc = "VariableSizeCollection BoundedString"></pointeritem>
               <pointeritem desc = "VariableSizeCollection FixedPoint"></pointeritem>
               <pointeritem desc = "VariableSizeCollection FixedSizeCollection"></pointeritem>
               <pointeritem desc = "VariableSizeCollection NamedTypeRef"></pointeritem>
               <pointeritem desc = "VariableSizeCollection PredefinedType"></pointeritem>
               <pointeritem desc = "VariableSizeCollection VariableSizeCollection"></pointeritem>
               <pointeritem desc = "VariableSizeCollection"></pointeritem>
            </pointerspec>
            <pointerspec name = "dst">
               <pointeritem desc = "Inherits PrivateFlag"></pointeritem>
               <pointeritem desc = "NamedTypeRef PrivateFlag"></pointeritem>
               <pointeritem desc = "PrivateFlag"></pointeritem>
            </pointerspec>
         </connjoint>
      </connection>
      <model name = "ConstantDef" metaref = "1030"  attributes = "value">
         <dispname>ConstantDef</dispname>
         <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="ConstantDefNotEmpty" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[self.parts ()->size = 1]]>
            <dispname>A ConstantDef cannot be empty</dispname>
         </constraint>
         <constraint name="ValidConstantDefPartCardinality2" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "FixedPoint" ) -> size in
(partCount <= 1)]]>
            <dispname>Multiplicity of parts, which are contained by ConstantDef, has to match 0..1.</dispname>
         </constraint>
         <constraint name="ValidConstantDefPartCardinality3" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "EnumRef" ) -> size in
(partCount <= 1)]]>
            <dispname>Multiplicity of parts, which are contained by ConstantDef, has to match 0..1.</dispname>
         </constraint>
         <constraint name="ValidConstantDefPartCardinality4" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "BoundedString" ) -> size in
(partCount <= 1)]]>
            <dispname>Multiplicity of parts, which are contained by ConstantDef, has to match 0..1.</dispname>
         </constraint>
         <constraint name="ValidConstantDefPartCardinality5" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "PredefinedType" ) -> size in
(partCount <= 1)]]>
            <dispname>Multiplicity of parts, which are contained by ConstantDef, has to match 0..1.</dispname>
         </constraint>
         <constraint name="ValidConstantDefPartCardinality6" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "SpecifyIdTag" ) -> size + self.parts( "VersionTag" ) -> size in
(partCount <= 1)]]>
            <dispname>Multiplicity of parts, which are contained by ConstantDef, has to match 0..1.</dispname>
         </constraint>
         <attrdef name="value" metaref = "1031" valuetype = "string" defvalue = "">
            <dispname></dispname>
         </attrdef>
         <regnode name = "icon" value ="const.bmp"></regnode>
         <role name = "BoundedString" metaref = "1032" kind = "BoundedString"><dispname>BoundedString</dispname></role>
         <role name = "EnumRef" metaref = "1033" kind = "EnumRef"><dispname>EnumRef</dispname></role>
         <role name = "FixedPoint" metaref = "1034" kind = "FixedPoint"><dispname>FixedPoint</dispname></role>
         <role name = "PredefinedType" metaref = "1035" kind = "PredefinedType"><dispname>PredefinedType</dispname></role>
         <role name = "SpecifyIdTag" metaref = "1036" kind = "SpecifyIdTag"><dispname>SpecifyIdTag</dispname></role>
         <role name = "VersionTag" metaref = "1037" kind = "VersionTag"><dispname>VersionTag</dispname></role>
         <aspect name = "InterfaceDefinition" metaref = "1038"  attributes = "value">
            <part metaref = "1039" role = "SpecifyIdTag" primary = "yes" linked = "no"></part>
            <part metaref = "1040" role = "VersionTag" primary = "yes" linked = "no"></part>
            <part metaref = "1041" role = "PredefinedType" primary = "yes" linked = "no"></part>
            <part metaref = "1042" role = "BoundedString" primary = "yes" linked = "no"></part>
            <part metaref = "1043" role = "FixedPoint" primary = "yes" linked = "no"></part>
            <part metaref = "1044" role = "EnumRef" primary = "yes" linked = "no"></part>
         </aspect>
      </model>
      <model name = "ExceptionDef" metaref = "1045" >
         <dispname>ExceptionDef</dispname>
         <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="ValidExceptionDefPartCardinality7" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "SpecifyIdTag" ) -> size + self.parts( "VersionTag" ) -> size in
(partCount <= 1)]]>
            <dispname>Multiplicity of parts, which are contained by ExceptionDef, has to match 0..1.</dispname>
         </constraint>
         <regnode name = "icon" value ="exception.bmp"></regnode>
         <role name = "BoundedString" metaref = "1046" kind = "BoundedString"><dispname>BoundedString</dispname></role>
         <role name = "FixedPoint" metaref = "1047" kind = "FixedPoint"><dispname>FixedPoint</dispname></role>
         <role name = "FixedSizeCollection" metaref = "1048" kind = "FixedSizeCollection"><dispname>FixedSizeCollection</dispname></role>
         <role name = "NamedTypeRef" metaref = "1049" kind = "NamedTypeRef"><dispname>NamedTypeRef</dispname></role>
         <role name = "PredefinedType" metaref = "1050" kind = "PredefinedType"><dispname>PredefinedType</dispname></role>
         <role name = "SpecifyIdTag" metaref = "1051" kind = "SpecifyIdTag"><dispname>SpecifyIdTag</dispname></role>
         <role name = "VariableSizeCollection" metaref = "1052" kind = "VariableSizeCollection"><dispname>VariableSizeCollection</dispname></role>
         <role name = "VersionTag" metaref = "1053" kind = "VersionTag"><dispname>VersionTag</dispname></role>
         <aspect name = "InterfaceDefinition" metaref = "1054" >
            <part metaref = "1055" role = "SpecifyIdTag" primary = "yes" linked = "no"></part>
            <part metaref = "1056" role = "VersionTag" primary = "yes" linked = "no"></part>
            <part metaref = "1057" role = "NamedTypeRef" primary = "yes" linked = "no"></part>
            <part metaref = "1058" role = "PredefinedType" primary = "yes" linked = "no"></part>
            <part metaref = "1059" role = "BoundedString" primary = "yes" linked = "no"></part>
            <part metaref = "1060" role = "FixedPoint" primary = "yes" linked = "no"></part>
            <part metaref = "1061" role = "FixedSizeCollection" primary = "yes" linked = "no"></part>
            <part metaref = "1062" role = "VariableSizeCollection" primary = "yes" linked = "no"></part>
         </aspect>
      </model>
      <model name = "File" metaref = "1063" >
         <dispname>File</dispname>
         <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="ValidFilePartCardinality8" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "PrefixTag" ) -> size in
(partCount <= 1)]]>
            <dispname>Multiplicity of parts, which are contained by File, has to match 0..1.</dispname>
         </constraint>
         <role name = "AggregateDef" metaref = "1064" kind = "AggregateDef"><dispname>AggregateDef</dispname></role>
         <role name = "AliasDef" metaref = "1065" kind = "AliasDef"><dispname>AliasDef</dispname></role>
         <role name = "BoxedDef" metaref = "1066" kind = "BoxedDef"><dispname>BoxedDef</dispname></role>
         <role name = "ComponentDef" metaref = "1067" kind = "ComponentDef"><dispname>ComponentDef</dispname></role>
         <role name = "ComponentFactory" metaref = "1068" kind = "ComponentFactory"><dispname>ComponentFactory</dispname></role>
         <role name = "ConstantDef" metaref = "1069" kind = "ConstantDef"><dispname>ConstantDef</dispname></role>
         <role name = "EnumerationDef" metaref = "1070" kind = "EnumerationDef"><dispname>EnumerationDef</dispname></role>
         <role name = "EventDef" metaref = "1071" kind = "EventDef"><dispname>EventDef</dispname></role>
         <role name = "ExceptionDef" metaref = "1072" kind = "ExceptionDef"><dispname>ExceptionDef</dispname></role>
         <role name = "FileRef" metaref = "1073" kind = "FileRef"><dispname>FileRef</dispname></role>
         <role name = "ObjectDef" metaref = "1074" kind = "ObjectDef"><dispname>ObjectDef</dispname></role>
         <role name = "Package" metaref = "1075" kind = "Package"><dispname>Package</dispname></role>
         <role name = "PrefixTag" metaref = "1076" kind = "PrefixTag"><dispname>PrefixTag</dispname></role>
         <role name = "SwitchedAggregateDef" metaref = "1077" kind = "SwitchedAggregateDef"><dispname>SwitchedAggregateDef</dispname></role>
         <role name = "ValueDef" metaref = "1078" kind = "ValueDef"><dispname>ValueDef</dispname></role>
         <aspect name = "InterfaceDefinition" metaref = "1079" >
            <part metaref = "1080" role = "ConstantDef" primary = "yes" linked = "no"></part>
            <part metaref = "1081" role = "ExceptionDef" primary = "yes" linked = "no"></part>
            <part metaref = "1082" role = "ObjectDef" primary = "yes" linked = "no"></part>
            <part metaref = "1083" role = "AggregateDef" primary = "yes" linked = "no"></part>
            <part metaref = "1084" role = "AliasDef" primary = "yes" linked = "no"></part>
            <part metaref = "1085" role = "BoxedDef" primary = "yes" linked = "no"></part>
            <part metaref = "1086" role = "ComponentDef" primary = "yes" linked = "no"></part>
            <part metaref = "1087" role = "ComponentFactory" primary = "yes" linked = "no"></part>
            <part metaref = "1088" role = "EnumerationDef" primary = "yes" linked = "no"></part>
            <part metaref = "1089" role = "EventDef" primary = "yes" linked = "no"></part>
            <part metaref = "1090" role = "SwitchedAggregateDef" primary = "yes" linked = "no"></part>
            <part metaref = "1091" role = "ValueDef" primary = "yes" linked = "no"></part>
            <part metaref = "1092" role = "Package" primary = "yes" linked = "no"></part>
            <part metaref = "1093" role = "PrefixTag" primary = "yes" linked = "no"></part>
            <part metaref = "1094" role = "FileRef" primary = "yes" linked = "no"></part>
         </aspect>
      </model>
      <model name = "Package" metaref = "1095" >
         <dispname>Package</dispname>
         <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="NonEmptyPackage" eventmask = "0x0" depth = "1" priority = "1">
            <![CDATA[self.parts ()->size > 0]]>
            <dispname>A package cannot be empty</dispname>
         </constraint>
         <constraint name="UniquePackageDeclNames" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[let decls = self.allScopeDecls () in
if (decls->size <= 1) then
    true
else
    decls->forAll (x, y : gme::FCO | x <> y implies x.name <> y.name)
endif]]>
            <dispname>Declarations in a Package must have unique names</dispname>
         </constraint>
         <constraint name="ValidPackagePartCardinality9" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "PrefixTag" ) -> size in
(partCount <= 1)]]>
            <dispname>Multiplicity of parts, which are contained by Package, has to match 0..1.</dispname>
         </constraint>
         <constraint name="ValidPackagePartCardinality10" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "SpecifyIdTag" ) -> size + self.parts( "VersionTag" ) -> size in
(partCount <= 1)]]>
            <dispname>Multiplicity of parts, which are contained by Package, has to match 0..1.</dispname>
         </constraint>
         <regnode name = "icon" value ="package.bmp"></regnode>
         <role name = "AggregateDef" metaref = "1096" kind = "AggregateDef"><dispname>AggregateDef</dispname></role>
         <role name = "AliasDef" metaref = "1097" kind = "AliasDef"><dispname>AliasDef</dispname></role>
         <role name = "BoxedDef" metaref = "1098" kind = "BoxedDef"><dispname>BoxedDef</dispname></role>
         <role name = "ComponentDef" metaref = "1099" kind = "ComponentDef"><dispname>ComponentDef</dispname></role>
         <role name = "ComponentFactory" metaref = "1100" kind = "ComponentFactory"><dispname>ComponentFactory</dispname></role>
         <role name = "ConstantDef" metaref = "1101" kind = "ConstantDef"><dispname>ConstantDef</dispname></role>
         <role name = "EnumerationDef" metaref = "1102" kind = "EnumerationDef"><dispname>EnumerationDef</dispname></role>
         <role name = "EventDef" metaref = "1103" kind = "EventDef"><dispname>EventDef</dispname></role>
         <role name = "ExceptionDef" metaref = "1104" kind = "ExceptionDef"><dispname>ExceptionDef</dispname></role>
         <role name = "ObjectDef" metaref = "1105" kind = "ObjectDef"><dispname>ObjectDef</dispname></role>
         <role name = "Package" metaref = "1106" kind = "Package"><dispname>Package</dispname></role>
         <role name = "PrefixTag" metaref = "1107" kind = "PrefixTag"><dispname>PrefixTag</dispname></role>
         <role name = "SpecifyIdTag" metaref = "1108" kind = "SpecifyIdTag"><dispname>SpecifyIdTag</dispname></role>
         <role name = "SwitchedAggregateDef" metaref = "1109" kind = "SwitchedAggregateDef"><dispname>SwitchedAggregateDef</dispname></role>
         <role name = "ValueDef" metaref = "1110" kind = "ValueDef"><dispname>ValueDef</dispname></role>
         <role name = "VersionTag" metaref = "1111" kind = "VersionTag"><dispname>VersionTag</dispname></role>
         <aspect name = "InterfaceDefinition" metaref = "1112" >
            <part metaref = "1113" role = "ConstantDef" primary = "yes" linked = "no"></part>
            <part metaref = "1114" role = "ExceptionDef" primary = "yes" linked = "no"></part>
            <part metaref = "1115" role = "ObjectDef" primary = "yes" linked = "no"></part>
            <part metaref = "1116" role = "AggregateDef" primary = "yes" linked = "no"></part>
            <part metaref = "1117" role = "AliasDef" primary = "yes" linked = "no"></part>
            <part metaref = "1118" role = "BoxedDef" primary = "yes" linked = "no"></part>
            <part metaref = "1119" role = "ComponentDef" primary = "yes" linked = "no"></part>
            <part metaref = "1120" role = "ComponentFactory" primary = "yes" linked = "no"></part>
            <part metaref = "1121" role = "EnumerationDef" primary = "yes" linked = "no"></part>
            <part metaref = "1122" role = "EventDef" primary = "yes" linked = "no"></part>
            <part metaref = "1123" role = "SwitchedAggregateDef" primary = "yes" linked = "no"></part>
            <part metaref = "1124" role = "ValueDef" primary = "yes" linked = "no"></part>
            <part metaref = "1125" role = "Package" primary = "yes" linked = "no"></part>
            <part metaref = "1126" role = "PrefixTag" primary = "yes" linked = "no"></part>
            <part metaref = "1127" role = "SpecifyIdTag" primary = "yes" linked = "no"></part>
            <part metaref = "1128" role = "VersionTag" primary = "yes" linked = "no"></part>
         </aspect>
      </model>
      <model name = "FixedSizeCollection" metaref = "1129"  attributes = "bound">
         <dispname>FixedSizeCollection</dispname>
         <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="NoNestedArray" eventmask = "0x80000000" depth = "1" priority = "1">
            <![CDATA[parts ("FixedSizeCollection")->size = 0]]>
            <dispname>An unaliased fixed size collection may not be the element type of a collection</dispname>
         </constraint>
         <constraint name="NonNegativeBound" eventmask = "0x1" depth = "1" priority = "1">
            <![CDATA[bound >= 0]]>
            <dispname>Bounded cannot be negative</dispname>
         </constraint>
         <constraint name="UniqueMemberNames" eventmask = "0x80000111" depth = "1" priority = "1">
            <![CDATA[let members = self.parent ().oclAsType (gme::Model).allMembers () in
if (members -> size <= 1) then
    true
else
    members -> forAll (a, b : gme::FCO | a <> b implies a.name <> b.name)
endif]]>
            <dispname>All members in a scope must have unique names</dispname>
         </constraint>
         <constraint name="ValidIdentifier" eventmask = "0x80000011" depth = "1" priority = "1">
            <![CDATA[name.trim().match( "^[_]?[a-zA-Z][_a-zA-Z0-9]*$" )]]>
            <dispname>Not a valid identifier</dispname>
         </constraint>
         <constraint name="ValidFixedSizeCollectionPartCardinality11" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "BoundedString" ) -> size + self.parts( "FixedPoint" ) -> size + self.parts( "FixedSizeCollection" ) -> size + self.parts( "NamedTypeRef" ) -> size + self.parts( "PredefinedType" ) -> size + self.parts( "VariableSizeCollection" ) -> size in
(partCount = 1)]]>
            <dispname>Multiplicity of parts, which are contained by FixedSizeCollection, has to match 1.</dispname>
         </constraint>
         <attrdef name="bound" metaref = "1130" valuetype = "integer" defvalue = "0">
            <dispname></dispname>
         </attrdef>
         <regnode name = "icon" value ="fixedcollection.bmp"></regnode>
         <role name = "BoundedString" metaref = "1131" kind = "BoundedString"><dispname>BoundedString</dispname></role>
         <role name = "FixedPoint" metaref = "1132" kind = "FixedPoint"><dispname>FixedPoint</dispname></role>
         <role name = "FixedSizeCollection" metaref = "1133" kind = "FixedSizeCollection"><dispname>FixedSizeCollection</dispname></role>
         <role name = "NamedTypeRef" metaref = "1134" kind = "NamedTypeRef"><dispname>NamedTypeRef</dispname></role>
         <role name = "PredefinedType" metaref = "1135" kind = "PredefinedType"><dispname>PredefinedType</dispname></role>
         <role name = "VariableSizeCollection" metaref = "1136" kind = "VariableSizeCollection"><dispname>VariableSizeCollection</dispname></role>
         <aspect name = "InterfaceDefinition" metaref = "1137"  attributes = "bound">
            <part metaref = "1138" role = "NamedTypeRef" primary = "yes" linked = "no"></part>
            <part metaref = "1139" role = "PredefinedType" primary = "yes" linked = "no"></part>
            <part metaref = "1140" role = "BoundedString" primary = "yes" linked = "no"></part>
            <part metaref = "1141" role = "FixedPoint" primary = "yes" linked = "no"></part>
            <part metaref = "1142" role = "FixedSizeCollection" primary = "yes" linked = "no"></part>
            <part metaref = "1143" role = "VariableSizeCollection" primary = "yes" linked = "no"></part>
         </aspect>
      </model>
      <model name = "VariableSizeCollection" metaref = "1144"  attributes = "bound">
         <dispname>VariableSizeCollection</dispname>
         <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="NoNestedArray" eventmask = "0x80000000" depth = "1" priority = "1">
            <![CDATA[parts ("FixedSizeCollection")->size = 0]]>
            <dispname>An unaliased fixed size collection may not be the element type of a collection</dispname>
         </constraint>
         <constraint name="NonNegativeBound" eventmask = "0x1" depth = "1" priority = "1">
            <![CDATA[bound >= 0]]>
            <dispname>Bounded cannot be negative</dispname>
         </constraint>
         <constraint name="UniqueMemberNames" eventmask = "0x80000111" depth = "1" priority = "1">
            <![CDATA[let members = self.parent ().oclAsType (gme::Model).allMembers () in
if (members -> size <= 1) then
    true
else
    members -> forAll (a, b : gme::FCO | a <> b implies a.name <> b.name)
endif]]>
            <dispname>All members in a scope must have unique names</dispname>
         </constraint>
         <constraint name="ValidIdentifier" eventmask = "0x80000011" depth = "1" priority = "1">
            <![CDATA[name.trim().match( "^[_]?[a-zA-Z][_a-zA-Z0-9]*$" )]]>
            <dispname>Not a valid identifier</dispname>
         </constraint>
         <constraint name="ValidVariableSizeCollectionPartCardinality12" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "BoundedString" ) -> size + self.parts( "FixedPoint" ) -> size + self.parts( "FixedSizeCollection" ) -> size + self.parts( "NamedTypeRef" ) -> size + self.parts( "PredefinedType" ) -> size + self.parts( "VariableSizeCollection" ) -> size in
(partCount = 1)]]>
            <dispname>Multiplicity of parts, which are contained by VariableSizeCollection, has to match 1.</dispname>
         </constraint>
         <attrdef name="bound" metaref = "1145" valuetype = "integer" defvalue = "0">
            <dispname></dispname>
         </attrdef>
         <regnode name = "icon" value ="variablecollection.bmp"></regnode>
         <role name = "BoundedString" metaref = "1146" kind = "BoundedString"><dispname>BoundedString</dispname></role>
         <role name = "FixedPoint" metaref = "1147" kind = "FixedPoint"><dispname>FixedPoint</dispname></role>
         <role name = "FixedSizeCollection" metaref = "1148" kind = "FixedSizeCollection"><dispname>FixedSizeCollection</dispname></role>
         <role name = "NamedTypeRef" metaref = "1149" kind = "NamedTypeRef"><dispname>NamedTypeRef</dispname></role>
         <role name = "PredefinedType" metaref = "1150" kind = "PredefinedType"><dispname>PredefinedType</dispname></role>
         <role name = "VariableSizeCollection" metaref = "1151" kind = "VariableSizeCollection"><dispname>VariableSizeCollection</dispname></role>
         <aspect name = "InterfaceDefinition" metaref = "1152"  attributes = "bound">
            <part metaref = "1153" role = "NamedTypeRef" primary = "yes" linked = "no"></part>
            <part metaref = "1154" role = "PredefinedType" primary = "yes" linked = "no"></part>
            <part metaref = "1155" role = "BoundedString" primary = "yes" linked = "no"></part>
            <part metaref = "1156" role = "FixedPoint" primary = "yes" linked = "no"></part>
            <part metaref = "1157" role = "FixedSizeCollection" primary = "yes" linked = "no"></part>
            <part metaref = "1158" role = "VariableSizeCollection" primary = "yes" linked = "no"></part>
         </aspect>
      </model>
      <model name = "AggregateDef" metaref = "1159" >
         <dispname>AggregateDef</dispname>
         <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="ValidIdentifier" eventmask = "0x80000011" depth = "1" priority = "1">
            <![CDATA[name.trim().match( "^[_]?[a-zA-Z][_a-zA-Z0-9]*$" )]]>
            <dispname>Not a valid identifier</dispname>
         </constraint>
         <constraint name="ValidAggregateDefPartCardinality13" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "BoundedString" ) -> size + self.parts( "FixedPoint" ) -> size + self.parts( "FixedSizeCollection" ) -> size + self.parts( "NamedTypeRef" ) -> size + self.parts( "PredefinedType" ) -> size + self.parts( "VariableSizeCollection" ) -> size in
(partCount >= 1)]]>
            <dispname>Multiplicity of parts, which are contained by AggregateDef, has to match 0..1.</dispname>
         </constraint>
         <constraint name="ValidAggregateDefPartCardinality14" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "SpecifyIdTag" ) -> size + self.parts( "VersionTag" ) -> size in
(partCount <= 1)]]>
            <dispname>Multiplicity of parts, which are contained by AggregateDef, has to match 0..1.</dispname>
         </constraint>
         <regnode name = "icon" value ="aggregate.bmp"></regnode>
         <role name = "BoundedString" metaref = "1160" kind = "BoundedString"><dispname>BoundedString</dispname></role>
         <role name = "FixedPoint" metaref = "1161" kind = "FixedPoint"><dispname>FixedPoint</dispname></role>
         <role name = "FixedSizeCollection" metaref = "1162" kind = "FixedSizeCollection"><dispname>FixedSizeCollection</dispname></role>
         <role name = "NamedTypeRef" metaref = "1163" kind = "NamedTypeRef"><dispname>NamedTypeRef</dispname></role>
         <role name = "PredefinedType" metaref = "1164" kind = "PredefinedType"><dispname>PredefinedType</dispname></role>
         <role name = "SpecifyIdTag" metaref = "1165" kind = "SpecifyIdTag"><dispname>SpecifyIdTag</dispname></role>
         <role name = "VariableSizeCollection" metaref = "1166" kind = "VariableSizeCollection"><dispname>VariableSizeCollection</dispname></role>
         <role name = "VersionTag" metaref = "1167" kind = "VersionTag"><dispname>VersionTag</dispname></role>
         <aspect name = "InterfaceDefinition" metaref = "1168" >
            <part metaref = "1169" role = "SpecifyIdTag" primary = "yes" linked = "no"></part>
            <part metaref = "1170" role = "VersionTag" primary = "yes" linked = "no"></part>
            <part metaref = "1171" role = "NamedTypeRef" primary = "yes" linked = "no"></part>
            <part metaref = "1172" role = "PredefinedType" primary = "yes" linked = "no"></part>
            <part metaref = "1173" role = "BoundedString" primary = "yes" linked = "no"></part>
            <part metaref = "1174" role = "FixedPoint" primary = "yes" linked = "no"></part>
            <part metaref = "1175" role = "FixedSizeCollection" primary = "yes" linked = "no"></part>
            <part metaref = "1176" role = "VariableSizeCollection" primary = "yes" linked = "no"></part>
         </aspect>
      </model>
      <model name = "AliasDef" metaref = "1177" >
         <dispname>AliasDef</dispname>
         <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="ValidIdentifier" eventmask = "0x80000011" depth = "1" priority = "1">
            <![CDATA[name.trim().match( "^[_]?[a-zA-Z][_a-zA-Z0-9]*$" )]]>
            <dispname>Not a valid identifier</dispname>
         </constraint>
         <constraint name="ValidAliasDefPartCardinality15" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "BoundedString" ) -> size + self.parts( "FixedPoint" ) -> size + self.parts( "FixedSizeCollection" ) -> size + self.parts( "NamedTypeRef" ) -> size + self.parts( "PredefinedType" ) -> size + self.parts( "VariableSizeCollection" ) -> size in
(partCount = 1)]]>
            <dispname>Multiplicity of parts, which are contained by AliasDef, has to match 0..1.</dispname>
         </constraint>
         <constraint name="ValidAliasDefPartCardinality16" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "SpecifyIdTag" ) -> size + self.parts( "VersionTag" ) -> size in
(partCount <= 1)]]>
            <dispname>Multiplicity of parts, which are contained by AliasDef, has to match 0..1.</dispname>
         </constraint>
         <regnode name = "icon" value ="alias.bmp"></regnode>
         <role name = "BoundedString" metaref = "1178" kind = "BoundedString"><dispname>BoundedString</dispname></role>
         <role name = "FixedPoint" metaref = "1179" kind = "FixedPoint"><dispname>FixedPoint</dispname></role>
         <role name = "FixedSizeCollection" metaref = "1180" kind = "FixedSizeCollection"><dispname>FixedSizeCollection</dispname></role>
         <role name = "NamedTypeRef" metaref = "1181" kind = "NamedTypeRef"><dispname>NamedTypeRef</dispname></role>
         <role name = "PredefinedType" metaref = "1182" kind = "PredefinedType"><dispname>PredefinedType</dispname></role>
         <role name = "SpecifyIdTag" metaref = "1183" kind = "SpecifyIdTag"><dispname>SpecifyIdTag</dispname></role>
         <role name = "VariableSizeCollection" metaref = "1184" kind = "VariableSizeCollection"><dispname>VariableSizeCollection</dispname></role>
         <role name = "VersionTag" metaref = "1185" kind = "VersionTag"><dispname>VersionTag</dispname></role>
         <aspect name = "InterfaceDefinition" metaref = "1186" >
            <part metaref = "1187" role = "SpecifyIdTag" primary = "yes" linked = "no"></part>
            <part metaref = "1188" role = "VersionTag" primary = "yes" linked = "no"></part>
            <part metaref = "1189" role = "NamedTypeRef" primary = "yes" linked = "no"></part>
            <part metaref = "1190" role = "PredefinedType" primary = "yes" linked = "no"></part>
            <part metaref = "1191" role = "BoundedString" primary = "yes" linked = "no"></part>
            <part metaref = "1192" role = "FixedPoint" primary = "yes" linked = "no"></part>
            <part metaref = "1193" role = "FixedSizeCollection" primary = "yes" linked = "no"></part>
            <part metaref = "1194" role = "VariableSizeCollection" primary = "yes" linked = "no"></part>
         </aspect>
      </model>
      <model name = "BoxedDef" metaref = "1195" >
         <dispname>BoxedDef</dispname>
         <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="NoBoxedValueDef" eventmask = "0x80000011" depth = "1" priority = "1">
            <![CDATA[let boxedref = parts ("NamedTypeRef") in
boxedref->size > 0 implies boxedref->forAll (
    x : gme::Reference | let ref = x.refersTo () in
    ref.kindName <> "ValueDef" and ref.kindName <> "EventDef"
)]]>
            <dispname>It is redundant and illegal to box a ValueDef or an EventDef</dispname>
         </constraint>
         <constraint name="ValidIdentifier" eventmask = "0x80000011" depth = "1" priority = "1">
            <![CDATA[name.trim().match( "^[_]?[a-zA-Z][_a-zA-Z0-9]*$" )]]>
            <dispname>Not a valid identifier</dispname>
         </constraint>
         <constraint name="ValidBoxedDefPartCardinality17" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "BoundedString" ) -> size + self.parts( "FixedPoint" ) -> size + self.parts( "FixedSizeCollection" ) -> size + self.parts( "NamedTypeRef" ) -> size + self.parts( "PredefinedType" ) -> size + self.parts( "VariableSizeCollection" ) -> size in
(partCount = 1)]]>
            <dispname>Multiplicity of parts, which are contained by BoxedDef, has to match 0..1.</dispname>
         </constraint>
         <constraint name="ValidBoxedDefPartCardinality18" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "SpecifyIdTag" ) -> size + self.parts( "VersionTag" ) -> size in
(partCount <= 1)]]>
            <dispname>Multiplicity of parts, which are contained by BoxedDef, has to match 0..1.</dispname>
         </constraint>
         <regnode name = "icon" value ="boxed.bmp"></regnode>
         <role name = "BoundedString" metaref = "1196" kind = "BoundedString"><dispname>BoundedString</dispname></role>
         <role name = "FixedPoint" metaref = "1197" kind = "FixedPoint"><dispname>FixedPoint</dispname></role>
         <role name = "FixedSizeCollection" metaref = "1198" kind = "FixedSizeCollection"><dispname>FixedSizeCollection</dispname></role>
         <role name = "NamedTypeRef" metaref = "1199" kind = "NamedTypeRef"><dispname>NamedTypeRef</dispname></role>
         <role name = "PredefinedType" metaref = "1200" kind = "PredefinedType"><dispname>PredefinedType</dispname></role>
         <role name = "SpecifyIdTag" metaref = "1201" kind = "SpecifyIdTag"><dispname>SpecifyIdTag</dispname></role>
         <role name = "VariableSizeCollection" metaref = "1202" kind = "VariableSizeCollection"><dispname>VariableSizeCollection</dispname></role>
         <role name = "VersionTag" metaref = "1203" kind = "VersionTag"><dispname>VersionTag</dispname></role>
         <aspect name = "InterfaceDefinition" metaref = "1204" >
            <part metaref = "1205" role = "SpecifyIdTag" primary = "yes" linked = "no"></part>
            <part metaref = "1206" role = "VersionTag" primary = "yes" linked = "no"></part>
            <part metaref = "1207" role = "NamedTypeRef" primary = "yes" linked = "no"></part>
            <part metaref = "1208" role = "PredefinedType" primary = "yes" linked = "no"></part>
            <part metaref = "1209" role = "BoundedString" primary = "yes" linked = "no"></part>
            <part metaref = "1210" role = "FixedPoint" primary = "yes" linked = "no"></part>
            <part metaref = "1211" role = "FixedSizeCollection" primary = "yes" linked = "no"></part>
            <part metaref = "1212" role = "VariableSizeCollection" primary = "yes" linked = "no"></part>
         </aspect>
      </model>
      <model name = "Discriminator" metaref = "1213" >
         <dispname>Discriminator</dispname>
         <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="NonNullDiscriminatorType" eventmask = "0x0" depth = "1" priority = "1">
            <![CDATA[parts ()->size <> 0]]>
            <dispname>Discriminator must have integer, character, boolean or enum type</dispname>
         </constraint>
         <constraint name="ValidDiscriminatorPartCardinality19" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "EnumRef" ) -> size in
(partCount <= 1)]]>
            <dispname>Multiplicity of parts, which are contained by Discriminator, has to match 0..1.</dispname>
         </constraint>
         <constraint name="ValidDiscriminatorPartCardinality20" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "PredefinedType" ) -> size in
(partCount <= 1)]]>
            <dispname>Multiplicity of parts, which are contained by Discriminator, has to match 0..1.</dispname>
         </constraint>
         <regnode name = "icon" value ="discriminator.bmp"></regnode>
         <role name = "EnumRef" metaref = "1214" kind = "EnumRef"><dispname>EnumRef</dispname></role>
         <role name = "PredefinedType" metaref = "1215" kind = "PredefinedType"><dispname>PredefinedType</dispname></role>
         <aspect name = "InterfaceDefinition" metaref = "1216" >
            <part metaref = "1217" role = "PredefinedType" primary = "yes" linked = "no"></part>
            <part metaref = "1218" role = "EnumRef" primary = "yes" linked = "no"></part>
         </aspect>
      </model>
      <model name = "EnumerationDef" metaref = "1219" >
         <dispname>EnumerationDef</dispname>
         <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="UniqueEnumValues" eventmask = "0x80000010" depth = "1" priority = "1">
            <![CDATA[atomParts ()->forAll (x, y : gme::Atom | x <> y implies x.name <> y.name)]]>
            <dispname>An enum's member names must be unique</dispname>
         </constraint>
         <constraint name="ValidIdentifier" eventmask = "0x80000011" depth = "1" priority = "1">
            <![CDATA[name.trim().match( "^[_]?[a-zA-Z][_a-zA-Z0-9]*$" )]]>
            <dispname>Not a valid identifier</dispname>
         </constraint>
         <constraint name="ValidEnumerationDefPartCardinality21" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "EnumValue" ) -> size in
(partCount >= 1)]]>
            <dispname>Multiplicity of parts, which are contained by EnumerationDef, has to match 0..1.</dispname>
         </constraint>
         <constraint name="ValidEnumerationDefPartCardinality22" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "SpecifyIdTag" ) -> size + self.parts( "VersionTag" ) -> size in
(partCount <= 1)]]>
            <dispname>Multiplicity of parts, which are contained by EnumerationDef, has to match 0..1.</dispname>
         </constraint>
         <regnode name = "icon" value ="enum.bmp"></regnode>
         <role name = "EnumValue" metaref = "1220" kind = "EnumValue"><dispname>EnumValue</dispname></role>
         <role name = "SpecifyIdTag" metaref = "1221" kind = "SpecifyIdTag"><dispname>SpecifyIdTag</dispname></role>
         <role name = "VersionTag" metaref = "1222" kind = "VersionTag"><dispname>VersionTag</dispname></role>
         <aspect name = "InterfaceDefinition" metaref = "1223" >
            <part metaref = "1224" role = "SpecifyIdTag" primary = "yes" linked = "no"></part>
            <part metaref = "1225" role = "VersionTag" primary = "yes" linked = "no"></part>
            <part metaref = "1226" role = "EnumValue" primary = "yes" linked = "no"></part>
         </aspect>
      </model>
      <model name = "SwitchedAggregateDef" metaref = "1227" >
         <dispname>SwitchedAggregateDef</dispname>
         <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="DefaultCaseCardinality" eventmask = "0x80000000" depth = "1" priority = "1">
            <![CDATA[self.allMembers ()->forAll (
    x : gme::FCO | let labels = x.connectedFCOs ()
                                in
    labels->exists (y : gme::Atom | y.name = "default") implies labels->size = 1
)]]>
            <dispname>A default member cannot have multiple labels</dispname>
         </constraint>
         <constraint name="UniqueLabelNames" eventmask = "0x80000010" depth = "1" priority = "1">
            <![CDATA[parts ("Label")->forAll (a, b : gme::Atom | a <> b implies a.name <> b.name)]]>
            <dispname>Labels in the same scope must be unique</dispname>
         </constraint>
         <constraint name="ValidIdentifier" eventmask = "0x80000011" depth = "1" priority = "1">
            <![CDATA[name.trim().match( "^[_]?[a-zA-Z][_a-zA-Z0-9]*$" )]]>
            <dispname>Not a valid identifier</dispname>
         </constraint>
         <constraint name="ValidSwitchedAggregateDefPartCardinality23" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "BoundedString" ) -> size + self.parts( "FixedPoint" ) -> size + self.parts( "FixedSizeCollection" ) -> size + self.parts( "NamedTypeRef" ) -> size + self.parts( "PredefinedType" ) -> size + self.parts( "VariableSizeCollection" ) -> size in
(partCount >= 1)]]>
            <dispname>Multiplicity of parts, which are contained by SwitchedAggregateDef, has to match 0..1.</dispname>
         </constraint>
         <constraint name="ValidSwitchedAggregateDefPartCardinality24" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "Label" ) -> size in
(partCount >= 1)]]>
            <dispname>Multiplicity of parts, which are contained by SwitchedAggregateDef, has to match 0..1.</dispname>
         </constraint>
         <constraint name="ValidSwitchedAggregateDefPartCardinality25" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "LabelConnection" ) -> size in
(partCount >= 1)]]>
            <dispname>Multiplicity of parts, which are contained by SwitchedAggregateDef, has to match 0..1.</dispname>
         </constraint>
         <constraint name="ValidSwitchedAggregateDefPartCardinality26" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "Discriminator" ) -> size in
(partCount = 1)]]>
            <dispname>Multiplicity of parts, which are contained by SwitchedAggregateDef, has to match 0..1.</dispname>
         </constraint>
         <constraint name="ValidSwitchedAggregateDefPartCardinality27" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "SpecifyIdTag" ) -> size + self.parts( "VersionTag" ) -> size in
(partCount <= 1)]]>
            <dispname>Multiplicity of parts, which are contained by SwitchedAggregateDef, has to match 0..1.</dispname>
         </constraint>
         <regnode name = "icon" value ="switchedaggregate.bmp"></regnode>
         <role name = "BoundedString" metaref = "1228" kind = "BoundedString"><dispname>BoundedString</dispname></role>
         <role name = "Discriminator" metaref = "1229" kind = "Discriminator"><dispname>Discriminator</dispname></role>
         <role name = "FixedPoint" metaref = "1230" kind = "FixedPoint"><dispname>FixedPoint</dispname></role>
         <role name = "FixedSizeCollection" metaref = "1231" kind = "FixedSizeCollection"><dispname>FixedSizeCollection</dispname></role>
         <role name = "Label" metaref = "1232" kind = "Label"><dispname>Label</dispname></role>
         <role name = "LabelConnection" metaref = "1233" kind = "LabelConnection"><dispname>LabelConnection</dispname></role>
         <role name = "NamedTypeRef" metaref = "1234" kind = "NamedTypeRef"><dispname>NamedTypeRef</dispname></role>
         <role name = "PredefinedType" metaref = "1235" kind = "PredefinedType"><dispname>PredefinedType</dispname></role>
         <role name = "SpecifyIdTag" metaref = "1236" kind = "SpecifyIdTag"><dispname>SpecifyIdTag</dispname></role>
         <role name = "VariableSizeCollection" metaref = "1237" kind = "VariableSizeCollection"><dispname>VariableSizeCollection</dispname></role>
         <role name = "VersionTag" metaref = "1238" kind = "VersionTag"><dispname>VersionTag</dispname></role>
         <aspect name = "InterfaceDefinition" metaref = "1239" >
            <part metaref = "1240" role = "SpecifyIdTag" primary = "yes" linked = "no"></part>
            <part metaref = "1241" role = "VersionTag" primary = "yes" linked = "no"></part>
            <part metaref = "1242" role = "NamedTypeRef" primary = "yes" linked = "no"></part>
            <part metaref = "1243" role = "PredefinedType" primary = "yes" linked = "no"></part>
            <part metaref = "1244" role = "BoundedString" primary = "yes" linked = "no"></part>
            <part metaref = "1245" role = "FixedPoint" primary = "yes" linked = "no"></part>
            <part metaref = "1246" role = "FixedSizeCollection" primary = "yes" linked = "no"></part>
            <part metaref = "1247" role = "VariableSizeCollection" primary = "yes" linked = "no"></part>
            <part metaref = "1248" role = "Discriminator" primary = "yes" linked = "no"></part>
            <part metaref = "1249" role = "Label" primary = "yes" linked = "no"></part>
            <part metaref = "1250" role = "LabelConnection" primary = "yes" linked = "no"></part>
         </aspect>
      </model>
      <model name = "Attribute" metaref = "1251" >
         <dispname>Attribute</dispname>
         <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="ValidAttributePartCardinality28" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "BoundedString" ) -> size + self.parts( "FixedPoint" ) -> size + self.parts( "FixedSizeCollection" ) -> size + self.parts( "NamedTypeRef" ) -> size + self.parts( "PredefinedType" ) -> size + self.parts( "VariableSizeCollection" ) -> size in
(partCount = 1)]]>
            <dispname>Multiplicity of parts, which are contained by Attribute, has to match 0..1.</dispname>
         </constraint>
         <constraint name="ValidAttributePartCardinality29" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "SpecifyIdTag" ) -> size + self.parts( "VersionTag" ) -> size in
(partCount <= 1)]]>
            <dispname>Multiplicity of parts, which are contained by Attribute, has to match 0..1.</dispname>
         </constraint>
         <regnode name = "icon" value ="readonlyattribute.bmp"></regnode>
         <regnode name = "icon" value ="attribute.bmp"></regnode>
         <role name = "BoundedString" metaref = "1252" kind = "BoundedString"><dispname>BoundedString</dispname></role>
         <role name = "FixedPoint" metaref = "1253" kind = "FixedPoint"><dispname>FixedPoint</dispname></role>
         <role name = "FixedSizeCollection" metaref = "1254" kind = "FixedSizeCollection"><dispname>FixedSizeCollection</dispname></role>
         <role name = "GetException" metaref = "1255" kind = "GetException"><dispname>GetException</dispname></role>
         <role name = "NamedTypeRef" metaref = "1256" kind = "NamedTypeRef"><dispname>NamedTypeRef</dispname></role>
         <role name = "PredefinedType" metaref = "1257" kind = "PredefinedType"><dispname>PredefinedType</dispname></role>
         <role name = "SetException" metaref = "1258" kind = "SetException"><dispname>SetException</dispname></role>
         <role name = "SpecifyIdTag" metaref = "1259" kind = "SpecifyIdTag"><dispname>SpecifyIdTag</dispname></role>
         <role name = "VariableSizeCollection" metaref = "1260" kind = "VariableSizeCollection"><dispname>VariableSizeCollection</dispname></role>
         <role name = "VersionTag" metaref = "1261" kind = "VersionTag"><dispname>VersionTag</dispname></role>
         <aspect name = "InterfaceDefinition" metaref = "1262" >
            <part metaref = "1263" role = "SpecifyIdTag" primary = "yes" linked = "no"></part>
            <part metaref = "1264" role = "VersionTag" primary = "yes" linked = "no"></part>
            <part metaref = "1265" role = "NamedTypeRef" primary = "yes" linked = "no"></part>
            <part metaref = "1266" role = "PredefinedType" primary = "yes" linked = "no"></part>
            <part metaref = "1267" role = "GetException" primary = "yes" linked = "no"></part>
            <part metaref = "1268" role = "BoundedString" primary = "yes" linked = "no"></part>
            <part metaref = "1269" role = "FixedPoint" primary = "yes" linked = "no"></part>
            <part metaref = "1270" role = "FixedSizeCollection" primary = "yes" linked = "no"></part>
            <part metaref = "1271" role = "VariableSizeCollection" primary = "yes" linked = "no"></part>
            <part metaref = "1272" role = "SetException" primary = "yes" linked = "no"></part>
         </aspect>
      </model>
      <model name = "ComponentFactory" metaref = "1273" >
         <dispname>ComponentFactory</dispname>
         <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="ValidIdentifier" eventmask = "0x80000011" depth = "1" priority = "1">
            <![CDATA[name.trim().match( "^[_]?[a-zA-Z][_a-zA-Z0-9]*$" )]]>
            <dispname>Not a valid identifier</dispname>
         </constraint>
         <constraint name="ValidIdentifier" eventmask = "0x80000011" depth = "1" priority = "1">
            <![CDATA[name.trim().match( "^[_]?[a-zA-Z][_a-zA-Z0-9]*$" )]]>
            <dispname>Not a valid identifier</dispname>
         </constraint>
         <constraint name="InheritsSameType" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[self.referenceParts (Inherits)->forAll (x : gme::Reference | x.refersTo ().type () = self.type ())]]>
            <dispname>A parent must have the same type as its child</dispname>
         </constraint>
         <constraint name="InheritsSameType" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[self.referenceParts (Inherits)->forAll (x : gme::Reference | x.refersTo ().type () = self.type ())]]>
            <dispname>A parent must have the same type as its child</dispname>
         </constraint>
         <constraint name="NoDuplicateImmediateParents" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[self.referenceParts (Inherits)->forAll (x, y : gme::Reference | x <> y implies x.refersTo () <> y.refersTo ())]]>
            <dispname>Immediate parents must all be unique</dispname>
         </constraint>
         <constraint name="NoDuplicateImmediateParents" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[self.referenceParts (Inherits)->forAll (x, y : gme::Reference | x <> y implies x.refersTo () <> y.refersTo ())]]>
            <dispname>Immediate parents must all be unique</dispname>
         </constraint>
         <constraint name="NoRecursiveInheritance" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[self.inheritsRecursive (self)->forAll (x : gme::Model | x <> self)]]>
            <dispname>There is a cycle in the inheritance graph</dispname>
         </constraint>
         <constraint name="NoRecursiveInheritance" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[self.inheritsRecursive (self)->forAll (x : gme::Model | x <> self)]]>
            <dispname>There is a cycle in the inheritance graph</dispname>
         </constraint>
         <constraint name="OneParent" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[self.parts ("Inherits")->size < 2]]>
            <dispname>ComponentDef and ComponentManager may have only one parent</dispname>
         </constraint>
         <constraint name="UniqueInheritableDeclNames" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[(self.parts () - self.parts ("Inherits"))->forAll (x, y : gme::FCO | x <> y implies x.name <> y.name)]]>
            <dispname>Declarations in a scope must have unique names</dispname>
         </constraint>
         <constraint name="UniqueInheritableDeclNames" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[(self.parts () - self.parts ("Inherits"))->forAll (x, y : gme::FCO | x <> y implies x.name <> y.name)]]>
            <dispname>Declarations in a scope must have unique names</dispname>
         </constraint>
         <constraint name="ValidComponentFactoryPartCardinality30" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "Manages" ) -> size in
(partCount = 1)]]>
            <dispname>Multiplicity of parts, which are contained by ComponentFactory, has to match 0..1.</dispname>
         </constraint>
         <constraint name="ValidComponentFactoryPartCardinality31" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "LookupKey" ) -> size in
(partCount <= 1)]]>
            <dispname>Multiplicity of parts, which are contained by ComponentFactory, has to match 0..1.</dispname>
         </constraint>
         <constraint name="ValidComponentFactoryPartCardinality32" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "SpecifyIdTag" ) -> size + self.parts( "VersionTag" ) -> size + self.parts( "SpecifyIdTag" ) -> size + self.parts( "VersionTag" ) -> size in
(partCount <= 1)]]>
            <dispname>Multiplicity of parts, which are contained by ComponentFactory, has to match 0..1.</dispname>
         </constraint>
         <regnode name = "icon" value ="componentfactory.bmp"></regnode>
         <role name = "AggregateDef" metaref = "1274" kind = "AggregateDef"><dispname>AggregateDef</dispname></role>
         <role name = "AliasDef" metaref = "1275" kind = "AliasDef"><dispname>AliasDef</dispname></role>
         <role name = "Attribute" metaref = "1276" kind = "Attribute"><dispname>Attribute</dispname></role>
         <role name = "ConstantDef" metaref = "1277" kind = "ConstantDef"><dispname>ConstantDef</dispname></role>
         <role name = "EnumerationDef" metaref = "1278" kind = "EnumerationDef"><dispname>EnumerationDef</dispname></role>
         <role name = "ExceptionDef" metaref = "1279" kind = "ExceptionDef"><dispname>ExceptionDef</dispname></role>
         <role name = "FactoryOperation" metaref = "1280" kind = "FactoryOperation"><dispname>FactoryOperation</dispname></role>
         <role name = "Inherits" metaref = "1281" kind = "Inherits"><dispname>Inherits</dispname></role>
         <role name = "LookupKey" metaref = "1282" kind = "LookupKey"><dispname>LookupKey</dispname></role>
         <role name = "LookupOperation" metaref = "1283" kind = "LookupOperation"><dispname>LookupOperation</dispname></role>
         <role name = "Manages" metaref = "1284" kind = "Manages"><dispname>Manages</dispname></role>
         <role name = "OnewayOperation" metaref = "1285" kind = "OnewayOperation"><dispname>OnewayOperation</dispname></role>
         <role name = "ReadonlyAttribute" metaref = "1286" kind = "ReadonlyAttribute"><dispname>ReadonlyAttribute</dispname></role>
         <role name = "SpecifyIdTag" metaref = "1287" kind = "SpecifyIdTag"><dispname>SpecifyIdTag</dispname></role>
         <role name = "Supports" metaref = "1288" kind = "Supports"><dispname>Supports</dispname></role>
         <role name = "SwitchedAggregateDef" metaref = "1289" kind = "SwitchedAggregateDef"><dispname>SwitchedAggregateDef</dispname></role>
         <role name = "TwowayOperation" metaref = "1290" kind = "TwowayOperation"><dispname>TwowayOperation</dispname></role>
         <role name = "VersionTag" metaref = "1291" kind = "VersionTag"><dispname>VersionTag</dispname></role>
         <aspect name = "InterfaceDefinition" metaref = "1292" >
            <part metaref = "1293" role = "Attribute" primary = "yes" linked = "no"></part>
            <part metaref = "1294" role = "ConstantDef" primary = "yes" linked = "no"></part>
            <part metaref = "1295" role = "ExceptionDef" primary = "yes" linked = "no"></part>
            <part metaref = "1296" role = "AggregateDef" primary = "yes" linked = "no"></part>
            <part metaref = "1297" role = "AliasDef" primary = "yes" linked = "no"></part>
            <part metaref = "1298" role = "EnumerationDef" primary = "yes" linked = "no"></part>
            <part metaref = "1299" role = "SwitchedAggregateDef" primary = "yes" linked = "no"></part>
            <part metaref = "1300" role = "FactoryOperation" primary = "yes" linked = "no"></part>
            <part metaref = "1301" role = "LookupOperation" primary = "yes" linked = "no"></part>
            <part metaref = "1302" role = "OnewayOperation" primary = "yes" linked = "no"></part>
            <part metaref = "1303" role = "TwowayOperation" primary = "yes" linked = "no"></part>
            <part metaref = "1304" role = "SpecifyIdTag" primary = "yes" linked = "no"></part>
            <part metaref = "1305" role = "VersionTag" primary = "yes" linked = "no"></part>
            <part metaref = "1306" role = "Inherits" primary = "yes" linked = "no"></part>
            <part metaref = "1307" role = "LookupKey" primary = "yes" linked = "no"></part>
            <part metaref = "1308" role = "Manages" primary = "yes" linked = "no"></part>
            <part metaref = "1309" role = "ReadonlyAttribute" primary = "yes" linked = "no"></part>
            <part metaref = "1310" role = "Supports" primary = "yes" linked = "no"></part>
         </aspect>
      </model>
      <model name = "EventDef" metaref = "1311"  attributes = "custom truncatable abstract">
         <dispname>EventDef</dispname>
         <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="ValidIdentifier" eventmask = "0x80000011" depth = "1" priority = "1">
            <![CDATA[name.trim().match( "^[_]?[a-zA-Z][_a-zA-Z0-9]*$" )]]>
            <dispname>Not a valid identifier</dispname>
         </constraint>
         <constraint name="ValidIdentifier" eventmask = "0x80000011" depth = "1" priority = "1">
            <![CDATA[name.trim().match( "^[_]?[a-zA-Z][_a-zA-Z0-9]*$" )]]>
            <dispname>Not a valid identifier</dispname>
         </constraint>
         <constraint name="ConcreteEventParent" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[let concrete_parents = self.parts ("Inherits")->select (x : gme::Model | x.oclAsType (EventDef).abstract = false)
  in
if (self.abstract = true) then
  concrete_parents->size = 0
else
  concrete_parents->size < 2
endif]]>
            <dispname>An abstract EventDef can have no concrete parent, if it is concrete it can have at most one.</dispname>
         </constraint>
         <constraint name="InheritsSameType" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[self.referenceParts (Inherits)->forAll (x : gme::Reference | x.refersTo ().type () = self.type ())]]>
            <dispname>A parent must have the same type as its child</dispname>
         </constraint>
         <constraint name="InheritsSameType" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[self.referenceParts (Inherits)->forAll (x : gme::Reference | x.refersTo ().type () = self.type ())]]>
            <dispname>A parent must have the same type as its child</dispname>
         </constraint>
         <constraint name="NoDuplicateImmediateParents" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[self.referenceParts (Inherits)->forAll (x, y : gme::Reference | x <> y implies x.refersTo () <> y.refersTo ())]]>
            <dispname>Immediate parents must all be unique</dispname>
         </constraint>
         <constraint name="NoDuplicateImmediateParents" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[self.referenceParts (Inherits)->forAll (x, y : gme::Reference | x <> y implies x.refersTo () <> y.refersTo ())]]>
            <dispname>Immediate parents must all be unique</dispname>
         </constraint>
         <constraint name="NoRecursiveInheritance" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[self.inheritsRecursive (self)->forAll (x : gme::Model | x <> self)]]>
            <dispname>There is a cycle in the inheritance graph</dispname>
         </constraint>
         <constraint name="NoRecursiveInheritance" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[self.inheritsRecursive (self)->forAll (x : gme::Model | x <> self)]]>
            <dispname>There is a cycle in the inheritance graph</dispname>
         </constraint>
         <constraint name="UniqueInheritableDeclNames" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[(self.parts () - self.parts ("Inherits"))->forAll (x, y : gme::FCO | x <> y implies x.name <> y.name)]]>
            <dispname>Declarations in a scope must have unique names</dispname>
         </constraint>
         <constraint name="UniqueInheritableDeclNames" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[(self.parts () - self.parts ("Inherits"))->forAll (x, y : gme::FCO | x <> y implies x.name <> y.name)]]>
            <dispname>Declarations in a scope must have unique names</dispname>
         </constraint>
         <constraint name="ValidEventDefPartCardinality33" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "PrefixTag" ) -> size in
(partCount <= 1)]]>
            <dispname>Multiplicity of parts, which are contained by EventDef, has to match 0..1.</dispname>
         </constraint>
         <constraint name="ValidEventDefPartCardinality34" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "SpecifyIdTag" ) -> size + self.parts( "VersionTag" ) -> size + self.parts( "SpecifyIdTag" ) -> size + self.parts( "VersionTag" ) -> size in
(partCount <= 1)]]>
            <dispname>Multiplicity of parts, which are contained by EventDef, has to match 0..1.</dispname>
         </constraint>
         <attrdef name="custom" metaref = "1312" valuetype = "boolean" defvalue = "false">
            <dispname></dispname>
         </attrdef>
         <attrdef name="abstract" metaref = "1313" valuetype = "boolean" defvalue = "false">
            <dispname></dispname>
         </attrdef>
         <regnode name = "icon" value ="event.bmp"></regnode>
         <role name = "AggregateDef" metaref = "1314" kind = "AggregateDef"><dispname>AggregateDef</dispname></role>
         <role name = "AliasDef" metaref = "1315" kind = "AliasDef"><dispname>AliasDef</dispname></role>
         <role name = "Attribute" metaref = "1316" kind = "Attribute"><dispname>Attribute</dispname></role>
         <role name = "BoundedString" metaref = "1317" kind = "BoundedString"><dispname>BoundedString</dispname></role>
         <role name = "ConstantDef" metaref = "1318" kind = "ConstantDef"><dispname>ConstantDef</dispname></role>
         <role name = "EnumerationDef" metaref = "1319" kind = "EnumerationDef"><dispname>EnumerationDef</dispname></role>
         <role name = "ExceptionDef" metaref = "1320" kind = "ExceptionDef"><dispname>ExceptionDef</dispname></role>
         <role name = "FactoryOperation" metaref = "1321" kind = "FactoryOperation"><dispname>FactoryOperation</dispname></role>
         <role name = "FixedPoint" metaref = "1322" kind = "FixedPoint"><dispname>FixedPoint</dispname></role>
         <role name = "FixedSizeCollection" metaref = "1323" kind = "FixedSizeCollection"><dispname>FixedSizeCollection</dispname></role>
         <role name = "Inherits" metaref = "1324" kind = "Inherits"><dispname>Inherits</dispname></role>
         <role name = "MakeMemberPrivate" metaref = "1325" kind = "MakeMemberPrivate"><dispname>MakeMemberPrivate</dispname></role>
         <role name = "NamedTypeRef" metaref = "1326" kind = "NamedTypeRef"><dispname>NamedTypeRef</dispname></role>
         <role name = "OnewayOperation" metaref = "1327" kind = "OnewayOperation"><dispname>OnewayOperation</dispname></role>
         <role name = "PredefinedType" metaref = "1328" kind = "PredefinedType"><dispname>PredefinedType</dispname></role>
         <role name = "PrefixTag" metaref = "1329" kind = "PrefixTag"><dispname>PrefixTag</dispname></role>
         <role name = "PrivateFlag" metaref = "1330" kind = "PrivateFlag"><dispname>PrivateFlag</dispname></role>
         <role name = "ReadonlyAttribute" metaref = "1331" kind = "ReadonlyAttribute"><dispname>ReadonlyAttribute</dispname></role>
         <role name = "SpecifyIdTag" metaref = "1332" kind = "SpecifyIdTag"><dispname>SpecifyIdTag</dispname></role>
         <role name = "Supports" metaref = "1333" kind = "Supports"><dispname>Supports</dispname></role>
         <role name = "SwitchedAggregateDef" metaref = "1334" kind = "SwitchedAggregateDef"><dispname>SwitchedAggregateDef</dispname></role>
         <role name = "TwowayOperation" metaref = "1335" kind = "TwowayOperation"><dispname>TwowayOperation</dispname></role>
         <role name = "VariableSizeCollection" metaref = "1336" kind = "VariableSizeCollection"><dispname>VariableSizeCollection</dispname></role>
         <role name = "VersionTag" metaref = "1337" kind = "VersionTag"><dispname>VersionTag</dispname></role>
         <aspect name = "InterfaceDefinition" metaref = "1338"  attributes = "custom truncatable abstract">
            <part metaref = "1339" role = "Attribute" primary = "yes" linked = "no"></part>
            <part metaref = "1340" role = "ConstantDef" primary = "yes" linked = "no"></part>
            <part metaref = "1341" role = "ExceptionDef" primary = "yes" linked = "no"></part>
            <part metaref = "1342" role = "AggregateDef" primary = "yes" linked = "no"></part>
            <part metaref = "1343" role = "AliasDef" primary = "yes" linked = "no"></part>
            <part metaref = "1344" role = "EnumerationDef" primary = "yes" linked = "no"></part>
            <part metaref = "1345" role = "SwitchedAggregateDef" primary = "yes" linked = "no"></part>
            <part metaref = "1346" role = "FactoryOperation" primary = "yes" linked = "no"></part>
            <part metaref = "1347" role = "OnewayOperation" primary = "yes" linked = "no"></part>
            <part metaref = "1348" role = "TwowayOperation" primary = "yes" linked = "no"></part>
            <part metaref = "1349" role = "PrefixTag" primary = "yes" linked = "no"></part>
            <part metaref = "1350" role = "SpecifyIdTag" primary = "yes" linked = "no"></part>
            <part metaref = "1351" role = "VersionTag" primary = "yes" linked = "no"></part>
            <part metaref = "1352" role = "NamedTypeRef" primary = "yes" linked = "no"></part>
            <part metaref = "1353" role = "PredefinedType" primary = "yes" linked = "no"></part>
            <part metaref = "1354" role = "Inherits" primary = "yes" linked = "no"></part>
            <part metaref = "1355" role = "MakeMemberPrivate" primary = "yes" linked = "no"></part>
            <part metaref = "1356" role = "BoundedString" primary = "yes" linked = "no"></part>
            <part metaref = "1357" role = "FixedPoint" primary = "yes" linked = "no"></part>
            <part metaref = "1358" role = "FixedSizeCollection" primary = "yes" linked = "no"></part>
            <part metaref = "1359" role = "VariableSizeCollection" primary = "yes" linked = "no"></part>
            <part metaref = "1360" role = "PrivateFlag" primary = "yes" linked = "no"></part>
            <part metaref = "1361" role = "ReadonlyAttribute" primary = "yes" linked = "no"></part>
            <part metaref = "1362" role = "Supports" primary = "yes" linked = "no"></part>
         </aspect>
      </model>
      <model name = "ObjectDef" metaref = "1363"  attributes = "local abstract">
         <dispname>ObjectDef</dispname>
         <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="ValidIdentifier" eventmask = "0x80000011" depth = "1" priority = "1">
            <![CDATA[name.trim().match( "^[_]?[a-zA-Z][_a-zA-Z0-9]*$" )]]>
            <dispname>Not a valid identifier</dispname>
         </constraint>
         <constraint name="InheritsSameType" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[self.referenceParts (Inherits)->forAll (x : gme::Reference | x.refersTo ().type () = self.type ())]]>
            <dispname>A parent must have the same type as its child</dispname>
         </constraint>
         <constraint name="NoDuplicateImmediateParents" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[self.referenceParts (Inherits)->forAll (x, y : gme::Reference | x <> y implies x.refersTo () <> y.refersTo ())]]>
            <dispname>Immediate parents must all be unique</dispname>
         </constraint>
         <constraint name="NoNonLocalFromLocal" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[if (self.local = true) then
  true
else
  let parents = self.parts ("Inherits")->collect (x : gme::Reference | x.refersTo ()) in
  parents->forAll (x : gme::Model | x.oclAsType (ObjectDef).local = false)
endif]]>
            <dispname>A non-local interface cannot inherit from a local one</dispname>
         </constraint>
         <constraint name="NoRecursiveInheritance" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[self.inheritsRecursive (self)->forAll (x : gme::Model | x <> self)]]>
            <dispname>There is a cycle in the inheritance graph</dispname>
         </constraint>
         <constraint name="UniqueInheritableDeclNames" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[(self.parts () - self.parts ("Inherits"))->forAll (x, y : gme::FCO | x <> y implies x.name <> y.name)]]>
            <dispname>Declarations in a scope must have unique names</dispname>
         </constraint>
         <constraint name="ValidObjectDefPartCardinality35" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "PrefixTag" ) -> size in
(partCount <= 1)]]>
            <dispname>Multiplicity of parts, which are contained by ObjectDef, has to match 0..1.</dispname>
         </constraint>
         <constraint name="ValidObjectDefPartCardinality36" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "SpecifyIdTag" ) -> size + self.parts( "VersionTag" ) -> size in
(partCount <= 1)]]>
            <dispname>Multiplicity of parts, which are contained by ObjectDef, has to match 0..1.</dispname>
         </constraint>
         <attrdef name="local" metaref = "1364" valuetype = "boolean" defvalue = "false">
            <dispname></dispname>
         </attrdef>
         <attrdef name="abstract" metaref = "1365" valuetype = "boolean" defvalue = "false">
            <dispname></dispname>
         </attrdef>
         <regnode name = "icon" value ="object.bmp"></regnode>
         <role name = "AggregateDef" metaref = "1366" kind = "AggregateDef"><dispname>AggregateDef</dispname></role>
         <role name = "AliasDef" metaref = "1367" kind = "AliasDef"><dispname>AliasDef</dispname></role>
         <role name = "Attribute" metaref = "1368" kind = "Attribute"><dispname>Attribute</dispname></role>
         <role name = "ConstantDef" metaref = "1369" kind = "ConstantDef"><dispname>ConstantDef</dispname></role>
         <role name = "EnumerationDef" metaref = "1370" kind = "EnumerationDef"><dispname>EnumerationDef</dispname></role>
         <role name = "ExceptionDef" metaref = "1371" kind = "ExceptionDef"><dispname>ExceptionDef</dispname></role>
         <role name = "Inherits" metaref = "1372" kind = "Inherits"><dispname>Inherits</dispname></role>
         <role name = "OnewayOperation" metaref = "1373" kind = "OnewayOperation"><dispname>OnewayOperation</dispname></role>
         <role name = "PrefixTag" metaref = "1374" kind = "PrefixTag"><dispname>PrefixTag</dispname></role>
         <role name = "ReadonlyAttribute" metaref = "1375" kind = "ReadonlyAttribute"><dispname>ReadonlyAttribute</dispname></role>
         <role name = "SpecifyIdTag" metaref = "1376" kind = "SpecifyIdTag"><dispname>SpecifyIdTag</dispname></role>
         <role name = "SwitchedAggregateDef" metaref = "1377" kind = "SwitchedAggregateDef"><dispname>SwitchedAggregateDef</dispname></role>
         <role name = "TwowayOperation" metaref = "1378" kind = "TwowayOperation"><dispname>TwowayOperation</dispname></role>
         <role name = "VersionTag" metaref = "1379" kind = "VersionTag"><dispname>VersionTag</dispname></role>
         <aspect name = "InterfaceDefinition" metaref = "1380"  attributes = "local abstract">
            <part metaref = "1381" role = "Attribute" primary = "yes" linked = "no"></part>
            <part metaref = "1382" role = "ConstantDef" primary = "yes" linked = "no"></part>
            <part metaref = "1383" role = "ExceptionDef" primary = "yes" linked = "no"></part>
            <part metaref = "1384" role = "AggregateDef" primary = "yes" linked = "no"></part>
            <part metaref = "1385" role = "AliasDef" primary = "yes" linked = "no"></part>
            <part metaref = "1386" role = "EnumerationDef" primary = "yes" linked = "no"></part>
            <part metaref = "1387" role = "SwitchedAggregateDef" primary = "yes" linked = "no"></part>
            <part metaref = "1388" role = "OnewayOperation" primary = "yes" linked = "no"></part>
            <part metaref = "1389" role = "TwowayOperation" primary = "yes" linked = "no"></part>
            <part metaref = "1390" role = "PrefixTag" primary = "yes" linked = "no"></part>
            <part metaref = "1391" role = "SpecifyIdTag" primary = "yes" linked = "no"></part>
            <part metaref = "1392" role = "VersionTag" primary = "yes" linked = "no"></part>
            <part metaref = "1393" role = "Inherits" primary = "yes" linked = "no"></part>
            <part metaref = "1394" role = "ReadonlyAttribute" primary = "yes" linked = "no"></part>
         </aspect>
      </model>
      <model name = "ReadonlyAttribute" metaref = "1395" >
         <dispname>ReadonlyAttribute</dispname>
         <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="ValidReadonlyAttributePartCardinality37" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "BoundedString" ) -> size + self.parts( "FixedPoint" ) -> size + self.parts( "FixedSizeCollection" ) -> size + self.parts( "NamedTypeRef" ) -> size + self.parts( "PredefinedType" ) -> size + self.parts( "VariableSizeCollection" ) -> size in
(partCount = 1)]]>
            <dispname>Multiplicity of parts, which are contained by ReadonlyAttribute, has to match 1.</dispname>
         </constraint>
         <regnode name = "icon" value ="readonlyattribute.bmp"></regnode>
         <role name = "BoundedString" metaref = "1396" kind = "BoundedString"><dispname>BoundedString</dispname></role>
         <role name = "FixedPoint" metaref = "1397" kind = "FixedPoint"><dispname>FixedPoint</dispname></role>
         <role name = "FixedSizeCollection" metaref = "1398" kind = "FixedSizeCollection"><dispname>FixedSizeCollection</dispname></role>
         <role name = "GetException" metaref = "1399" kind = "GetException"><dispname>GetException</dispname></role>
         <role name = "NamedTypeRef" metaref = "1400" kind = "NamedTypeRef"><dispname>NamedTypeRef</dispname></role>
         <role name = "PredefinedType" metaref = "1401" kind = "PredefinedType"><dispname>PredefinedType</dispname></role>
         <role name = "VariableSizeCollection" metaref = "1402" kind = "VariableSizeCollection"><dispname>VariableSizeCollection</dispname></role>
         <aspect name = "InterfaceDefinition" metaref = "1403" >
            <part metaref = "1404" role = "NamedTypeRef" primary = "yes" linked = "no"></part>
            <part metaref = "1405" role = "PredefinedType" primary = "yes" linked = "no"></part>
            <part metaref = "1406" role = "GetException" primary = "yes" linked = "no"></part>
            <part metaref = "1407" role = "BoundedString" primary = "yes" linked = "no"></part>
            <part metaref = "1408" role = "FixedPoint" primary = "yes" linked = "no"></part>
            <part metaref = "1409" role = "FixedSizeCollection" primary = "yes" linked = "no"></part>
            <part metaref = "1410" role = "VariableSizeCollection" primary = "yes" linked = "no"></part>
         </aspect>
      </model>
      <model name = "ValueDef" metaref = "1411"  attributes = "custom truncatable abstract">
         <dispname>ValueDef</dispname>
         <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="ValidIdentifier" eventmask = "0x80000011" depth = "1" priority = "1">
            <![CDATA[name.trim().match( "^[_]?[a-zA-Z][_a-zA-Z0-9]*$" )]]>
            <dispname>Not a valid identifier</dispname>
         </constraint>
         <constraint name="ValidIdentifier" eventmask = "0x80000011" depth = "1" priority = "1">
            <![CDATA[name.trim().match( "^[_]?[a-zA-Z][_a-zA-Z0-9]*$" )]]>
            <dispname>Not a valid identifier</dispname>
         </constraint>
         <constraint name="ConcreteValueParent" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[let concrete_parents = self.parts ("Inherits")->select (x : gme::Model | x.oclAsType (ValueDef).abstract = false)
  in
if (self.abstract = true) then
  concrete_parents->size = 0
else
  concrete_parents->size < 2
endif]]>
            <dispname>An abstract ValueDef can have no concrete parent, if it is concrete it can have at most one.</dispname>
         </constraint>
         <constraint name="InheritsSameType" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[self.referenceParts (Inherits)->forAll (x : gme::Reference | x.refersTo ().type () = self.type ())]]>
            <dispname>A parent must have the same type as its child</dispname>
         </constraint>
         <constraint name="InheritsSameType" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[self.referenceParts (Inherits)->forAll (x : gme::Reference | x.refersTo ().type () = self.type ())]]>
            <dispname>A parent must have the same type as its child</dispname>
         </constraint>
         <constraint name="NoDuplicateImmediateParents" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[self.referenceParts (Inherits)->forAll (x, y : gme::Reference | x <> y implies x.refersTo () <> y.refersTo ())]]>
            <dispname>Immediate parents must all be unique</dispname>
         </constraint>
         <constraint name="NoDuplicateImmediateParents" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[self.referenceParts (Inherits)->forAll (x, y : gme::Reference | x <> y implies x.refersTo () <> y.refersTo ())]]>
            <dispname>Immediate parents must all be unique</dispname>
         </constraint>
         <constraint name="NoRecursiveInheritance" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[self.inheritsRecursive (self)->forAll (x : gme::Model | x <> self)]]>
            <dispname>There is a cycle in the inheritance graph</dispname>
         </constraint>
         <constraint name="NoRecursiveInheritance" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[self.inheritsRecursive (self)->forAll (x : gme::Model | x <> self)]]>
            <dispname>There is a cycle in the inheritance graph</dispname>
         </constraint>
         <constraint name="UniqueInheritableDeclNames" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[(self.parts () - self.parts ("Inherits"))->forAll (x, y : gme::FCO | x <> y implies x.name <> y.name)]]>
            <dispname>Declarations in a scope must have unique names</dispname>
         </constraint>
         <constraint name="UniqueInheritableDeclNames" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[(self.parts () - self.parts ("Inherits"))->forAll (x, y : gme::FCO | x <> y implies x.name <> y.name)]]>
            <dispname>Declarations in a scope must have unique names</dispname>
         </constraint>
         <constraint name="ValidValueDefPartCardinality38" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "PrefixTag" ) -> size in
(partCount <= 1)]]>
            <dispname>Multiplicity of parts, which are contained by ValueDef, has to match 0..1.</dispname>
         </constraint>
         <constraint name="ValidValueDefPartCardinality39" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "SpecifyIdTag" ) -> size + self.parts( "VersionTag" ) -> size + self.parts( "SpecifyIdTag" ) -> size + self.parts( "VersionTag" ) -> size in
(partCount <= 1)]]>
            <dispname>Multiplicity of parts, which are contained by ValueDef, has to match 0..1.</dispname>
         </constraint>
         <attrdef name="custom" metaref = "1412" valuetype = "boolean" defvalue = "false">
            <dispname></dispname>
         </attrdef>
         <attrdef name="abstract" metaref = "1413" valuetype = "boolean" defvalue = "false">
            <dispname></dispname>
         </attrdef>
         <regnode name = "icon" value ="value.bmp"></regnode>
         <role name = "AggregateDef" metaref = "1414" kind = "AggregateDef"><dispname>AggregateDef</dispname></role>
         <role name = "AliasDef" metaref = "1415" kind = "AliasDef"><dispname>AliasDef</dispname></role>
         <role name = "Attribute" metaref = "1416" kind = "Attribute"><dispname>Attribute</dispname></role>
         <role name = "BoundedString" metaref = "1417" kind = "BoundedString"><dispname>BoundedString</dispname></role>
         <role name = "ConstantDef" metaref = "1418" kind = "ConstantDef"><dispname>ConstantDef</dispname></role>
         <role name = "EnumerationDef" metaref = "1419" kind = "EnumerationDef"><dispname>EnumerationDef</dispname></role>
         <role name = "ExceptionDef" metaref = "1420" kind = "ExceptionDef"><dispname>ExceptionDef</dispname></role>
         <role name = "FactoryOperation" metaref = "1421" kind = "FactoryOperation"><dispname>FactoryOperation</dispname></role>
         <role name = "FixedPoint" metaref = "1422" kind = "FixedPoint"><dispname>FixedPoint</dispname></role>
         <role name = "FixedSizeCollection" metaref = "1423" kind = "FixedSizeCollection"><dispname>FixedSizeCollection</dispname></role>
         <role name = "Inherits" metaref = "1424" kind = "Inherits"><dispname>Inherits</dispname></role>
         <role name = "MakeMemberPrivate" metaref = "1425" kind = "MakeMemberPrivate"><dispname>MakeMemberPrivate</dispname></role>
         <role name = "NamedTypeRef" metaref = "1426" kind = "NamedTypeRef"><dispname>NamedTypeRef</dispname></role>
         <role name = "OnewayOperation" metaref = "1427" kind = "OnewayOperation"><dispname>OnewayOperation</dispname></role>
         <role name = "PredefinedType" metaref = "1428" kind = "PredefinedType"><dispname>PredefinedType</dispname></role>
         <role name = "PrefixTag" metaref = "1429" kind = "PrefixTag"><dispname>PrefixTag</dispname></role>
         <role name = "PrivateFlag" metaref = "1430" kind = "PrivateFlag"><dispname>PrivateFlag</dispname></role>
         <role name = "ReadonlyAttribute" metaref = "1431" kind = "ReadonlyAttribute"><dispname>ReadonlyAttribute</dispname></role>
         <role name = "SpecifyIdTag" metaref = "1432" kind = "SpecifyIdTag"><dispname>SpecifyIdTag</dispname></role>
         <role name = "Supports" metaref = "1433" kind = "Supports"><dispname>Supports</dispname></role>
         <role name = "SwitchedAggregateDef" metaref = "1434" kind = "SwitchedAggregateDef"><dispname>SwitchedAggregateDef</dispname></role>
         <role name = "TwowayOperation" metaref = "1435" kind = "TwowayOperation"><dispname>TwowayOperation</dispname></role>
         <role name = "VariableSizeCollection" metaref = "1436" kind = "VariableSizeCollection"><dispname>VariableSizeCollection</dispname></role>
         <role name = "VersionTag" metaref = "1437" kind = "VersionTag"><dispname>VersionTag</dispname></role>
         <aspect name = "InterfaceDefinition" metaref = "1438"  attributes = "custom truncatable abstract">
            <part metaref = "1439" role = "Attribute" primary = "yes" linked = "no"></part>
            <part metaref = "1440" role = "ConstantDef" primary = "yes" linked = "no"></part>
            <part metaref = "1441" role = "ExceptionDef" primary = "yes" linked = "no"></part>
            <part metaref = "1442" role = "AggregateDef" primary = "yes" linked = "no"></part>
            <part metaref = "1443" role = "AliasDef" primary = "yes" linked = "no"></part>
            <part metaref = "1444" role = "EnumerationDef" primary = "yes" linked = "no"></part>
            <part metaref = "1445" role = "SwitchedAggregateDef" primary = "yes" linked = "no"></part>
            <part metaref = "1446" role = "FactoryOperation" primary = "yes" linked = "no"></part>
            <part metaref = "1447" role = "OnewayOperation" primary = "yes" linked = "no"></part>
            <part metaref = "1448" role = "TwowayOperation" primary = "yes" linked = "no"></part>
            <part metaref = "1449" role = "PrefixTag" primary = "yes" linked = "no"></part>
            <part metaref = "1450" role = "SpecifyIdTag" primary = "yes" linked = "no"></part>
            <part metaref = "1451" role = "VersionTag" primary = "yes" linked = "no"></part>
            <part metaref = "1452" role = "NamedTypeRef" primary = "yes" linked = "no"></part>
            <part metaref = "1453" role = "PredefinedType" primary = "yes" linked = "no"></part>
            <part metaref = "1454" role = "Inherits" primary = "yes" linked = "no"></part>
            <part metaref = "1455" role = "MakeMemberPrivate" primary = "yes" linked = "no"></part>
            <part metaref = "1456" role = "BoundedString" primary = "yes" linked = "no"></part>
            <part metaref = "1457" role = "FixedPoint" primary = "yes" linked = "no"></part>
            <part metaref = "1458" role = "FixedSizeCollection" primary = "yes" linked = "no"></part>
            <part metaref = "1459" role = "VariableSizeCollection" primary = "yes" linked = "no"></part>
            <part metaref = "1460" role = "PrivateFlag" primary = "yes" linked = "no"></part>
            <part metaref = "1461" role = "ReadonlyAttribute" primary = "yes" linked = "no"></part>
            <part metaref = "1462" role = "Supports" primary = "yes" linked = "no"></part>
         </aspect>
      </model>
      <model name = "FactoryOperation" metaref = "1463" >
         <dispname>FactoryOperation</dispname>
         <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="ValidFactoryOperationPartCardinality40" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "SpecifyIdTag" ) -> size + self.parts( "VersionTag" ) -> size in
(partCount <= 1)]]>
            <dispname>Multiplicity of parts, which are contained by FactoryOperation, has to match 0..1.</dispname>
         </constraint>
         <regnode name = "icon" value ="factory.bmp"></regnode>
         <role name = "ExceptionRef" metaref = "1464" kind = "ExceptionRef"><dispname>ExceptionRef</dispname></role>
         <role name = "InParameter" metaref = "1465" kind = "InParameter"><dispname>InParameter</dispname></role>
         <role name = "SpecifyIdTag" metaref = "1466" kind = "SpecifyIdTag"><dispname>SpecifyIdTag</dispname></role>
         <role name = "VersionTag" metaref = "1467" kind = "VersionTag"><dispname>VersionTag</dispname></role>
         <aspect name = "InterfaceDefinition" metaref = "1468" >
            <part metaref = "1469" role = "SpecifyIdTag" primary = "yes" linked = "no"></part>
            <part metaref = "1470" role = "VersionTag" primary = "yes" linked = "no"></part>
            <part metaref = "1471" role = "ExceptionRef" primary = "yes" linked = "no"></part>
            <part metaref = "1472" role = "InParameter" primary = "yes" linked = "no"></part>
         </aspect>
      </model>
      <model name = "InParameter" metaref = "1473" >
         <dispname>InParameter</dispname>
         <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="ValidInParameterPartCardinality41" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "NamedTypeRef" ) -> size + self.parts( "PredefinedType" ) -> size in
(partCount = 1)]]>
            <dispname>Multiplicity of parts, which are contained by InParameter, has to match 1.</dispname>
         </constraint>
         <regnode name = "icon" value ="in.bmp"></regnode>
         <role name = "NamedTypeRef" metaref = "1474" kind = "NamedTypeRef"><dispname>NamedTypeRef</dispname></role>
         <role name = "PredefinedType" metaref = "1475" kind = "PredefinedType"><dispname>PredefinedType</dispname></role>
         <aspect name = "InterfaceDefinition" metaref = "1476" >
            <part metaref = "1477" role = "NamedTypeRef" primary = "yes" linked = "no"></part>
            <part metaref = "1478" role = "PredefinedType" primary = "yes" linked = "no"></part>
         </aspect>
      </model>
      <model name = "InoutParameter" metaref = "1479" >
         <dispname>InoutParameter</dispname>
         <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="ValidInoutParameterPartCardinality42" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "NamedTypeRef" ) -> size + self.parts( "PredefinedType" ) -> size in
(partCount = 1)]]>
            <dispname>Multiplicity of parts, which are contained by InoutParameter, has to match 1.</dispname>
         </constraint>
         <regnode name = "icon" value ="inout.bmp"></regnode>
         <role name = "NamedTypeRef" metaref = "1480" kind = "NamedTypeRef"><dispname>NamedTypeRef</dispname></role>
         <role name = "PredefinedType" metaref = "1481" kind = "PredefinedType"><dispname>PredefinedType</dispname></role>
         <aspect name = "InterfaceDefinition" metaref = "1482" >
            <part metaref = "1483" role = "NamedTypeRef" primary = "yes" linked = "no"></part>
            <part metaref = "1484" role = "PredefinedType" primary = "yes" linked = "no"></part>
         </aspect>
      </model>
      <model name = "LookupOperation" metaref = "1485" >
         <dispname>LookupOperation</dispname>
         <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="ValidLookupOperationPartCardinality43" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "SpecifyIdTag" ) -> size + self.parts( "VersionTag" ) -> size in
(partCount <= 1)]]>
            <dispname>Multiplicity of parts, which are contained by LookupOperation, has to match 0..1.</dispname>
         </constraint>
         <regnode name = "icon" value ="lookup.bmp"></regnode>
         <role name = "ExceptionRef" metaref = "1486" kind = "ExceptionRef"><dispname>ExceptionRef</dispname></role>
         <role name = "InParameter" metaref = "1487" kind = "InParameter"><dispname>InParameter</dispname></role>
         <role name = "SpecifyIdTag" metaref = "1488" kind = "SpecifyIdTag"><dispname>SpecifyIdTag</dispname></role>
         <role name = "VersionTag" metaref = "1489" kind = "VersionTag"><dispname>VersionTag</dispname></role>
         <aspect name = "InterfaceDefinition" metaref = "1490" >
            <part metaref = "1491" role = "SpecifyIdTag" primary = "yes" linked = "no"></part>
            <part metaref = "1492" role = "VersionTag" primary = "yes" linked = "no"></part>
            <part metaref = "1493" role = "ExceptionRef" primary = "yes" linked = "no"></part>
            <part metaref = "1494" role = "InParameter" primary = "yes" linked = "no"></part>
         </aspect>
      </model>
      <model name = "OnewayOperation" metaref = "1495" >
         <dispname>OnewayOperation</dispname>
         <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="ValidOnewayOperationPartCardinality44" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "SpecifyIdTag" ) -> size + self.parts( "VersionTag" ) -> size in
(partCount <= 1)]]>
            <dispname>Multiplicity of parts, which are contained by OnewayOperation, has to match 0..1.</dispname>
         </constraint>
         <regnode name = "icon" value ="oneway.bmp"></regnode>
         <role name = "InParameter" metaref = "1496" kind = "InParameter"><dispname>InParameter</dispname></role>
         <role name = "SpecifyIdTag" metaref = "1497" kind = "SpecifyIdTag"><dispname>SpecifyIdTag</dispname></role>
         <role name = "VersionTag" metaref = "1498" kind = "VersionTag"><dispname>VersionTag</dispname></role>
         <aspect name = "InterfaceDefinition" metaref = "1499" >
            <part metaref = "1500" role = "SpecifyIdTag" primary = "yes" linked = "no"></part>
            <part metaref = "1501" role = "VersionTag" primary = "yes" linked = "no"></part>
            <part metaref = "1502" role = "InParameter" primary = "yes" linked = "no"></part>
         </aspect>
      </model>
      <model name = "OutParameter" metaref = "1503" >
         <dispname>OutParameter</dispname>
         <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="ValidOutParameterPartCardinality45" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "NamedTypeRef" ) -> size + self.parts( "PredefinedType" ) -> size in
(partCount = 1)]]>
            <dispname>Multiplicity of parts, which are contained by OutParameter, has to match 1.</dispname>
         </constraint>
         <regnode name = "icon" value ="out.bmp"></regnode>
         <role name = "NamedTypeRef" metaref = "1504" kind = "NamedTypeRef"><dispname>NamedTypeRef</dispname></role>
         <role name = "PredefinedType" metaref = "1505" kind = "PredefinedType"><dispname>PredefinedType</dispname></role>
         <aspect name = "InterfaceDefinition" metaref = "1506" >
            <part metaref = "1507" role = "NamedTypeRef" primary = "yes" linked = "no"></part>
            <part metaref = "1508" role = "PredefinedType" primary = "yes" linked = "no"></part>
         </aspect>
      </model>
      <model name = "ReturnType" metaref = "1509" >
         <dispname>ReturnType</dispname>
         <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="ValidReturnTypePartCardinality46" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "NamedTypeRef" ) -> size + self.parts( "PredefinedType" ) -> size in
(partCount = 1)]]>
            <dispname>Multiplicity of parts, which are contained by ReturnType, has to match 1.</dispname>
         </constraint>
         <regnode name = "icon" value ="return.bmp"></regnode>
         <role name = "NamedTypeRef" metaref = "1510" kind = "NamedTypeRef"><dispname>NamedTypeRef</dispname></role>
         <role name = "PredefinedType" metaref = "1511" kind = "PredefinedType"><dispname>PredefinedType</dispname></role>
         <aspect name = "InterfaceDefinition" metaref = "1512" >
            <part metaref = "1513" role = "NamedTypeRef" primary = "yes" linked = "no"></part>
            <part metaref = "1514" role = "PredefinedType" primary = "yes" linked = "no"></part>
         </aspect>
      </model>
      <model name = "TwowayOperation" metaref = "1515" >
         <dispname>TwowayOperation</dispname>
         <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="ValidTwowayOperationPartCardinality47" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "SpecifyIdTag" ) -> size + self.parts( "VersionTag" ) -> size in
(partCount <= 1)]]>
            <dispname>Multiplicity of parts, which are contained by TwowayOperation, has to match 0..1.</dispname>
         </constraint>
         <regnode name = "icon" value ="twoway.bmp"></regnode>
         <role name = "ExceptionRef" metaref = "1516" kind = "ExceptionRef"><dispname>ExceptionRef</dispname></role>
         <role name = "InParameter" metaref = "1517" kind = "InParameter"><dispname>InParameter</dispname></role>
         <role name = "InoutParameter" metaref = "1518" kind = "InoutParameter"><dispname>InoutParameter</dispname></role>
         <role name = "OutParameter" metaref = "1519" kind = "OutParameter"><dispname>OutParameter</dispname></role>
         <role name = "ReturnType" metaref = "1520" kind = "ReturnType"><dispname>ReturnType</dispname></role>
         <role name = "SpecifyIdTag" metaref = "1521" kind = "SpecifyIdTag"><dispname>SpecifyIdTag</dispname></role>
         <role name = "VersionTag" metaref = "1522" kind = "VersionTag"><dispname>VersionTag</dispname></role>
         <aspect name = "InterfaceDefinition" metaref = "1523" >
            <part metaref = "1524" role = "SpecifyIdTag" primary = "yes" linked = "no"></part>
            <part metaref = "1525" role = "VersionTag" primary = "yes" linked = "no"></part>
            <part metaref = "1526" role = "ExceptionRef" primary = "yes" linked = "no"></part>
            <part metaref = "1527" role = "InParameter" primary = "yes" linked = "no"></part>
            <part metaref = "1528" role = "InoutParameter" primary = "yes" linked = "no"></part>
            <part metaref = "1529" role = "OutParameter" primary = "yes" linked = "no"></part>
            <part metaref = "1530" role = "ReturnType" primary = "yes" linked = "no"></part>
         </aspect>
      </model>
      <model name = "ComponentDef" metaref = "1531" >
         <dispname>ComponentDef</dispname>
         <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="ValidIdentifier" eventmask = "0x80000011" depth = "1" priority = "1">
            <![CDATA[name.trim().match( "^[_]?[a-zA-Z][_a-zA-Z0-9]*$" )]]>
            <dispname>Not a valid identifier</dispname>
         </constraint>
         <constraint name="InheritsSameType" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[self.referenceParts (Inherits)->forAll (x : gme::Reference | x.refersTo ().type () = self.type ())]]>
            <dispname>A parent must have the same type as its child</dispname>
         </constraint>
         <constraint name="NoDuplicateImmediateParents" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[self.referenceParts (Inherits)->forAll (x, y : gme::Reference | x <> y implies x.refersTo () <> y.refersTo ())]]>
            <dispname>Immediate parents must all be unique</dispname>
         </constraint>
         <constraint name="NoRecursiveInheritance" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[self.inheritsRecursive (self)->forAll (x : gme::Model | x <> self)]]>
            <dispname>There is a cycle in the inheritance graph</dispname>
         </constraint>
         <constraint name="OneParent" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[self.parts ("Inherits")->size < 2]]>
            <dispname>ComponentDef and ComponentManager may have only one parent</dispname>
         </constraint>
         <constraint name="UniqueInheritableDeclNames" eventmask = "0x0" depth = "1" priority = "2">
            <![CDATA[(self.parts () - self.parts ("Inherits"))->forAll (x, y : gme::FCO | x <> y implies x.name <> y.name)]]>
            <dispname>Declarations in a scope must have unique names</dispname>
         </constraint>
         <constraint name="ValidComponentDefPartCardinality48" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "SpecifyIdTag" ) -> size + self.parts( "VersionTag" ) -> size in
(partCount <= 1)]]>
            <dispname>Multiplicity of parts, which are contained by ComponentDef, has to match 0..1.</dispname>
         </constraint>
         <regnode name = "icon" value ="component.bmp"></regnode>
         <regnode name = "isTypeShown" value ="true"></regnode>
         <role name = "Attribute" metaref = "1532" kind = "Attribute"><dispname>Attribute</dispname></role>
         <role name = "InEventPort" metaref = "1533" kind = "InEventPort"><dispname>InEventPort</dispname></role>
         <role name = "Inherits" metaref = "1534" kind = "Inherits"><dispname>Inherits</dispname></role>
         <role name = "OutEventPort" metaref = "1535" kind = "OutEventPort"><dispname>OutEventPort</dispname></role>
         <role name = "ProvidedRequestPort" metaref = "1536" kind = "ProvidedRequestPort"><dispname>ProvidedRequestPort</dispname></role>
         <role name = "ReadonlyAttribute" metaref = "1537" kind = "ReadonlyAttribute"><dispname>ReadonlyAttribute</dispname></role>
         <role name = "RequiredRequestPort" metaref = "1538" kind = "RequiredRequestPort"><dispname>RequiredRequestPort</dispname></role>
         <role name = "SpecifyIdTag" metaref = "1539" kind = "SpecifyIdTag"><dispname>SpecifyIdTag</dispname></role>
         <role name = "Supports" metaref = "1540" kind = "Supports"><dispname>Supports</dispname></role>
         <role name = "VersionTag" metaref = "1541" kind = "VersionTag"><dispname>VersionTag</dispname></role>
         <aspect name = "InterfaceDefinition" metaref = "1542" >
            <part metaref = "1543" role = "Attribute" primary = "yes" linked = "no"></part>
            <part metaref = "1544" role = "InEventPort" primary = "yes" linked = "yes"></part>
            <part metaref = "1545" role = "OutEventPort" primary = "yes" linked = "yes"></part>
            <part metaref = "1546" role = "ProvidedRequestPort" primary = "yes" linked = "yes"></part>
            <part metaref = "1547" role = "RequiredRequestPort" primary = "yes" linked = "yes"></part>
            <part metaref = "1548" role = "SpecifyIdTag" primary = "yes" linked = "no"></part>
            <part metaref = "1549" role = "VersionTag" primary = "yes" linked = "no"></part>
            <part metaref = "1550" role = "Inherits" primary = "yes" linked = "no"></part>
            <part metaref = "1551" role = "ReadonlyAttribute" primary = "yes" linked = "no"></part>
            <part metaref = "1552" role = "Supports" primary = "yes" linked = "no"></part>
         </aspect>
      </model>
      <model name = "InEventPort" metaref = "1553" >
         <dispname>InEventPort</dispname>
         <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="ValidInEventPortPartCardinality49" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "EventRef" ) -> size in
(partCount = 1)]]>
            <dispname>Multiplicity of parts, which are contained by InEventPort, has to match 0..1.</dispname>
         </constraint>
         <constraint name="ValidInEventPortPartCardinality50" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "SpecifyIdTag" ) -> size + self.parts( "VersionTag" ) -> size in
(partCount <= 1)]]>
            <dispname>Multiplicity of parts, which are contained by InEventPort, has to match 0..1.</dispname>
         </constraint>
         <regnode name = "icon" value ="ineventport.bmp"></regnode>
         <role name = "EventRef" metaref = "1554" kind = "EventRef"><dispname>EventRef</dispname></role>
         <role name = "SpecifyIdTag" metaref = "1555" kind = "SpecifyIdTag"><dispname>SpecifyIdTag</dispname></role>
         <role name = "VersionTag" metaref = "1556" kind = "VersionTag"><dispname>VersionTag</dispname></role>
         <aspect name = "InterfaceDefinition" metaref = "1557" >
            <part metaref = "1558" role = "SpecifyIdTag" primary = "yes" linked = "no"></part>
            <part metaref = "1559" role = "VersionTag" primary = "yes" linked = "no"></part>
            <part metaref = "1560" role = "EventRef" primary = "yes" linked = "no"></part>
         </aspect>
      </model>
      <model name = "OutEventPort" metaref = "1561"  attributes = "single_destination">
         <dispname>OutEventPort</dispname>
         <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="ValidOutEventPortPartCardinality51" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "EventRef" ) -> size in
(partCount = 1)]]>
            <dispname>Multiplicity of parts, which are contained by OutEventPort, has to match 0..1.</dispname>
         </constraint>
         <constraint name="ValidOutEventPortPartCardinality52" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "SpecifyIdTag" ) -> size + self.parts( "VersionTag" ) -> size in
(partCount <= 1)]]>
            <dispname>Multiplicity of parts, which are contained by OutEventPort, has to match 0..1.</dispname>
         </constraint>
         <attrdef name="single_destination" metaref = "1562" valuetype = "boolean" defvalue = "false">
            <dispname></dispname>
         </attrdef>
         <regnode name = "icon" value ="outeventport.bmp"></regnode>
         <role name = "EventRef" metaref = "1563" kind = "EventRef"><dispname>EventRef</dispname></role>
         <role name = "SpecifyIdTag" metaref = "1564" kind = "SpecifyIdTag"><dispname>SpecifyIdTag</dispname></role>
         <role name = "VersionTag" metaref = "1565" kind = "VersionTag"><dispname>VersionTag</dispname></role>
         <aspect name = "InterfaceDefinition" metaref = "1566"  attributes = "single_destination">
            <part metaref = "1567" role = "SpecifyIdTag" primary = "yes" linked = "no"></part>
            <part metaref = "1568" role = "VersionTag" primary = "yes" linked = "no"></part>
            <part metaref = "1569" role = "EventRef" primary = "yes" linked = "no"></part>
         </aspect>
      </model>
      <model name = "ProvidedRequestPort" metaref = "1570" >
         <dispname>ProvidedRequestPort</dispname>
         <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="ValidProvidedRequestPortPartCardinality53" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "ObjectRef" ) -> size in
(partCount = 1)]]>
            <dispname>Multiplicity of parts, which are contained by ProvidedRequestPort, has to match 0..1.</dispname>
         </constraint>
         <constraint name="ValidProvidedRequestPortPartCardinality54" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "SpecifyIdTag" ) -> size + self.parts( "VersionTag" ) -> size in
(partCount <= 1)]]>
            <dispname>Multiplicity of parts, which are contained by ProvidedRequestPort, has to match 0..1.</dispname>
         </constraint>
         <regnode name = "icon" value ="outrequestport.bmp"></regnode>
         <role name = "ObjectRef" metaref = "1571" kind = "ObjectRef"><dispname>ObjectRef</dispname></role>
         <role name = "SpecifyIdTag" metaref = "1572" kind = "SpecifyIdTag"><dispname>SpecifyIdTag</dispname></role>
         <role name = "VersionTag" metaref = "1573" kind = "VersionTag"><dispname>VersionTag</dispname></role>
         <aspect name = "InterfaceDefinition" metaref = "1574" >
            <part metaref = "1575" role = "SpecifyIdTag" primary = "yes" linked = "no"></part>
            <part metaref = "1576" role = "VersionTag" primary = "yes" linked = "no"></part>
            <part metaref = "1577" role = "ObjectRef" primary = "yes" linked = "no"></part>
         </aspect>
      </model>
      <model name = "RequiredRequestPort" metaref = "1578"  attributes = "multiple_connections">
         <dispname>RequiredRequestPort</dispname>
         <regnode name = "namePosition" value ="4"></regnode>
         <constraint name="ValidRequiredRequestPortPartCardinality55" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "ObjectRef" ) -> size in
(partCount = 1)]]>
            <dispname>Multiplicity of parts, which are contained by RequiredRequestPort, has to match 0..1.</dispname>
         </constraint>
         <constraint name="ValidRequiredRequestPortPartCardinality56" eventmask = "0x0" depth = "0" priority = "2">
            <![CDATA[let partCount = self.parts( "SpecifyIdTag" ) -> size + self.parts( "VersionTag" ) -> size in
(partCount <= 1)]]>
            <dispname>Multiplicity of parts, which are contained by RequiredRequestPort, has to match 0..1.</dispname>
         </constraint>
         <attrdef name="multiple_connections" metaref = "1579" valuetype = "boolean" defvalue = "false">
            <dispname></dispname>
         </attrdef>
         <regnode name = "icon" value ="inrequestport.bmp"></regnode>
         <role name = "ObjectRef" metaref = "1580" kind = "ObjectRef"><dispname>ObjectRef</dispname></role>
         <role name = "SpecifyIdTag" metaref = "1581" kind = "SpecifyIdTag"><dispname>SpecifyIdTag</dispname></role>
         <role name = "VersionTag" metaref = "1582" kind = "VersionTag"><dispname>VersionTag</dispname></role>
         <aspect name = "InterfaceDefinition" metaref = "1583"  attributes = "multiple_connections">
            <part metaref = "1584" role = "SpecifyIdTag" primary = "yes" linked = "no"></part>
            <part metaref = "1585" role = "VersionTag" primary = "yes" linked = "no"></part>
            <part metaref = "1586" role = "ObjectRef" primary = "yes" linked = "no"></part>
         </aspect>
      </model>
   </folder>
</paradigm>
