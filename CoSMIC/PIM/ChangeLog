Mon Jun 14 17:56:33 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * IDML/decorators/CommonError.cpp:
        * IDML/decorators/CommonError.h:
        * IDML/decorators/CommonSmart.h:
        * IDML/decorators/Decorator.cpp:
        * IDML/decorators/Decorator.dsp:
        * IDML/decorators/Decorator.dsw:
        * IDML/decorators/Decorator.h:
        * IDML/decorators/Decorator.rc:
        * IDML/decorators/Decorator.rgs:
        * IDML/decorators/DecoratorApp.cpp:
        * IDML/decorators/DecoratorApp.def:
        * IDML/decorators/DecoratorConfig.h:
        * IDML/decorators/DecoratorLib.idl:
        * IDML/decorators/DecoratorStd.h:
        * IDML/decorators/DecoratorUtil.cpp
        * IDML/decorators/DecoratorUtil.h:
        * IDML/decorators/IDMLDecorators.cpp:
        * IDML/decorators/IDMLDecorators.h:
        * IDML/decorators/MaskedBitmap.cpp:
        * IDML/decorators/MaskedBitmap.h:
        * IDML/decorators/StdAfx.cpp:
        * IDML/decorators/StdAfx.h:
        * IDML/decorators/resource.h:

          New files, a decorator for IDML which:

          - Checks for Members and AttributeMembers to have non-null
            references, and when they do (or when they change), replaces
            the current icon with either the appropriate
            PredefinedType icon or the reference version of the
            appropriate named type icon. This will update immediately
            when something is dragged as a reference and dropped on
            an existing Member or AttributeMember element.

          - Makes sure port icons are facing in the right direction.
            The ProvidedRequestPort icon is symmetrical, but each of
            the others has two mirror image icons, one of which is selected
            by the decorator each time the screen is redrawn. Some of 
            the code for this feature was adapted from the default
            decorator in GME source code.

Mon Jun 14 08:57:13 2004  Krishnakumar B  <kitty@nospam.invalid.domain>

        * PICML/interpreters/packaging/PackageVisitor.cpp:
        * PICML/interpreters/packaging/PackageVisitor.h:
        * PICML/interpreters/packaging/UdmApp.cpp:
        * PICML/interpreters/packaging/UuidString.cpp:
        * PICML/interpreters/packaging/UuidString.h:
        * PICML/interpreters/packaging/XercesString.cpp:
        * PICML/interpreters/packaging/XercesString.h:

          Checking in to work on the office machine.

Sun Jun 13 18:45:52 2004  Krishnakumar B  <kitty@nospam.invalid.domain>

        * PICML/examples/RobotAssembly.xme: Updated to match Robert's
          latest version.

        * PICML/paradigms/PICML.xml:
        * PICML/interpreters/packaging/PICML.h:
        * PICML/interpreters/packaging/PICML.xsd:
        * PICML/interpreters/packaging/PICML.cpp: Regenerated after minor
          changes to PICML.

        * PICML/interpreters/packaging/UuidString.h:
        * PICML/interpreters/packaging/UuidString.cpp: New files which
          will generate UUIDs.

        * PICML/interpreters/packaging/PackageComponent.dsp:
        * PICML/interpreters/packaging/PackageVisitor.h:
        * PICML/interpreters/packaging/PackageVisitor.cpp:
        * PICML/interpreters/packaging/UdmApp.cpp:
        * PICML/interpreters/packaging/XercesString.h:
        * PICML/interpreters/packaging/XercesString.cpp: Closer to
          getting the interpreter working.

        * PICML/paradigms/IDML-uml.xme:
        * PICML/paradigms/PICML-uml.xme:
        * PICML/paradigms/PICML.xme:
        * PICML/paradigms/PICML.xmp: Updated to reflect changes in the
          meta.

Fri Jun 11 16:07:48 2004  Krishnakumar B  <kitty@spam.invalid.domain>

        * PICML/interpreters/packaging/PackageComponent.dsp: Removed the
          /s flag to regsvr32 to catch errors in interpreter
          installation.

        * PICML/interpreters/packaging/PackageVisitor.h:
        * PICML/interpreters/packaging/PackageVisitor.cpp: New files
          moved from SchemaVisitor.

        * PICML/interpreters/packaging/UdmApp.cpp: Initial code. Checking
          it in to retrieve it from other machines.

        * PICML/interpreters/packaging/XercesString.h:
        * PICML/interpreters/packaging/XercesString.cpp: Utility class to
          make working with Xerces strings easier.

        * PICML/interpreters/packaging/SchemaVisitor.h:
        * PICML/interpreters/packaging/SchemaVisitor.cpp:

          Removed these files as the name SchemaVisitor was not
          appropriate.

Thu Jun 10 18:53:00 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * IDML/paradigms/Icons/ineventport.bmp:
        * IDML/paradigms/Icons/member.bmp:
        * IDML/paradigms/Icons/outeventport.bmp:
        * IDML/paradigms/Icons/requiredrequestport.bmp:

          Resized these icons to 64x64 pixels. They got overlooked
          when I resized all icons the first time.

Wed Jun  9 16:28:03 2004  Krishnakumar B  <kitty@spam.invalid.domain>

        * PICML/interpreters/Package/Package.mpc: Added PACKAGE_BUILD_DLL
          flag to ensure that the proper export flags are set up.

        * PICML/interpreters/Package/SchemaVisitor.h:
        * PICML/interpreters/Package/SchemaVisitor.cpp: Initial check-in
          to get the interpreter project organized.

        * PICML/interpreters/PackageComponent/PackageComponent.mpc: Added
          use of precompiled headers through StdAfx.h.

        * PICML/interpreters/PackageComponent/PackageComponent.rc:
          Removed the resource entries for Dialog boxes and Uml.xsd.

        * PICML/interpreters/PackageComponent/Resource.h: New version of
          file needed for the project to build.

        * PICML/interpreters/debug_libs.mpb: Added the list of individual
          libraries instead of UdmDll.

        * PICML/interpreters/picmllib.mpb: Added /Zm200 to the project so
          that it will compile PICML.cpp.

        * PICML/interpreters/release_libs.mpb: Added a list of individual
          libraries instead of UdmDll.


        * PICML/interpreters/packaging/CompIcon.ico:
        * PICML/interpreters/packaging/Component.def:
        * PICML/interpreters/packaging/Component.rc:
        * PICML/interpreters/packaging/ComponentConfig.h:
        * PICML/interpreters/packaging/PICML.h:
        * PICML/interpreters/packaging/PICML.cpp:
        * PICML/interpreters/packaging/PICML.xsd:
        * PICML/interpreters/packaging/PackageComponent.dsp:
        * PICML/interpreters/packaging/PackageComponent.dsw:
        * PICML/interpreters/packaging/RawComponent.h:
        * PICML/interpreters/packaging/RawComponent.cpp:
        * PICML/interpreters/packaging/SchemaVisitor.h:
        * PICML/interpreters/packaging/SchemaVisitor.cpp:
        * PICML/interpreters/packaging/StdAfx.h:
        * PICML/interpreters/packaging/StdAfx.cpp:
        * PICML/interpreters/packaging/UdmApp.h:
        * PICML/interpreters/packaging/UdmApp.cpp:
        * PICML/interpreters/packaging/UdmConfig.h:
        * PICML/interpreters/packaging/resource.h:

          New workspace which brings all the files together and creates a
          single Interpreter DLL. I am taking this approach since the
          other mechanism throws up non-trivial errors and is in general a
          big ball of mud. We need the interpreter to work more than the
          whole infrastructure working with MPC.

Tue Jun  8 14:51:18 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * IDML/paradigms/Icons/aggregateref.bmp:
        * IDML/paradigms/Icons/aliasref.bmp:
        * IDML/paradigms/Icons/boolean.bmp:
        * IDML/paradigms/Icons/boxedref.bmp:
        * IDML/paradigms/Icons/byte.bmp:
        * IDML/paradigms/Icons/componentfactoryref.bmp:
        * IDML/paradigms/Icons/componentref.bmp:
        * IDML/paradigms/Icons/genericobject.bmp:
        * IDML/paradigms/Icons/genericvalue.bmp:
        * IDML/paradigms/Icons/genericvalueobject.bmp:
        * IDML/paradigms/Icons/inevent_lf.bmp:
        * IDML/paradigms/Icons/inevent_rt.bmp:
        * IDML/paradigms/Icons/long.bmp:
        * IDML/paradigms/Icons/outevent_lf.bmp:
        * IDML/paradigms/Icons/outevent_rt.bmp:
        * IDML/paradigms/Icons/realnumber.bmp:
        * IDML/paradigms/Icons/receptacle_lf.bmp:
        * IDML/paradigms/Icons/receptacle_rt.bmp:
        * IDML/paradigms/Icons/setexceptionref.bmp:
        * IDML/paradigms/Icons/short.bmp:
        * IDML/paradigms/Icons/string.bmp:
        * IDML/paradigms/Icons/switchedaggregateref.bmp:
        * IDML/paradigms/Icons/typeencoding.bmp:
        * IDML/paradigms/Icons/typekind.bmp:
        * IDML/paradigms/Icons/valueref.bmp:
        * IDML/paradigms/Icons/variablecollectionref.bmp:

          New icons, used when the type associated with the icon
          is used as a reference.

        * IDML/paradigms/Icons/aggregate.bmp:
        * IDML/paradigms/Icons/alias.bmp:
        * IDML/paradigms/Icons/attribute.bmp:
        * IDML/paradigms/Icons/boxed.bmp:
        * IDML/paradigms/Icons/component.bmp:
        * IDML/paradigms/Icons/componentfactory.bmp:
        * IDML/paradigms/Icons/const.bmp:
        * IDML/paradigms/Icons/discriminator.bmp:
        * IDML/paradigms/Icons/enum.bmp:
        * IDML/paradigms/Icons/enumref.bmp:
        * IDML/paradigms/Icons/enumvalue.bmp:
        * IDML/paradigms/Icons/event.bmp:
        * IDML/paradigms/Icons/eventref.bmp:
        * IDML/paradigms/Icons/exception.bmp:
        * IDML/paradigms/Icons/exceptionref.bmp:
        * IDML/paradigms/Icons/factory.bmp:
        * IDML/paradigms/Icons/fileref.bmp:
        * IDML/paradigms/Icons/getexception.bmp:
        * IDML/paradigms/Icons/in.bmp:
        * IDML/paradigms/Icons/inherits.bmp:
        * IDML/paradigms/Icons/inout.bmp:
        * IDML/paradigms/Icons/label.bmp:
        * IDML/paradigms/Icons/lookup.bmp:
        * IDML/paradigms/Icons/lookupkey.bmp:
        * IDML/paradigms/Icons/member.bmp:
        * IDML/paradigms/Icons/object.bmp:
        * IDML/paradigms/Icons/objectref.bmp:
        * IDML/paradigms/Icons/oneway.bmp:
        * IDML/paradigms/Icons/out.bmp:
        * IDML/paradigms/Icons/package.bmp:
        * IDML/paradigms/Icons/private.bmp:
        * IDML/paradigms/Icons/providedrequestport.bmp:
        * IDML/paradigms/Icons/readonlyattribute.bmp:
        * IDML/paradigms/Icons/return.bmp:
        * IDML/paradigms/Icons/setexception.bmp:
        * IDML/paradigms/Icons/supports.bmp:
        * IDML/paradigms/Icons/switchedaggregate.bmp:
        * IDML/paradigms/Icons/twoway.bmp:
        * IDML/paradigms/Icons/value.bmp:
        * IDML/paradigms/Icons/variablecollection.bmp:

          Made all icons 64x64 pixels in size.

Mon Jun  7 18:20:34 2004  Krishnakumar B  <kitty@spam.invalid.domain>

        * PICML/examples/RobotAssembly.xme: Updated the RobotAssembly
          model so that it is complete enough for descriptor generation.

        * PICML/interpreters/PICML/PICML.mpc: Added -m to Udm.exe upon
          Endre's suggestion.

        * PICML/interpreters/Package/SchemaVisitor.h: Minor
          modifications.

        * PICML/paradigms/IDML-uml.xme:
        * PICML/paradigms/PICML-uml.xme:
        * PICML/paradigms/PICML.xme:
        * PICML/paradigms/PICML.xml:
        * PICML/paradigms/PICML.xmp: Updated to reflect bugs in the model
          while building the RobotAssembly model.

Fri Jun  4 18:40:17 2004  Krishnakumar B  <kitty@nospam.invalid.domain>

        * PICML/examples/RobotAssembly.xme: New file which models the
          RobotAssembly scenario requested by LockHeed. The scenario is
          almost done except for adding the implementation artifacts for
          4 components.

        * PICML/interpreters/PackageComponent/PackageComponent.mpc: Added
          PackageComponent.def, the export DEF file to the sources.

        * PICML/paradigms/PICML.xme: Updated to reflect bugs in the
          meta-model uncovered when modeling the RobotAssembly scenario.
          Removed some constraints which triggered at the wrong time.
          There seems to be some bug in the constraint manager.

        * PICML/paradigms/PICML.xmp: New version of the paradigm which
          reflects the above changes.

        * PICML/paradigms/PICMLTemplate.xme:
        * PICML/paradigms/PredefinedTypes.xme: Updated to reflect changes
          in the paradigm.

        * PICML/paradigms/icons/component.bmp:
        * PICML/paradigms/icons/manages.bmp: New versions of these icons
          from the IDML directory.


        * PICML/paradigms/icons/providedrequestport.bmp:
        * PICML/paradigms/icons/requiredrequestport.bmp: Renamed these
          icons to reflect the renaming in IDML.

        * PICML/paradigms/icons/inrequestport.bmp:
        * PICML/paradigms/icons/outrequestport.bmp:

          Removed these files.

Thu Jun  3 12:36:40 2004  Krishnakumar B  <kitty@dre.vanderbilt.edu>

        * PICML/paradigms/PICML.xme:
        * PICML/paradigms/PICML.xmp: Checking in version which has my
          current set of fixes so that I can work on it from BBN.

Wed Jun  2 15:59:11 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * IDML/examples/new_test.xme:
        * IDML/paradigms/IDML-Meta.xme:
        * IDML/paradigms/IDML.xmp:
        * IDML/paradigms/IDMLTemplate.xme:
        * IDML/paradigms/PredefinedTypes.xme:

          Added constraints to the metamodel, and updated the
          other files accordingly.

Wed Jun  2 15:47:05 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * IDML/interpreters/IDLGenerator/BON2Component.cpp:
        * IDML/interpreters/IDLGenerator/BON2Component.h:
        * IDML/interpreters/IDLGenerator/BON2Component.sln:
        * IDML/interpreters/IDLGenerator/CompIcon.ico:
        * IDML/interpreters/IDLGenerator/Component.aps:
        * IDML/interpreters/IDLGenerator/Component.rc:
        * IDML/interpreters/IDLGenerator/ComponentConfig.h:
        * IDML/interpreters/IDLGenerator/ComponentLib.h:
        * IDML/interpreters/IDLGenerator/ComponentLib.tlb:
        * IDML/interpreters/IDLGenerator/ComponentLib_i.c:
        * IDML/interpreters/IDLGenerator/ComponentLib_p.c:
        * IDML/interpreters/IDLGenerator/DependencyVisitor.cpp:
        * IDML/interpreters/IDLGenerator/DependencyVisitor.h:
        * IDML/interpreters/IDLGenerator/GMESources.txt:
        * IDML/interpreters/IDLGenerator/IDLEmitVisitor.cpp:
        * IDML/interpreters/IDLGenerator/IDLEmitVisitor.h:
        * IDML/interpreters/IDLGenerator/IDLGeneratorBON2Component.vcproj:
        * IDML/interpreters/IDLGenerator/IDLStream.cpp:
        * IDML/interpreters/IDLGenerator/IDLStream.h:
        * IDML/interpreters/IDLGenerator/IDMLBonExtension.cpp:
        * IDML/interpreters/IDLGenerator/IDMLBonExtension.h:
        * IDML/interpreters/IDLGenerator/Resource.h:
        * IDML/interpreters/IDLGenerator/StdAfx.cpp:
        * IDML/interpreters/IDLGenerator/StdAfx.h:
        * IDML/interpreters/IDLGenerator/component.def:
        * IDML/interpreters/IDLGenerator/dlldata.c:

          New interpreter, which generates IDL from IDML models.

Wed Jun  2 12:03:02 2004  Krishnakumar B  <kitty@spam.invalid.domain>

        * PICML/interpreters/PICML/PICML.mpc:
        * PICML/interpreters/PICML/PICML_Export.h: Modified to fix some
          bugs and made PICML a non-MFC application.

        * PICML/interpreters/Package/Package.mpc:
        * PICML/interpreters/Package/SchemaVisitor.h:
        * PICML/interpreters/Package/SchemaVisitor.cpp: Similar changes
          as above. Added new files which will hold the Package
          interpreter logic.

        * PICML/interpreters/PackageComponent/CompIcon.ico:
        * PICML/interpreters/PackageComponent/ComponentConfig.h:
        * PICML/interpreters/PackageComponent/PackageComponent.def:
        * PICML/interpreters/PackageComponent/PackageComponent.rc:
        * PICML/interpreters/PackageComponent/RawComponent.h:
        * PICML/interpreters/PackageComponent/RawComponent.cpp:
        * PICML/interpreters/PackageComponent/StdAfx.h:
        * PICML/interpreters/PackageComponent/StdAfx.cpp:
        * PICML/interpreters/PackageComponent/UdmApp.h:
        * PICML/interpreters/PackageComponent/UdmApp.cpp:
        * PICML/interpreters/PackageComponent/UdmConfig.h:

          Standard files needed to write an interpreter using UDM. These
          files can't be copied en masse to create a new interpreter.
          There are some non-trivial modifications to be made to
          ComponentConfig.h. Hopefully I can also add a perl script to do
          that.

        * PICML/interpreters/debug_libs.mpb:
        * PICML/interpreters/picmllib.mpb:
        * PICML/interpreters/release_libs.mpb: Modified to reflect
          suggestions from Chad.

Thu May 27 13:07:08 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * IDML/paradigms/IDML-Meta.xme:
        * IDML/paradigms/IDML.xmp:
        * IDML/paradigms/IDMLTemplate.xme:
        * IDML/paradigms/PredefinedTypes.xme:
        * IDML/examples/new_test.xme:

          Made slight change to metamodel - changed ProvidedRequestPort and
          RequiredRequestPort elements to refer to, instead of an Object,
          and FCO abstract base class of Object and GenericObject. This
          change will allow IDL importing and exporting of facets and
          receptacles that are associated with Object (mapped to
          CORBA::Object in C++). Also updated the related models
          accordingly.

Thu May 27 00:36:39 2004  Jaiganesh B  <jai@dre.vanderbilt.edu>

        * PICML/paradigms/PICML.xme:
        * PICML/paradigms/PICML.xmp:
        * PICML/paradigms/PICMLTemplate.xme:
        * PICML/paradigms/PredefinedTypes.xme:
        * PICML/paradigms/icons/Bridge.bmp:
        * PICML/paradigms/icons/Node.bmp:
        * PICML/paradigms/icons/Domain.bmp:
        * PICML/paradigms/icons/ComponentSet.bmp:
        * PICML/paradigms/icons/Interconnect.bmp:
        * PICML/paradigms/icons/Resource.bmp:
        * PICML/paradigms/icons/SharedResource.bmp:

          Added the MIDCESS and DeploymentPlan meta modeling
          environment to the
          PICML modeling tool suite.

Sun May 23 01:11:38 2004  Krishnakumar B  <unknown@isis.vanderbilt.edu>

        * IDML/paradigms/IDML-Meta.xme: Modified the OperationTypes to
          refer to the MemberType directly as it causes problems with
          MetaGME2UML. I have also filed a bug report with GME folks;
          will do so if I think it will be a problem with
          UDM/MetaGME2UML.

        * IDML/paradigms/IDML.xmp:
        * IDML/paradigms/IDMLTemplate.xme:
        * IDML/paradigms/PredefinedTypes.xme:
        * IDML/examples/new_test.xme:

          Updated to reflect the above change.

        * PICML/bin/.empty: New directory to store the different DLLs and
          the binaries for PICML.

        * PICML/interpreters/PICML/PICML.mpc:

          New MPC file to generate workspace for PICML as a library.

        * PICML/interpreters/PICML/PICML_Export.h: Export file for PICML
          library.

        * PICML/interpreters/PICML_Debug.mwc:
        * PICML/interpreters/PICML_Release.mwc:

          MWC files for PICML. Two versions are necessary because
          some of the libraries needed by PICML e.g., UDM, use _D as library
          decorator, while some like xerces use D as library decorator.
          Thanks to Chad Elliot <elliot_c @ ociweb . com > for suggesting
          this.

        * PICML/interpreters/Package/Package.mpc: New MPC file for
          implementation of the visitor logic.

        * PICML/interpreters/Package/Package_Export.h: Export file for the
          visitor classes to be compiled as a DLL.

        * PICML/interpreters/PackageComponent/PackageComponent.mpc: New
          MPC file for the interpreter to generate Package related
          descriptors.

        * PICML/interpreters/debug_libs.mpb:
        * PICML/interpreters/default.features:
        * PICML/interpreters/picmllib.mpb:
        * PICML/interpreters/release_libs.mpb:

          Default MPC settings for projects using UDM and PICML.

        * PICML/lib/.empty: New directory to store all the libraries and
          the import files.

        * PICML/paradigms/IDML-uml.xme:
        * PICML/paradigms/PICML-uml.xme:

          XML exports of IDML & PICML generated using MetaGME2UML.


        * PICML/paradigms/PICML.xme: New version of PICML XML export
          file.

        * PICML/paradigms/PICML.xmp: New version of the PICML paradigm.

        * PICML/paradigms/PICML.xml: XML output from UML2XML interpreter.

        * PICML/paradigms/PredefinedTypes.xme: XML export containing definitions
          of IDML predefined types. This file is attached as a library by
          PICMLTemplate.

        * PICML/paradigms/PICMLTemplate.xme: New XML export file that
          should be imported by every PICML model. This file serves as a
          template and includes PredefinedTypes as a library. This file
          should be saved under a new name by users.

        * PICML/examples/BasicSP.mga:
        * PICML/paradigms/PICML.mga:

          Removed these files.

Sat May 22 20:33:28 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * IDML/examples/new_test.xme:
        * IDML/paradigms/IDML-Meta.xme:
        * IDML/paradigms/IDML.xmp:
        * IDML/paradigms/IDMLTemplate.xme:
        * IDML/paradigms/PredefinedTypes.xme:

          Fixed a couple of minor problems with the paradigm, and regenerated
          XML for it and everything that uses it.

Fri May 21 18:37:50 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * IDML/examples/new_test.xme:
        * IDML/paradigms/IDML-Meta.xme:
        * IDML/paradigms/IDML.xmp:

          Major overhaul of paradigm, to make fewer steps and more
          simplicity for the user.

        * IDML/paradigms/PredefinedTypes.xme:

          New file, a model containing a folder with all the
          basic types.

        * IDML/paradigms/IDMLTemplate.xme:

          New file.
          Users can start from this file instead of creating a new
          project, and they will get an attached read-only library
          with the basic types from the model above.

        * IDML/paradigms/Icons/member.bmp:

          New file, need because after the overhaul of the
          paradigm, Member is no longer abstract.

Thu May 20 11:53:28 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * IDML/*:
        * IDML/paradigms/IDML-Meta.xme:
        * IDML/paradigms/IDML.xmp:
        * IDML/paradimgs/Icons/*.bmp:

          Moved all the IDML files to their own directory. Also
          made minor changes to constraints and turned off name
          display on a couple of icons.

        * IDML/examples/new_test.xme:

          Example model.

        * IDML/paradigms/Icons/file.bmp:
        * IDML/paradigms/Icons/prefix.bmp:
        * IDML/paradigms/Icons/id.bmp:
        * IDML/paradigms/Icons/version.bmp:

          Removed these icons - no longer used.

        * IDML/paradigms/Icons/getexception.bmp:
        * IDML/paradigms/Icons/setexception.bmp:

          Swapped these, they had been saved to the wrong file.

Sun May 16 23:14:49 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * PICML/paradifms/IDML-Meta.xme:
        * PICML/paradigms/IDML.xmp:

          Turned off the name display of some metamodel elememts, so that
          the name is hidden when dragged into the model editor. This
          change is to make things less confusing for the user, since now
          all the names that are not used by the IDL generator interpreter
          (in progress) and not checked by the GME constraint manager are
          not displayed for the user to worry about or try to edit. Also
          created some new metamodel elements which are twins of the
          various elements for the various anonymous types and also for
          the named type reference element. These new elements use the
          same icons as their twins, but their name display is turned
          off as explained above.

Wed May 13 017:32:44 2004  Jeff Parsons  <j.parsons@vanderbilt.edu>

        * PICML/paradifms/IDML-Meta.xme:
        * PICML/paradigms/IDML.xmp:

          Made some minor changes to better integrate with PICML.

        * PICML/paradigms/icons/file.bmp:

          New icon, created because the model element File is no longer
          in the root folder.

        * PICML/paradigms/icons/fileref.cmp:

          Modified icon to be similar to the new icon described above.

Wed May  5 02:44:11 2004  Krishnakumar B  <kitty@nospam.invalid.domain>

        * PICML/examples/BasicSP.mga:
        * PICML/examples/BasicSP.xme:

          Added new example to show how to view an assembly. I haven't
          added all the package related material. But those should be
          straightforward.

        * PICML/paradigms/IDML-Meta.xme:

          Made ComponenDef show it's type in instances.

        * PICML/paradigms/IDML.mga:
        * PICML/paradigms/IDML.xmp:

          Updated to reflect the above change.

        * PICML/paradigms/PICML.mga:
        * PICML/paradigms/PICML.xme:
        * PICML/paradigms/PICML.xmp:

          Next version of the paradigm. This time with some constraints.
          More need to be added. The Meta is still pseudo-stable.

        * PICML/paradigms/icons/DataType.bmp:
        * PICML/paradigms/icons/component.bmp:
        * PICML/paradigms/icons/manages.bmp:

          New icons + old icons resized so that GME doesn't stretch them
          to fit it's idea of how big an idol representing a model should
          be.

Fri Apr 30 18:29:04 2004  Jeff Parsons  <j.parsons@vanderbilt.edu>

        * PICML/paradigms/icons/component.bmp:

          Made the icon more elongated, to hopefully make a better-looking
          display when used as a reference.

        * PICML/paradigms/icons/manages.bmp:

          Changed the 'component' piece of this icon to match the change
          to the icon above.

Wed Apr 28 23:32:21 2004  Krishnakumar B  <kitty@nospam.invalid.domain>

        * PICML/paradigms/IDML-Meta.xme:
        * PICML/paradigms/IDML.mga:
        * PICML/paradigms/IDML.xmp:

          Added new meta-model of Interface Definition Modeling Language
          (IDML).


        * PICML/paradigms/PICML.mga:
        * PICML/paradigms/PICML.xmp:

          Added binary mga files and XML exported paradigm so that users
          need not run the interpreter on the PICML meta-model. This file
          can just be registered using File->Register Paradigms, so that
          one can use the paradigm to make models without dealing with the
          complex steps involving aspect mapping.

        * PICML/paradigms/PICML.xme:

          Updated to reflect icons, changes in IDML and some minor changes
          in the connections.

        * PICML/paradigms/icons/Any.bmp:
        * PICML/paradigms/icons/Assembly.bmp:
        * PICML/paradigms/icons/Capability.bmp:
        * PICML/paradigms/icons/ComponentPackage.bmp:
        * PICML/paradigms/icons/ComponentProperty.bmp:
        * PICML/paradigms/icons/Connector.bmp:
        * PICML/paradigms/icons/ImplementationArtifact.bmp:
        * PICML/paradigms/icons/ImplementationArtifactReference.bmp:
        * PICML/paradigms/icons/ImplementationDependency.bmp:
        * PICML/paradigms/icons/ImplementationReference.bmp:
        * PICML/paradigms/icons/ImplementationRequirement.bmp:
        * PICML/paradigms/icons/MonolithicImplementation.bmp:
        * PICML/paradigms/icons/PackageConfiguration.bmp:
        * PICML/paradigms/icons/PackageConfigurationReference.bmp:
        * PICML/paradigms/icons/PackageReference.bmp:
        * PICML/paradigms/icons/Property.bmp:
        * PICML/paradigms/icons/Requirement.bmp:
        * PICML/paradigms/icons/SatisfierProperty.bmp:
        * PICML/paradigms/icons/TopLevelPackage.bmp:
        * PICML/paradigms/icons/aggregate.bmp:
        * PICML/paradigms/icons/alias.bmp:
        * PICML/paradigms/icons/attribute.bmp:
        * PICML/paradigms/icons/boundedstring.bmp:
        * PICML/paradigms/icons/boxed.bmp:
        * PICML/paradigms/icons/component.bmp:
        * PICML/paradigms/icons/componentfactory.bmp:
        * PICML/paradigms/icons/const.bmp:
        * PICML/paradigms/icons/discriminator.bmp:
        * PICML/paradigms/icons/enum.bmp:
        * PICML/paradigms/icons/enumref.bmp:
        * PICML/paradigms/icons/enumvalue.bmp:
        * PICML/paradigms/icons/event.bmp:
        * PICML/paradigms/icons/eventref.bmp:
        * PICML/paradigms/icons/exception.bmp:
        * PICML/paradigms/icons/exceptionref.bmp:
        * PICML/paradigms/icons/factory.bmp:
        * PICML/paradigms/icons/fileref.bmp:
        * PICML/paradigms/icons/fixedcollection.bmp:
        * PICML/paradigms/icons/fixedpoint.bmp:
        * PICML/paradigms/icons/getexception.bmp:
        * PICML/paradigms/icons/id.bmp:
        * PICML/paradigms/icons/in.bmp:
        * PICML/paradigms/icons/ineventport.bmp:
        * PICML/paradigms/icons/inherits.bmp:
        * PICML/paradigms/icons/inout.bmp:
        * PICML/paradigms/icons/inrequestport.bmp:
        * PICML/paradigms/icons/label.bmp:
        * PICML/paradigms/icons/lookup.bmp:
        * PICML/paradigms/icons/lookupkey.bmp:
        * PICML/paradigms/icons/manages.bmp:
        * PICML/paradigms/icons/namedtyperef.bmp:
        * PICML/paradigms/icons/object.bmp:
        * PICML/paradigms/icons/objectref.bmp:
        * PICML/paradigms/icons/oneway.bmp:
        * PICML/paradigms/icons/out.bmp:
        * PICML/paradigms/icons/outeventport.bmp:
        * PICML/paradigms/icons/outrequestport.bmp:
        * PICML/paradigms/icons/package.bmp:
        * PICML/paradigms/icons/predefined.bmp:
        * PICML/paradigms/icons/prefix.bmp:
        * PICML/paradigms/icons/private.bmp:
        * PICML/paradigms/icons/readonlyattribute.bmp:
        * PICML/paradigms/icons/return.bmp:
        * PICML/paradigms/icons/setexception.bmp:
        * PICML/paradigms/icons/supports.bmp:
        * PICML/paradigms/icons/switchedaggregate.bmp:
        * PICML/paradigms/icons/twoway.bmp:
        * PICML/paradigms/icons/value.bmp:
        * PICML/paradigms/icons/variablecollection.bmp:
        * PICML/paradigms/icons/version.bmp:

          Icons for IDML and PICML.

Tue Apr 27 14:21:09 2004  Krishnakumar B  <kitty@nospam.invalid.domain>

        * PICML/README: Preliminary version of the README file.

        * PICML/paradigms/PICML.xme: First version of the PICML
          meta-model.
