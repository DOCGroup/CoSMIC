<?xml version="1.0"?>

<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:xse="http://www.codesynthesis.com/xmlns/xml-schema-extension"
            xmlns:impedance="http://www.dre.vanderbilt.edu/impedance"
            targetNamespace="http://www.dre.vanderbilt.edu/impedance">

  <xsd:complexType name="Regular">
    <!-- Note b and c are in fact (b,c)*. They deserialize fine but
         serealization groups all b together followed by all c. 
         Such XML does not validate while reading back in!  -->
      <xsd:sequence>
        <xsd:element name="a" type="xsd:string"/>
          <xsd:sequence maxOccurs="unbounded">
            <xsd:element name="b" type="xsd:int"/>
            <xsd:element name="c" type="xsd:string"/>
          </xsd:sequence>
      </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="Point" mixed="true">
    <xsd:sequence>
      <xsd:element name="x" type="xsd:integer" />
      <xsd:element name="y" type="xsd:integer" />
      <!-- Note the use of xsd::Anytype below. Default is xsd:anyType. -->
      <xsd:element name="something" minOccurs="0" />
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="MultiplePoints">
      <!-- While serializing, all points get together and all dots get
           together. Such XML can't be read back in. This appears to be
           a special case of the Regular type above. -->
    <xsd:sequence> 
      <xsd:element name="point" type="impedance:Point" 
                   maxOccurs="3" minOccurs="2"/>
      <xsd:element name="dot"   type="impedance:Point" />
      <xsd:element name="point" type="impedance:Point" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  
  <xsd:complexType name="Top">
    <xsd:sequence>
      <xsd:element name="regular" type="impedance:Regular" />
      <xsd:element name="points" type="impedance:MultiplePoints" />
      <xsd:element name="foobar">
        <xsd:complexType>
          <!-- An anonymous sequence below. Name-mangling should be used
               to derive an unique name. xsd combines the first two element
               names. The same for anonymous xsd:choice. -->
          <xsd:sequence>
            <xsd:element name="foo" type="xsd:integer"/>
            <xsd:element name="bar" type="xsd:integer"/>
            <xsd:element name="zoo" type="xsd:integer"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>


  <xsd:element name="top" type="impedance:Top" />

</xsd:schema>
