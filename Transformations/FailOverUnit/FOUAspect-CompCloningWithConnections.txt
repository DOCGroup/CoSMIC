aspect FOU()
{
  assembly_clone();
}

strategy assembly_clone()
{
  declare container, src, dest : model;
  declare f : folder;
  declare fou_list : modelList;
  
  f := rootFolder().findFolder("ComponentImplementations");
  if (f.isNull()) then
    show("Can't find folder = ComponentImplementations");
  else
    container := f.findModel("GPSImpl");
	if (container.isNull()) then
	  show("Can't find container = GPSImpl");
    else
      src := container.findModel("GPSAssembly");
      if (src.isNull()) then
        show("Can't find assembly = GPSAssembly");
      else
        dest := src.clone(container);
        dest.setName(src.name() + "_Replica");
        fou_list := dest.models("FailOverUnit");
        fou_list->ProcessFOU(dest);
        fou_list->RemoveFOU(dest);
      endif;
	endif;
  endif;
}

strategy ProcessFOU(parent_assembly : model)
{
  declare r : integer;
  declare fou : model;
  declare CQ_conn_list : objectList;

  fou := self;
  r := fou.getAttribute("Replica");

  CQ_conn_list := parent_assembly.connections("ComponentQoS")
                                 ->select (c | c.destination() == fou);
  CQ_conn_list->createReplicas(parent_assembly, r, 1);
  CQ_conn_list->ReplicateConnections(parent_assembly, CQ_conn_list, r, 1);
}

strategy ReplicateConnections(parent_assembly : model; CQ_conn_list: objectList; 
                              replica, loop : integer)
{
  declare this_connection : object;
  
  this_connection := self;
  
  CQ_conn_list->select (c | c <> this_connection)
              ->cloneInvokeConnections(parent_assembly, this_connection.source(), 
                                       replica, loop);
}

strategy cloneInvokeConnections (parent_assembly : model; comp1 : model; replica, loop : integer)
{
  declare comp2 : model;
  
  comp2 := self.source();

  // show("Finding connections from " + comp1.name() + " to " + comp2.name());
  //  show ("Size of ref = " + intToString(comp1.references("RequiredRequestPort").size()));
  
  comp1.references("RequiredRequestPort")
       ->findInvoke(parent_assembly, comp1, comp2, replica, loop);
}

strategy findInvoke(parent_assembly : model; comp1, comp2 : model; replica, loop : integer)
{
  declare recep : object;
  
  recep := self;
  
  parent_assembly.connections("invoke")
                 ->select(c | c.source() == recep)
                 ->select(c | c.destination().parent() == comp2)
                 ->cloneInvoke(parent_assembly, comp1, comp2, replica, loop);
}

strategy cloneInvoke(parent_assembly : model; comp1, comp2 : model; replica, loop : integer)
{
  declare conn, recep, facet : object;
  declare comp1_rep, comp2_rep : model;
  declare recep_rep, facet_rep : object;
  conn := self;
  
  if (loop<=replica) then
    recep := conn.source();
    facet := conn.destination();
  
    //show(comp1.name() + "_Replica" + intToString(loop));
    comp1_rep := parent_assembly.findModel(comp1.name() + "_Replica" + intToString(loop));
    comp2_rep := parent_assembly.findModel(comp2.name() + "_Replica" + intToString(loop));
    recep_rep := comp1_rep.findObject(recep.name());
    facet_rep := comp2_rep.findObject(facet.name());
  
    parent_assembly.addConnection("invoke", recep_rep, facet_rep);
    conn.cloneInvoke(parent_assembly, comp1, comp2, replica, loop+1);
  endif;
}

strategy createReplicas(parent_assembly : model; replica, loop : integer)
{
  declare connection : object;

  connection := self;

  if (loop<=replica) then
     connection.source().cloneComponent(parent_assembly, loop);
     connection.createReplicas(parent_assembly, replica, loop+1);
  endif;
}

strategy cloneComponent(parent_assembly : model; loop : integer)
{
  declare comp_src, comp_dst : model;

  comp_src := self;

  comp_dst := comp_src.clone(parent_assembly);
  comp_dst.setName(comp_src.name() + "_Replica" + intToString(loop));
  //show(comp_dst.name());
}

strategy RemoveFOU(parent_assembly : model)
{
  parent_assembly.removeModel(self);
}
